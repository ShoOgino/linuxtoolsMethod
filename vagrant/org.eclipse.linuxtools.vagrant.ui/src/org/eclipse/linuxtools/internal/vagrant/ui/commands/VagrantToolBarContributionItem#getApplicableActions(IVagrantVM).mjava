	private List<IAction> getApplicableActions(IVagrantVM vm) {
		final EnumVMStatus containerStatus = EnumVMStatus.fromStatusMessage(vm.state());
		List<IAction> list = new ArrayList<>();
		if (containerStatus == EnumVMStatus.RUNNING) {
			list.add(createAction(Messages.VagrantToolBarContributionItem_stop,
					"org.eclipse.linuxtools.vagrant.ui.commands.stopVM", //$NON-NLS-1$
					SWTImagesFactory.DESC_STOP, vm));
			list.add(createAction(Messages.VagrantToolBarContributionItem_destroy,
					"org.eclipse.linuxtools.vagrant.ui.commands.destroyVM", //$NON-NLS-1$
					SWTImagesFactory.DESC_REMOVE, vm));
			list.add(createAction(Messages.VagrantToolBarContributionItem_ssh,
					"org.eclipse.linuxtools.vagrant.ui.commands.sshVM", //$NON-NLS-1$
					SWTImagesFactory.DESC_CONSOLE, vm));
		} else {
			list.add(createAction(Messages.VagrantToolBarContributionItem_start,
					"org.eclipse.linuxtools.vagrant.ui.commands.startVM", //$NON-NLS-1$
					SWTImagesFactory.DESC_START, vm));
		}
		list.add(createAction(Messages.VagrantToolBarContributionItem_open,
				"org.eclipse.linuxtools.vagrant.ui.commands.openVFile", //$NON-NLS-1$
				SWTImagesFactory.DESC_FILE, vm));
		return list;
	}

