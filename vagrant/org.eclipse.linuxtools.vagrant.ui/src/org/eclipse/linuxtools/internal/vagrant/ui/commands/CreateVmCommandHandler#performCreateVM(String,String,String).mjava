	private void performCreateVM(String vmName, String boxName, String vmFile) {
		final Job createVMJob = new Job(DVMessages.getFormattedString(CREATE_VM_MSG)) {
			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				monitor.beginTask(DVMessages.getFormattedString(CRATE_VM_TITLE, vmName),
						IProgressMonitor.UNKNOWN);

				IVagrantConnection connection = VagrantService.getInstance();
				File vagrantDir;
				if (vmFile == null) {
					String stateLoc = Activator.getDefault().getStateLocation().toOSString();
					vagrantDir = Paths.get(stateLoc, vmName).toFile();
					vagrantDir.mkdir();
					connection.init(vagrantDir);

					Path vagrantFilePath = Paths.get(stateLoc, vmName, "Vagrantfile");
					String defaultContent;
					StringBuffer bcontent = new StringBuffer();
					try {
						defaultContent = new String(Files.readAllBytes(vagrantFilePath), StandardCharsets.UTF_8);
						for (String line : defaultContent.split("\n")) {
							if (line.contains("config.vm.box")) {
								String defLine = line.replaceAll("config.vm.box = \".*\"", "config.vm.define :" + vmName);
								String boxLine = line.replaceAll("config.vm.box = \".*\"", "config.vm.box = \"" + boxName + "\"");
								bcontent.append(defLine + '\n');
								bcontent.append(boxLine + '\n');
							} else {
								bcontent.append(line + '\n');
							}
						}

						Files.write(vagrantFilePath, bcontent.toString().getBytes(StandardCharsets.UTF_8));
					} catch (IOException e) {
					}
				} else {
					vagrantDir = Paths.get(vmFile).getParent().toFile();
				}

				IVagrantBox box = null;
				for (IVagrantBox b : connection.getBoxes()) {
					if (b.getName().equals(boxName)) {
						box = b;
						break;
					}
				}
				Process p = connection.up(vagrantDir, box != null ? box.getProvider() : null);
				String line;
				try (BufferedReader buff = new BufferedReader(
						new InputStreamReader(p.getInputStream()))) {
					while ((line = buff.readLine()) != null) {
						if (monitor.isCanceled()) {
							p.destroy();
							break;
						}
						line = line.replaceAll("(=)+>", "");
						monitor.subTask(line);
					}
				} catch (IOException e) {
				}
				connection.getVMs(true);
				return Status.OK_STATUS;
			}
		};
		createVMJob.setUser(true);
		createVMJob.schedule();
	}

