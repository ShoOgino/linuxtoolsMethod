	private static void rtCall(String[] args, File vagrantDir,
			Map<String, String> environment) {

		// org.eclipse.core.externaltools.internal.IExternalToolConstants
		final String EXTERNAL_TOOLS = "org.eclipse.ui.externaltools.ProgramLaunchConfigurationType"; //$NON-NLS-1$
		final String UI_PLUGIN_ID = "org.eclipse.ui.externaltools"; //$NON-NLS-1$
		final String ATTR_LOCATION = UI_PLUGIN_ID + ".ATTR_LOCATION"; //$NON-NLS-1$
		final String ATTR_TOOL_ARGUMENTS = UI_PLUGIN_ID + ".ATTR_TOOL_ARGUMENTS"; //$NON-NLS-1$
		final String ATTR_WORKING_DIRECTORY = UI_PLUGIN_ID + ".ATTR_WORKING_DIRECTORY"; //$NON-NLS-1$

		String arguments = Arrays.asList(args).stream().map(u -> u.toString())
				.collect(Collectors.joining(" ")); //$NON-NLS-1$
		ILaunchManager manager = DebugPlugin.getDefault().getLaunchManager();
		ILaunchConfigurationType type = manager.getLaunchConfigurationType(EXTERNAL_TOOLS);
		try {
			// TODO: worth handling 'vagrant' (not on PATH) as an alias ?
			String vagrantPath = findVagrantPath();
			ILaunchConfigurationWorkingCopy wc = type.newInstance(null, VG);
			wc.setAttribute(ATTR_LOCATION, vagrantPath);
			wc.setAttribute(ATTR_TOOL_ARGUMENTS, arguments);
			wc.setAttribute(ATTR_WORKING_DIRECTORY, vagrantDir.getAbsolutePath());
			wc.setAttribute(ILaunchManager.ATTR_ENVIRONMENT_VARIABLES,
					environment);
			wc.launch(ILaunchManager.RUN_MODE, new NullProgressMonitor());
		} catch (CoreException e1) {
			Activator.log(e1);
		}
	}

