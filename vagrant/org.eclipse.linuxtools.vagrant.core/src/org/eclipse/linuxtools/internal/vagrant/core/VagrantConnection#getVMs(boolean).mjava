	@Override
	public List<IVagrantVM> getVMs(boolean force) {
		if (force || !isVMsLoaded()) {
			String [] res = call(new String[] { "global-status" });
			List<String> vmIDs = new LinkedList<>();
			List<String> vmDirs = new LinkedList<>();
			List<IVagrantVM> containers = new LinkedList<>();
			Map<String, List<String>> sshConfig = new HashMap<>();
			for (int i = 0; i < res.length; i++) {
				String[] items = res[i].split("\\s+");
				if (items.length == 5 && i >= 2) {
					vmIDs.add(items[0]);
					vmDirs.add(items[items.length - 1]);
				}
			}
			if (!vmIDs.isEmpty()) {
				List<String> args = new LinkedList<>(Arrays.asList(new String [] { "ssh-config" }));
				args.addAll(vmIDs);
				res = call(args.toArray(new String[0]));
				for (int i = 0; i < res.length; i++) {
					String[] items = res[i].trim().split(" ");
					if (items[0].equals("HostName")) {
						List<String> tmp = new ArrayList<>();
						tmp.add(items[1]);
						sshConfig.put(vmIDs.get(i / 11), tmp);
					} else if (items[0].equals("User")
							|| items[0].equals("Port")
							|| items[0].equals("IdentityFile")) {
						sshConfig.get(vmIDs.get(i / 11)).add(items[1]);
					}
				}

				args = new LinkedList<>(Arrays.asList(new String [] {"--machine-readable", "status"}));
				args.addAll(vmIDs);
				res = call(args.toArray(new String[0]));
				String name, provider, state, state_desc;
				name = provider = state = state_desc = "";
				for (int i = 0; i < res.length; i++) {
					String[] items = res[i].split(",");
					if (items[2].equals("provider-name")) {
						name = items[1];
						provider = items[3];
					} else if (items[2].equals("state")) {
						state = items[3];
					} else if (items[2].equals("state-human-long")) {
						state_desc = items[3];
						VagrantVM vm;
						if (sshConfig.isEmpty()) {
							// VM exists but ssh is not configured
							vm = new VagrantVM(vmIDs.get((i / 5)), name,
									provider, state, state_desc, new File(vmDirs.get(i / 5)),
									null, null, 0, null);
						} else {
							vm = new VagrantVM(vmIDs.get((i / 5)), name,
									provider, state, state_desc, new File(vmDirs.get(i / 5)),
									sshConfig.get(vmIDs.get((i / 5))).get(0),
									sshConfig.get(vmIDs.get((i / 5))).get(1),
									Integer.parseInt(sshConfig.get(vmIDs.get((i / 5))).get(2)),
									sshConfig.get(vmIDs.get((i / 5))).get(3));
						}
						containers.add(vm);
					}
				}
			}
			this.containersLoaded = true;
			synchronized (containerLock) {
				this.vms = containers;
			}
			removeKeysFromInnactiveVMs();
			notifyContainerListeners(this.vms);
		}
		return this.vms;
	}

