	private VagrantVM createVagrantVM(String vmid, String vmDir) {

		Map<String, String> env = EnvironmentsManager.getSingleton()
				.getEnvironment(new File(vmDir));

		List<String> args = new LinkedList<>(
				Arrays.asList(new String[] { "ssh-config" })); //$NON-NLS-1$
		args.add(vmid);

		List<String> sshConfig = null;

		// Run and handle ssh-config for this vm
		String[] res = call(args.toArray(new String[0]), new File(vmDir), env);
		for (int i = 0; i < res.length; i++) {
			String[] items = res[i].trim().split(" "); //$NON-NLS-1$
			if (items[0].equals("HostName")) { //$NON-NLS-1$
				List<String> tmp = new ArrayList<>();
				tmp.add(items[1]);
				sshConfig = tmp;
			} else if (items[0].equals("User") || items[0].equals("Port") //$NON-NLS-1$ //$NON-NLS-2$
					|| items[0].equals("IdentityFile")) { //$NON-NLS-1$
				sshConfig.add(items[1]);
			}
		}

		// Run and handle status for this vm
		VagrantVM vm = null;
		args = new LinkedList<>(
				Arrays.asList(new String[] { "--machine-readable", "status" })); //$NON-NLS-1$ //$NON-NLS-2$
		args.add(vmid);
		res = call(args.toArray(new String[0]), new File(vmDir), env);
		String name, provider, state, state_desc;
		name = provider = state = state_desc = ""; //$NON-NLS-1$
		for (int i = 0; i < res.length; i++) {
			String[] items = res[i].split(","); //$NON-NLS-1$
			if (items[2].equals("provider-name")) { //$NON-NLS-1$
				name = items[1];
				provider = items[3];
			} else if (items[2].equals("state")) { //$NON-NLS-1$
				state = items[3];
			} else if (items[2].equals("state-human-long")) { //$NON-NLS-1$
				state_desc = items[3];
				if (sshConfig == null || sshConfig.isEmpty()) {
					// VM exists but ssh is not configured
					vm = new VagrantVM(vmid, name, provider, state, state_desc,
							new File(vmDir), null, null, 0, null);
				} else {
					vm = new VagrantVM(vmid, name, provider, state, state_desc,
							new File(vmDir), sshConfig.get(0), sshConfig.get(1),
							Integer.parseInt(sshConfig.get(2)),
							sshConfig.get(3));
				}
			}
		}
		return vm;
	}

