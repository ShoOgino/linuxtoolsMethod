	/**
	 * Find the location of 'vagrant' on the system by looking under the
	 * environment PATH.
	 *
	 * @return The location of 'vagrant' as a string if it exists under
	 * the PATH, or null if it could not be found.
	 */
	public static String findVagrantPath() {
		final String vgName = Platform.OS_WIN32.equals(Platform.getOS())
				? VG + ".exe" : VG; //$NON-NLS-1$

		String userDefinedVagrantPath = getUserDefinedVagrantPath();
		if (userDefinedVagrantPath != null) {
			Path vgPath = Paths.get(userDefinedVagrantPath, vgName);
			if (vgPath.toFile().exists()) {
				return vgPath.toString();
			}
		}

		final String envPath = System.getenv("PATH"); //$NON-NLS-1$
		if (envPath != null) {
			for (String dir : envPath.split(File.pathSeparator)) {
				// On Windows, we might get back a String with quotes so we must
				// remove them (Bug 538217)
				if ('"' == dir.charAt(0) // $NON-NLS-1$
						&& '"' == dir.charAt(dir.length() - 1)) { // $NON-NLS-1$
					dir = dir.substring(1, dir.length() - 1);
				}
				Path vgPath = Paths.get(dir, vgName);
				if (vgPath.toFile().exists()) {
					return vgPath.toString();
				}
			}
		}

		return null;
	}

