	/**
	 * Permit to provide the sort dialog dialogSettings 
	 * (used to persist the state of the sort dialog)
	 * <p>
	 * This implementation is generally like:
	 * </p><p>
	 * <code>protected IDialogSettings getDialogSettings() {<br/>
	 * return </code>PLUGINActivator<code>.getDefault().getDialogSettings();<br/>
	 * } </code>
	 * </p><p>
	 * Note that your plugin has to be an <code>AbstractUIPlugin</code>
	 * in order to provide the <code>getDialogSettings()</code> method.
	 * </p><p>
	 * If your plugin implements MANY view or viewers, this method should return a
	 * particular section of the plugin dialog setting:
	 * </p><p>
	 * <code>
	 * protected IDialogSettings getDialogSettings() <br/>
	 * IDialogSettings settings = </code>PLUGINActivator<code>.getDefault().getDialogSettings().getSection(</code>SECTION_NAME<code>); <br/>
	 *	if (settings == null) { <br/>
	 *		settings = </code>PLUGINActivator<code>.getDefault().getDialogSettings().addNewSection(</code>SECTION_NAME<code>);<br/>
	 *	}<br/>
	 *	return settings;
	 * </code>
	 * </p><p>
	 * Note that if you use multiple instantiated views (not singleton) or many 
	 * views with the same viewer, using the code above they will all have the 
	 * same dialog settings thus the last one which is closed will save the state 
	 * for all the others.<br/>
	 * If you want to avoid that you can add a view-dependent SECTION_NAME
	 * parameter to the constructor of the VIEWER in the VIEW class and then 
	 * use it in the <code>getDialogSettings()</code> method. Here is an example:
	 * </p><p>
	 * In the view class (extending <code>AbstractSTDataView</code>):
	 * </p><p>
	 * <code>
	 * private static final String SETTINGS_SECTION = </code>SECTION_NAME<code>;<br/>
	 * <br/>
	 * protected AbstractSTViewer createAbstractSTViewer(Composite parent) {<br/>
	 * return new MyViewer(parent, SETTINGS_SECTION);<br/>
	 * }
	 * </code>
	 * </p><p>
	 * In the viewer class (extending <code>AbstractST{Tree|Table}Viewer</code>):
	 * </p><p>
	 * <code>
	 * private final String settingsSection;<br/>
	 * <br/>
	 * public CallHierarchyViewer(Composite parent, String settingsSection) {<br/>
	 * super(parent);<br/>
	 * this.settingsSection = settingsSection;<br/>
	 * }<br/>
	 * <br/>
	 * protected IDialogSettings getDialogSettings() <br/>
	 * IDialogSettings settings = </code>PLUGINActivator<code>.getDefault().getDialogSettings().getSection(</code>this.settingsSection<code>); <br/>
	 * if (settings == null) { <br/>
	 * settings = </code>PLUGINActivator<code>.getDefault().getDialogSettings().addNewSection(</code>this.settingsSection<code>);<br/>
	 * }<br/>
	 * return settings;
	 * </code>
	 * </p>
	 * 
	 * @return the IDialogSettings used to store/load the dialog state
	 */
	abstract public IDialogSettings getDialogSettings();

