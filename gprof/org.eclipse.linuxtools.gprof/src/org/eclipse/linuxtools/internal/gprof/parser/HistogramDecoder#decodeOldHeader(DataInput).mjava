    /**
     * Decode the given stream
     * @param stream a DataInputStream, pointing on a histogram header in a gmon file.
     * @throws IOException if an IO error occurs
     */
    public void decodeOldHeader(DataInput stream) throws IOException {
        long lowPC = readAddress(stream);
        long highPC = readAddress(stream);
        int ncnt = stream.readInt();
        int version = stream.readInt();
        int headerSize;
        int profrate = 0;
        if (version == GmonDecoder.GMONVERSION)
        {
            profrate = stream.readInt();
            stream.skipBytes(GMON_HDRSIZE_BSD44);
            if (decoder._32_bit_platform) {
              headerSize = GMON_HDRSIZE_BSD44_32;
            } else {
              headerSize = GMON_HDRSIZE_BSD44_64;
            }
        } else {
          /* Old style BSD format.  */
            if (decoder._32_bit_platform) {
                headerSize = GMON_HDRSIZE_OLDBSD_32;
            } else {
                headerSize = GMON_HDRSIZE_OLDBSD_64;
            }
        }

        int sampBytes = ncnt - headerSize;
        int histNumBins = sampBytes / 2;

        if (!isCompatible(lowPC, highPC, profrate, histNumBins))
        {
            // TODO exception to normalize
            throw new RuntimeException(Messages.HistogramDecoder_INCOMPATIBLE_HIST_HEADER_ERROR_MSG);
        }


        this.lowpc     = lowPC;
        this.highpc    = highPC;
        this.profRate = profrate;
        hist_sample    = new int[histNumBins]; // Impl note: JVM sets all integers to 0
        dimenAbbrev   = 's';
        long temp = highpc - lowpc;
        bucketSize = Math.round(temp/(double)histNumBins);
    }

