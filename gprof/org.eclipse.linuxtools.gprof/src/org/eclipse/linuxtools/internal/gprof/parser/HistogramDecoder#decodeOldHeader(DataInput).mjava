	/**
	 * Decode the given stream
	 * @param stream a DataInputStream, pointing on a histogram header in a gmon file.
	 * @throws IOException if an IO error occurs
	 */
	public void decodeOldHeader(DataInput stream) throws IOException {
		long low_pc = readAddress(stream);
		long high_pc = readAddress(stream);
		int ncnt = stream.readInt();
		int version = stream.readInt();
		int header_size;
		int profrate = 0;
		if (version == GmonDecoder.GMONVERSION)
		{
			profrate = stream.readInt();
			stream.skipBytes(GMON_HDRSIZE_BSD44);
			if (decoder._32_bit_platform) {
		      header_size = GMON_HDRSIZE_BSD44_32;
			} else {
		      header_size = GMON_HDRSIZE_BSD44_64;
		    }
		} else {
		  /* Old style BSD format.  */
			if (decoder._32_bit_platform) {
				header_size = GMON_HDRSIZE_OLDBSD_32;
			} else {
				header_size = GMON_HDRSIZE_OLDBSD_64;
			}
		}

		int samp_bytes = ncnt - header_size;
		int hist_num_bins = samp_bytes / 2;

		if (!isCompatible(low_pc, high_pc, profrate, hist_num_bins))
		{
			// TODO exception to normalize
			throw new RuntimeException(Messages.HistogramDecoder_INCOMPATIBLE_HIST_HEADER_ERROR_MSG);
		}


		this.lowpc     = low_pc;
		this.highpc    = high_pc;
		this.profRate = profrate;
		hist_sample    = new int[hist_num_bins]; // Impl note: JVM sets all integers to 0
		dimenAbbrev   = 's';
		long temp = highpc - lowpc;
		bucketSize = Math.round(temp/(double)hist_num_bins);
	}

