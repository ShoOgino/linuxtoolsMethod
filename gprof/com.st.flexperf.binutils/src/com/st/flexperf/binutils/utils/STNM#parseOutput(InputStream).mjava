	private void parseOutput(InputStream stream) throws IOException {
		BufferedReader reader = new BufferedReader(
				new InputStreamReader(stream));
		String line;

		// See matcher.java for regular expression string data definitions.

		if (undef_pattern == null) {
			undef_pattern = Pattern.compile("^\\s+U\\s+(\\S+)"); //$NON-NLS-1$
		}

		if (normal_pattern == null) {
			normal_pattern = Pattern.compile("^(\\S+)\\s+([AaTtBbDd])\\s+(\\S+)"); //$NON-NLS-1$
		}
		while ((line = reader.readLine()) != null) {
			Matcher undef_matcher = undef_pattern.matcher(line);
			Matcher normal_matcher = normal_pattern.matcher(line);
			try {
				if (undef_matcher.matches()) {
					handler.foundUndefSymbol(undef_matcher.group(1));
				} else if (normal_matcher.matches()) {
					char type = normal_matcher.group(2).charAt(0);
					String name = normal_matcher.group(3);
					String address =normal_matcher.group(1);
					
					switch (type) {
					case 'T':
					case 't':
						handler.foundTextSymbol(name, address);
						break;
					case 'B':
					case 'b':
						handler.foundBssSymbol(name, address);
						break;
					case 'D':
					case 'd':
						handler.foundDataSymbol(name, address);
						break;
					}
				}
			} catch (NumberFormatException e) {
				// ignore.
			} catch (IndexOutOfBoundsException e) {
				// ignore
			}
		}

	}

