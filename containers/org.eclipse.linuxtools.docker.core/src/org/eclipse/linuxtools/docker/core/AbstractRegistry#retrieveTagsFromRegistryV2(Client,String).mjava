	/**
	 * Retrieves the list of tags for a given repository, assuming that the
	 * target registry is a registry v1 instance.
	 *
	 * @param client
	 *            the client to use
	 * @param repository
	 *            the repository to look-up
	 * @return the list of tags for the given repository
	 * @throws CancellationException
	 *             - if the computation was cancelled
	 * @throws ExecutionException
	 *             - if the computation threw an exception
	 * @throws InterruptedException
	 *             - if the current thread was interrupted while waiting
	 */
	private List<IRepositoryTag> retrieveTagsFromRegistryV2(final Client client,
			final String repository)
			throws InterruptedException, ExecutionException {
		final GenericType<RepositoryTagV2> REPOSITORY_TAGS_RESULT_LIST = new GenericType<RepositoryTagV2>() {
		};
		final WebTarget queryTagsResource = client
				.target(getHTTPServerAddress()).path("v2") //$NON-NLS-1$
				.path(repository).path("tags").path("list"); //$NON-NLS-1$ //$NON-NLS-2$
		final RepositoryTagV2 crts = queryTagsResource
				.request(APPLICATION_JSON_TYPE).async()
				.method(GET, REPOSITORY_TAGS_RESULT_LIST).get();
		return crts.getTags();
	}

