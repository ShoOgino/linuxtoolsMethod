	/**
	 * Constructor.
	 * 
	 * @param connection
	 *            the Docker connection
	 * @param container
	 *            the underlying {@link Container} data returned by the
	 *            {@link DockerClient}
	 */
	public DockerContainer(final IDockerConnection connection,
			final Container container) {
		this.parent = connection;
		this.id = container.id();
		this.image = container.image();
		this.command = container.command();
		this.created = container.created();
		this.status = container.status();
		this.names = new ArrayList<>();
		if (container.names() != null) {
			for (String name : container.names()) {
				if (name.startsWith("/")) {
					this.names.add(name.substring(1));
				} else {
					this.names.add(name);
				}
			}
		}
		this.sizeRw = container.sizeRw();
		this.sizeRootFs = container.sizeRootFs();
		this.ports = new ArrayList<>();
		if (container.ports() != null) {
			for (Container.PortMapping port : container.ports()) {
				final DockerPortMapping portMapping = new DockerPortMapping(this,
						port.privatePort(), port.publicPort(), port.type(),
						port.ip());
				ports.add(portMapping);
			}
		}
		// TODO: include volumes
	}

