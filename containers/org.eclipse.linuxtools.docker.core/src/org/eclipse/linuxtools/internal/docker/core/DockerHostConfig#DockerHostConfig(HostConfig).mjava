	public DockerHostConfig(final HostConfig hostConfig) {
		this.binds = hostConfig.binds();
		this.containerIDFile = hostConfig.containerIdFile();
		this.lxcConf = new ArrayList<>();
		if(hostConfig.lxcConf() != null) {
			for (LxcConfParameter lxcConfParameter : hostConfig.lxcConf()) {
				this.lxcConf.add(new DockerConfParameter(lxcConfParameter));
			}
		}
		this.privileged = hostConfig.privileged() != null
				? hostConfig.privileged() : false;
		this.readonlyRootfs = hostConfig.readonlyRootfs() != null
				? hostConfig.readonlyRootfs()
				: false;
		this.tmpfs = hostConfig.tmpfs();
		this.portBindings = new HashMap<>();
		if(hostConfig != null && hostConfig.portBindings() != null) {
			for(Entry<String, List<PortBinding>> entry : hostConfig.portBindings().entrySet()) {
				final List<IDockerPortBinding> portBindings = new ArrayList<>();
				for (PortBinding portBinding : entry.getValue()) {
					portBindings.add(new DockerPortBinding(portBinding));
				}
				this.portBindings.put(entry.getKey(), portBindings);
			}
		}
		this.links = hostConfig.links();
		this.publishAllPorts = hostConfig.publishAllPorts() != null
				? hostConfig.publishAllPorts() : false;
		this.dns = hostConfig.dns();
		this.dnsSearch = hostConfig.dnsSearch();
		this.volumesFrom = hostConfig.volumesFrom();
		this.networkMode = hostConfig.networkMode();
		this.memory = hostConfig.memory();
		this.cpuShares = hostConfig.cpuShares();
		this.securityOpt = hostConfig.securityOpt();
		this.capAdd = hostConfig.capAdd();
		this.capDrop = hostConfig.capDrop();
		this.dnsOptions = hostConfig.dnsOptions();
		this.extraHosts = hostConfig.extraHosts();
		this.devices = new ArrayList<>();
		if (hostConfig != null && hostConfig.devices() != null) {
			for (Device device : hostConfig.devices()) {
				this.devices.add(new DockerDevice(device));
			}
		}
		this.cgroupParent = hostConfig.cgroupParent();
		this.memorySwap = hostConfig.memorySwap();
		this.memorySwappiness = hostConfig.memorySwappiness();
		this.memoryReservation = hostConfig.memoryReservation();
		this.nanoCpus = hostConfig.nanoCpus();
		this.cpuPeriod = hostConfig.cpuPeriod();
		this.cpusetCpus = hostConfig.cpusetCpus();
		this.cpusetMems = hostConfig.cpusetMems();
		this.cpuQuota = hostConfig.cpuQuota();
		this.ipcMode = hostConfig.ipcMode();
		this.pidMode = hostConfig.pidMode();
		this.shmSize = hostConfig.shmSize();
		this.oomKillDisable = hostConfig.oomKillDisable() != null
				? hostConfig.oomKillDisable()
				: false;
		this.oomScoreAdj = hostConfig.oomScoreAdj();
		this.autoRemove = hostConfig.autoRemove() != null
				? hostConfig.autoRemove()
				: false;
		this.pidsLimit = hostConfig.pidsLimit();
		this.restartPolicy = hostConfig.restartPolicy() != null
				? new DockerRestartPolicy(hostConfig.restartPolicy())
				: null;
		this.ulimits = new ArrayList<>();
		if (hostConfig.ulimits() != null) {
			for (Ulimit ulimit : hostConfig.ulimits()) {
				this.ulimits.add(new DockerUlimit(ulimit));
			}
		}
		this.logConfig = hostConfig.logConfig() != null
				? new DockerLogConfig(hostConfig.logConfig())
				: null;
		this.storageOpt = hostConfig.storageOpt();
		this.blkioWeight = hostConfig.blkioWeight();
		this.blkioWeightDevice = new ArrayList<>();
		if (hostConfig.blkioWeightDevice() != null) {
			for (BlkioWeightDevice device : hostConfig.blkioWeightDevice()) {
				blkioWeightDevice.add(new DockerBlkioWeightDevice(device));
			}
		}
		this.blkioDeviceReadBps = new ArrayList<>();
		if (hostConfig.blkioDeviceReadBps() != null) {
			for (BlkioDeviceRate rate : hostConfig.blkioDeviceReadBps()) {
				blkioDeviceReadBps.add(new DockerBlkioDeviceRate(rate));
			}
		}
		this.blkioDeviceWriteBps = new ArrayList<>();
		if (hostConfig.blkioDeviceReadBps() != null) {
			for (BlkioDeviceRate rate : hostConfig.blkioDeviceWriteBps()) {
				blkioDeviceWriteBps.add(new DockerBlkioDeviceRate(rate));
			}
		}
		this.blkioDeviceReadIOps = new ArrayList<>();
		if (hostConfig.blkioDeviceReadBps() != null) {
			for (BlkioDeviceRate rate : hostConfig.blkioDeviceReadIOps()) {
				blkioDeviceReadIOps.add(new DockerBlkioDeviceRate(rate));
			}
		}
		this.blkioDeviceWriteIOps = new ArrayList<>();
		if (hostConfig.blkioDeviceReadBps() != null) {
			for (BlkioDeviceRate rate : hostConfig.blkioDeviceWriteIOps()) {
				blkioDeviceWriteIOps.add(new DockerBlkioDeviceRate(rate));
			}
		}
	}

