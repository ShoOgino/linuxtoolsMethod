	public DockerContainerConfig(final ContainerConfig containerConfig) {
		this.hostname = containerConfig != null ? containerConfig.hostname()
				: null;
		this.domainname = containerConfig != null ? containerConfig.domainname()
				: null;
		this.user = containerConfig != null ? containerConfig.user() : null;
		final HostConfig hc = containerConfig != null
				? containerConfig.hostConfig() : null;
		this.memory = hc != null ? hc.memory() : null;
		this.memorySwap = hc != null ? hc.memorySwap() : null;
		this.cpuShares = hc != null ? hc.cpuShares() : null;
		this.cpuset = hc != null ? hc.cpusetCpus() : null;
		this.attachStdin = containerConfig != null
				&& containerConfig.attachStdin() != null
				? containerConfig.attachStdin() : false;
		this.attachStdout = containerConfig != null
				&& containerConfig.attachStdout() != null
				? containerConfig.attachStdout() : false;
		this.attachStderr = containerConfig != null
				&& containerConfig.attachStderr() != null
				? containerConfig.attachStderr() : false;
		this.portSpecs = containerConfig != null ? containerConfig.portSpecs()
				: null;
		this.exposedPorts = containerConfig != null
				? containerConfig.exposedPorts() : null;
		this.tty = containerConfig != null && containerConfig.tty() != null
				? containerConfig.tty()
				: false;
		this.openStdin = containerConfig != null
				&& containerConfig.openStdin() != null
				? containerConfig.openStdin() : false;
		this.stdinOnce = containerConfig != null
				&& containerConfig.stdinOnce() != null
				? containerConfig.stdinOnce() : false;
		this.env = containerConfig != null ? containerConfig.env() : null;
		this.cmd = containerConfig != null ? containerConfig.cmd() : null;
		this.image = containerConfig != null ? containerConfig.image() : null;

		@SuppressWarnings("rawtypes")
		Map<String, Map> res = new HashMap<>();
		try {
			if (containerConfig != null && containerConfig.volumes() != null) {
				containerConfig.volumes().forEach(v -> res.put(v, Collections.emptyMap()));
			}
		} catch (NullPointerException e) {
		}
		this.volumes = res;
		this.workingDir = containerConfig != null ? containerConfig.workingDir()
				: null;
		this.entrypoint = containerConfig != null ? containerConfig.entrypoint()
				: null;
		this.networkDisabled = containerConfig != null
				&& containerConfig.networkDisabled() != null
				? containerConfig.networkDisabled() : false;
		this.onBuild = containerConfig != null ? containerConfig.onBuild()
				: null;
		this.labels = containerConfig != null ? containerConfig.labels() : null;
	}

