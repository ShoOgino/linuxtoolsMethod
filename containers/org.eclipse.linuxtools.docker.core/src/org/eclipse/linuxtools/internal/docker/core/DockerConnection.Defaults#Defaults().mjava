		public Defaults() throws DockerException {
			File scriptFile = Activator.getDefault().getBundle()
					.getDataFile("script.sh"); //$NON-NLS-1$
			if (!scriptFile.exists()) {
				InputStream is = DockerConnection.class
						.getResourceAsStream("/resources/script.sh"); //$NON-NLS-1$
				FileOutputStream fo;
				try {
					byte[] buff = new byte[1024];
					fo = new FileOutputStream(scriptFile);
					int n;
					while ((n = is.read(buff)) > 0) {
						fo.write(buff, 0, n);
					}
					fo.close();
					is.close();
					scriptFile.setExecutable(true);
				} catch (IOException e) {
					Activator.logErrorMessage(e.getMessage());
				}
			}
			// first, looking for a Unix socket at /var/run/docker.sock
			if (defaultsWithUnixSocket() || defaultsWithSystemEnv()
					|| defaultWithShellEnv()) {
				// attempt to connect and retrieve the 'name' from the system
				// info
				final DockerConnection connection = new Builder()
						.unixSocket(getUnixSocketPath()).tcpHost(getTcpHost())
						.tcpCertPath(getTcpCertPath()).build();
				connection.open(false);
				final IDockerConnectionInfo info = connection.getInfo();
				if (info != null) {
					this.name = info.getName();
				}
				return;
			}
			Activator.log(new Status(IStatus.WARNING, Activator.PLUGIN_ID,
					Messages.Missing_Default_Settings));
		}

