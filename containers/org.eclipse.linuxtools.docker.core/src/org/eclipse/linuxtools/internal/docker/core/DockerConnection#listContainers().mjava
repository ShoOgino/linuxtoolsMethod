	private List<IDockerContainer> listContainers() throws DockerException {
		final List<IDockerContainer> dclist = new ArrayList<IDockerContainer>();
		synchronized (containerLock) {
			List<Container> list = null;
			try {
				list = client.listContainers(DockerClient.ListContainersParam
						.allContainers());
			} catch (com.spotify.docker.client.DockerException
					| InterruptedException e) {
				throw new DockerException(Messages.bind(
						Messages.List_Docker_Containers_Failure,
						this.getName()), e);
			}

			// We have a list of containers. Now, we translate them to our own
			// core format in case we decide to change the underlying engine
			// in the future.
			for (Container c : list) {
				final List<Container.PortMapping> ports = c.ports();
				final List<IDockerPortMapping> portMappings = new ArrayList<>();
				for (Container.PortMapping port : ports) {
					final DockerPortMapping portMapping = new DockerPortMapping(port.getPrivatePort(), port.getPublicPort(), port.getType(), port.getIp());
					portMappings.add(portMapping);
				}
				// For containers that have exited, make sure we aren't tracking
				// them with a logging thread.
				if (c.status().startsWith(Messages.Exited_specifier)) {
					if (loggingThreads.containsKey(c.id())) {
						loggingThreads.get(c.id()).requestStop();
						loggingThreads.remove(c.id());
					}
				}
				dclist.add(new DockerContainer(this, c.id(), c.image(), c
						.command(), c.created(), c.status(), c.sizeRw(), c
						.sizeRootFs(), portMappings, c.names()));
			}
			containers = dclist;
		}
		// perform notification outside of containerLock so we don't have a View
		// causing a deadlock
		notifyContainerListeners(this, dclist);
		return dclist;
	}

