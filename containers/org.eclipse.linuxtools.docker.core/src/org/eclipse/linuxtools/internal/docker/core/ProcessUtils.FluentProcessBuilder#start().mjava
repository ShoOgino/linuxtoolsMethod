		public String[] start() {
			try {
				final Process p = processBuilder.start();
				p.waitFor();
				if (p.exitValue() == 0) {
					final List<String> result = new ArrayList<>();
					try (final InputStream inputStream = p.getInputStream();
							final BufferedReader buff = new BufferedReader(
									new InputStreamReader(inputStream))) {
						String line;
						while ((line = buff.readLine()) != null) {
							result.add(line);
						}
					}
					return result.toArray(new String[0]);
				} else {
					final StringBuffer errorMessage = new StringBuffer();
					try (final InputStream errorStream = p.getErrorStream();
							final BufferedReader buff = new BufferedReader(
									new InputStreamReader(errorStream))) {
						String line;
						while ((line = buff.readLine()) != null) {
							errorMessage.append(line).append('\n'); // $NON-NLS-1$
						}
					}
					Activator.log(new Status(IStatus.WARNING,
							Activator.PLUGIN_ID,
							ProcessMessages.getFormattedString("Process_Error", //$NON-NLS-1$
									this.processBuilder.command().stream()
											.collect(Collectors.joining(" ")),
									p.exitValue(), errorMessage.toString())));
				}
			} catch (IOException | InterruptedException e) {
				Activator.log(new Status(IStatus.ERROR, Activator.PLUGIN_ID,
						ProcessMessages.getFormattedString("Process_Exception", //$NON-NLS-1$
								this.processBuilder.command().stream()
										.collect(Collectors.joining(" ")),
								e.getMessage()),
						e));
			}
			return new String[0];
		}

