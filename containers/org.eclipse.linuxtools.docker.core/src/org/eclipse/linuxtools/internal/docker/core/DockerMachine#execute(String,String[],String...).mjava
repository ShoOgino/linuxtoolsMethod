	/**
	 * Executes the command given in parameter
	 * 
	 * @param args
	 *            command arguments
	 * @return the lines read in the {@link Process}' {@link InputStream} or an
	 *         empty array if the {@code docker-machine} command could not be
	 *         found in the {@code PATH}.
	 */
	private static String[] execute(final String dockerMachineInstallDir,
			final String[] args, final String... extraPaths) {
		try {
			// check that the 'docker-machine' can be found in the given
			// 'dockerMachineInstallDir'
			final boolean dockerMachineCommandExists = checkPathToDockerMachine(
					dockerMachineInstallDir);
			if (!dockerMachineCommandExists) {
				// log a warning and exit
				Activator
						.log(new Status(IStatus.WARNING, Activator.PLUGIN_ID,
								NLS.bind(
										Messages.Docker_Machine_Command_Not_Found,
										dockerMachineInstallDir)));
				return new String[0];
			}
			final String[] command = new String[args.length + 1];
			command[0] = Paths.get(dockerMachineInstallDir,
					getDockerMachineExecutableName()).toString();
			System.arraycopy(args, 0, command, 1, args.length);
			final ProcessBuilder processBuilder = new ProcessBuilder(command);
			final Map<String, String> environment = processBuilder
					.environment();
			final StringBuilder path = new StringBuilder();
			for (String extraPath : extraPaths) {
				path.append(File.pathSeparator).append(extraPath);
			}
			String newEnvPath = environment.get("PATH") + path.toString(); //$NON-NLS-1$
			environment.put("PATH", newEnvPath); //$NON-NLS-1$

			final Process p = processBuilder.start();
			p.waitFor();
			if (p.exitValue() == 0) {
				final List<String> result = new ArrayList<>();
				try (BufferedReader buff = new BufferedReader(
						new InputStreamReader(p.getInputStream()))) {
					String line;
					while ((line = buff.readLine()) != null) {
						result.add(line);
					}
				}
				return result.toArray(new String[0]);
			} else {
				final StringBuffer errorMessage = new StringBuffer();
				try (BufferedReader buff = new BufferedReader(
						new InputStreamReader(p.getErrorStream()))) {
					String line;
					while ((line = buff.readLine()) != null) {
						errorMessage.append(line).append('\n'); // $NON-NLS-1$
					}
				}
				Activator.log(new Status(IStatus.ERROR, Activator.PLUGIN_ID,
						errorMessage.toString()));
			}
		} catch (IOException | InterruptedException e) {
			Activator.log(e);
		}
		return new String[0];
	}

