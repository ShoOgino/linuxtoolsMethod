	/**
	 * Builds an {@link IDockerImage}
	 * 
	 * @param path
	 *            path to the build context
	 * @param name
	 *            optional name and tag of the image to build
	 * @param handler
	 *            progress handler
	 * @param buildOptions
	 *            build options
	 * @return the id of the {@link IDockerImage} that was build
	 * @throws DockerException
	 *             if building image failed
	 * @throws InterruptedException
	 *             if the thread was interrupted
	 */
	// TODO: add this method in the public interface
	public String buildImage(final IPath path, final String name,
			final IDockerProgressHandler handler,
			final Map<String, Object> buildOptions)
					throws DockerException, InterruptedException {
		try {
			final DockerProgressHandler d = new DockerProgressHandler(handler);
			final java.nio.file.Path p = FileSystems.getDefault()
					.getPath(path.makeAbsolute().toOSString());
			String res = getClientCopy().build(p, name, d,
					getBuildParameters(buildOptions));
			return res;
		} catch (com.spotify.docker.client.exceptions.DockerRequestException e) {
			throw new DockerException(e.getResponseBody());
		} catch (com.spotify.docker.client.exceptions.DockerException
				| IOException e) {
			DockerException f = new DockerException(e);
			throw f;
		}
	}

