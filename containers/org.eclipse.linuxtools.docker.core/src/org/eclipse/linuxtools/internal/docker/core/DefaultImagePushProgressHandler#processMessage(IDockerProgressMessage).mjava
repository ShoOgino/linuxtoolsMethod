	@Override
	public void processMessage(IDockerProgressMessage message)
			throws DockerException {
		if (message.error() != null) {
			stopAllJobs();
			throw new DockerImagePushFailedException(image, message.error());
		}
		String id = message.id();
		if (id != null) {
			ProgressJob p = progressJobs.get(id);
			if (p == null) {
				String status = message.status();
				if (status.equals(DockerMessages.getString(IMAGE_UPLOAD_COMPLETE))
						|| status.contains(DockerMessages.getString(IMAGE_UPLOAD_ALREADY_COMPLETE))) {
					connection.getImages(true);
				} else {
					ProgressJob newJob = new ProgressJob(
							DockerMessages.getFormattedString(
									IMAGE_UPLOADING_JOBNAME, image),
							DockerMessages.getFormattedString(
									IMAGE_UPLOADING_IMAGE, id));
					newJob.setUser(true);
					newJob.setPriority(Job.LONG);
					newJob.schedule();
					progressJobs.put(id, newJob);
				}

			} else {
				String status = message.status();
				if (status.equals(DockerMessages.getString(IMAGE_UPLOAD_COMPLETE))
						|| status.contains(DockerMessages.getString(IMAGE_UPLOAD_ALREADY_COMPLETE))) {
					p.setPercentageDone(100);
					connection.getImages(true);
				} else if (status.startsWith(DockerMessages
						.getString(IMAGE_UPLOADING))) {
					IDockerProgressDetail detail = message.progressDetail();
					if (detail != null) {
						if (detail.current() > 0 && detail.total() > 0) {
							long percentage = (detail.current() * 100)
									/ detail.total();
							p.setPercentageDone((int) percentage);
						}
					}
				}
			}
		}
	}

