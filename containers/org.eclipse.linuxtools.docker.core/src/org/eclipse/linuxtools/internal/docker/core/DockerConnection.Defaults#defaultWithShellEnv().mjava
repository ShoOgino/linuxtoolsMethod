		/**
		 * Checks if there are DOCKER_xxx environment variables when running a
		 * script in a shell. The expected varibles are written in a file that
		 * can be read later.
		 * 
		 * @return {@code true} if the env variables exist and is readable,
		 *         {@code false} otherwise.
		 * @throws DockerException
		 */
		private boolean defaultWithShellEnv() throws DockerException {
			try {
				final String connectionSettingsDetectionScriptName = getConnectionSettingsDetectionScriptName();
				if (connectionSettingsDetectionScriptName == null) {
					Activator.log(new Status(IStatus.WARNING,
							Activator.PLUGIN_ID,
							Messages.Docker_No_Settings_Description_Script));
					return false;
				}
				final File connectionSettingsDetectionScript = getConnectionSettingsDetectionScript(
						connectionSettingsDetectionScriptName);
				final String[] cmdArray = getConnectionSettingsDetectionCommandArray(
						connectionSettingsDetectionScript);
				final Process process = Runtime.getRuntime().exec(cmdArray);
				process.waitFor();
				final int exitValue = process.exitValue();
				if (exitValue == 0) {
					final InputStream processInputStream = process
							.getInputStream();
					// read content from temp file
					Properties dockerSettings = new Properties();
					dockerSettings.load(processInputStream);
					settings.put(BINDING_MODE, TCP_CONNECTION);
					if (dockerSettings.containsKey("DOCKER_HOST")) { //$NON-NLS-1$
						settings.put(TCP_HOST,
								dockerSettings.get("DOCKER_HOST").toString()); //$NON-NLS-1$
					}
					if (dockerSettings.containsKey("DOCKER_CERT_PATH")) { //$NON-NLS-1$
						settings.put(TCP_CERT_PATH,
								dockerSettings.get("DOCKER_CERT_PATH") //$NON-NLS-1$
										.toString());
					}
					if (dockerSettings.containsKey("DOCKER_TLS_VERIFY")) { //$NON-NLS-1$
						settings.put(TCP_TLS_VERIFY,
								Boolean.valueOf(
										dockerSettings.get("DOCKER_TLS_VERIFY") //$NON-NLS-1$
												.toString()
										.equals("1")));
					}
					return true;
				} else {
					// log what happened if the process did not end as expected
					// an exit value of 1 should indicate no connection found
					if (exitValue != 1) {
						final InputStream processErrorStream = process
								.getErrorStream();
						final String errorMessage = streamToString(
								processErrorStream);
						Activator.log(new Status(IStatus.ERROR,
								Activator.PLUGIN_ID, errorMessage));
					}
				}
			} catch (IOException | IllegalArgumentException
					| InterruptedException e) {
				throw new DockerException(Messages.Retrieve_Default_Settings_Failure, e);
			}
			return false;
		}

