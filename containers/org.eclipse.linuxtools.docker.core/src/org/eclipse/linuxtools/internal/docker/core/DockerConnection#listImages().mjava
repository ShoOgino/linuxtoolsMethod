	// TODO: remove this method from the API
	@Override
	public List<IDockerImage> listImages() throws DockerException {
		final List<IDockerImage> tempImages = new CopyOnWriteArrayList<>();
		synchronized (imageLock) {
			try {
				final List<Image> nativeImages = new ArrayList<>();
				synchronized (clientLock) {
					// Check that client is not null as this connection may have
					// been closed but there is an async request to update the
					// containers list left in the queue
					if (client == null) {
						// in that case the list becomes empty, which is fine is
						// there's no client.
						return Collections.emptyList();
					}
					nativeImages.addAll(client.listImages(
							DockerClient.ListImagesParam.allImages()));
				}
				// We have a list of images. Now, we translate them to our own
				// core format in case we decide to change the underlying engine
				// in the future. We also look for intermediate and dangling
				// images.
				for (Image nativeImage : nativeImages) {
					final DockerImageQualifier imageQualifier = resolveQualifier(
							nativeImage, nativeImages);
					// return one IDockerImage per raw image
					final List<String> repoTags = (nativeImage
							.repoTags() != null)
									? new ArrayList<>(nativeImage.repoTags())
									: new ArrayList<>();
					Collections.sort(repoTags);
					if (repoTags.isEmpty()) {
						repoTags.add("<none>:<none>"); //$NON-NLS-1$
					}
					final String repo = DockerImage
							.extractRepo(repoTags.get(0));
					final List<String> tags = Arrays
							.asList(DockerImage.extractTag(repoTags.get(0)));
					tempImages.add(new DockerImage(this, repoTags, repo, tags,
							nativeImage.id(), nativeImage.parentId(),
							nativeImage.created(), nativeImage.size(),
							nativeImage.virtualSize(), imageQualifier));
				}
			} catch (com.spotify.docker.client.exceptions.DockerTimeoutException e) {
				if (isOpen()) {
					Activator.log(
							new Status(IStatus.WARNING, Activator.PLUGIN_ID,
									Messages.Docker_Connection_Timeout, e));
					close();
				}
			} catch (com.spotify.docker.client.exceptions.DockerRequestException e) {
				throw new DockerException(e.getResponseBody());
			} catch (com.spotify.docker.client.exceptions.DockerException
					| InterruptedException e) {
				if (isOpen() && e.getCause() != null
						&& e.getCause().getCause() != null && e.getCause()
								.getCause() instanceof ProcessingException) {
					close();
				} else {
					throw new DockerException(
							NLS.bind(Messages.List_Docker_Images_Failure,
									this.getName()),
							e);
				}
			} finally {
				this.images = tempImages;
			}
		}
		// Perform notification outside of lock so that listener doesn't cause a
		// deadlock to occur
		notifyImageListeners(tempImages);
		return tempImages;
	}

