	@Test
	public void shouldShowContainerVolumes() throws InterruptedException {
		// given
		final DockerClient client = MockDockerClientFactory
				.container(MockDockerContainerFactory.name("foo_bar").build(),
						MockDockerContainerInfoFactory.volume("/path/to/container")
								.volume("/path/to/host:/path/to/container")
								.volume("/path/to/host:/path/to/container:Z,ro").build())
				.build();
		final DockerConnection dockerConnection = MockDockerConnectionFactory.from("Test", client).get();
		DockerConnectionManagerUtils.configureConnectionManager(dockerExplorerView, dockerConnection);
		SWTUtils.asyncExec(() -> dockerExplorerView.getCommonViewer().expandAll());
		// when a second call to expand the container is done (because the first
		// expandAll stopped with a "Loading..." job that retrieved the
		// containers)
		final SWTBotTreeItem containerTreeItem = SWTUtils.getTreeItem(dockerExplorerViewBot, "Test (null)",
				"Containers", "foo_bar (null)");
		SWTUtils.asyncExec(() -> containerTreeItem.expand());
		final SWTBotTreeItem containerVolumesItem = SWTUtils.getTreeItem(containerTreeItem, "Volumes");
		SWTUtils.asyncExec(() -> containerVolumesItem.expand());
		// then
		SWTUtils.syncAssert(() -> {
			SWTBotTreeItemAssertions.assertThat(containerVolumesItem).isExpanded().hasChildItems(3);
			SWTBotTreeItemAssertions.assertThat(containerVolumesItem.getNode(0)).hasText("/path/to/container");
			SWTBotTreeItemAssertions.assertThat(containerVolumesItem.getNode(1))
					.hasText("/path/to/host -> /path/to/container");
			SWTBotTreeItemAssertions.assertThat(containerVolumesItem.getNode(2))
					.hasText("/path/to/host -> /path/to/container (Z,ro)");
		});
	}

