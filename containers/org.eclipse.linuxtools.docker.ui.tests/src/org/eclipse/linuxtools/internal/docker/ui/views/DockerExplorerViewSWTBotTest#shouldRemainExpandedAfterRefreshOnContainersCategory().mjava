	@Test
	public void shouldRemainExpandedAfterRefreshOnContainersCategory() {
		// given
		final DockerClient client = MockDockerClientFactory.container(MockContainerFactory.name("foo_bar").build(),
				MockContainerInfoFactory.volume("/path/to/container").port("8080/tcp", "0.0.0.0", "8080")
						.link("/foo:/bar/foo").volume("/path/to/host:/path/to/container:Z,ro").build())
				.build();
		final DockerConnection dockerConnection = MockDockerConnectionFactory.from("Test", client)
				.withDefaultTCPConnectionSettings();
		DockerConnectionManagerUtils.configureConnectionManager(dockerConnection);
		final SWTBotTreeItem containers = SWTUtils.expand(dockerExplorerViewBot.bot().tree(), "Test", "Containers");
		final SWTBotTreeItem containerLinks = SWTUtils.expand(containers, "foo_bar", "Links");
		final SWTBotTreeItem containerPorts = SWTUtils.expand(containers, "foo_bar", "Ports");
		final SWTBotTreeItem containerVolumes = SWTUtils.expand(containers, "foo_bar", "Volumes");
		// ensure items are actually expanded before calling the 'refresh'
		// command
		SWTBotTreeItemAssertions.assertThat(containerLinks).isExpanded();
		SWTBotTreeItemAssertions.assertThat(containerPorts).isExpanded();
		SWTBotTreeItemAssertions.assertThat(containerVolumes).isExpanded();
		// when refreshing the container
		dockerExplorerViewBot.bot().tree().select(containers);
		dockerExplorerViewBot.bot().tree().contextMenu("Refresh").click();
		SWTUtils.asyncExec(() -> containers.expand());
		// then all items should remain expanded (after they were reloaded)
		SWTBotTreeItemAssertions.assertThat(SWTUtils.select(containers, "foo_bar", "Links")).isExpanded();
		SWTBotTreeItemAssertions.assertThat(SWTUtils.select(containers, "foo_bar", "Ports")).isExpanded();
		SWTBotTreeItemAssertions.assertThat(SWTUtils.select(containers, "foo_bar", "Volumes")).isExpanded();
	}

