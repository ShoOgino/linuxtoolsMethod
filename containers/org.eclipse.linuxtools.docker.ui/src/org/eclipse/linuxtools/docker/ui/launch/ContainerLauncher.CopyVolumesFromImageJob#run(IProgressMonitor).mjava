		@Override
		protected IStatus run(final IProgressMonitor monitor) {
			monitor.beginTask(
					Messages.getFormattedString(COPY_VOLUMES_FROM_DESC, image),
					volumes.size());
			String containerId = null;
			String currentVolume = null;
			
			// keep a list of already copied/being copied volumes so we can skip them and wait at the end to
			// make sure if another job was copying them, it has finished
			List<String> alreadyCopiedList = new ArrayList<>();
			
			try {
				IDockerImage dockerImage = ((DockerConnection) connection)
						.getImageByTag(image);
				// if there is a .image_id file, check the image id to ensure
				// the user hasn't loaded a new version which may have
				// different header files installed.
				IPath imageFilePath = target.append(".image_id"); //$NON-NLS-1$
				File imageFile = imageFilePath.toFile();
				boolean needImageIdFile = !imageFile.exists();
				if (!needImageIdFile) {
					try (FileReader reader = new FileReader(imageFile);
							BufferedReader bufferReader = new BufferedReader(
									reader);) {
						String imageId = bufferReader.readLine();
						if (!dockerImage.id().equals(imageId)) {
							// if image id has changed...all bets are off
							// and we must reload all directories
							synchronized (lockObject) {
								dirList.clear();
								copyingList.clear();
							}
							needImageIdFile = true;
						}
					} catch (IOException e) {
						// ignore
					}
				}
				if (needImageIdFile) {
					try (FileWriter writer = new FileWriter(imageFile);
							BufferedWriter bufferedWriter = new BufferedWriter(
									writer);) {
						bufferedWriter.write(dockerImage.id());
						bufferedWriter.newLine();
						synchronized (lockObject) {
							dirList.clear();
							copyingList.clear();
						}
					} catch (IOException e) {
						// ignore
					}
				}

				// check if we have anything to copy
				boolean somethingToCopy = false;
				synchronized (lockObject) {
					for (String volume : volumes) {
						boolean excluded = false;
						for (String dir : excludedDirs) {
							if (volume.startsWith(dir) && volume.charAt(
									dir.length()) == File.separatorChar) {
								excluded = true;
								break;
							}
						}
						if (excluded) {
							continue;
						}
						boolean alreadyCopied = false;
						for (String path : dirList) {
							if (volume.equals(path) || (volume.startsWith(path)
									&& volume.charAt(path
											.length()) == File.separatorChar)) {
								if (!copyingList.contains(path)) {
									alreadyCopied = true;
									break;
								}
							}
						}
						if (!alreadyCopied) {
							somethingToCopy = true;
							break;
						}
					}
				}

				// if nothing to copy, don't waste time creating a Container
				if (!somethingToCopy) {
					monitor.done();
					return Status.OK_STATUS;
				}

				// create base container to use for copying
				DockerContainerConfig.Builder builder = new DockerContainerConfig.Builder()
						.cmd("/bin/sh").image(image); //$NON-NLS-1$
				IDockerContainerConfig config = builder.build();
				DockerHostConfig.Builder hostBuilder = new DockerHostConfig.Builder();
				IDockerHostConfig hostConfig = hostBuilder.build();
				containerId = ((DockerConnection) connection)
						.createContainer(config, hostConfig, null);
				
				// copy each volume if it exists and is not copied over yet
				for (String volume : volumes) {
					currentVolume = volume;
					if (monitor.isCanceled()) {
						monitor.done();
						return Status.CANCEL_STATUS;
					}
					// don't bother copying files from project
					if (volume.contains("${ProjName}")) { //$NON-NLS-1$
						monitor.worked(1);
						continue;
					}
					// don't copy directories that are excluded
					for (String dir : excludedDirs) {
						if (volume.equals(dir)
								|| (volume.startsWith(dir) && volume.charAt(
										dir.length()) == File.separatorChar)) {
							monitor.worked(1);
							continue;
						}

					}
					// if we have already copied the directory either directly
					// or as part of a parent directory copy, then skip to next
					// volume.
					String alreadyCopied = null;
					synchronized (lockObject) {
						for (String path : dirList) {
							if (volume.equals(path) || (volume.startsWith(path)
									&& volume.charAt(path
											.length()) == File.separatorChar)) {
								alreadyCopied = path;
								if (!dirList.contains(volume)) {
									dirList.add(volume);
								}
								break;
							}
						}
					}

					// if we found a match, make sure it is finished copying
					// before continuing
					if (alreadyCopied != null) {
						alreadyCopiedList.add(alreadyCopied);
						monitor.worked(1);
						continue;
					}

					// synchronize on the volume so others can wait until copy
					// is completed
					// instead of returning too fast and the headers won't be
					// there
					synchronized (volume) {
						try (Closeable token = ((DockerConnection) connection)
								.getOperationToken()) {
							monitor.setTaskName(Messages.getFormattedString(
									COPY_VOLUMES_FROM_TASK, volume));
							monitor.worked(1);


							InputStream in = ((DockerConnection) connection)
									.copyContainer(token, containerId, volume);

							synchronized (lockObject) {
								if (!dirList.contains(volume)) {
									dirList.add(volume);
									copyingList.add(volume);
								} else {
									continue;
								}
							}

							/*
							 * The input stream from copyContainer might be
							 * incomplete or non-blocking so we should wrap it
							 * in a stream that is guaranteed to block until
							 * data is available.
							 */
							TarArchiveInputStream k = new TarArchiveInputStream(
									new BlockingInputStream(in));
							TarArchiveEntry te = null;
							target.toFile().mkdirs();
							IPath currDir = target.append(volume)
									.removeLastSegments(1);
							currDir.toFile().mkdirs();
							while ((te = k.getNextTarEntry()) != null) {
								long size = te.getSize();
								IPath path = currDir;
								path = path.append(te.getName());
								File f = new File(path.toOSString());
								if (te.isDirectory()) {
									f.mkdir();
									continue;
								} else {
									f.createNewFile();
								}
								FileOutputStream os = new FileOutputStream(f);
								int bufferSize = ((int) size > 4096 ? 4096
										: (int) size);
								byte[] barray = new byte[bufferSize];
								int result = -1;
								while ((result = k.read(barray, 0,
										bufferSize)) > -1) {
									if (monitor.isCanceled()) {
										monitor.done();
										k.close();
										os.close();
										return Status.CANCEL_STATUS;
									}
									os.write(barray, 0, result);
								}
								os.close();
							}
							k.close();
							// remove from copying list so subsequent jobs might
							// know that the volume
							// is fully copied
							synchronized (lockObject) {
								copyingList.remove(currentVolume);
							}
						} catch (final DockerException e) {
							// ignore
							synchronized (lockObject) {
								copyingList.remove(currentVolume);
								dirList.remove(currentVolume);
							}
						}
					}
				}
			} catch (InterruptedException e) {
				// do nothing
			} catch (IOException | DockerException e) {
				if (currentVolume != null) {
					synchronized (lockObject) {
						if (copyingList != null) {
							copyingList.remove(currentVolume);
						}
						if (dirList != null) {
							dirList.remove(currentVolume);
						}
					}
				}
				Activator.log(e);
			} finally {
				// remove the container used for copying
				if (containerId != null) {
					try {
						((DockerConnection) connection)
								.removeContainer(containerId);
					} catch (DockerException | InterruptedException e) {
						// ignore
					}
				}
				for (String copiedVolume : alreadyCopiedList) {
					synchronized (copiedVolume) {
						// do something so synchronization will occur
						synchronized (lockObject) {
							if (!dirList.contains(copiedVolume)) {
								dirList.add(copiedVolume);
							}
						}
					}
				}
				monitor.done();
			}
			return Status.OK_STATUS;
		}

