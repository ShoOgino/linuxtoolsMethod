	/**
	 * Perform a launch of a command in a container.
	 * 
	 * @param id
	 *            - id of caller to use to distinguish console owner
	 * @param listener
	 *            - optional listener of the run console
	 * @param connectionUri
	 *            - the specified connection to use
	 * @param image
	 *            - the image to use
	 * @param command
	 *            - command to run
	 * @param commandDir
	 *            - directory command requires or null
	 * @param workingDir
	 *            - working directory or null
	 * @param additionalDirs
	 *            - additional directories to mount or null
	 * @param origEnv
	 *            - original environment if we are appending to our existing
	 *            environment
	 * @param envMap
	 *            - map of environment variable settings
	 * @param ports
	 *            - ports to expose
	 * @param keep
	 *            - keep container after running
	 * @param stdinSupport
	 *            - true if stdin support is required, false otherwise
	 */
	public void launch(String id, IContainerLaunchListener listener,
			final String connectionUri,
			String image, String command, String commandDir, String workingDir,
			List<String> additionalDirs, Map<String, String> origEnv,
			Map<String, String> envMap, List<String> ports, boolean keep,
			boolean stdinSupport) {

		final String LAUNCH_TITLE = "ContainerLaunch.title"; //$NON-NLS-1$
		final String LAUNCH_EXITED_TITLE = "ContainerLaunchExited.title"; //$NON-NLS-1$

		final List<String> env = new ArrayList<String>();
		env.addAll(toList(origEnv));
		env.addAll(toList(envMap));

		// Add mounts for any directories we need to run the executable.
		// When we add mount points, we need entries of the form:
		// hostname:mountname.
		// In our case, we want all directories mounted as-is so the executable
		// will
		// run as the user expects.
		final List<String> volumes = new ArrayList<String>();
		if (additionalDirs != null) {
			for (String dir : additionalDirs) {
				volumes.add(dir + ":" + dir); //$NON-NLS-1$
			}
		}
		if (workingDir != null)
			volumes.add(workingDir + ":" + workingDir); //$NON-NLS-1$
		if (commandDir != null)
			volumes.add(commandDir + ":" + commandDir); //$NON-NLS-1$

		final List<String> cmdList = getCmdList(command);

		final Set<String> exposedPorts = new HashSet<String>();
		final Map<String, List<IDockerPortBinding>> portBindingsMap = new HashMap<String, List<IDockerPortBinding>>();

		if (ports != null) {
			for (String port : ports) {
				port = port.trim();
				if (port.length() > 0) {
					String[] segments = port.split(":"); //$NON-NLS-1$
					if (segments.length == 1) { // containerPort
						exposedPorts.add(segments[0]);
						portBindingsMap
								.put(segments[0],
										Arrays.asList((IDockerPortBinding) new DockerPortBinding(
												"", ""))); //$NON-NLS-1$ //$NON-NLS-2$
					} else if (segments.length == 2) { // hostPort:containerPort
						exposedPorts.add(segments[1]);
						portBindingsMap
								.put(segments[1],
										Arrays.asList((IDockerPortBinding) new DockerPortBinding(
												"", segments[0]))); //$NON-NLS-1$ //$NON-NLS-2$
					} else if (segments.length == 3) { // either
						// ip:hostPort:containerPort
						// or ip::containerPort
						exposedPorts.add(segments[1]);
						if (segments[1].isEmpty()) {
							portBindingsMap
									.put(segments[2],
											Arrays.asList((IDockerPortBinding) new DockerPortBinding(
													"", segments[0]))); //$NON-NLS-1$ //$NON-NLS-2$
						} else {
							portBindingsMap
									.put(segments[2],
											Arrays.asList((IDockerPortBinding) new DockerPortBinding(
													segments[0], segments[1]))); //$NON-NLS-1$ //$NON-NLS-2$
						}
					}
				}
			}

		}

		// Note we don't pass volumes to the config, but instead we pass them to
		// the
		// HostConfig binds setting

		DockerContainerConfig.Builder builder = new DockerContainerConfig.Builder()
				.openStdin(stdinSupport).env(env).cmd(cmdList).image(image)
				.workingDir(workingDir);
		// add any exposed ports as needed
		if (exposedPorts.size() > 0)
			builder = builder.exposedPorts(exposedPorts);
		final DockerContainerConfig config = builder.build();

		DockerHostConfig.Builder hostBuilder = new DockerHostConfig.Builder()
				.binds(volumes);

		// add any port bindings if specified
		if (portBindingsMap.size() > 0)
			hostBuilder = hostBuilder.portBindings(portBindingsMap);

		final IDockerHostConfig hostConfig = hostBuilder.build();

		final IDockerConnection[] connections = DockerConnectionManager
				.getInstance().getConnections();
		if (connections.length == 0) {
			Display.getDefault().syncExec(new Runnable() {

				@Override
				public void run() {
					MessageDialog.openError(Display.getCurrent()
							.getActiveShell(), DVMessages
							.getString(ERROR_LAUNCHING_CONTAINER), DVMessages
							.getString(ERROR_NO_CONNECTIONS));
				}

			});
			return;
		}

		// Try and use the specified connection that was used before,
		// otherwise, open an error
		int defaultIndex = -1;
		String[] connectionNames = new String[connections.length];
		for (int i = 0; i < connections.length; ++i) {
			connectionNames[i] = connections[i].getName();
			if (connections[i].getUri().equals(connectionUri))
				defaultIndex = i;
		}

		if (defaultIndex == -1) {
			Display.getDefault().syncExec(new Runnable() {

				@Override
				public void run() {
					MessageDialog.openError(
							Display.getCurrent().getActiveShell(),
							DVMessages.getString(ERROR_LAUNCHING_CONTAINER),
							DVMessages.getFormattedString(
									ERROR_NO_CONNECTION_WITH_URI,
									connectionUri));
				}

			});
			return;

		}
		final IDockerConnection connection = connections[defaultIndex];
		final String imageName = image;
		final boolean keepContainer = keep;
		final String consoleId = id;
		final IContainerLaunchListener containerListener = listener;

		Thread t = new Thread(new Runnable() {

			@Override
			public void run() {
				// create the container
				try {
					String containerId = ((DockerConnection) connection)
							.createContainer(config);
					OutputStream stream = null;
					RunConsole oldConsole = getConsole();
					final RunConsole rc = RunConsole.findConsole(containerId,
							consoleId);
					setConsole(rc);
					rc.clearConsole();
					if (oldConsole != null)
						RunConsole.removeConsole(oldConsole);
					Display.getDefault().syncExec(new Runnable() {

						@Override
						public void run() {
							rc.setTitle(Messages.getFormattedString(
									LAUNCH_TITLE, new String[] {
											cmdList.get(0), imageName }));
						}

					});
					// if (!rc.isAttached()) {
					rc.attachToConsole(connection, containerId);
					// }
					if (rc != null) {
						stream = rc.getOutputStream();
						if (containerListener != null) {
							((ConsoleOutputStream) stream)
									.addConsoleListener(containerListener);
						}
					}
					// Create a unique logging thread id which has container id
					// and console id
					String loggingId = containerId + "." + consoleId;
					((DockerConnection) connection).startContainer(containerId,
							loggingId, hostConfig, stream);
					if (rc != null)
						rc.showConsole();
					if (containerListener != null) {
						IDockerContainerInfo info = ((DockerConnection) connection)
								.getContainerInfo(containerId);
						containerListener.containerInfo(info);
					}
					
					// Wait for the container to finish
					final IDockerContainerExit status = ((DockerConnection) connection)
							.waitForContainer(containerId);
					Display.getDefault().syncExec(new Runnable() {

						@Override
						public void run() {
							rc.setTitle(Messages.getFormattedString(
									LAUNCH_EXITED_TITLE, new String[] {
											status.statusCode().toString(),
											cmdList.get(0), imageName }));
							rc.showConsole();
						}

					});
					
					// Let any container listener know that the container is finished
					if (containerListener != null)
						containerListener.done();
					
					if (!keepContainer) {
						// Drain the logging thread before we remove the
						// container (we need to use the logging id)
						((DockerConnection) connection)
								.stopLoggingThread(loggingId);
						while (((DockerConnection) connection)
								.loggingStatus(loggingId) == EnumDockerLoggingStatus.LOGGING_ACTIVE) {
							Thread.sleep(1000);
						}
						// Look for any Display Log console that the user may
						// have opened which would be
						// separate and make sure it is removed as well
						RunConsole rc2 = RunConsole.findConsole(containerId);
						if (rc2 != null)
							RunConsole.removeConsole(rc2);
						((DockerConnection) connection)
								.removeContainer(containerId);
					}

				} catch (final DockerException e) {
					Display.getDefault().syncExec(new Runnable() {

						@Override
						public void run() {
							MessageDialog.openError(Display.getCurrent()
									.getActiveShell(),
									DVMessages
											.getFormattedString(
													ERROR_CREATING_CONTAINER,
													imageName), e.getMessage());

						}

					});
				} catch (InterruptedException e) {
					// for now
					// do nothing
				}
				((DockerConnection) connection).getContainers(true);
			}

		});
		t.start();
	}

