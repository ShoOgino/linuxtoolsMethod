		/**
		 * Parse the given value and returns an instance of
		 * {@link ExposedPortModel}.
		 *
		 * @param exposedPortInfo
		 *            the value to parse
		 * @return the corresponding {@link ExposedPortModel}
		 */
		public static ExposedPortModel fromString(
				final String exposedPortInfo) {
			final String privatePort = exposedPortInfo.substring(0,
					exposedPortInfo.indexOf(CONTAINER_TYPE_SEPARATOR));
			// exposed ports without host IP/port info
			final int firstColumnSeparator = exposedPortInfo.indexOf(SEPARATOR);
			if (firstColumnSeparator == -1 && exposedPortInfo
					.indexOf(CONTAINER_TYPE_SEPARATOR) != -1) {
				final String type = exposedPortInfo.substring(
						exposedPortInfo.indexOf(CONTAINER_TYPE_SEPARATOR) + 1); // $NON-NLS-1$
				final ExposedPortModel exposedPort = new ExposedPortModel(
						privatePort, type, "", privatePort); // $NON-NLS-1$
				return exposedPort; // $NON-NLS-1$
			} else {
				final int secondColumnSeparator = exposedPortInfo
						.indexOf(SEPARATOR,
						firstColumnSeparator + 1);
				final String type = exposedPortInfo.substring(
						exposedPortInfo.indexOf(CONTAINER_TYPE_SEPARATOR)
								+ 1, // $NON-NLS-1$
						firstColumnSeparator); // $NON-NLS-1$
				final String hostIP = exposedPortInfo.substring(
						firstColumnSeparator + 1, secondColumnSeparator);
				final String hostPort = exposedPortInfo
						.substring(secondColumnSeparator + 1);
				final ExposedPortModel exposedPort = new ExposedPortModel(
						privatePort, type, hostIP, hostPort); // $NON-NLS-1$
				return exposedPort; // $NON-NLS-1$
			}
		}

