	private void searchImages() {
		final String term = this.model.getTerm();
		if (term.isEmpty()) {
			return;
		}
		try {
			final BlockingQueue<List<IDockerImageSearchResult>> searchResultQueue = new ArrayBlockingQueue<>(
					1);
			ImageSearchPage.this.getContainer().run(true, true,
					monitor -> {
						monitor.beginTask(WizardMessages
								.getString("ImageSearchPage.searchTask"), 1); //$NON-NLS-1$
						final List<IDockerImageSearchResult> searchResults;
						try {
							/*
							 * The searchImages API that goes through the Docker
							 * Daemon is faster than querying for the JSON
							 * results over HTTP so if we're dealing with
							 * DockerHub, we use the API.
							 */
							// TODO: remove cast once AbstractRegistry methods
							// are
							// part of the IRegistry interface
							if (((AbstractRegistry) registry)
									.isDockerHubRegistry()) {
								searchResults = ImageSearchPage.this.model
										.getSelectedConnection().searchImages(term);
							} else {
								searchResults = registry.getImages(term);
							}
							searchResultQueue.offer(searchResults);
						} catch (DockerException e) {
							Activator.log(e);
							searchResultQueue.offer(
									new ArrayList<IDockerImageSearchResult>());
						}
						monitor.done();
					});
			List<IDockerImageSearchResult> res = searchResultQueue
					.poll(10, TimeUnit.SECONDS);
			final List<IDockerImageSearchResult> searchResult = (res == null)
					? new ArrayList<>() : res;

			Display.getCurrent().asyncExec(() -> {
				ImageSearchPage.this.model.setImageSearchResult(searchResult);
				// refresh the wizard buttons
				getWizard().getContainer().updateButtons();
			});
			// display a warning in the title area if the search result is empty
			if (searchResult.isEmpty()) {
				this.setMessage(
						WizardMessages
								.getString("ImageSearchPage.noImageWarning"), //$NON-NLS-1$
						WARNING);
			} else if (searchResult.size() == 1) {
				this.setMessage(
						WizardMessages
								.getString("ImageSearchPage.oneImageMatched"), //$NON-NLS-1$
						INFORMATION);
			} else {
				this.setMessage(
						WizardMessages.getFormattedString(
								"ImageSearchPage.imagesMatched", //$NON-NLS-1$
								Integer.toString(searchResult.size())),
						INFORMATION);
			}
		} catch (InvocationTargetException | InterruptedException e) {
			Activator.log(e);
		}
	}

