	/**
	 * Create a container for the refresh rate property
	 * @param parent the parent container
	 */
	private void createContainerRefreshContainer(Composite parent) {
		final Composite container = new Composite(parent, SWT.NONE);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.FILL).span(1,  1).grab(true, false).applyTo(container);
		GridLayoutFactory.fillDefaults().margins(0, 0).spacing(10, 2).applyTo(container);
		refreshTimeField = new IntegerFieldEditor(
				PreferenceConstants.REFRESH_TIME,
				PreferenceMessages.getString(REFRESH_TIME_MSG), container);
		refreshTimeField.setPreferenceStore(getPreferenceStore());
		refreshTimeField
				.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
		refreshTimeField.setValidRange(5, 200);
		refreshTimeField.setPage(this);
		refreshTimeField
				.setErrorMessage(PreferenceMessages.getString(INVALID_REFRESH_TIME_MSG));
		refreshTimeField.showErrorMessage();
		refreshTimeField.load();
		// If the preference changes, alert the Refresh Manager
		refreshTimeField
				.setPropertyChangeListener(event -> {
					if (event.getSource().equals(refreshTimeField)) {
						if (refreshTimeField.isValid()) {
							DockerContainerRefreshManager.getInstance()
									.setRefreshTime(
											refreshTimeField.getIntValue());
							setErrorMessage(null);
						} else {
							setErrorMessage(refreshTimeField.getErrorMessage());
						}
						setValid(refreshTimeField.isValid());
					}
				});
		restartWaitTimeField = new IntegerFieldEditor(
				PreferenceConstants.RESTART_WAIT_TIME,
				PreferenceMessages.getString(RESTART_WAIT_TIME_MSG), container);
		restartWaitTimeField.setPreferenceStore(getPreferenceStore());
		restartWaitTimeField
				.setValidateStrategy(StringFieldEditor.VALIDATE_ON_KEY_STROKE);
		restartWaitTimeField.setValidRange(0, Integer.MAX_VALUE);
		restartWaitTimeField.setPage(this);
		restartWaitTimeField.setErrorMessage(
				PreferenceMessages.getString(INVALID_RESTART_WAIT_TIME_MSG));
		restartWaitTimeField.showErrorMessage();
		restartWaitTimeField.load();
		// If the preference changes, alert the Refresh Manager
		restartWaitTimeField.setPropertyChangeListener(event -> {
			if (event.getSource().equals(restartWaitTimeField)) {
				if (restartWaitTimeField.isValid()) {
					DockerContainerRefreshManager.getInstance()
							.setRefreshTime(restartWaitTimeField.getIntValue());
					setErrorMessage(null);
				} else {
					setErrorMessage(restartWaitTimeField.getErrorMessage());
				}
				setValid(restartWaitTimeField.isValid());
			}
		});
	}

