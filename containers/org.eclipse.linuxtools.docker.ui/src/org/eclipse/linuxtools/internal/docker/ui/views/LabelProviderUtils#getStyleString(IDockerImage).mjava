	/**
	 * @param dockerImage
	 *            the {@link IDockerImage} whose {@link StyledText} needs to be
	 *            provided
	 * @return the {@link StyledText} for the given {@link IDockerImage}.
	 */
	public static StyledString getStyleString(final IDockerImage dockerImage) {
		final String imageShortId = (dockerImage.id().length() > 12)
				? dockerImage.id().substring(0, 12) : dockerImage.id();
		final StringBuilder messageBuilder = new StringBuilder(
				dockerImage.repo());
		final int startTags = messageBuilder.length();
		if (!dockerImage.tags().isEmpty()) {
			final List<String> tags = new ArrayList<>(dockerImage.tags());
			Collections.sort(tags);
			messageBuilder.append(": ");
			for (Iterator<String> tagIterator = tags.iterator(); tagIterator
					.hasNext();) {
				messageBuilder.append(tagIterator.next());
				if (tagIterator.hasNext()) {
					messageBuilder.append(", ");
				}
			}
		}
		final int startImageId = messageBuilder.length();
		messageBuilder.append(" (").append(imageShortId).append(')');
		final String message = messageBuilder.toString();
		final StyledString styledString = new StyledString(message);
		// styled tags
		styledString.setStyle(startTags, startImageId - startTags,
				StyledString.COUNTER_STYLER);
		// styled image id
		styledString.setStyle(startImageId, message.length() - startImageId,
				StyledString.QUALIFIER_STYLER);
		return styledString;
	}

