	private void findImageInfo(final IDockerImage selectedImage) {
		try {
			final FindImageInfoRunnable findImageInfoRunnable = new FindImageInfoRunnable(
					selectedImage);
			getContainer().run(true, true, findImageInfoRunnable);
			final IDockerImageInfo selectedImageInfo = findImageInfoRunnable
					.getResult();
			if (selectedImageInfo.config() != null) {
				model.setCommand(selectedImageInfo.config().cmd());
				model.setEntrypoint(selectedImageInfo.config().entrypoint());
				if (selectedImageInfo.config().exposedPorts() != null) {
					final WritableList availablePorts = new WritableList();
					for (String exposedPortInfo : selectedImageInfo.config()
							.exposedPorts()) {
						final String privatePort = exposedPortInfo.substring(0,
								exposedPortInfo.indexOf('/'));
						final String type = exposedPortInfo
								.substring(exposedPortInfo.indexOf('/')); // $NON-NLS-1$
						final ExposedPortModel exposedPort = new ExposedPortModel(
								privatePort, type, "", privatePort);
						availablePorts.add(exposedPort); // $NON-NLS-1$
					}
					model.setExposedPorts(availablePorts);
				}
			}
		} catch (InvocationTargetException | InterruptedException e) {
			Activator.log(e);
		}
	}

