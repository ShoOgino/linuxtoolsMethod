	@Override
	public Object[] getElements(Object inputElement) {
		if(inputElement instanceof IDockerContainerInfo) {
			final IDockerContainerInfo info = (IDockerContainerInfo) inputElement;
			return new Object[] {
					new Object[]{"Id", info.id().substring(0,  12)}, //$NON-NLS-1$
					new Object[]{"Name", info.name()}, //$NON-NLS-1$
					new Object[]{"Created", LabelProviderUtils.toCreatedDate(info.created())}, //$NON-NLS-1$
					new Object[]{"State", info.state()}, //$NON-NLS-1$
					new Object[]{"Args", LabelProviderUtils.reduce(info.args())}, //$NON-NLS-1$
					new Object[]{"Driver", info.driver()}, //$NON-NLS-1$
					new Object[]{"ExecDriver", info.execDriver()}, //$NON-NLS-1$
					new Object[] { "Config", info.config() }, //$NON-NLS-1$
					new Object[]{"HostConfig", info.hostConfig()}, //$NON-NLS-1$
					new Object[]{"HostnamePath", info.hostnamePath()}, //$NON-NLS-1$
					new Object[]{"HostsPath", info.hostsPath()}, //$NON-NLS-1$
					new Object[]{"Image", info.image()}, //$NON-NLS-1$
					new Object[]{"MountLabel", info.mountLabel()}, //$NON-NLS-1$
					new Object[]{"NetworkSettings", info.networkSettings()}, //$NON-NLS-1$
					new Object[]{"Path", info.path()}, //$NON-NLS-1$
					new Object[]{"ProcessLabel", info.processLabel()}, //$NON-NLS-1$
					new Object[]{"ResolvConfPath", info.resolvConfPath()}, //$NON-NLS-1$
					new Object[]{"Volumes", info.volumes()}, //$NON-NLS-1$
					new Object[]{"VolumesRW", info.volumesRW()}, //$NON-NLS-1$
			};
		}return EMPTY;
	}

