	@Override
	protected void launch(IResource resource, String mode) {
		// the predicate to apply on the launch configuration to find the
		// matching candidates
		final Predicate<ILaunchConfiguration> predicate = config -> {
			try {
				final String sourcePath = config.getAttribute(
						IBuildDockerImageLaunchConfigurationConstants.SOURCE_PATH_LOCATION,
						""); //$NON-NLS-1$
				final boolean workspaceRelative = config.getAttribute(
						IBuildDockerImageLaunchConfigurationConstants.SOURCE_PATH_WORKSPACE_RELATIVE_LOCATION,
						false);
				final IPath dockerfilePath = getPath(sourcePath,
						workspaceRelative);
				return dockerfilePath
						.equals(resource.getLocation().removeLastSegments(1));
			} catch (CoreException e) {
				Activator.log(e);
				return false;
			}
		};

		final ILaunchConfiguration config = findLaunchConfiguration(
				IBuildDockerImageLaunchConfigurationConstants.CONFIG_TYPE_ID,
				resource, predicate);
		if (config != null) {
			DebugUITools.launch(config, mode);
		} else {
			Activator.log(new DockerException(LaunchMessages
					.getString("BuildDockerImageShortcut.launchconfig.error"))); //$NON-NLS-1$
		}
	}

