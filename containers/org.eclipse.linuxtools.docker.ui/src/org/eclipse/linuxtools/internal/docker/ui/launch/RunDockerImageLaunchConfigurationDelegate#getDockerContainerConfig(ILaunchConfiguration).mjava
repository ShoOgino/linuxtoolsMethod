	public IDockerContainerConfig getDockerContainerConfig(
			ILaunchConfiguration lconfig) throws CoreException {

		String command = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.COMMAND, ""); //$NON-NLS-1$
		String entrypoint = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.ENTRYPOINT, ""); //$NON-NLS-1$
		String imageName = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.IMAGE_NAME, ""); //$NON-NLS-1$
		boolean useTTY = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.ALLOCATE_PSEUDO_CONSOLE,
				false);
		boolean interactive = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.INTERACTIVE, false);

		final Builder config = new DockerContainerConfig.Builder().cmd(command)
				.entryPoint(entrypoint).image(imageName).tty(useTTY)
				.openStdin(interactive);
		boolean limits_enabled = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.ENABLE_LIMITS,
				false);
		if (limits_enabled) {
			long memory = Long.parseLong(lconfig.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.MEMORY_LIMIT,
					"0"));
			config.memory(memory);
			long cpuShares = Long.parseLong(lconfig.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.CPU_PRIORITY,
					"0"));
			config.cpuShares(cpuShares);
		}
		// environment variables
		final List<String> environmentVariables = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.ENV_VARIABLES,
				new ArrayList<String>());
		config.env(environmentVariables);

		// labels
		final Map<String, String> labelVariables = lconfig.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.LABELS,
				(Map<String, String>) null);
		if (labelVariables != null)
			config.labels(labelVariables);

		return config.build();
	}

