	private SelectionListener onSearchButtonSelection() {
		return new SelectionAdapter() {
			
			private String getVMDriverInstallDir() {
				return Activator.getDefault()
						.getPreferenceStore().getString(
								PreferenceConstants.VM_DRIVER_INSTALLATION_DIRECTORY);
			}

			private String getDockerMachineInstallDir() {
				return Activator.getDefault()
						.getPreferenceStore()
						.getString(PreferenceConstants.DOCKER_MACHINE_INSTALLATION_DIRECTORY);
			}
			
			@Override
			public void widgetSelected(SelectionEvent e) {
				if (getDockerMachineInstallDir().equals("")
						|| getVMDriverInstallDir().equals("")) {
					final boolean confirm = MessageDialog.openConfirm(
							getShell(),
									WizardMessages.getString(
											"DockerMachineSupport.title"), //$NON-NLS-1$
							WizardMessages
									.getString("DockerMachineSupport.message")); //$NON-NLS-1$
					if (confirm) {
						PreferencesUtil.createPreferenceDialogOn(getShell(),
								DOCKER_MACHINE_PREFERENCE_PAGE_ID,
								new String[] {
										DOCKER_MACHINE_PREFERENCE_PAGE_ID },
								null).open();
						// after user input data, check again
						if (getDockerMachineInstallDir().equals("")
								|| getVMDriverInstallDir().equals("")) {
							return;
						}
					} else {
						return;
					}
				}
				final String dockerMachineInstallDir = getDockerMachineInstallDir();
				final String vmDriverInstallDir = getVMDriverInstallDir();
				
				final String[] dmNames = DockerMachine
						.getNames(dockerMachineInstallDir);
				final List<String> activeNames = new ArrayList<>();
				for (String name : dmNames) {
					if (DockerMachine.getHost(name, dockerMachineInstallDir,
							vmDriverInstallDir) != null) {
						activeNames.add(name);
					}
				}
				if (activeNames.size() > 0) {
					ListDialog connPrompt = new ListDialog(getShell());
					connPrompt.setContentProvider(new ConnectionSelectionContentProvider());
					connPrompt.setLabelProvider(new ConnectionSelectionLabelProvider());
					connPrompt.setTitle(WizardMessages.getString(
							"NewDockerConnectionPage.searchDialog.title")); //$NON-NLS-1$
					connPrompt.setMessage(WizardMessages.getString(
							"NewDockerConnectionPage.searchDialog.message")); //$NON-NLS-1$
					connPrompt.setInput(activeNames.toArray(new String[0]));
					if (connPrompt.open() == 0 && connPrompt.getResult().length > 0) {
						String name = ((String) connPrompt.getResult()[0]);
						String host = DockerMachine.getHost(name,
								dockerMachineInstallDir, vmDriverInstallDir);
						String certPath = DockerMachine.getCertPath(name,
								dockerMachineInstallDir, vmDriverInstallDir);
						model.setBindingMode(EnumDockerConnectionSettings.TCP_CONNECTION);
						model.setConnectionName(name);
						model.setUnixSocketPath(null);
						model.setTcpHost(host);
						if (certPath != null) {
							model.setTcpTLSVerify(true);
							model.setTcpCertPath(certPath);
						} else {
							model.setTcpTLSVerify(false);
							model.setTcpCertPath(null);
						}
					}
				} else {
					if (dmNames.length == 1) {
						MessageDialog.openInformation(getShell(),
								WizardMessages.getString(
										"NewDockerConnectionPage.searchDialog.discovery.title"), //$NON-NLS-1$
								WizardMessages.getFormattedString(
										"NewDockerConnectionPage.searchDialog.discovery.innactive.single", //$NON-NLS-1$
										dmNames[0]));
					} else if (dmNames.length > 1) {
						final StringBuffer connections = new StringBuffer();
						for (Iterator<String> iterator = Arrays.asList(dmNames)
								.iterator(); iterator.hasNext();) {
							final String dmName = iterator.next();
							connections.append(dmName);
							if (iterator.hasNext()) {
								connections.append(", "); //$NON-NLS-1$
							}
						}
						MessageDialog.openInformation(getShell(),
								WizardMessages.getString(
										"NewDockerConnectionPage.searchDialog.discovery.title"), //$NON-NLS-1$
								WizardMessages.getFormattedString(
										"NewDockerConnectionPage.searchDialog.discovery.innactive.multiple", //$NON-NLS-1$
										connections.toString()));
					} else {
						MessageDialog.openInformation(getShell(),
								WizardMessages.getString(
										"NewDockerConnectionPage.searchDialog.discovery.title"), //$NON-NLS-1$
								WizardMessages.getString(
										"NewDockerConnectionPage.searchDialog.discovery.empty")); //$NON-NLS-1$
					}
				}
			}
		};

			
	}

