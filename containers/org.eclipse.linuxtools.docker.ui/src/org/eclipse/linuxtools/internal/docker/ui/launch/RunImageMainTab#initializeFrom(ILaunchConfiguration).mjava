	@Override
	public void initializeFrom(ILaunchConfiguration configuration) {
		// Don't attempt to continue if model is null since it means there are
		// no connections
		if (model == null)
			return;
		final IDockerConnection[] connections = DockerConnectionManager
				.getInstance()
				.getConnections();
		try {
			String defaultConnectionName = ""; //$NON-NLS-1$
			// Default to first active connection name
			if (connections != null && connections.length > 0) {
				for (int i = 0; i < connections.length; ++i) {
					if (connections[i].isOpen())
						defaultConnectionName = connections[i].getName();
				}
			}
			// Mark in error if there is no active connection
			if (defaultConnectionName.equals("")) { //$NON-NLS-1$
				setErrorMessage(WizardMessages
						.getString("ErrorNoActiveConnection.msg")); //$NON-NLS-1$
			}
			String connectionName = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.CONNECTION_NAME,
					defaultConnectionName);
			model.setSelectedConnectionName(connectionName);
			String imageName = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.IMAGE_NAME, ""); //$NON-NLS-1$
			model.setSelectedImageName(imageName);
			String entryPoint = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.ENTRYPOINT, ""); //$NON-NLS-1$
			model.setEntrypoint(entryPoint);
			String command = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.COMMAND, ""); //$NON-NLS-1$
			model.setCommand(command);
			String containerName = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.CONTAINER_NAME,
					""); //$NON-NLS-1$
			model.setContainerName(containerName);
			boolean removeContainer = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.AUTO_REMOVE,
					false);
			model.setRemoveWhenExits(removeContainer);
			boolean interactive = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.INTERACTIVE,
					false);
			model.setInteractiveMode(interactive);
			boolean useTTY = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.ALLOCATE_PSEUDO_CONSOLE,
					false);
			model.setAllocatePseudoTTY(useTTY);
			boolean privileged = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.PRIVILEGED,
					false);
			model.setPrivileged(privileged);
		} catch (CoreException e) {
			Activator.logErrorMessage(
					LaunchMessages.getString(
							"RunDockerImageLaunchConfiguration.load.failure"), //$NON-NLS-1$
					e);
		}
		// update the underlying launch config working copy on model
		// changes.
		model.addPropertyChangeListener(
				new LaunchConfigurationChangeListener());

	}

