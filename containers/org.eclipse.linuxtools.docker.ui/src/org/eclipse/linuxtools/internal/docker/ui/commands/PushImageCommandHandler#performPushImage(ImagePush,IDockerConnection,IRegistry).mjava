	private void performPushImage(final ImagePush wizard,
			final IDockerConnection connection, final IRegistry info) {
		if (connection == null) {
			Display.getDefault()
					.syncExec(() -> MessageDialog.openError(
							PlatformUI.getWorkbench().getActiveWorkbenchWindow()
									.getShell(),
							DVMessages.getFormattedString(ERROR_PUSHING_IMAGE,
									wizard.getImageTag()),
							DVMessages.getFormattedString(NO_CONNECTION)));
			return;
		}
		final Job pushImageJob = new Job(DVMessages.getFormattedString(
				PUSH_IMAGE_JOB_TITLE, wizard.getImageTag())) {

			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				final String tag = wizard.getImageTag();
				monitor.beginTask(DVMessages.getString(PUSH_IMAGE_JOB_TASK),
						IProgressMonitor.UNKNOWN);
				// push the image and let the progress
				// handler refresh the images when done
				String tmpRegistryTag = null;
				boolean createdTag = false;
				try {
					String repo = info.getServerAddress();
					tmpRegistryTag = repo + '/' + tag;
					if (!connection.hasImage(repo, tag)) {
						connection.tagImage(tag, tmpRegistryTag);
						createdTag = true;
					}

					if (info instanceof IRegistryAccount) {
						IRegistryAccount acc = (IRegistryAccount) info;
						connection.pushImage(tmpRegistryTag, acc,
								new DefaultImagePushProgressHandler(connection,
										tmpRegistryTag));
					} else {
						connection.pushImage(tmpRegistryTag,
								new DefaultImagePushProgressHandler(connection,
										tmpRegistryTag));
					}
				} catch (final DockerException e) {
					Display.getDefault().syncExec(() -> MessageDialog.openError(
							PlatformUI.getWorkbench().getActiveWorkbenchWindow()
									.getShell(),
							DVMessages.getFormattedString(ERROR_PUSHING_IMAGE,
									tag),
							e.getMessage()));
					// for now
				} catch (InterruptedException e) {
					// do nothing
				} finally {
					if (tmpRegistryTag != null && createdTag) {
						try {
							connection.removeTag(tmpRegistryTag);
							connection.getImages(true);
						} catch (Exception e) {
							// do nothing
						}
					}
					monitor.done();
				}
				return Status.OK_STATUS;
			}

		};
		pushImageJob.schedule();
	}

