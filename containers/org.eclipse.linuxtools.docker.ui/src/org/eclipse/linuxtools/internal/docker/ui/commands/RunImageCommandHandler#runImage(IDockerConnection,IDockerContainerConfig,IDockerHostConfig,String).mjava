	private void runImage(final IDockerConnection connection,
			final IDockerContainerConfig containerConfig,
			final IDockerHostConfig hostConfig, final String containerName) {
		if (containerConfig.tty()) {
			// show the console view
			try {
				PlatformUI.getWorkbench().getActiveWorkbenchWindow()
						.getActivePage()
						.showView(IConsoleConstants.ID_CONSOLE_VIEW);
			} catch (PartInitException e) {
				Activator.log(e);
			}
		}

		// Create the container in a non-UI thread.
		final Job runImageJob = new Job("Create Container") {

			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				monitor.beginTask("Running image...", 2);
				try {
					final SubProgressMonitor createContainerMonitor = new SubProgressMonitor(
							monitor, 1);
					// create the container
					createContainerMonitor.beginTask("Creating container...",
							1);
					final String containerId = ((DockerConnection) connection)
							.createContainer(containerConfig, containerName);
					final IDockerContainer container = ((DockerConnection) connection)
							.getContainer(containerId);

					createContainerMonitor.done();
					// abort if operation was cancelled
					if (monitor.isCanceled()) {
						return Status.CANCEL_STATUS;
					}
					// start the container
					final SubProgressMonitor startContainerMonitor = new SubProgressMonitor(
							monitor, 1);
					startContainerMonitor.beginTask("Starting container...", 1);
					final OutputStream consoleOutputStream = getConsoleOutputStream(
							connection, container, containerConfig);
					((DockerConnection) connection).startContainer(containerId,
							hostConfig, consoleOutputStream);
					startContainerMonitor.done();
				} catch (final DockerException | InterruptedException e) {
					Display.getDefault().syncExec(new Runnable() {

						@Override
						public void run() {
							MessageDialog.openError(
									Display.getCurrent().getActiveShell(),
									DVMessages.getFormattedString(
											ERROR_CREATING_CONTAINER,
											containerConfig.image()),
									e.getMessage());

						}

					});
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}
		};
		runImageJob.schedule();

	}

