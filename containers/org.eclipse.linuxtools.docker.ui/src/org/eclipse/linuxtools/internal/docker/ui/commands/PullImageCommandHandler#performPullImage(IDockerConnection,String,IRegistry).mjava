	private void performPullImage(final IDockerConnection connection,
			final String imageName, final IRegistry registry) {
		final Job pullImageJob = new Job(DVMessages
				.getFormattedString(PULL_IMAGE_JOB_TITLE, imageName)) {

			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				monitor.beginTask(DVMessages.getString(PULL_IMAGE_JOB_TASK),
						IProgressMonitor.UNKNOWN);
				// pull the image and let the progress
				// handler refresh the images when done
				try {
					if (registry == null) {
						((DockerConnection) connection).pullImage(imageName,
								new ImagePullProgressHandler(connection,
										imageName));
					} else {
						String fullImageName = registry.getServerAddress() + '/' + imageName;
						if (registry instanceof IRegistryAccount) {
							IRegistryAccount account = (IRegistryAccount) registry;
							((DockerConnection) connection).pullImage(fullImageName,
									account, new ImagePullProgressHandler(
											connection, fullImageName));
						} else {
							((DockerConnection) connection).pullImage(fullImageName,
									new ImagePullProgressHandler(connection,
											fullImageName));
						}
					}
				} catch (final DockerException e) {
					Display.getDefault().syncExec(() -> MessageDialog.openError(
							PlatformUI.getWorkbench().getActiveWorkbenchWindow()
									.getShell(),
							DVMessages.getFormattedString(ERROR_PULLING_IMAGE,
									imageName),
							e.getMessage()));
					// for now
				} catch (InterruptedException | DockerCertificateException e) {
					// do nothing
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}

		};

		pullImageJob.schedule();

	}

