	/**
	 * Returns the {@link ILaunchConfigurationWorkingCopy} with the given type
	 * and <strong>IDockerImage's name</strong>.
	 * 
	 * @param type
	 *            the configuration type
	 * @param imageName
	 *            the associated {@link IDockerImage} name
	 * @param createIfNotFound
	 *            flag to indicate if a new {@link ILaunchConfiguration} should
	 *            be created if none was found.
	 * @return the ILaunchConfigurationWorkingCopy for the matching
	 *         {@link ILaunchConfiguration} or a new instance if none was found.
	 * @throws CoreException
	 */
	private static ILaunchConfigurationWorkingCopy getLaunchConfigurationWorkingCopy(
			final ILaunchConfigurationType type, final String imageName)
			throws CoreException {
		final ILaunchConfiguration existingLaunchConfiguration = getLaunchConfigurationByImageName(
				type, imageName);
		if (existingLaunchConfiguration != null) {
			return existingLaunchConfiguration.getWorkingCopy();
		}
		final ILaunchManager manager = DebugPlugin.getDefault()
				.getLaunchManager();
		final String configurationName = manager
				.generateLaunchConfigurationName(imageName);
		return type.newInstance(null, configurationName);
	}

