	private void retrieveConnectionSettings(String content) {
		final String EQUAL = "="; //$NON-NLS-1$
		StringTokenizer tok = new StringTokenizer(content);
		while (tok.hasMoreTokens()) {
			String line = tok.nextToken();
			String[] tokens;
			if (line.startsWith(
					DefaultDockerConnectionSettingsFinder.DOCKER_HOST)) {
				tokens = line.split(EQUAL);
				if (tokens.length == 2) {
					String host = tokens[1].replaceAll("\"", ""); //$NON-NLS-1$ //$NON-NLS-2$
					if (host.startsWith("unix")) { //$NON-NLS-1$
						model.setUnixSocketBindingMode(true);
						model.setUnixSocketPath(host);
					} else {
						model.setTcpConnectionBindingMode(true);
						model.setTcpHost(host);
					}
					model.setCustomSettings(true);
				}
			} else if (line.startsWith(
					DefaultDockerConnectionSettingsFinder.DOCKER_CERT_PATH)) {
				tokens = line.split(EQUAL);
				if (tokens.length == 2) {
					model.setTcpCertPath(tokens[1].replaceAll("\"", "")); //$NON-NLS-1$ //$NON-NLS-2$
				}
			} else if (line.startsWith(
					DefaultDockerConnectionSettingsFinder.DOCKER_TLS_VERIFY)) {
				tokens = line.split(EQUAL);
				if (tokens.length == 2) {
					model.setTcpTLSVerify(
							DefaultDockerConnectionSettingsFinder.DOCKER_TLS_VERIFY_TRUE
									.equals(tokens[1].replaceAll("\"", ""))); //$NON-NLS-1$ //$NON-NLS-2$
				}
			}
		}
	}

