	private void performCopyFromContainer(final IDockerConnection connection,
			final IDockerContainer container, final String target,
			final List<ContainerFileProxy> files) {
		final Job copyFromContainerJob = new Job(
				CommandMessages.getFormattedString(
				COPY_FROM_CONTAINER_JOB_TITLE, container.name())) {

			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				monitor.beginTask(
						CommandMessages.getString(COPY_FROM_CONTAINER_JOB_TASK),
						files.size());
				try {
					for (ContainerFileProxy proxy : files) {
						if (monitor.isCanceled()) {
							monitor.done();
							return Status.CANCEL_STATUS;
						}
						try {
							monitor.setTaskName(
									CommandMessages.getFormattedString(
											COPY_FROM_CONTAINER_JOB_SUBTASK,
											proxy.getFullPath()));
							monitor.worked(1);
							InputStream in = ((DockerConnection) connection)
									.copyContainer(container.id(),
											proxy.getLink());
							/*
							 * The input stream from copyContainer might be
							 * incomplete or non-blocking so we should wrap it
							 * in a stream that is guaranteed to block until
							 * data is available.
							 */
							TarArchiveInputStream k = new TarArchiveInputStream(
									new BlockingInputStream(in));
							TarArchiveEntry te = null;
							while ((te = k.getNextTarEntry()) != null) {
								long size = te.getSize();
								IPath path = new Path(target);
								path = path.append(te.getName());
								File f = new File(path.toOSString());
								if (te.isDirectory()) {
									f.mkdir();
									continue;
								} else {
									f.createNewFile();
								}
								FileOutputStream os = new FileOutputStream(f);
								int bufferSize = ((int) size > 4096 ? 4096
										: (int) size);
								byte[] barray = new byte[bufferSize];
								int result = -1;
								while ((result = k.read(barray, 0,
										bufferSize)) > -1) {
									if (monitor.isCanceled()) {
										monitor.done();
										k.close();
										os.close();
										return Status.CANCEL_STATUS;
									}
									os.write(barray, 0, result);
								}
								os.close();
							}
							k.close();
						} catch (final DockerException e) {
							Display.getDefault()
									.syncExec(() -> MessageDialog.openError(
											PlatformUI.getWorkbench()
													.getActiveWorkbenchWindow()
													.getShell(),
											CommandMessages.getFormattedString(
													ERROR_COPYING_FROM_CONTAINER,
													proxy.getLink(),
													container.name()),
											e.getCause() != null
													? e.getCause().getMessage()
													: e.getMessage()));
						}
					}
				} catch (InterruptedException e) {
					// do nothing
				} catch (IOException e) {
					Activator.log(e);
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}

		};

		copyFromContainerJob.schedule();

	}

