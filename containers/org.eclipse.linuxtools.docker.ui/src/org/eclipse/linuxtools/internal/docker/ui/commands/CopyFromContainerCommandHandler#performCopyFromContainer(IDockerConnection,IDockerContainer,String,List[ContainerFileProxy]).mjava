	private void performCopyFromContainer(final IDockerConnection connection, final IDockerContainer container,
			final String target, final List<ContainerFileProxy> files) {
		final Job copyFromContainerJob = new Job(
				CommandMessages.getFormattedString(COPY_FROM_CONTAINER_JOB_TITLE, container.name())) {

			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				monitor.beginTask(CommandMessages.getString(COPY_FROM_CONTAINER_JOB_TASK), files.size());
				boolean isWin = Platform.getOS().equals(Platform.OS_WIN32);
				try (Closeable token = ((DockerConnection) connection).getOperationToken()) {
					Map<String, String> links = new HashMap<>();
					for (ContainerFileProxy proxy : files) {
						if (monitor.isCanceled()) {
							monitor.done();
							return Status.CANCEL_STATUS;
						}
						try {
							monitor.setTaskName(CommandMessages.getFormattedString(COPY_FROM_CONTAINER_JOB_SUBTASK,
									proxy.getFullPath()));
							monitor.worked(1);
							InputStream in = ((DockerConnection) connection).copyContainer(token, container.id(),
									proxy.getLink());
							/*
							 * The input stream from copyContainer might be incomplete or non-blocking so we
							 * should wrap it in a stream that is guaranteed to block until data is
							 * available.
							 */
							try (TarArchiveInputStream k = new TarArchiveInputStream(new BlockingInputStream(in))) {
								TarArchiveEntry te = null;
								while ((te = k.getNextTarEntry()) != null) {
									long size = te.getSize();
									IPath path = new Path(target);
									path = path.append(te.getName());
									File f = new File(path.toOSString());
									int mode = te.getMode();
									if (te.isDirectory()) {
										f.mkdir();
										if (!isWin && !te.isSymbolicLink()) {
											Files.setPosixFilePermissions(Paths.get(path.toOSString()), toPerms(mode));
										}
										continue;
									} else {
										f.createNewFile();
										if (!isWin && !te.isSymbolicLink()) {
											Files.setPosixFilePermissions(Paths.get(path.toOSString()), toPerms(mode));
										}
									}
									try (FileOutputStream os = new FileOutputStream(f)) {
										int bufferSize = ((int) size > 4096 ? 4096 : (int) size);
										byte[] barray = new byte[bufferSize];
										int result = -1;
										if (size == 0 && te.isSymbolicLink()) {
											IPath linkPath = new Path(te.getLinkName());
											if (!linkPath.isAbsolute()) {
												if (proxy.isFolder()) {
													linkPath = new Path(proxy.getFullPath()).append(te.getLinkName());
												} else {
													linkPath = new Path(proxy.getFullPath()).removeLastSegments(1)
															.append(te.getLinkName());
												}

											}
											links.put(te.getName(), linkPath.toPortableString());
										} else {
											while ((result = k.read(barray, 0, bufferSize)) > -1) {
												if (monitor.isCanceled()) {
													monitor.done();
													k.close();
													os.close();
													return Status.CANCEL_STATUS;
												}
												os.write(barray, 0, result);
											}
										}
									}
								}
							}
						} catch (final DockerException e) {
							Display.getDefault()
									.syncExec(() -> MessageDialog.openError(
											PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),
											CommandMessages.getFormattedString(ERROR_COPYING_FROM_CONTAINER,
													proxy.getLink(), container.name()),
											e.getCause() != null ? e.getCause().getMessage() : e.getMessage()));
						}
					}
					for (String name : links.keySet()) {
						String link = links.get(name);
						try {
							InputStream in = ((DockerConnection) connection).copyContainer(token, container.id(),
									link);
							/*
							 * The input stream from copyContainer might be incomplete or non-blocking so we
							 * should wrap it in a stream that is guaranteed to block until data is
							 * available.
							 */
							try (TarArchiveInputStream k = new TarArchiveInputStream(new BlockingInputStream(in))) {
								TarArchiveEntry te = k.getNextTarEntry();
								if (te != null) {
									long size = te.getSize();
									IPath path = new Path(target);
									path = path.append(name);
									File f = new File(path.toOSString());
									f.createNewFile();
									try (FileOutputStream os = new FileOutputStream(f)) {
										int bufferSize = ((int) size > 4096 ? 4096 : (int) size);
										byte[] barray = new byte[bufferSize];
										int result = -1;
										while ((result = k.read(barray, 0, bufferSize)) > -1) {
											if (monitor.isCanceled()) {
												monitor.done();
												k.close();
												os.close();
												return Status.CANCEL_STATUS;
											}
											os.write(barray, 0, result);
										}
									}
								}
							}
						} catch (final DockerException e) {
							Display.getDefault()
									.syncExec(() -> MessageDialog.openError(
											PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),
											CommandMessages.getFormattedString(ERROR_COPYING_FROM_CONTAINER,
													name, container.name()),
											e.getCause() != null ? e.getCause().getMessage() : e.getMessage()));
						}
					}
				} catch (InterruptedException e) {
					// do nothing
				} catch (IOException e) {
					Activator.log(e);
				} catch (DockerException e1) {
					Activator.log(e1);
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}

		};

		copyFromContainerJob.schedule();
	}

