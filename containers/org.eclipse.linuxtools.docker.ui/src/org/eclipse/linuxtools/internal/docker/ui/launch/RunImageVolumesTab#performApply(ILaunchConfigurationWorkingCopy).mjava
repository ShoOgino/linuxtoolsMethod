	@Override
	public void performApply(ILaunchConfigurationWorkingCopy configuration) {
		WritableList volumes = model.getDataVolumes();
		Set<DataVolumeModel> selectedVolumes = model.getSelectedDataVolumes();

		ArrayList<String> binds = new ArrayList<>();
		ArrayList<String> volumesFrom = new ArrayList<>();
		ArrayList<String> volumesList = new ArrayList<>();
		Set<String> selectedVolumesSet = new TreeSet<>();

		for (@SuppressWarnings("unchecked")
		Iterator<DataVolumeModel> iterator = volumes.iterator(); iterator
				.hasNext();) {
			DataVolumeModel volume = iterator.next();
			StringBuffer buffer = new StringBuffer();
			volumesList.add(volume.toString());
			switch (volume.getMountType()) {
			case HOST_FILE_SYSTEM:
				buffer.append(volume.getHostPathMount() + ","
						+ volume.getHostPathMount() + ","
						+ volume.isReadOnly());
				if (selectedVolumes.contains(volume)) {
					selectedVolumesSet.add(volume.toString());
					String bind = convertToUnixPath(volume.getHostPathMount())
							+ ':' + volume.getContainerPath() + ':' + 'Z';
					if (volume.isReadOnly()) {
						bind += ",ro"; //$NON-NLS-1$
					}
					binds.add(bind);
				}
				break;
			case CONTAINER:
				if (selectedVolumes.contains(volume)) {
					selectedVolumesSet.add(volume.toString());
					volumesFrom.add(volume.getContainerMount());
				}
				break;
			default:
				break;
			}
		}
		configuration.setAttribute(
				IRunDockerImageLaunchConfigurationConstants.BINDS, binds);
		configuration.setAttribute(
				IRunDockerImageLaunchConfigurationConstants.VOLUMES_FROM,
				volumesFrom);
		configuration.setAttribute(
				IRunDockerImageLaunchConfigurationConstants.DATA_VOLUMES,
				volumesList);
	}

