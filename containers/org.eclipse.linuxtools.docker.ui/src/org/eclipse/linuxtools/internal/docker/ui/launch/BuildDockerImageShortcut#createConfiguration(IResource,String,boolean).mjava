	/**
	 * Create a launch configuration based on a Dockerfile resource, and
	 * optionally save it to the underlying resource.
	 *
	 * @param resource
	 *            a Dockerfile file to build
	 * @param save
	 *            true if the configuration should be saved to the underlying
	 *            resource, and false if it should not be saved.
	 * @return a launch configuration generated for the Dockerfile build.
	 */
	protected ILaunchConfiguration createConfiguration(IResource resource,
			@SuppressWarnings("unused") String mode, boolean save) {
		ILaunchConfiguration config = null;
		try {
			ILaunchConfigurationType configType = getLaunchConfigType();
			ILaunchConfigurationWorkingCopy wc = configType.newInstance(null,
					getLaunchManager()
							.generateLaunchConfigurationName("Dockerfile[" //$NON-NLS-1$
									+ resource.getProject().getName() + "]")); //$NON-NLS-1$

			wc.setAttribute(
					IBuildDockerImageLaunchConfigurationConstants.SOURCE_PATH_LOCATION,
					resource.getFullPath().removeLastSegments(1).toString());
			wc.setAttribute(
					IBuildDockerImageLaunchConfigurationConstants.SOURCE_PATH_WORKSPACE_RELATIVE_LOCATION,
					true);

			IDockerConnection[] connections = DockerConnectionManager
					.getInstance().getConnections();
			if (connections.length == 0) {
				Display.getDefault().syncExec(new Runnable() {

					@Override
					public void run() {
						MessageDialog.openError(
								Display.getCurrent().getActiveShell(),
								LaunchMessages.getString(
										LaunchShortcut_Error_Launching),
								LaunchMessages.getString(
										LaunchShortcut_No_Connections));
					}

				});
				return null;
			} else if (connections.length == 1) {
				wc.setAttribute(
					IBuildDockerImageLaunchConfigurationConstants.DOCKER_CONNECTION,
					connections[0].getName());
			} else {
				IDockerConnection connection = chooseConnection(connections);
				if (connection == null)
					return null;
				wc.setAttribute(
						IBuildDockerImageLaunchConfigurationConstants.DOCKER_CONNECTION,
						connection.getName());
			}
			if (save) {
				config = wc.doSave();
			} else {
				config = wc;
			}
		} catch (CoreException e) {
			e.printStackTrace();
		}
		return config;
	}

