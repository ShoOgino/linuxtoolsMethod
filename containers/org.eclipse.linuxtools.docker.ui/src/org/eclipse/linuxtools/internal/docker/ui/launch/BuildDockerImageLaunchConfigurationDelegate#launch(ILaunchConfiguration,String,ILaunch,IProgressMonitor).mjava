	@Override
	public void launch(final ILaunchConfiguration configuration,
			final String mode, final ILaunch launch,
			final IProgressMonitor monitor) throws CoreException {
		final String sourcePathLocation = configuration
				.getAttribute(SOURCE_PATH_LOCATION, (String) null);
		final boolean sourcePathWorkspaceRelativeLocation = configuration
				.getAttribute(SOURCE_PATH_WORKSPACE_RELATIVE_LOCATION,
						false);
		final IPath sourcePath = BuildDockerImageUtils.getPath(
				sourcePathLocation,
				sourcePathWorkspaceRelativeLocation);
		final String connectionName = configuration
				.getAttribute(DOCKER_CONNECTION, (String) null);
		final String repoName = configuration.getAttribute(REPO_NAME,
				(String) null);
		final IDockerConnection connection = DockerConnectionManager
				.getInstance().getConnectionByName(connectionName);
		final Map<String, Object> buildOptions = new HashMap<>();
		buildOptions.put(QUIET_BUILD,
				configuration.getAttribute(QUIET_BUILD, false));
		buildOptions.put(NO_CACHE, configuration.getAttribute(NO_CACHE, false));
		buildOptions.put(RM_INTERMEDIATE_CONTAINERS, configuration
				.getAttribute(RM_INTERMEDIATE_CONTAINERS, true));
		buildOptions.put(FORCE_RM_INTERMEDIATE_CONTAINERS, configuration
				.getAttribute(FORCE_RM_INTERMEDIATE_CONTAINERS, false));
		if (connection != null && sourcePath != null) {
			final Job buildImageJob = new BuildDockerImageJob(connection,
					sourcePath, repoName, buildOptions);
			buildImageJob.schedule();
		} else {
			final ILaunchGroup launchGroup = DebugUITools
					.getLaunchGroup(configuration, "run"); //$NON-NLS-1$
			// prompt the user with the launch configuration editor
			Display.getDefault()
					.syncExec(() -> DebugUITools.openLaunchConfigurationDialog(
							PlatformUI.getWorkbench().getActiveWorkbenchWindow()
									.getShell(),
							configuration, launchGroup.getIdentifier(), null));

		}
	}

