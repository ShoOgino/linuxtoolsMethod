	@Override
	public void initializeFrom(ILaunchConfiguration configuration) {
		if (model == null)
			return;
		try {
			String networkModeString = configuration.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.NETWORK_MODE,
					ImageRunNetworkModel.DEFAULT_MODE);
			if (networkModeString
					.startsWith(ImageRunNetworkModel.CONTAINER_MODE)) {
				String[] token = networkModeString.split(":");
				model.setNetworkMode(ImageRunNetworkModel.CONTAINER_MODE);
				if (token.length > 1) {
					model.setSelectedContainer(token[1]);
				}
				getContainerControl().setEnabled(true);
			} else {
				switch (networkModeString) {
				case ImageRunNetworkModel.BRIDGE_MODE:
				case ImageRunNetworkModel.HOST_MODE:
				case ImageRunNetworkModel.NONE_MODE:
				case ImageRunNetworkModel.DEFAULT_MODE:
					model.setNetworkMode(networkModeString);
					break;
				default:
					model.setNetworkMode(ImageRunNetworkModel.OTHER_MODE);
					model.setOtherString(networkModeString);
					getOtherControl().setEnabled(true);
					break;
				}
			}

			// update the underlying launch config working copy on model
			// changes.
			model.addPropertyChangeListener(
					new LaunchConfigurationChangeListener());
		} catch (CoreException e) {
			Activator.logErrorMessage(
					LaunchMessages.getString(
							"RunDockerImageLaunchConfiguration.load.failure"), //$NON-NLS-1$
					e);
		}

	}

