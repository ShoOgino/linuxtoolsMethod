	/**
	 * Verifies that the given connection settings work by trying to connect to
	 * the target Docker daemon
	 * 
	 * @return
	 */
	private SelectionListener onTestConnectionButtonSelection() {
		return new SelectionAdapter() {

			@Override
			public void widgetSelected(SelectionEvent e) {
				try {
					getWizard().getContainer().run(true, false,
							new IRunnableWithProgress() {
						@Override
						public void run(final IProgressMonitor monitor) {
							monitor.beginTask(
									WizardMessages.getString(
											"NewDockerConnectionPage.pingTask"), //$NON-NLS-1$
									IProgressMonitor.UNKNOWN);
							try {
								final DockerConnection dockerConnection = getDockerConnection();
								dockerConnection.open(false);
								dockerConnection.ping();
								dockerConnection.close();
								// ping succeeded
								displaySuccessDialog();
							} catch (DockerException e) {
								// only log if there's an underlying cause.
								if (e.getCause() != null) {
									Activator.log(e);
								}
								displayErrorDialog();
							}
						}

					});
				} catch (InvocationTargetException | InterruptedException o_O) {
					Activator.log(o_O);
				}

			}

			private void displaySuccessDialog() {
				displayDialog(
						WizardMessages
								.getString("NewDockerConnectionPage.success"), //$NON-NLS-1$
						WizardMessages.getString(
								"NewDockerConnectionPage.pingSuccess"), //$NON-NLS-1$
						SWT.ICON_INFORMATION,
						new String[] { WizardMessages
								.getString("NewDockerConnectionPage.ok") } //$NON-NLS-1$
						);
			}

			private void displayErrorDialog() {
				displayDialog(
						WizardMessages
								.getString("NewDockerConnectionPage.failure"), //$NON-NLS-1$
						WizardMessages.getString(
								"NewDockerConnectionPage.pingFailure"), //$NON-NLS-1$
						SWT.ICON_ERROR,
						new String[] { WizardMessages
								.getString("NewDockerConnectionPage.ok") } //$NON-NLS-1$
						);
			}
			
			private void displayDialog(final String dialogTitle,
					final String dialogMessage, final int icon,
					final String[] buttonLabels) {
				Display.getDefault().syncExec(new Runnable() {

					@Override
					public void run() {
						new MessageDialog(Display.getDefault().getActiveShell(),
								dialogTitle, null, dialogMessage, icon,
								buttonLabels, 0).open();
					}
				});
			}

		};
	}

