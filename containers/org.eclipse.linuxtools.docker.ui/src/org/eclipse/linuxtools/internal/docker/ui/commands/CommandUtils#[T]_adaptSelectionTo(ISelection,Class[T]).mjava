	/**
	 * Returns the given {@link List} <strong>adapted</strong> to the given
	 * {@code targetClass}.
	 * 
	 * @param selection
	 *            the current selection
	 * @param targetClass
	 *            the target class in which the elements of the given
	 *            {@code selection} should be adapted
	 * @return Returns the given {@link List} adapted to the
	 *         {@code targetClass}.
	 */
	@SuppressWarnings("unchecked")
	private static <T> List<T> adaptSelectionTo(final ISelection selection,
			final Class<T> targetClass) {
		if (selection instanceof IStructuredSelection) {
			final IStructuredSelection structuredSelection = (IStructuredSelection) selection;
			return (List<T>) structuredSelection.toList().stream()
					.filter(selectedElement -> selectedElement instanceof IAdaptable
							&& ((IAdaptable) selectedElement)
									.getAdapter(targetClass) != null)
					.map(selectedElement -> ((IAdaptable) selectedElement)
							.getAdapter(targetClass))
					.collect(Collectors.toList());
		}
		return Collections.emptyList();
	}

