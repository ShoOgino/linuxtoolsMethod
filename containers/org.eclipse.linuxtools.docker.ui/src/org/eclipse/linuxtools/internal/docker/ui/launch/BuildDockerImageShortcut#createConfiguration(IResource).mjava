	/**
	 * Create a launch configuration based on a Dockerfile resource, and
	 * optionally save it to the underlying resource.
	 *
	 * @param dockerfile
	 *            a Dockerfile file to build
	 * @return a launch configuration generated for the Dockerfile build.
	 */
	protected ILaunchConfiguration createConfiguration(
			final IResource dockerfile) {
		try {
			final IDockerConnection[] connections = DockerConnectionManager
					.getInstance().getConnections();
			if (connections.length == 0) {
				Display.getDefault().asyncExec(new Runnable() {
					@Override
					public void run() {
						boolean confirm = MessageDialog.openQuestion(
								PlatformUI.getWorkbench()
										.getActiveWorkbenchWindow().getShell(),
								CommandMessages.getString(
										"BuildImageCommandHandler.no.connections.msg"), //$NON-NLS-1$
								CommandMessages.getString(
										"BuildImageCommandHandler.no.connections.desc")); //$NON-NLS-1$
						if (confirm) {
							NewDockerConnection newConnWizard = new NewDockerConnection();
							CommandUtils.openWizard(newConnWizard,
									PlatformUI.getWorkbench()
											.getActiveWorkbenchWindow()
											.getShell());
						}
					}
				});
				return null;
			} else {
				final ImageBuildDialog dialog = new ImageBuildDialog(
						getActiveWorkbenchShell());
				final int result = dialog.open();
				if (result == IDialogConstants.OK_ID) {
					return LaunchConfigurationUtils
							.createBuildImageLaunchConfiguration(
									dialog.getConnection(),
									dialog.getRepoName(), dockerfile);
				}
			}
		} catch (CoreException e) {
			Activator.log(e);
		}
		return null;
	}

