	/**
	 * Creates a Launch Configuration name from the given repoName or from the
	 * given resource's project if the repoName was <code>null</code>.
	 * 
	 * @param imageName the full image name
	 * @param resource the Dockerfile to use to build the image
	 * @return the {@link ILaunchConfiguration} name
	 */
	public static String createLaunchConfigurationName(final String imageName,
			final IResource resource) {
		if (imageName != null) {
			final String repository = BuildDockerImageUtils
					.getRepository(imageName);
			final String name = BuildDockerImageUtils.getName(imageName);
			final String tag = BuildDockerImageUtils.getTag(imageName);
			final StringBuilder configNameBuilder = new StringBuilder();
			// image name is the minimum requirement
			if (name != null) {
				if (repository != null) {
					configNameBuilder.append(repository).append('_'); // $NON-NLS-1$
				}
				if (name != null) {
					configNameBuilder.append(name);
				}
				if (tag != null) {
					configNameBuilder.append(" [").append(tag).append("]"); //$NON-NLS-1$ //$NON-NLS-2$
				} else {
					configNameBuilder.append(" [latest]"); //$NON-NLS-1$
				}
				return configNameBuilder.toString();
			}
		}
		return "Dockerfile [" //$NON-NLS-1$
				+ resource.getProject().getName() + "]"; //$NON-NLS-1$
	}

