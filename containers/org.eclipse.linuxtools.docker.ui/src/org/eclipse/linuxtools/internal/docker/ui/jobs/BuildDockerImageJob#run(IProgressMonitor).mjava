	@Override
	protected IStatus run(final IProgressMonitor progressMonitor) {
		try {
			if (numberOfBuildOperations == 0) {
				Activator.log(new Status(IStatus.WARNING, Activator.PLUGIN_ID,
						JobMessages.getString(SKIP_EMPTY_DOCKERFILE)));
			} else {
				this.console.clearConsole();
				this.console.activate();
				this.progressMonitor = progressMonitor;
				this.progressMonitor.beginTask(
						JobMessages.getString(BUILD_IMAGE_JOB_TITLE),
						numberOfBuildOperations + 1);
				// Give the Image a default name so it can be tagged later.
				// Otherwise, the Image will be treated as an intermediate Image
				// by the view filters and Tag Image action will be disabled.
				// Use the current time in milliseconds to make it unique.
				String name = "dockerfile:" //$NON-NLS-1$
						+ Long.toHexString(System.currentTimeMillis());
				connection.buildImage(path, name, this);
				connection.getImages(true);
			}
		} catch (DockerException | InterruptedException e) {
			Display.getDefault().syncExec(new Runnable() {
				@Override
				public void run() {
					MessageDialog
							.openError(Display.getCurrent().getActiveShell(),
									JobMessages.getString(
											BUILD_IMAGE_ERROR_MESSAGE),
							e.getMessage());
				}

			});
		}
		// make sure the progress monitor is 'done' even if the build failed or
		// timed out.
		this.progressMonitor.done();
		return Status.OK_STATUS;
	}

