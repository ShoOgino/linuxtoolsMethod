	public IDockerHostConfig getDockerHostConfig(List<String> unusedPorts) {
		final ImageRunSelectionModel selectionModel = this.imageRunSelectionPage
				.getModel();
		final ImageRunResourceVolumesVariablesModel resourcesModel = this.imageRunResourceVolumesPage
				.getModel();
		final ImageRunNetworkModel networkModel = this.imageRunNetworkPage
				.getModel();

		final DockerHostConfig.Builder hostConfigBuilder = new DockerHostConfig.Builder();

		if (selectionModel.isPublishAllPorts()) {
			hostConfigBuilder.publishAllPorts(true);
		} else {
			final Map<String, List<IDockerPortBinding>> portBindings = new HashMap<>();
			for (ExposedPortModel exposedPort : selectionModel.getExposedPorts()) {
				// only selected Ports in the CheckboxTableViewer are exposed.
				if (!selectionModel.getSelectedPorts().contains(exposedPort)) {
					StringBuilder b = new StringBuilder();
					b.append(exposedPort.getContainerPort());
					b.append("/");
					b.append(exposedPort.getPortType());
					b.append(":"); //$NON-NLS-1$
					if (exposedPort.getHostAddress() != null) {
						b.append(exposedPort.getHostAddress());
					}
					b.append(":"); //$NON-NLS-1$
					b.append(exposedPort.getHostPort());
					unusedPorts.add(b.toString());
					continue;
				}
				final DockerPortBinding portBinding = new DockerPortBinding(exposedPort.getHostAddress(),
						exposedPort.getHostPort());
				portBindings.put(
						exposedPort.getContainerPort()
								+ "/" + exposedPort.getPortType(), //$NON-NLS-1$
						Arrays.<IDockerPortBinding> asList(portBinding));
			}
			hostConfigBuilder.portBindings(portBindings);
		}
		// container links
		final List<String> links = new ArrayList<>();
		for (ContainerLinkModel link : selectionModel.getLinks()) {
			links.add(link.getContainerName() + ':' + link.getContainerAlias());
		}
		hostConfigBuilder.links(links);

		// data volumes
		final List<String> volumesFrom = new ArrayList<>();
		final List<String> binds = new ArrayList<>();
		for (DataVolumeModel dataVolume : resourcesModel.getDataVolumes()) {
			// only data volumes selected in the CheckBoxTableViewer are
			// included.
			if (!resourcesModel.getSelectedDataVolumes().contains(dataVolume)) {
				continue;
			}

			switch (dataVolume.getMountType()) {
			case HOST_FILE_SYSTEM:
				String bind = LaunchConfigurationUtils.convertToUnixPath(dataVolume.getHostPathMount()) + ':'
						+ dataVolume.getContainerPath() + ":Z"; //$NON-NLS-1$ //$NON-NLS-2$
				if (dataVolume.isReadOnly()) {
					bind += ",ro"; //$NON-NLS-1$
				}
				binds.add(bind);
				break;
			case CONTAINER:
				volumesFrom.add(dataVolume.getContainerMount());
				break;
			default:
				break;

			}
		}
		hostConfigBuilder.binds(binds);
		hostConfigBuilder.volumesFrom(volumesFrom);
		hostConfigBuilder.privileged(selectionModel.isPrivileged());
		// if user has asked for basic security, use a readonly rootfs,
		// make /tmp and /run use tmpfs, and drop all capabilities
		if (selectionModel.isBasicSecurity()) {
			hostConfigBuilder.readonlyRootfs(true);
			Map<String, String> tmpfsValues = new HashMap<>();
			tmpfsValues.put("/run", "rw,exec"); //$NON-NLS-1$ //$NON-NLS-2$
			tmpfsValues.put("/tmp", "rw,exec"); //$NON-NLS-1$ //$NON-NLS-2$
			hostConfigBuilder.tmpfs(tmpfsValues);
			List<String> capDropList = new ArrayList<>();
			capDropList.add("all"); //$NON-NLS-1$
			hostConfigBuilder.capDrop(capDropList);
		}
		if (selectionModel.isUnconfined()) {
			List<String> seccomp = new ArrayList<>();
			seccomp.add("seccomp:unconfined"); //$NON-NLS-1$
			hostConfigBuilder.securityOpt(seccomp);
		}
		String networkMode = networkModel.getNetworkModeString();
		// if network mode is not default, set it in host config
		if (networkMode != null
				&& !networkMode.equals(ImageRunNetworkModel.DEFAULT_MODE))
			hostConfigBuilder.networkMode(networkMode);
		// memory constraints (in bytes)
		if (resourcesModel.isEnableResourceLimitations()) {
			hostConfigBuilder.memory(resourcesModel.getMemoryLimit() * MB);
			hostConfigBuilder.cpuShares(resourcesModel.getCpuShareWeight());
		}
		return hostConfigBuilder.build();
	}

