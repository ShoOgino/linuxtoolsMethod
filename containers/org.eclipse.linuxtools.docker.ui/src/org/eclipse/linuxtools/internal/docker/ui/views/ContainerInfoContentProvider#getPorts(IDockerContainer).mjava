	/**
	 * @return the first {@link DockerPortMapping} if the given {@link IDockerContainer} has only one {@link DockerPortMapping}, an empty {@link String} if the given list is empty, otherwise the given list itself.  
	 * @param container the {@link IDockerContainer} of elements to analyze
	 */
	private Object getPorts(final IDockerContainer container) {
		if(container.ports().isEmpty()) {
			return "";
		} else if(container.ports().size() == 1) {
			return LabelProviderUtils.containerPortMappingToString(container.ports().get(0));
		} else {
			final List<String> ports = new ArrayList<>();
			for (IDockerPortMapping portMapping : container.ports()) {
				ports.add(LabelProviderUtils.containerPortMappingToString(portMapping));
			}
			return ports;
		}
	}

