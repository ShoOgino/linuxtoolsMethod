	@Override
	protected Control createDialogArea(final Composite parent) {
		final Composite container = new Composite(parent, SWT.NONE);
		final int COLUMNS = 3;
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.FILL).span(1, 1)
				.grab(true, true).applyTo(container);
		GridLayoutFactory.fillDefaults().margins(6, 6).numColumns(COLUMNS)
				.applyTo(container);
		final Label explanationLabel = new Label(container, SWT.NONE);
		explanationLabel.setText("Specify the Data Volume to mount:"); //$NON-NLS-1$
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.span(COLUMNS, 1).grab(true, false).applyTo(explanationLabel);

		// No mount
		final Button noMountButton = new Button(container, SWT.RADIO);
		noMountButton.setText("No external mount");
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.span(COLUMNS, 1).grab(true, false).applyTo(noMountButton);
		bindButton(noMountButton, MountType.NONE);
		// File System mount
		final Button fileSystemMountButton = new Button(container, SWT.RADIO);
		fileSystemMountButton.setText("Mount a host directory or host file");
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.span(COLUMNS, 1).grab(true, false)
				.applyTo(fileSystemMountButton);
		final Label hostPathLabel = new Label(container, SWT.NONE);
		hostPathLabel.setText("Path:"); //$NON-NLS-1$
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.indent(20, SWT.DEFAULT).grab(false, false)
				.applyTo(hostPathLabel);
		final Text hostPathText = new Text(container, SWT.BORDER);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(true, false).applyTo(hostPathText);
		final IObservableValue hostPathObservable = BeanProperties
				.value(DataVolumeModel.class, DataVolumeModel.HOST_PATH_MOUNT)
				.observe(model);
		dbc.bindValue(WidgetProperties.text(SWT.Modify).observe(hostPathText),
				hostPathObservable);

		final Button hostPathBrowseButton = new Button(container, SWT.NONE);
		hostPathBrowseButton.setText("Browse...");
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(false, false).applyTo(hostPathBrowseButton);
		hostPathBrowseButton.addSelectionListener(onHostPathBrowse());
		// optional read-only access
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(false, false).applyTo(new Label(container, SWT.NONE));
		final Button readOnlyButton = new Button(container, SWT.CHECK);
		readOnlyButton.setText("Read-only access"); //$NON-NLS-1$
		readOnlyButton.setToolTipText(
				"Specify if the mounted host directory or path is read-only"); //$NON-NLS-1$
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.span(COLUMNS - 1, 1).grab(true, false).applyTo(readOnlyButton);
		final ISWTObservableValue readOnlyButtonObservable = WidgetProperties
				.selection().observe(readOnlyButton);
		dbc.bindValue(readOnlyButtonObservable,
				BeanProperties
						.value(DataVolumeModel.class,
								DataVolumeModel.READ_ONLY_VOLUME)
						.observe(model));
		bindButton(fileSystemMountButton, MountType.HOST_FILE_SYSTEM,
				hostPathText, hostPathBrowseButton, readOnlyButton);

		// Container mount
		final Button containerMountButton = new Button(container, SWT.RADIO);
		containerMountButton.setText("Mount a data volume container");
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.span(COLUMNS, 1).grab(true, false)
				.applyTo(containerMountButton);
		final Label containerSelectionLabel = new Label(container, SWT.NONE);
		containerSelectionLabel.setText("Container:"); //$NON-NLS-1$
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.indent(20, SWT.DEFAULT).applyTo(containerSelectionLabel);
		final Combo containerSelectionCombo = new Combo(container, SWT.BORDER);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(true, false).span(1, 1).applyTo(containerSelectionCombo);
		new ControlDecoration(containerSelectionCombo, SWT.TOP | SWT.LEFT);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(false, false).applyTo(new Label(container, SWT.NONE));
		bindButton(containerMountButton, MountType.CONTAINER,
				containerSelectionCombo);
		final ComboViewer containerSelectionComboViewer = new ComboViewer(
				containerSelectionCombo);
		containerSelectionComboViewer
				.setContentProvider(new ArrayContentProvider());
		containerSelectionComboViewer.setInput(this.containerNames);
		final IObservableValue selectedContainerObservable = BeanProperties
				.value(DataVolumeModel.class, DataVolumeModel.CONTAINER_MOUNT)
				.observe(model);
		dbc.bindValue(
				WidgetProperties.selection().observe(containerSelectionCombo),
				selectedContainerObservable);
		new ContentProposalAdapter(containerSelectionCombo,
				new ComboContentAdapter() {
					@Override
					public void insertControlContents(Control control,
							String text, int cursorPosition) {
						final Combo combo = (Combo) control;
						final Point selection = combo.getSelection();
						combo.setText(text);
						selection.x = text.length();
						selection.y = selection.x;
						combo.setSelection(selection);
					}
				}, getContainerNameContentProposalProvider(
						containerSelectionCombo),
				null, null);

		// error message
		final Composite errorContainer = new Composite(container, SWT.NONE);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.FILL)
				.span(COLUMNS, 1).grab(true, true).applyTo(errorContainer);
		GridLayoutFactory.fillDefaults().margins(6, 6).numColumns(2)
				.applyTo(errorContainer);

		final Label errorMessageIcon = new Label(errorContainer, SWT.NONE);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.hint(20, SWT.DEFAULT)
				.applyTo(errorMessageIcon);
		final Label errorMessageLabel = new Label(errorContainer, SWT.NONE);
		GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER)
				.grab(true, false)
				.applyTo(errorMessageLabel);
		setupValidationSupport(errorMessageIcon, errorMessageLabel);
		return container;
	}

