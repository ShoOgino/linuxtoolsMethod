	@Override
	public StyledString getStyledText(Object element) {
		// when the text to display is in the properties view title bar, the given element
		// is the TreeSelection from the contributing view (the Docker Explorer View)
		if(element instanceof IStructuredSelection) {
			return getStyledText(((IStructuredSelection)element).getFirstElement());
		}
		if(element instanceof IDockerConnection) {
			final IDockerConnection connection = (IDockerConnection) element;
			final String connectionName = (connection.getName() != null
					&& !connection.getName().isEmpty())
					? connection.getName()
					: DVMessages.getString(UNNAMED_CONNECTION);
			final StringBuilder messageBuilder = new StringBuilder();
			messageBuilder.append(connectionName);
			if (connection.getUri() != null && !connection.getUri().isEmpty()) {
				messageBuilder.append(" (").append(connection.getUri()) //$NON-NLS-1$
						.append(")"); //$NON-NLS-1$
			}
			final String message = messageBuilder.toString();
			final StyledString styledString = new StyledString(message);
			styledString.setStyle(connectionName.length(), message.length() - connectionName.length(), StyledString.QUALIFIER_STYLER);
			return styledString;
		} else if(element instanceof DockerImagesCategory) {
			return new StyledString(
					DVMessages.getString("DockerImagesCategory.label")); //$NON-NLS-1$
		} else if(element instanceof DockerContainersCategory) {
			return new StyledString(
					DVMessages.getString("DockerContainersCategory.label")); //$NON-NLS-1$
		} else if (element instanceof IDockerContainer) {
			final IDockerContainer dockerContainer = (IDockerContainer) element;
			final String containerName = dockerContainer.name();
			final String image = dockerContainer.image();
			final String message = containerName + " (" + image + ")";
			final StyledString styledString = new StyledString(message);
			styledString.setStyle(containerName.length(),
					message.length() - containerName.length(),
					StyledString.QUALIFIER_STYLER);
			return styledString;
		} else if (element instanceof IDockerImage) {
			return LabelProviderUtils.getStyleString((IDockerImage) element);
		} else if (element instanceof DockerContainerPortMappingsCategory) {
			return new StyledString(DVMessages
					.getString("DockerContainerPortMappingsCategory.label")); //$NON-NLS-1$
		} else if (element instanceof IDockerPortMapping) {
			final IDockerPortMapping mapping = (IDockerPortMapping) element;
			final String hostMapping = mapping.getIp() + ":"
					+ mapping.getPublicPort() + " -> ";
			final String containerMapping = Integer
					.toString(mapping.getPrivatePort());
			final String mappingType = " (" + mapping.getType() + ")";
			final StyledString styledString = new StyledString(
					hostMapping + containerMapping + mappingType);
			styledString.setStyle(
					hostMapping.length() + containerMapping.length(),
					mappingType.length(), StyledString.QUALIFIER_STYLER);
			return styledString;
		} else if (element instanceof DockerContainerVolumesCategory) {
			return new StyledString(DVMessages
					.getString("DockerContainerVolumesCategory.label")); //$NON-NLS-1$
		} else if (element instanceof DockerContainerVolume) {
			final DockerContainerVolume containerVolume = (DockerContainerVolume) element;
			final String hostPath = containerVolume.getHostPath();
			final StyledString styledString = new StyledString();
			if (containerVolume.getHostPath() != null
					&& containerVolume.getContainerPath() != null) {
				styledString.append(hostPath).append(" -> ")
						.append(containerVolume.getContainerPath());
			} else if (containerVolume.getHostPath() == null
					&& containerVolume.getContainerPath() != null) {
				styledString.append(containerVolume.getContainerPath());
			}
			if (containerVolume.getFlags() != null) {
				final int offset = styledString.length();
				styledString.append(" (" + containerVolume.getFlags() + ")");
				styledString.setStyle(offset, styledString.length() - offset,
						StyledString.QUALIFIER_STYLER);
			}
			return styledString;
		} else if (element instanceof DockerContainerLinksCategory) {
			return new StyledString(
					DVMessages.getString("DockerContainerLinksCategory.label")); //$NON-NLS-1$
		} else if (element instanceof DockerContainerLink) {
			final DockerContainerLink containerLink = (DockerContainerLink) element;
			final String containerName = containerLink.getContainerName();
			final String containerAlias = " ("
					+ containerLink.getContainerAlias() + ")";
			final StyledString styledString = new StyledString(
					containerName + containerAlias);
			styledString.setStyle(containerName.length(),
					containerAlias.length(), StyledString.QUALIFIER_STYLER);
			return styledString;
		} else if (element instanceof String) {
			return new StyledString((String) element);
		}

		else if (element instanceof LoadingStub) {
			return new StyledString(DVMessages.getString("Loading.label"));
		}
		return null;
	}

