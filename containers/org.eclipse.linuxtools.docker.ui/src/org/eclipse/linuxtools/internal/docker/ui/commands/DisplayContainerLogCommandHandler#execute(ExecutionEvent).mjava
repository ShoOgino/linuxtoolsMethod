	@Override
	public Object execute(final ExecutionEvent event) throws ExecutionException {
		final IWorkbenchPart activePart = HandlerUtil.getActivePart(event);
		List<IDockerContainer> selectedContainers = CommandUtils
				.getSelectedContainers(activePart);
		if (activePart instanceof DockerContainersView) {
			connection = ((DockerContainersView) activePart).getConnection();
		}
		if (selectedContainers.size() != 1 || connection == null)
			return null;
		container = selectedContainers.get(0);
		final String id = container.id();
		final String name = container.name();
		try {
			final RunConsole rc = RunConsole
					.findConsole(id);
			if (!rc.isAttached()) {
				rc.attachToConsole(connection);
			}
			if (rc != null) {
				Display.getDefault().syncExec(new Runnable() {

					@Override
					public void run() {
						rc.setTitle(DVMessages.getFormattedString(
								CONTAINER_LOG_TITLE, name));
					}

				});
				OutputStream stream = rc
						.getOutputStream();
				// Only bother to ask for a log if
				// one isn't currently active
				EnumDockerLoggingStatus status = ((DockerConnection) connection)
						.loggingStatus(id);
				if (status != EnumDockerLoggingStatus.LOGGING_ACTIVE
						&& !((DockerConnection) connection)
								.getContainerInfo(id).config().tty()) {
					rc.clearConsole();
					((DockerConnection) connection).logContainer(id, stream);
				}
				rc.showConsole();
			}
		} catch (DockerException
				| InterruptedException e) {
			Display.getDefault().syncExec(
					new Runnable() {

						@Override
						public void run() {
							MessageDialog
							.openError(
									Display.getCurrent()
									.getActiveShell(),
									DVMessages
									.getFormattedString(
											ERROR_LOGGING_CONTAINER,
											id),
											e.getMessage());
				}
			});
		}
		return null;
	}

