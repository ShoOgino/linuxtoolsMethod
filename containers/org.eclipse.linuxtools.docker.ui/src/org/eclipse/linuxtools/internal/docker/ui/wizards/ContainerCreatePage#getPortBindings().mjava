	public Map<String, List<IDockerPortBinding>> getPortBindings() {
		String s = exposedPortsText.getText().trim();
		if (s.length() == 0)
			return null;
		Map<String, List<IDockerPortBinding>> portBindingsMap = new HashMap<>();
		String[] exposedPorts = s.split("\\s+");
		for (String exposedPort : exposedPorts) {
			exposedPort = exposedPort.trim();
			if (exposedPort.length() > 0) {
				String[] segments = exposedPort.split(":"); //$NON-NLS-1$
				if (segments.length == 1) { // containerPort
					portBindingsMap.put(segments[0], Arrays
							.asList((IDockerPortBinding) new DockerPortBinding(
									"", ""))); //$NON-NLS-1$ //$NON-NLS-2$
				} else if (segments.length == 2) { // hostPort:containerPort
					portBindingsMap.put(segments[1], Arrays
							.asList((IDockerPortBinding) new DockerPortBinding(
									"", segments[0]))); //$NON-NLS-1$ //$NON-NLS-2$
				} else if (segments.length == 3) { // either
													// ip:hostPort:containerPort
													// or ip::containerPort
					if (segments[1].isEmpty()) {
						portBindingsMap
								.put(segments[2],
										Arrays.asList((IDockerPortBinding) new DockerPortBinding(
												"", segments[0]))); //$NON-NLS-1$ //$NON-NLS-2$
					} else {
						portBindingsMap
								.put(segments[2],
										Arrays.asList((IDockerPortBinding) new DockerPortBinding(
												segments[0], segments[1]))); //$NON-NLS-1$ //$NON-NLS-2$
					}
				}
			}
		}
		return portBindingsMap;
	}

