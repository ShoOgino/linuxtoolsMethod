	private TreeViewer createTableTreeViewer(final Composite container) {
		final TreeViewer treeViewer = new TreeViewer(container,  SWT.V_SCROLL | SWT.H_SCROLL);
		final Tree tree = treeViewer.getTree();
		tree.setLinesVisible(true);
		tree.setHeaderVisible(true);
		final TreeViewerColumn propertyColumn = new TreeViewerColumn(treeViewer, SWT.BORDER);
		propertyColumn.getColumn().setWidth(150);
		propertyColumn.getColumn().setText("Property");
		propertyColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				if(element instanceof Object[]) {
					final Object property = ((Object[])element)[0];
					return property.toString();
				}
				return super.getText(element);
			}
		});
		final TreeViewerColumn valueColumn = new TreeViewerColumn(treeViewer, SWT.BORDER);
		valueColumn.getColumn().setWidth(500);
		valueColumn.getColumn().setText("Value");
		valueColumn.setLabelProvider(new ColumnLabelProvider() {
			@Override
			public String getText(final Object element) {
				if(element instanceof Object[]) {
					final Object value = ((Object[])element)[1];
					// do not show values of a collection. There will be nested elements in the treeview for them.
					if(value instanceof Collection) {
						return "";
					} else if(value instanceof String || value instanceof Boolean || value instanceof Integer) {
						return value.toString();
					}
					return "";
				}
				return super.getText(element);
			}
		});
		return treeViewer;
	}

