	public IDockerHostConfig getDockerHostConfig(ILaunchConfiguration config)
			throws CoreException {

		final DockerHostConfig.Builder hostConfigBuilder = new DockerHostConfig.Builder();
		if (config.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.PUBLISH_ALL_PORTS,
				false)) {
			hostConfigBuilder.publishAllPorts(true);
		} else {
			final Map<String, List<IDockerPortBinding>> portBindings = new HashMap<>();
			Map<String, String> ports = config.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.PUBLISHED_PORTS,
					new HashMap<String, String>());
			for (Map.Entry<String, String> entry : ports.entrySet()) {
				String key = entry.getKey();
				String entryValue = entry.getValue();

				String[] portPairs = entryValue.split("\\s*,\\s*"); //$NON-NLS-1$

				for (int i = 0; i < portPairs.length; i += 2) {
					DockerPortBinding portBinding = new DockerPortBinding(
							portPairs[i], portPairs[i + 1]);
					portBindings.put(key,
							Arrays.<IDockerPortBinding> asList(portBinding));
				}
			}
			hostConfigBuilder.portBindings(portBindings);
		}
		// container links
		final List<String> links = config.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.LINKS,
				new ArrayList<String>());
		hostConfigBuilder.links(links);

		// data volumes
		
		List<String> volumesFromList = config.getAttribute(IRunDockerImageLaunchConfigurationConstants.VOLUMES_FROM, new ArrayList<String>());
		hostConfigBuilder.volumesFrom(volumesFromList);
		
		final List<String> binds = new ArrayList<>();
		
		List<String> bindsList = config.getAttribute(IRunDockerImageLaunchConfigurationConstants.BINDS, new ArrayList<String>());

		for (String bindsListEntry : bindsList) {
			String[] bindsEntryParms = bindsListEntry.split(":"); //$NON-NLS-1$
			final StringBuilder bind = new StringBuilder();
			bind.append(LaunchConfigurationUtils
					.convertToUnixPath(bindsEntryParms[0])).append(':')
					.append(bindsEntryParms[1]).append(":Z");
			if (bindsEntryParms[2].equals("true")) {
				bind.append(",ro"); //$NON-NLS-1$
			}
			binds.add(bind.toString());
					
		}
		hostConfigBuilder.binds(binds);
		
		boolean privileged = config.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.PRIVILEGED,
				false);
		hostConfigBuilder.privileged(privileged);

		return hostConfigBuilder.build();
	}

