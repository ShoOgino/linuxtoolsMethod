	public IDockerHostConfig getDockerHostConfig(ILaunchConfiguration config)
			throws CoreException {
		final DockerHostConfig.Builder hostConfigBuilder = new DockerHostConfig.Builder();
		if (config.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.PUBLISH_ALL_PORTS,
				false)) {
			hostConfigBuilder.publishAllPorts(true);
		} else {
			final List<String> serializedBindings = config.getAttribute(
					IRunDockerImageLaunchConfigurationConstants.PUBLISHED_PORTS,
					new ArrayList<String>());
			final Map<String, List<IDockerPortBinding>> portBindings = LaunchConfigurationUtils
					.deserializePortBindings(serializedBindings);
			hostConfigBuilder.portBindings(portBindings);
		}
		
		// container links
		final List<String> links = config.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.LINKS,
				new ArrayList<String>());
		hostConfigBuilder.links(links);

		// data volumes
		final List<String> volumesFromList = config.getAttribute(IRunDockerImageLaunchConfigurationConstants.VOLUMES_FROM, new ArrayList<String>());
		hostConfigBuilder.volumesFrom(volumesFromList);
		final List<String> binds = new ArrayList<>();
		final List<String> bindsList = config.getAttribute(IRunDockerImageLaunchConfigurationConstants.BINDS, new ArrayList<String>());
		for (String bindsListEntry : bindsList) {
			String[] bindsEntryParms = bindsListEntry.split(":"); //$NON-NLS-1$
			final StringBuilder bind = new StringBuilder();
			bind.append(LaunchConfigurationUtils
					.convertToUnixPath(bindsEntryParms[0])).append(':')
					.append(bindsEntryParms[1]).append(":Z");
			if (bindsEntryParms[2].equals("true")) {
				bind.append(",ro"); //$NON-NLS-1$
			}
			binds.add(bind.toString());
					
		}
		hostConfigBuilder.binds(binds);
		
		// run in privileged mode
		final boolean privileged = config.getAttribute(
				IRunDockerImageLaunchConfigurationConstants.PRIVILEGED,
				false);
		hostConfigBuilder.privileged(privileged);

		return hostConfigBuilder.build();
	}

