	@Override
	public Object execute(ExecutionEvent event) {
		final IWorkbenchPart activePart = HandlerUtil.getActivePart(event);
		if(activePart instanceof CommonNavigator) {
			final CommonViewer viewer = ((CommonNavigator)activePart).getCommonViewer();
			final ITreeSelection selection = viewer.getStructuredSelection();
			for (TreePath treePath : selection.getPaths()) {
				final IDockerConnection conn = (IDockerConnection) treePath
						.getLastSegment();
				if (!conn.isOpen()) {
					final Job openConnectionJob = new Job(
							CommandMessages.getFormattedString(
									"command.enableconnection", //$NON-NLS-1$
									conn.getUri())) {

						@Override
						protected IStatus run(IProgressMonitor monitor) {
							try {
								conn.open(true);
								Display.getDefault()
										.asyncExec(() -> viewer.refresh(conn));
							} catch (DockerException e) {
								Activator
								.logErrorMessage(
												CommandMessages.getFormattedString("command.enableconnection.failure", //$NON-NLS-1$
														conn.getUri()), 
										e);
								return Status.CANCEL_STATUS;
							}
							return Status.OK_STATUS;
						}
					};
					openConnectionJob.schedule();
				}
			}
		}
		return null;
	}

