	@Override
	public void processMessage(IDockerProgressMessage message)
			throws DockerException {
		if (message.error() != null) {
			stopAllJobs();
			throw new DockerImagePullFailedException(image, message.error());
		}
		String id = message.id();
		if (id != null) {
			ProgressJob p = progressJobs.get(id);
			if (p == null) {
				String status = message.status();
				if (status.contains(DVMessages.getString(IMAGE_PULLING))) {
					// do nothing
				} else if (status
						.equals(DVMessages.getString(IMAGE_DOWNLOAD_COMPLETE))
						|| status.contains(DVMessages
								.getString(IMAGE_DOWNLOADING_ALREADY_EXISTS))
						|| status.contains(DVMessages
								.getString(IMAGE_DOWNLOADING_VERIFIED))
						|| status.equals(
								DVMessages.getString(IMAGE_PULL_COMPLETE))) {
					// an image is fully loaded, update the image list
					connection.getImages(true);
				} else if (status
						.startsWith(DVMessages.getString(IMAGE_DOWNLOADING))) {
					// we have a new download in progress, track it
					ProgressJob newJob = new ProgressJob(
							DVMessages.getFormattedString(
									IMAGE_DOWNLOADING_JOBNAME, image),
							DVMessages.getFormattedString(
									IMAGE_DOWNLOADING_IMAGE, id));
					// job.setUser(false) will show all pull job (one per image
					// layer) in the progress
					// view but not in multiple dialog
					newJob.setUser(false);
					newJob.setPriority(Job.LONG);
					newJob.schedule();
					progressJobs.put(id, newJob);
				}

			} else {
				String status = message.status();
				if (status.equals(DVMessages.getString(IMAGE_DOWNLOAD_COMPLETE))
						|| status.contains(DVMessages
								.getString(IMAGE_DOWNLOADING_ALREADY_EXISTS))
						|| status.contains(DVMessages
								.getString(IMAGE_DOWNLOADING_VERIFIED))) {
					p.setPercentageDone(100);
					connection.getImages(true);
				} else if (status
						.startsWith(DVMessages.getString(IMAGE_DOWNLOADING))) {
					IDockerProgressDetail detail = message.progressDetail();
					if (detail != null) {
						if (detail.current() > 0) {
							long percentage = (detail.current() * 100)
									/ detail.total();
							p.setPercentageDone((int) percentage);
						}
					}
				}
			}
		}
	}

