	/**
	 * Update the selections of the tree elements in items to reflect the new
	 * selections provided.
	 * 
	 * @param items
	 *            Map with keys of Object (the tree element) and values of List
	 *            (the selected list elements).
	 */
	@SuppressWarnings("unchecked")
	public void updateSelections(final Map items) {

		// Potentially long operation - show a busy cursor
		BusyIndicator.showWhile(treeViewer.getControl().getDisplay(), () -> {
			// Update the store before the hierarchy to prevent updating parents
			// before all of the children are done
			for (Entry<?, List> entry : ((Map<Object, List>) items)
					.entrySet()) {
				Object key1 = entry.getKey();
				// Replace the items in the checked state store with those from
				// the supplied items
				List selections = entry.getValue();
				if (selections.size() == 0) {
					// If it is empty remove it from the list
					checkedStateStore.remove(key1);
				} else {
					checkedStateStore.put(key1, selections);
					// proceed up the tree element hierarchy
					Object parent = treeContentProvider.getParent(key1);
					if (parent != null) {
						addToHierarchyToCheckedStore(parent);
					}
				}
			}

			// Now update hierarchies
			for (Entry<Object, List> entry : ((Map<Object, List>) items)
					.entrySet()) {
				Object key2 = entry.getKey();
				updateHierarchy(key2);
				if (currentTreeSelection != null
						&& currentTreeSelection.equals(key2)) {
					listViewer.setAllChecked(false);
					listViewer.setCheckedElements(entry.getValue().toArray());
				}
			}
		});

	}

