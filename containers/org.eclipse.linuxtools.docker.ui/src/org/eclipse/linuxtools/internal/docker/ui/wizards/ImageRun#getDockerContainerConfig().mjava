	@SuppressWarnings("unchecked")
	public DockerContainerConfig getDockerContainerConfig() {
		final ImageRunSelectionModel selectionModel = this.imageRunSelectionPage
				.getModel();
		final ImageRunResourceVolumesVariablesModel resourcesModel = this.imageRunResourceVolumesPage
				.getModel();

		final Builder config = new DockerContainerConfig.Builder()
				.cmd(getCmdList(selectionModel.getCommand()))
				.entryPoint(selectionModel.getEntrypoint())
				.image(selectionModel.getSelectedImageName())
				.tty(selectionModel.isAllocatePseudoTTY())
				.openStdin(selectionModel.isInteractiveMode());
		if (resourcesModel.isEnableResourceLimitations()) {
			config.memory(resourcesModel.getMemory());
			config.cpuShares((long) resourcesModel.getCpuShareWeight());
		}
		// environment variables
		final List<String> environmentVariables = new ArrayList<>();
		for (Iterator<EnvironmentVariableModel> iterator = resourcesModel
				.getEnvironmentVariables().iterator(); iterator.hasNext();) {
			final EnvironmentVariableModel var = iterator.next();
			environmentVariables.add(var.getName() + "=" + var.getValue());
		}
		config.env(environmentVariables);

		// container data volumes
		final Set<String> volumes = new HashSet<>();
		for (Iterator<DataVolumeModel> iterator = resourcesModel
				.getDataVolumes().iterator(); iterator.hasNext();) {
			final DataVolumeModel dataVolume = iterator.next();
			// only data volumes selected in the CheckBoxTableViewer are
			// included.
			if (!resourcesModel.getSelectedDataVolumes().contains(dataVolume)) {
				continue;
			}
			switch (dataVolume.getMountType()) {
			case CONTAINER:
				// different way to configure 'volumes-from'
				break;
			case HOST_FILE_SYSTEM:
				if (dataVolume.isReadOnly()) {
					volumes.add(dataVolume.getContainerPath() + ':'
							+ dataVolume.getHostPathMount() + ':' + "ro");
				} else {
					volumes.add(dataVolume.getContainerPath() + ':'
							+ dataVolume.getHostPathMount());
				}
				break;
			case NONE:
				volumes.add(dataVolume.getContainerPath());
				break;
			default:
				break;

			}
		}
		config.volumes(volumes);

		return config.build();
	}

