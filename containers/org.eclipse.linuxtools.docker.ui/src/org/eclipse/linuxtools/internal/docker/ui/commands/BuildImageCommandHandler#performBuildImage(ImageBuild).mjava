	private void performBuildImage(final ImageBuild wizard) {
		final Job buildImageJob = new Job(
				DVMessages.getString(BUILD_IMAGE_JOB_TITLE)) {

			@Override
			protected IStatus run(final IProgressMonitor monitor) {
				final String id = wizard.getImageName();
				final int lines = wizard.getNumberOfLines();
				final IPath path = wizard.getDirectory();

				monitor.beginTask(DVMessages.getString(BUILD_IMAGE_JOB_TITLE),
						2);
				monitor.subTask(
						WizardMessages.getString(IMAGE_DIRECTORY_VALIDATE));
				try {
					Files.walkFileTree(Paths.get(path.toString()),
							new FileVisitor<java.nio.file.Path>() {
								@Override
								public FileVisitResult preVisitDirectory(
										java.nio.file.Path dir,
										BasicFileAttributes attrs) {
									return FileVisitResult.CONTINUE;
								}
								@Override
								public FileVisitResult visitFile(
										java.nio.file.Path file,
										BasicFileAttributes attrs) {
									return FileVisitResult.CONTINUE;
								}
								@Override
								public FileVisitResult visitFileFailed(
										java.nio.file.Path file, IOException exc)
												throws IOException {
									throw exc;
								}
								@Override
								public FileVisitResult postVisitDirectory(
										java.nio.file.Path dir, IOException exc) {
									return FileVisitResult.CONTINUE;
								}
							});
				} catch (final IOException e) {
					Display.getDefault().syncExec(new Runnable() {
						@Override
						public void run() {
							MessageDialog.openError(
									Display.getCurrent().getActiveShell(),
											WizardMessages.getString(
													"ErrorInvalidDirectory.msg"),
									WizardMessages.getFormattedString(
											"ErrorInvalidPermissions.msg",
											path.toString()));
						}
					});
					return Status.OK_STATUS;
				}
				monitor.worked(1);

				// build the image and let the progress
				// handler refresh the images when done
				try {
					monitor.subTask(
							DVMessages.getString(BUILD_IMAGE_JOB_TITLE));
					((DockerConnection) connection)
							.buildImage(path, id,
									new ImageBuildProgressHandler(connection,
											id, lines));
					monitor.worked(1);
				} catch (final DockerException e) {
					Display.getDefault().syncExec(new Runnable() {

						@Override
						public void run() {
							MessageDialog.openError(Display.getCurrent()
									.getActiveShell(), DVMessages
									.getFormattedString(ERROR_BUILDING_IMAGE,
											id), e.getMessage());

						}

					});
					// for now
				} catch (InterruptedException e) {
					// do nothing
				} finally {
					monitor.done();
				}
				return Status.OK_STATUS;
			}

		};

		buildImageJob.schedule();

	}

