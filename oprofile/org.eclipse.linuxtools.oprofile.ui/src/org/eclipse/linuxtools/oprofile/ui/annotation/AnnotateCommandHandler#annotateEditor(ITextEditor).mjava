	private void annotateEditor(ITextEditor editor) {
		IResource editorResource = ((IResource)editor.getEditorInput().getAdapter(IResource.class));
		String editorFilePath = null;

		try {
			editorFilePath = editorResource.getLocation().toFile().getCanonicalPath();
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		if (currentSession != null && fileHasAnnotations(editorFilePath)) {
	    	IAnnotationModel model = editor.getDocumentProvider().getAnnotationModel(editor.getEditorInput());
	    	IDocument doc = editor.getDocumentProvider().getDocument(editor.getEditorInput());

			if (sessionSymbols != null && sessionSymbols.size() > 0) {
				Iterator<UiModelSymbol> it = sessionSymbols.iterator();
				
				while (it.hasNext()) {
					UiModelSymbol symbol = it.next();
					if (symbol.hasChildren()) {
						try {
							//hack to ensure proper path comparison
							File symbolFileName = new File(symbol.getFileName());
							if (symbolFileName.getCanonicalPath().equals(editorFilePath)) {
								IUiModelElement[] samples = symbol.getChildren();
								
								for (IUiModelElement sample : samples) {
									UiModelSample spl = (UiModelSample)sample;
									Annotation a = new Annotation(true);
									a.setType(getAnnotationType(spl.getCountPercentage()));
									a.setText(OprofileUiPlugin
											.getPercentageString(spl.getCountPercentage())
											+ " " + OprofileUiMessages.getString("annotation.text.from") 		//$NON-NLS-1$ //$NON-NLS-2$
											+ symbol.getParent().getParent().getParent().toString()
											+ " " + OprofileUiMessages.getString("annotation.text.in") 		//$NON-NLS-1$ //$NON-NLS-2$
											+ symbol.getParent().getParent().toString());
									
									IRegion region = null;
									
									try {
										region = doc.getLineInformation(spl.getLine() - 1);
									} catch (BadLocationException e) {
										e.printStackTrace();
										continue;
									}
									
									annotations.add(a);
									model.addAnnotation(a, new Position(region.getOffset(), region.getLength()));
								}
							}
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
	}

