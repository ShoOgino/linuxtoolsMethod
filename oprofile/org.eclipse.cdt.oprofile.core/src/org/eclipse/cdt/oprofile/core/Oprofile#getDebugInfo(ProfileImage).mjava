	/**
	 * Collects the debug information for the given sample file.
	 * There's a lot of searching going on, and it probably isn't even really needed,
	 * since all the samples and debug-info from opxml are ordered. Nonetheless,
	 * speed seems very good even with a binary search, so what the heck.
	 * 
	 * This function will set the debuginfo objects for every Sample in the ProfileImage.
	 * @param image the sample file
	 */
	public static void getDebugInfo(ProfileImage image) {
		Sample[] samples = image.getSamples(null);
		
		// Sort samples
		Arrays.sort(samples, new Comparator() {
			public int compare(Object o1, Object o2) {
				Sample a = (Sample) o1;
				Sample b = (Sample) o2;
				return a.getAddress().compareTo(b.getAddress());
			}			
		});
		
		// Run opxml and get the list of all the debug info
		ArrayList infoList = new ArrayList();
		try {
			IRunnableWithProgress opxml = OprofileCorePlugin.getDefault().getOpxmlProvider().debugInfo(image, infoList);
			opxml.run(null);
		} catch (InvocationTargetException e) {
		} catch (InterruptedException e) {
		} catch (OpxmlException e) {
			_showErrorDialog("opxmlProvider", e); //$NON-NLS-1$
		}
				
		// Loop through all the debug infos, setting the debug info for each
		// corresponding Sample.
		for (Iterator i = infoList.listIterator(); i.hasNext();) {
			DebugInfo info = (DebugInfo) i.next();
			int index =
				Arrays.binarySearch(samples, info.address, new Comparator() {
				public int compare(Object o1, Object o2) {
					String addr1 = null;
					String addr2 = null;
					if (o1 instanceof Sample) {
						addr1 = ((Sample) o1).getAddress();
						addr2 = (String) o2;
					} else {
						addr1 = (String) o1;
						addr2 = ((Sample) o2).getAddress();
					}
					return addr1.compareTo(addr2);
				}
			});

			if (index >= 0) {
				samples[index].setDebugInfo(info);
			}
		}
	}

