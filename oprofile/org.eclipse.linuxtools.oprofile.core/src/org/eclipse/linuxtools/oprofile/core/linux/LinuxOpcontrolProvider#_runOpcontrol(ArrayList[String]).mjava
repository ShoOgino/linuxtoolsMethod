	// Will add opcontrol program to beginning of args
	// args: list of opcontrol arguments (not including opcontrol program itself)
	/**
	 * @return true if any output was produced on the error stream. Unfortunately
	 * this appears to currently be the only way we can tell if user correctly
	 * entered the password
	 */
	private boolean _runOpcontrol(ArrayList<String> args) throws OpcontrolException {
		args.add(0, OPCONTROL_PROGRAM);
		// Verbosity hack. If --start or --start-daemon, add verbosity, if set
		String cmd = (String) args.get(1);
		if (_verbosity.length() > 0 && (cmd.equals (_OPD_START_COLLECTION) || cmd.equals(_OPD_START_DAEMON))) {
			args.add(_verbosity);
		}
		
		String[] cmdArray = new String[args.size()];
		args.toArray(cmdArray);
		
		// Print what is passed on to opcontrol
		if (OprofileCorePlugin.isDebugMode()) {
			printOpcontrolCmd(cmdArray);
		}
		
		Process p = null;
		try {
			p = Runtime.getRuntime().exec(cmdArray);
		} catch (IOException ioe) {			
			throw new OpcontrolException(OprofileCorePlugin.createErrorStatus("opcontrolRun", ioe)); //$NON-NLS-1$
		}
		
		if (p != null) {
			BufferedReader errout = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			BufferedReader stdout = new BufferedReader(new InputStreamReader(p.getInputStream()));
			String errOutput = ""; //$NON-NLS-1$
			String output = "", s; //$NON-NLS-1$
			try {
				while ((s = errout.readLine()) != null) {
					errOutput += s + "\n"; //$NON-NLS-1$
				}
				// Unfortunately, when piped through consolehelper stderr output
				// is redirected to stdout. Need to read stdout and do some
				// string matching in order to give some better advice as to how to
				// alleviate the nmi_watchdog problem. See RH BZ #694631
				while ((s = stdout.readLine()) != null) {
					output += s + "\n"; //$NON-NLS-1$
				}
				stdout.close();
				errout.close();

				int ret = p.waitFor();
				if (ret != 0) {
					// give some hints which may be helpful for discovering the real
					// reason of weird problems.
					boolean extraInfo = false;

					if (!errOutput.trim().equals("")) { //$NON-NLS-1$
						extraInfo = true;
						OprofileCorePlugin
								.log(Status.ERROR,
										NLS.bind(
												OprofileProperties
														.getString("process.log.stderr"), "opcontrol", errOutput)); //$NON-NLS-1$ //$NON-NLS-2$
					}
					if (!output.trim().equals("")) { //$NON-NLS-1$
						extraInfo = true;
						OprofileCorePlugin
								.log(Status.ERROR, // log as error, since stderr
												   // output might be masked as
												   // stdout
										NLS.bind(
												OprofileProperties
														.getString("process.log.stdout"), "opcontrol", output)); //$NON-NLS-1$ //$NON-NLS-2$
					}

					// Red Hat BZ #694631: NMI Watchdog problem.
					// Give better advice as to what the problem might be.
					if (output.contains("nmi_watchdog") && output.startsWith("Error:")) { //$NON-NLS-1$ $NON-NLS-2$
						throw new OpcontrolException(
								OprofileCorePlugin.createErrorStatus(
										"opcontrolNmiWatchdog", null)); //$NON-NLS-1$
					} else if (extraInfo) {
						throw new OpcontrolException(
								OprofileCorePlugin
										.createErrorStatus(
												"opcontrolNonZeroExitCodeExtraInfo", null)); //$NON-NLS-1$
					} else {
						throw new OpcontrolException(
								OprofileCorePlugin.createErrorStatus(
										"opcontrolNonZeroExitCode", null)); //$NON-NLS-1$
					}
				}
				
				if (errOutput.length() != 0) {
					return true;
				}
				
			} catch (IOException ioe) { 
				ioe.printStackTrace();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

