	private String[] getEventNames (){
		String [] ret = null;
		try {
			String cmd[] = {"opreport", "-X", "-d"};
			Process p = Runtime.getRuntime().exec(cmd);		
			
			StringBuilder output = new StringBuilder();
			StringBuilder errorOutput = new StringBuilder();
			String s = null;
			try {
				BufferedReader stdInput = new BufferedReader(new InputStreamReader(
						p.getInputStream()));
				BufferedReader stdError = new BufferedReader(new InputStreamReader(
						p.getErrorStream()));
				try {
					// Read output of opreport. We need to do this, since this might
					// cause the plug-in to hang. See Eclipse bug 341621 for more info.
					// FIXME: Both of those while loops should really be done in two separate
					// threads, so that we avoid this very problem when the error input
					// stream buffer fills up.
					while ((s = stdInput.readLine()) != null) {
						output.append(s + System.getProperty("line.separator")); //$NON-NLS-1$
					}
					while ((s = stdError.readLine()) != null) {
						errorOutput.append(s + System.getProperty("line.separator")); //$NON-NLS-1$
					}
				} finally {
					stdInput.close();
					stdError.close();
				}
				if (!errorOutput.toString().trim().equals("")) { //$NON-NLS-1$
					OprofileCorePlugin
							.log(Status.ERROR,
									NLS.bind(
											OprofileProperties
													.getString("process.log.stderr"), "opreport", errorOutput.toString().trim())); //$NON-NLS-1$ //$NON-NLS-2$
				}
			} catch (IOException e) {
				e.printStackTrace();
			} 

			
			// convert the string to inputstream to pass to builder.parse
			InputStream is = null;
			try {
				is = new ByteArrayInputStream(output.toString().getBytes("UTF-8"));
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			
			if (p.waitFor() == 0){
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				DocumentBuilder builder;
				builder = factory.newDocumentBuilder();
				Document doc = builder.parse(is);
				Element root = (Element) doc.getElementsByTagName(ModelDataAdapter.PROFILE).item(0);

				Element setupTag = (Element) root.getElementsByTagName(ModelDataAdapter.SETUP).item(0);
				NodeList eventSetupList = setupTag.getElementsByTagName(ModelDataAdapter.EVENT_SETUP);

				// get the event names for the current session
				ret = new String[eventSetupList.getLength()];
				for (int i = 0; i < eventSetupList.getLength(); i++) {
					Element elm = (Element) eventSetupList.item(i);
					ret[i] = elm.getAttribute(ModelDataAdapter.EVENT_NAME);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
			OprofileCorePlugin.showErrorDialog("opxmlParse", null); //$NON-NLS-1$
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
			OprofileCorePlugin.showErrorDialog("opxmlSAXParseException", null); //$NON-NLS-1$
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return ret;
	}

