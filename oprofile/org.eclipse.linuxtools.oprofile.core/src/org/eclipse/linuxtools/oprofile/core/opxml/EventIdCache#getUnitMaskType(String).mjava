	/**
	 * @param name the name of the event
	 * @return the type of unit mask. This can be either mandatory, exclusive,
	 * bitmask, or null if none could be found.
	 */
	public String getUnitMaskType(String name) {
		String unitMaskType = null;
		File file = new File(InfoAdapter.CPUTYPE);

		try {
			BufferedReader bi = new BufferedReader(new FileReader(file));
			String cpuType = bi.readLine();
			File opArchEvents = new File(InfoAdapter.OP_SHARE + cpuType + "/" + InfoAdapter.EVENTS); //$NON-NLS-1$
			File opArchUnitMasks = new File(InfoAdapter.OP_SHARE + cpuType + "/" + InfoAdapter.UNIT_MASKS); //$NON-NLS-1$
			
			BufferedReader eventReader = new BufferedReader(new FileReader(opArchEvents));
			String line;
			while ((line = eventReader.readLine()) != null){
				// find the line with the event name
				if (line.contains("name:"+name+" ")){ //$NON-NLS-1$
					int start = line.indexOf("um:") + 3; //$NON-NLS-1$
					int end = line.indexOf(" ", start); //$NON-NLS-1$
					// grab the string that references the unit mask type
					String um = line.substring(start, end);
					BufferedReader unitMaskReader = new BufferedReader(new FileReader(opArchUnitMasks));
					while ((line = unitMaskReader.readLine()) != null){
						if (line.contains("name:"+um+" ")){ //$NON-NLS-1$
							start = line.indexOf("type:") + 5; //$NON-NLS-1$
							end = line.indexOf(" ", start); //$NON-NLS-1$
							unitMaskType = line.substring(start, end);
							return unitMaskType;
						}
					}
				}
			}
			eventReader.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return unitMaskType;
	}

