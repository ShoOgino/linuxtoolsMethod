    /**
     * Returns the registered opcontrol provider or throws an exception
     * @return the OpcontrolProvider registered with the plugin
     * @throws OpcontrolException
     */
    public IOpcontrolProvider getOpcontrolProvider() throws OpcontrolException {
        IOpcontrolProvider opcontrolProvider = null;

        IExtensionRegistry registry = Platform.getExtensionRegistry();
        IExtensionPoint extPoint = registry.getExtensionPoint("org.eclipse.linuxtools.oprofile.core.OpcontrolProvider"); //$NON-NLS-1$
        if (extPoint != null) {
            IExtension[] extensions = extPoint.getExtensions();
            for (IExtension extension : extensions) {
                IConfigurationElement[] configElements = extension.getConfigurationElements();
                if (configElements.length != 0) {
                    try {
                        String scheme = configElements[0].getAttribute("scheme");

                        // If no project associated, get the local opcontrol provider
                        if (Oprofile.OprofileProject.getProject() == null && scheme.equals("file")) {
                            opcontrolProvider = (IOpcontrolProvider) configElements[0].createExecutableExtension("class");//$NON-NLS-1$
                            break;
                        }

                        if(Oprofile.OprofileProject.getProject().getLocationURI().getScheme().equals(scheme)){
                            opcontrolProvider = (IOpcontrolProvider) configElements[0].createExecutableExtension("class");//$NON-NLS-1$
                        }
                    } catch (CoreException ce) {
                        ce.printStackTrace();
                    }
                }
            }
        }
        // If there was a problem finding opcontrol, throw an exception
        if(opcontrolProvider == null) {
            throw new OpcontrolException(OprofileCorePlugin.createErrorStatus("opcontrolProvider", null));
        }

        return opcontrolProvider;
    }

