	/**
	 * Checks if the user has permissions to execute opcontrol as root without
	 * providing password and if opcontrol exists in the indicated path
	 * 
	 * @param project
	 *            The project to be profiled
	 * @return true if the user has sudo permission to run opcontrol, false
	 *         otherwise
	 * @throws OpcontrolException
	 *             if opcontrol not installed
	 * @since 1.1
	 */
	@Override
	public boolean hasPermissions(IProject project) throws OpcontrolException {
		String linuxtoolsPath = LinuxtoolsPathProperty.getInstance().getLinuxtoolsPath(project);

		try {
			String opcontrolPath = null;
			if (linuxtoolsPath.isEmpty()) {
				if (!isInstalled()) {
					throw new OpcontrolException(OprofileCorePlugin.createErrorStatus("opcontrolProvider", null)); //$NON-NLS-1$
				} else {
					return true;
				}

			} else if (linuxtoolsPath.endsWith("/")) { //$NON-NLS-1$
				opcontrolPath = linuxtoolsPath + "opcontrol"; //$NON-NLS-1$
			} else {
				opcontrolPath = linuxtoolsPath + "/opcontrol"; //$NON-NLS-1$
			}

			// Check if user has sudo permissions without password by running
			// sudo -l.
			final Process p = RuntimeProcessFactory.getFactory().exec("sudo -l", project); //$NON-NLS-1$
			final StringBuffer buffer = new StringBuffer();

			if (p == null) {
				return false;
			}

			Thread t = new Thread() {
				@Override
				public void run() {
					try {
						BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));
						String s = null;
						while ((s = input.readLine()) != null) {
							buffer.append(s);
							buffer.append('\n');
						}
						p.waitFor();
						p.destroy();
					} catch (InterruptedException e) {
						e.printStackTrace();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			};

			t.start();
			t.join(SUDO_TIMEOUT);

			String[] sudoLines = buffer.toString().split("\n"); //$NON-NLS-1$
			for (String s : sudoLines) {
				if (s.contains(opcontrolPath) && s.contains("NOPASSWD")) { //$NON-NLS-1$
					return true;
				}
			}
			System.out.println(buffer.toString());
		} catch (IOException e) {
			e.printStackTrace();
			return false;
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		return false;
	}

