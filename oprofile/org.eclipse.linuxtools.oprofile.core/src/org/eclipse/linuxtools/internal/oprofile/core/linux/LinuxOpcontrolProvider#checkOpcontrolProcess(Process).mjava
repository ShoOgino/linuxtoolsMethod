	/**
	 * Check opcontrol process
	 * 
	 * @param p
	 *            opcontrol process
	 * @return true if any output was produced on the error stream, false
	 *         otherwise
	 * @throws OpcontrolException
	 * @since 1.1
	 */
	private boolean checkOpcontrolProcess(Process p) throws OpcontrolException {
		if (p != null) {
			String errOutput = ""; //$NON-NLS-1$
			String output = "", s; //$NON-NLS-1$
			try (BufferedReader errout = new BufferedReader(new InputStreamReader(p.getErrorStream()));
					BufferedReader stdout = new BufferedReader(new InputStreamReader(p.getInputStream()))) {
				while ((s = errout.readLine()) != null) {
					errOutput += s + "\n"; //$NON-NLS-1$
				}
				// Unfortunately, when piped through consolehelper stderr output
				// is redirected to stdout. Need to read stdout and do some
				// string matching in order to give some better advice as to how
				// to
				// alleviate the nmi_watchdog problem. See RH BZ #694631
				while ((s = stdout.readLine()) != null) {
					output += s + "\n"; //$NON-NLS-1$
				}
				stdout.close();
				errout.close();

				int ret = p.waitFor();
				if (ret != 0) {
					OpControlErrorHandler errHandler = OpControlErrorHandler.getInstance();
					OpcontrolException ex = errHandler.handleError(output, errOutput);
					throw ex;
				}

				if (errOutput.length() != 0) {
					return true;
				}

			} catch (IOException | InterruptedException e) {
				e.printStackTrace();
			}
		}
		return false;
	}

