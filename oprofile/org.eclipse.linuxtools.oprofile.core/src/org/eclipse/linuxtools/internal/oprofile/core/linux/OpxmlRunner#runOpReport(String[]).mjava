	/**
	 * Run opreport with specified arguments <code>args</code> and return
	 * InputStream to output of report for parsing.
	 *
	 * @param args arguments to run with opreport
	 * @return InputStream to output of report
	 */
	private InputStream runOpReport(String[] args) {

		ArrayList<String> cmd = new ArrayList<>();
		cmd.add("opreport"); //$NON-NLS-1$
		if (OprofileProject.getProfilingBinary().equals(OprofileProject.OPERF_BINARY)) {
			/*
			 * The session-dir parameter is relative to project's working dir, which might
			 * be local or remote. So it should use the proxy manager to determine working
			 * dir.
			 */
			String workingDir = ""; //$NON-NLS-1$
			RemoteProxyManager proxy = RemoteProxyManager.getInstance();
			try {
				IRemoteFileProxy rfile = proxy.getFileProxy(Oprofile.OprofileProject.getProject());
				workingDir = rfile.getWorkingDir().getPath();
			} catch (CoreException e) {
				e.printStackTrace();
				return null;
			}
			cmd.add(1, "--session-dir=" + workingDir + IPath.SEPARATOR + "oprofile_data"); //$NON-NLS-1$ //$NON-NLS-2$
		}
		Collections.addAll(cmd, args);
		Process p = null;
		try {
			p = RuntimeProcessFactory.getFactory().exec(cmd.toArray(new String[0]),
					Oprofile.OprofileProject.getProject());

			StringBuilder output = new StringBuilder();
			StringBuilder errorOutput = new StringBuilder();
			String s = null;
			try (BufferedReader stdInput = new BufferedReader(new InputStreamReader(p.getInputStream()));
					BufferedReader stdError = new BufferedReader(new InputStreamReader(p.getErrorStream()))) {
				// Read output of opreport. We need to do this, since this might
				// cause the plug-in to hang. See Eclipse bug 341621 for more
				// info.
				// FIXME: Both of those while loops should really be done in two
				// separate
				// threads, so that we avoid this very problem when the error
				// input
				// stream buffer fills up.
				while ((s = stdInput.readLine()) != null) {
					output.append(s + System.getProperty("line.separator")); //$NON-NLS-1$
				}
				while ((s = stdError.readLine()) != null) {
					errorOutput.append(s + System.getProperty("line.separator")); //$NON-NLS-1$
				}
				if (!errorOutput.toString().trim().equals("")) { //$NON-NLS-1$
					OprofileCorePlugin.log(IStatus.ERROR, NLS.bind(OprofileProperties.getString("process.log.stderr"), //$NON-NLS-1$
							"opreport", errorOutput.toString().trim())); //$NON-NLS-1$
				}
			} catch (IOException e) {
				e.printStackTrace();
			}

			if (p.waitFor() == 0) {
				// convert the string to inputstream to pass to builder.parse
				return new ByteArrayInputStream(output.toString().getBytes(StandardCharsets.UTF_8));
			}
		} catch (IOException e1) {
			e1.printStackTrace();
			OprofileCorePlugin.showErrorDialog("opxmlParse", null); //$NON-NLS-1$
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		return null;
	}

