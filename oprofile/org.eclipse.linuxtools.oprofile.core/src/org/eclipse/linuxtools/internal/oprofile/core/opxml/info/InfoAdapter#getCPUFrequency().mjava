	/**
	 * Get the system's cpu frequency
	 * 
	 * @return the system's cpu frequency
	 */
	private int getCPUFrequency() {
		int val = 0;
		try {
			proxy = RemoteProxyManager.getInstance().getFileProxy(Oprofile.OprofileProject.getProject());
			IFileStore fileStore = proxy.getResource(CPUINFO);
			if (fileStore.fetchInfo().exists()) {
				InputStream is = fileStore.openInputStream(EFS.NONE, new NullProgressMonitor());
				try (BufferedReader bi = new BufferedReader(new InputStreamReader(is))) {
					String line;
					while ((line = bi.readLine()) != null) {
						int index = line.indexOf(':');
						if (index != -1) {
							String substr;

							// x86/ia64/x86_64
							if (line.startsWith("cpu MHz")) { //$NON-NLS-1$
								substr = line.substring(index + 1).trim();
								return (int) Double.parseDouble(substr);
								// ppc/pc64
							} else if (line.startsWith("clock")) { //$NON-NLS-1$
								int MHzLoc = line.indexOf("MHz"); //$NON-NLS-1$
								substr = line.substring(index + 1, MHzLoc);
								return (int) Double.parseDouble(substr);
								// alpha
							} else if (line.startsWith("cycle frequency [Hz]")) { //$NON-NLS-1$
								substr = line.substring(index + 1).trim();
								return (int) (Double.parseDouble(substr) / 1E6);
								// sparc64
							} else if (line.startsWith("Cpu0ClkTck")) { //$NON-NLS-1$
								substr = line.substring(index + 1).trim();
								return (int) (Double.parseDouble(substr) / 1E6);
							}
						}
					}
				} catch (IOException | NumberFormatException e) {
					e.printStackTrace();
				}
			}
		} catch (CoreException e) {
			e.printStackTrace();
		}

		return val;
	}

