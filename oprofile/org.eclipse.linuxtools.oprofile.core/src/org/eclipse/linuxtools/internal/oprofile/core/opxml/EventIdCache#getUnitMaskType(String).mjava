	/**
	 * Get the unit mask type. Schema Version 1.1 and newer of ophelp XML
	 * will list the unit mask type as an attribute. Older version will not
	 * so we default to file lookups.
	 *
	 * @param name the name of the event
	 * @return the type of unit mask. This can be either mandatory, exclusive,
	 * bitmask, or null if none could be found.
	 */
	public String getUnitMaskType(String name) {
		IProject project = Oprofile.OprofileProject.getProject();
		EventIdCache eventIdCache;
		if (project != null) {
			eventIdCache = cacheMap.get(project.getLocationURI().getHost());
		} else {
			eventIdCache = cacheMap.get(LOCAL);
		}

		if (eventIdCache.eventRoot == null){
			readXML(eventIdCache);
			buildCache(eventIdCache);
		}

		Element header = (Element)eventIdCache.eventRoot.getElementsByTagName(HEADER).item(0);

		double schemaVersion = 0;

		if (!eventIdCache.eventRoot.getAttribute(SCHEMA).equals("")){
			schemaVersion = Double.parseDouble(eventIdCache.eventRoot.getAttribute(SCHEMA));
		}else{
			schemaVersion = Double.parseDouble(header.getAttribute(SCHEMA));
		}

		String unitMaskType = null;
		IRemoteFileProxy proxy = null;
		try {
			proxy = RemoteProxyManager.getInstance().getFileProxy(Oprofile.OprofileProject.getProject());
		} catch (CoreException e) {
			e.printStackTrace();
		}

		// Schema Version > 1.0 has the unit mask type within the XML
		if (schemaVersion > 1.0){
			Element event = getElementWithName(name);
			Element unitMaskTag = (Element) event.getElementsByTagName(InfoAdapter.UNIT_MASKS).item(0);
			return unitMaskTag.getAttribute(CATEGORY);
		}else{
			IFileStore fileStore = proxy.getResource(InfoAdapter.CPUTYPE);
			BufferedReader bi = null;
			try {
				InputStream fileInputStream = fileStore.openInputStream(EFS.NONE, new NullProgressMonitor());
				bi = new BufferedReader(new InputStreamReader(fileInputStream));
				String cpuType = bi.readLine();
				IFileStore opArchEvents = proxy.getResource(InfoAdapter.OP_SHARE + cpuType + "/" + InfoAdapter.EVENTS); //$NON-NLS-1$
				IFileStore opArchUnitMasks = proxy.getResource(InfoAdapter.OP_SHARE + cpuType + "/" + InfoAdapter.UNIT_MASKS); //$NON-NLS-1$

				InputStream inputStreamEvents = opArchEvents.openInputStream(EFS.NONE, new NullProgressMonitor());
				BufferedReader eventReader = new BufferedReader(new InputStreamReader(inputStreamEvents));
				String line;
				while ((line = eventReader.readLine()) != null){
					// find the line with the event name
					if (line.contains("name:"+name+" ")){ //$NON-NLS-1$
						int start = line.indexOf("um:") + 3; //$NON-NLS-1$
						int end = line.indexOf(" ", start); //$NON-NLS-1$
						// grab the string that references the unit mask type
						String um = line.substring(start, end);
						BufferedReader unitMaskReader = null;
						try {
							InputStream inputStreamMasks = opArchUnitMasks.openInputStream(EFS.NONE, new NullProgressMonitor());
							unitMaskReader = new BufferedReader(new InputStreamReader(inputStreamMasks));
							while ((line = unitMaskReader.readLine()) != null) {
								if (line.contains("name:" + um + " ")) { //$NON-NLS-1$
									start = line.indexOf("type:") + 5; //$NON-NLS-1$
									end = line.indexOf(" ", start); //$NON-NLS-1$
									unitMaskType = line.substring(start, end);
									return unitMaskType;
								}
							}
						} finally {
							if (unitMaskReader != null) {
								unitMaskReader.close();
							}
						}
					}
				}
				eventReader.close();
			} catch (IOException e) {
			} catch (CoreException e) {
			} finally {
				if (bi != null) {
					try {
						bi.close();
					} catch (IOException e) {
					}
				}
			}
		}
		return unitMaskType;
	}

