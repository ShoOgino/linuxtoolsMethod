	/**
	 * Runs opxml with the given arguments.
	 * @param args the arguments to pass to opxml
	 * @param callData any callData to pass to the processor
	 * @return boolean indicating the success/failure of opxml
	 */
	public boolean run(String[] args, Object callData) {
//dont need to check every single time		
//		// Don't even bother running if the kernel module wasn't loaded successfully
//		if (!Oprofile.isKernelModuleLoaded()) {
//			return false;
//		}
		
		XMLReader reader = null;
		_handler = OprofileSAXHandler.getInstance(callData);
		
		try {
			// Create XMLReader
	        SAXParserFactory factory = SAXParserFactory.newInstance();
	        reader = factory.newSAXParser().getXMLReader();
		} catch (Exception e) {
			System.out.println ("Exception creating SAXParser: " + e.getMessage ());
		}
		
		// Set content/error handlers
		reader.setContentHandler(_handler);
		reader.setErrorHandler(_handler);
		
		// Setup args
		String[] cmdArray = new String[args.length + 1];
		cmdArray[0] = _OPXML_PROGRAM;
		System.arraycopy(args, 0, cmdArray, 1, args.length);
		
		// Run opxml
		try {
			Process p = Runtime.getRuntime().exec(cmdArray);
			BufferedReader bi = new BufferedReader(new InputStreamReader(p.getInputStream()));
			reader.parse(new InputSource(bi));			
			if (p.waitFor() != 0) {
				//System.out.println("error running opxml");
				return false;
			}
			
			return true;
		} catch (SAXException e) {
			System.out.println("SAXException: " + e.getMessage());
			e.printStackTrace();
		} catch (InterruptedException e) {
			System.out.println("InterruptedException: " + e.getMessage());
			e.printStackTrace();
		} catch (IOException e) {
			System.out.println("IOException: " + e.getMessage());
			e.printStackTrace();
		}
		
		return false;
	}

