	@Override
	public void launch(ILaunchConfiguration config, String mode, ILaunch launch, IProgressMonitor monitor) throws CoreException {
		//FIXME: this assumes that project names are always the directory names in the workspace.
		//this assumption may be wrong, but a shallow lookup seems ok
		String workspacePath = ResourcesPlugin.getWorkspace().getRoot().getLocation().toString();
		String imagePath = workspacePath + 
							Path.SEPARATOR + 
							config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,"") + 
							Path.SEPARATOR + 
							config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_PROGRAM_NAME,"");
		
		LaunchOptions options = new LaunchOptions();		//default options created in the constructor
		options.loadConfiguration(config);
		options.setImage(imagePath);

		//if daemonEvents null or zero size, the default event will be used
		OprofileDaemonEvent[] daemonEvents = null;
		if (!config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT, false)) {
			//get the events to profile from the counters
			OprofileCounter[] counters = OprofileCounter.getCounters(config);
			ArrayList<OprofileDaemonEvent> events = new ArrayList<OprofileDaemonEvent>();
			
			for (int i = 0; i < counters.length; ++i) {
				if (counters[i].getEnabled())
					events.add(counters[i].getDaemonEvent());
			}
			
			daemonEvents = new OprofileDaemonEvent[events.size()];
			events.toArray(daemonEvents);
		}

		//set up and launch the oprofile daemon
		try {
			//kill the daemon (it shouldn't be running already, but to be safe)
			OprofileCorePlugin.getDefault().getOpcontrolProvider().shutdownDaemon();
			
			//reset data from the (possibly) existing default session, 
			// otherwise multiple runs will combine samples and results
			// won't make much sense
			OprofileCorePlugin.getDefault().getOpcontrolProvider().reset();
			
			//setup the events and other parameters
			OprofileCorePlugin.getDefault().getOpcontrolProvider().setupDaemon(options.getOprofileDaemonOptions(), daemonEvents);
			
			//start the daemon & collection of samples 
			//note: since the daemon is only profiling for the specific image we told 
			// it to, no matter to start the daemon before the binary itself is run
			OprofileCorePlugin.getDefault().getOpcontrolProvider().startCollection();
		} catch (OpcontrolException oe) {
			String title = OprofileProperties.getString("opcontrolProvider.error.dialog.title"); //$NON-NLS-1$
			String msg = OprofileProperties.getString("opcontrolProvider.error.dialog.message"); //$NON-NLS-1$
			ErrorDialog.openError(null, title, msg, oe.getStatus());
		}

		/* 
		 * this code written by QNX Software Systems and others and was 
		 * originally in the CDT under LocalCDILaunchDelegate::RunLocalApplication
		 */
		//set up and launch the local c/c++ program
		try {
			IPath exePath = verifyProgramPath( config );
			File wd = getWorkingDirectory( config );
			if ( wd == null ) {
				wd = new File( System.getProperty( "user.home", "." ) );
			}
			String arguments[] = getProgramArgumentsArray( config );
			ArrayList<String> command = new ArrayList<String>( 1 + arguments.length );
			command.add( exePath.toOSString() );
			command.addAll( Arrays.asList( arguments ) );
			String[] commandArray = (String[])command.toArray( new String[command.size()] );
			boolean usePty = config.getAttribute( ICDTLaunchConfigurationConstants.ATTR_USE_TERMINAL, ICDTLaunchConfigurationConstants.USE_TERMINAL_DEFAULT );
			Process process;
			process = exec( commandArray, getEnvironment( config ), wd, usePty );
			DebugPlugin.newProcess( launch, process, renderProcessLabel( commandArray[0] ) );
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		//add a listener for termination of the launch
		ILaunchManager lmgr = DebugPlugin.getDefault().getLaunchManager();
		lmgr.addLaunchListener(new LaunchTerminationWatcher(launch));

	}

