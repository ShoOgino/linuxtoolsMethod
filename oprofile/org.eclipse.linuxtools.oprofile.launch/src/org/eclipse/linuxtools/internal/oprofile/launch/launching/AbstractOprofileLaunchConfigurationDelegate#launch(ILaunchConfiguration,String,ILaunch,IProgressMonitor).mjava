	@Override
	public void launch(ILaunchConfiguration config, String mode, ILaunch launch, IProgressMonitor monitor) throws CoreException {
		this.config = config;
		Oprofile.OprofileProject.setProject(getProject());
		LaunchOptions options = new LaunchOptions();		//default options created in the constructor
		options.loadConfiguration(config);
		IPath exePath = getExePath(config);
		options.setBinaryImage(exePath.toOSString());

		//if daemonEvents null or zero size, the default event will be used
		OprofileDaemonEvent[] daemonEvents = null;
		if (!config.getAttribute(OprofileLaunchPlugin.ATTR_USE_DEFAULT_EVENT, false)) {
			//get the events to profile from the counters
			OprofileCounter[] counters = OprofileCounter.getCounters(config);
			ArrayList<OprofileDaemonEvent> events = new ArrayList<OprofileDaemonEvent>();
			
			for (int i = 0; i < counters.length; ++i) {
				if (counters[i].getEnabled())
					events.add(counters[i].getDaemonEvent());
			}
			
			daemonEvents = new OprofileDaemonEvent[events.size()];
			events.toArray(daemonEvents);
		}
		
		if (!preExec(options, daemonEvents)) return;

		/* 
		 * this code written by QNX Software Systems and others and was 
		 * originally in the CDT under LocalCDILaunchDelegate::RunLocalApplication
		 */
		//set up and launch the local c/c++ program
		IRemoteCommandLauncher launcher = RemoteProxyManager.getInstance().getLauncher(Oprofile.OprofileProject.getProject());

		URI workingDirURI = Oprofile.OprofileProject.getProject().getLocationURI();

		IPath workingDirPath = new Path(workingDirURI.getPath());

		String arguments[] = getProgramArgumentsArray( config );
		Process process = launcher.execute(exePath, arguments, getEnvironment(config), workingDirPath, monitor);

		DebugPlugin.newProcess( launch, process, renderProcessLabel( exePath.toOSString() ) );

			postExec(options, daemonEvents, launch, process);
	}

