	@Override
	protected boolean preExec(LaunchOptions options, OprofileDaemonEvent[] daemonEvents, ILaunch launch) {
		//set up and launch the oprofile daemon
		try {
			IProject project = getProject();

			//check if user has NOPASSWD sudo permission for opcontrol
			//if the Linux Tools Path property was changed
			if(!LinuxtoolsPathProperty.getInstance().getLinuxtoolsPath(project).equals("")){
				IOpcontrolProvider provider = OprofileCorePlugin.getDefault().getOpcontrolProvider();
				if (provider instanceof IOpcontrolProvider2 &&
					!((IOpcontrolProvider2)provider).hasPermissions(project)){
					throw new OpcontrolException(OprofileCorePlugin.createErrorStatus("opcontrolSudo", null));
				}
			}
			// Set current project to allow using the oprofile path that
			// was chosen for the project 
			Oprofile.OprofileProject.setProject(project);
			
			if (!oprofileStatus())
				return false;
			
			//kill the daemon (it shouldn't be running already, but to be safe)
			oprofileShutdown();
			
			//reset data from the (possibly) existing default session, 
			// otherwise multiple runs will combine samples and results
			// won't make much sense
			oprofileReset();
			
			//setup the events and other parameters
			oprofileSetupDaemon(options.getOprofileDaemonOptions(), daemonEvents);
			
			//start the daemon & collection of samples 
			//note: since the daemon is only profiling for the specific image we told 
			// it to, no matter to start the daemon before the binary itself is run
			oprofileStartCollection();

			//add a listener for termination of the launch prior to execution of launch
			ILaunchManager lmgr = DebugPlugin.getDefault().getLaunchManager();
			lmgr.addLaunchListener(new LaunchTerminationWatcher(launch));
		} catch (OpcontrolException oe) {
			OprofileCorePlugin.showErrorDialog("opcontrolProvider", oe); //$NON-NLS-1$
			return false;
		}
		return true;
	}

