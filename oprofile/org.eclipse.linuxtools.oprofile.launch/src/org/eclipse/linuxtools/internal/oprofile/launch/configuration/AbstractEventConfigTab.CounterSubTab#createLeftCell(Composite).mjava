		/**
		 * Creates the event list widget.
		 * @param parent composite these widgets will be created in
		 */
		private void createLeftCell(Composite parent) {
			// Text box used to filter the event list
			eventFilterText = new Text(parent, SWT.BORDER | SWT.SINGLE | SWT.ICON_CANCEL | SWT.SEARCH);
			eventFilterText.setMessage(OprofileLaunchMessages.getString("tab.event.eventfilter.message")); //$NON-NLS-1$
			GridData eventFilterLayout = new GridData();
			eventFilterLayout.horizontalAlignment = SWT.FILL;
			eventFilterLayout.grabExcessHorizontalSpace = true;
			eventFilterText.setLayoutData(eventFilterLayout);
			eventFilterText.addModifyListener(new ModifyListener() {
				@Override
				public void modifyText(ModifyEvent e) {
					eventList.refresh(false);
				}
			});

			// profile user binary and profile kernel
			createRightCell(parent);

			int options =  SWT.V_SCROLL | SWT.H_SCROLL | SWT.BORDER;
			if (OprofileProject.getProfilingBinary().equals(OprofileProject.OPERF_BINARY)) {
				options |= SWT.MULTI;
			} else {
				options |= SWT.SINGLE;
			}
			eventList = new ListViewer(parent, options);
			GridData gdata = new GridData(SWT.FILL, SWT.FILL, true, true);
			gdata.verticalSpan = 5;
			eventList.getList().setLayoutData(gdata);

			eventList.setLabelProvider(new ILabelProvider(){
				@Override
				public String getText(Object element) {
					OpEvent e = (OpEvent) element;
					return e.getText();
				}
				@Override
				public Image getImage(Object element) { return null; }
				@Override
				public void addListener(ILabelProviderListener listener) { }
				@Override
				public void dispose() { }
				@Override
				public boolean isLabelProperty(Object element, String property) { return false; }
				@Override
				public void removeListener(ILabelProviderListener listener) { }
			});

			eventList.setContentProvider(new IStructuredContentProvider() {
				@Override
				public Object[] getElements(Object inputElement) {
					List<OpEvent> list = (List<OpEvent>)inputElement;
					return list.toArray();
				}
				@Override
				public void dispose() { }
				@Override
				public void inputChanged(Viewer arg0, Object arg1, Object arg2) { }
			});

			// sorter
			ListviewerSorter sorter = new ListviewerSorter();
			eventList.setSorter(sorter);

			//adds the events to the list from the counter
			sourceList.addAll(Arrays.asList(counter.getValidEvents()));
			eventList.setInput(sourceList);

			eventList.addSelectionChangedListener(new ISelectionChangedListener() {
				@Override
				public void selectionChanged(SelectionChangedEvent sce) {
					handleEventListSelectionChange();
				}
			});

			HandleButtonClick listener = new HandleButtonClick();
			add = new Button(parent, SWT.PUSH);
			add.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
			add.setText(OprofileLaunchMessages.getString("tab.event.addevent.button.text")); //$NON-NLS-1$
			add.setData(ADD);
			add.addListener(SWT.Selection, listener);

			selectedEventList = new ListViewer(parent, options);
			selectedEventList.getList().setLayoutData(gdata);


			selectedEventList.setLabelProvider(new ILabelProvider(){
				@Override
				public String getText(Object element) {
					OpEvent e = (OpEvent) element;
					return e.getText();
				}
				@Override
				public Image getImage(Object element) { return null; }
				@Override
				public void addListener(ILabelProviderListener listener) { }
				@Override
				public void dispose() { }
				@Override
				public boolean isLabelProperty(Object element, String property) { return false; }
				@Override
				public void removeListener(ILabelProviderListener listener) { }
			});

			selectedEventList.setContentProvider(new IStructuredContentProvider() {
				@Override
				public Object[] getElements(Object inputElement) {
					List<OpEvent> list = (List<OpEvent>)inputElement;
					return list.toArray();
				}
				@Override
				public void dispose() { }
				@Override
				public void inputChanged(Viewer arg0, Object arg1, Object arg2) { }
			});

			// sorter
			 sorter = new ListviewerSorter();
			 selectedEventList.setSorter(sorter);

			//adds the events to the list from the counter
			if(counter.getEvents().length != 0 && null != counter.getEvents()[0])
			{
			targetList.addAll(Arrays.asList(counter.getEvents()));
			}
			selectedEventList.setInput(targetList);

			selectedEventList.addSelectionChangedListener(new ISelectionChangedListener() {
				@Override
				public void selectionChanged(SelectionChangedEvent sce) {
					handleListSelection(selectedEventList);
					eventList.getList().deselectAll();
					updateLaunchConfigurationDialog();
				}
			});





			addAll = new Button(parent, SWT.PUSH);
			addAll.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
			addAll.setText(OprofileLaunchMessages.getString("tab.event.addallevent.button.text")); //$NON-NLS-1$
			addAll.setData(ADD_ALL);
			addAll.addListener(SWT.Selection, listener);


			remove = new Button(parent, SWT.PUSH);
			remove.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
			remove.setText(OprofileLaunchMessages.getString("tab.event.removeevent.button.text")); //$NON-NLS-1$
			remove.setData(REMOVE);
			remove.addListener(SWT.Selection, listener);


			removeAll = new Button(parent, SWT.PUSH);
			removeAll.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
			removeAll.setText(OprofileLaunchMessages.getString("tab.event.removeallevent.button.text")); //$NON-NLS-1$
			removeAll.setData(REMOVE_ALL);
			removeAll.addListener(SWT.Selection, listener);

			customizeBtn = new Button(parent, SWT.PUSH);
			customizeBtn.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));
			customizeBtn.setText(OprofileLaunchMessages.getString("tab.event.customizeevent.button.text")); //$NON-NLS-1$
			customizeBtn.addListener(SWT.Selection, listener);
			customizeBtn.setData(CUSTOMIZE);


		}

