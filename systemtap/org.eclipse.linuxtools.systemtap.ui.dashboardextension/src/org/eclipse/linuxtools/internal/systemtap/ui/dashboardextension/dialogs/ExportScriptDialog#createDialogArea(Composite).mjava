	/**
	 * This method adds all of the components to the dialog and positions them.
	 * Actions are added to all of the buttons to deal with user interaction.
	 * @param parent The Composite that will contain all components created in this method
	 * @return The main Control created by this method.
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite comp = new Composite(parent, SWT.NONE);

		//Dialog reference labels
		Label lblDisplay = new Label(comp, SWT.NONE);
		lblDisplay.setText(Localization.getString("ExportScriptDialog.Display"));
		lblDisplay.setBounds(10, 12, 100, 25);
		Label lblCategory = new Label(comp, SWT.NONE);
		lblCategory.setText(Localization.getString("ExportScriptDialog.Category"));
		lblCategory.setBounds(10, 42, 100, 25);
		Label lblDescription = new Label(comp, SWT.NONE);
		lblDescription.setText(Localization.getString("ExportScriptDialog.Description"));
		lblDescription.setBounds(10, 72, 100, 25);
		Label lblGraphs = new Label(comp, SWT.NONE);
		lblGraphs.setText(Localization.getString("ExportScriptDialog.Graphs"));
		lblGraphs.setBounds(10, 150, 100, 25);

		//Text boxes for how to display the new module in the dashboard
		txtDisplay = new Text(comp, SWT.BORDER);
		txtDisplay.setBounds(120, 10, 200, 25);
		txtCategory = new Text(comp, SWT.BORDER);
		txtCategory.setBounds(120, 40, 200, 25);
		txtDescription = new Text(comp, SWT.MULTI | SWT.WRAP | SWT.BORDER);
		txtDescription.setBounds(120, 70, 200, 75);
		
		treeGraphs = new Tree(comp, SWT.SINGLE | SWT.BORDER);
		treeGraphs.setBounds(10, 175, 200, 125);

		//Button to add another graph
		btnAdd = new Button(comp, SWT.PUSH);
		btnAdd.setText(Localization.getString("ExportScriptDialog.Add"));
		btnAdd.setBounds(220, 175, 100, 26);

		//Button to filter the script output data
		btnAddFilter = new Button(comp, SWT.PUSH);
		btnAddFilter.setText(Localization.getString("ExportScriptDialog.AddFilter"));
		btnAddFilter.setBounds(220, 205, 100, 26);
		btnAddFilter.setEnabled(false);
		
		//Button to remove the selected graph/filter
		btnRemove = new Button(comp, SWT.PUSH);
		btnRemove.setText(Localization.getString("ExportScriptDialog.Remove"));
		btnRemove.setBounds(220, 265, 100, 26);
		btnRemove.setEnabled(false);

		//Action to notify the buttons when to enable/disable themselves based on list selection
		treeGraphs.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				selectedTreeItem = (TreeItem)e.item;
				if(null == selectedTreeItem.getParentItem())
					btnAddFilter.setEnabled(true);
				else
					btnAddFilter.setEnabled(false);
				btnRemove.setEnabled(true);
			}
			
			public void widgetDefaultSelected(SelectionEvent e) {}
		});
		
		//Brings up a new dialog box when user clicks the add button.  Allows selecting a new graph to display.
		btnAdd.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				SelectGraphWizard wizard = new SelectGraphWizard(data);
				IWorkbench workbench = PlatformUI.getWorkbench();
				wizard.init(workbench, null);
				WizardDialog dialog = new WizardDialog(workbench.getActiveWorkbenchWindow().getShell(), wizard);
				dialog.create();
				dialog.open();

				GraphData gd = wizard.getGraphData();
				if(null != gd) {
					TreeItem item = new TreeItem(treeGraphs, SWT.NONE);
					item.setText(GraphFactory.getGraphName(gd.graphID) + ":" + gd.title);
					item.setData(gd);
				}
			}
			
			public void widgetDefaultSelected(SelectionEvent e) {}
		});

		//Brings up a new dialog for selecting filter options when the user clicks the filter button.
		btnAddFilter.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				SelectFilterWizard wizard = new SelectFilterWizard(data.getTitles());
				IWorkbench workbench = PlatformUI.getWorkbench();
				wizard.init(workbench, null);
				WizardDialog dialog = new WizardDialog(workbench.getActiveWorkbenchWindow().getShell(), wizard);
				dialog.create();
				dialog.open();

				IDataSetFilter f = wizard.getFilter();
				if(null != f) {
					TreeItem item = new TreeItem(treeGraphs.getSelection()[0], SWT.NONE);
					item.setText(AvailableFilterTypes.getFilterName(f.getID()));
					item.setData(f);
				}
			}
			
			public void widgetDefaultSelected(SelectionEvent e) {}
		});
		
		//Removes the selected graph/filter from the tree
		btnRemove.addSelectionListener(new SelectionListener() {
			public void widgetSelected(SelectionEvent e) {
				selectedTreeItem.dispose();
				btnRemove.setEnabled(false);
			}
			
			public void widgetDefaultSelected(SelectionEvent e) {}
		});
		
		return comp;
	}

