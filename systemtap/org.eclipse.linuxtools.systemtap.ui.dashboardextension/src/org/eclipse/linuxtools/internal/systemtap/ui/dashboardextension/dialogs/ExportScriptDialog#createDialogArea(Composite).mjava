	/**
	 * This method adds all of the components to the dialog and positions them.
	 * Actions are added to all of the buttons to deal with user interaction.
	 * 
	 * @param parent
	 *            The Composite that will contain all components created in this
	 *            method
	 * @return The main Control created by this method.
	 */
	@Override
	protected Control createDialogArea(Composite parent) {
		Composite comp = new Composite(parent, SWT.NONE);
		comp.setLayoutData(new GridData(GridData.FILL_BOTH));
		GridLayout layout = new GridLayout();
		layout.numColumns = 2;
		layout.makeColumnsEqualWidth = false;
		comp.setLayout(layout);

		GridData layoutData = new GridData();
		// Dialog reference labels
		Label lblDisplay = new Label(comp, SWT.NONE);
		lblDisplay
				.setText(Localization.getString("ExportScriptDialog.Display")); //$NON-NLS-1$
		layoutData.grabExcessHorizontalSpace = true;
		layoutData.horizontalAlignment = SWT.FILL;
		txtDisplay = new Text(comp, SWT.BORDER);
		txtDisplay.setLayoutData(layoutData);

		Label lblCategory = new Label(comp, SWT.NONE);
		lblCategory.setText(Localization
				.getString("ExportScriptDialog.Category")); //$NON-NLS-1$
		txtCategory = new Text(comp, SWT.BORDER);
		txtCategory.setLayoutData(layoutData);

		Label lblDescription = new Label(comp, SWT.NONE);
		lblDescription.setText(Localization
				.getString("ExportScriptDialog.Description")); //$NON-NLS-1$
		txtDescription = new Text(comp, SWT.MULTI | SWT.WRAP | SWT.BORDER);
		txtDescription.setLayoutData(layoutData);

		Label lblGraphs = new Label(comp, SWT.NONE);
		lblGraphs.setText(Localization.getString("ExportScriptDialog.Graphs")); //$NON-NLS-1$
		layoutData = new GridData();
		layoutData.horizontalSpan = 2;
		lblGraphs.setLayoutData(layoutData);

		Composite treeComposite = new Composite(comp, SWT.NONE);
		layoutData = new GridData(GridData.FILL_BOTH);
		layoutData.horizontalSpan = 2;
		treeComposite.setLayoutData(layoutData);
		GridLayout treeLayout = new GridLayout();
		treeLayout.numColumns = 2;
		treeLayout.makeColumnsEqualWidth = false;
		treeComposite.setLayout(treeLayout);

		treeGraphs = new Tree(treeComposite, SWT.SINGLE | SWT.BORDER);
		layoutData = new GridData();
		layoutData.verticalSpan = 3;
		layoutData.grabExcessHorizontalSpace = true;
		layoutData.horizontalAlignment = SWT.FILL;
		treeGraphs.setLayoutData(layoutData);

		// Button to add another graph
		Composite buttonComposite = new Composite(treeComposite, SWT.None);
		RowLayout buttonLayout = new RowLayout(SWT.VERTICAL);
		buttonLayout.pack = false;
		buttonLayout.marginHeight = 5;
		buttonComposite.setLayout(buttonLayout);
		btnAdd = new Button(buttonComposite, SWT.PUSH);
		btnAdd.setText(Localization.getString("ExportScriptDialog.Add")); //$NON-NLS-1$

		// Button to filter the script output data
		btnAddFilter = new Button(buttonComposite, SWT.PUSH);
		btnAddFilter.setText(Localization
				.getString("ExportScriptDialog.AddFilter")); //$NON-NLS-1$
		btnAddFilter.setEnabled(false);

		// Button to remove the selected graph/filter
		btnRemove = new Button(buttonComposite, SWT.PUSH);
		btnRemove.setText(Localization.getString("ExportScriptDialog.Remove")); //$NON-NLS-1$
		btnRemove.setEnabled(false);

		// Action to notify the buttons when to enable/disable themselves based
		// on list selection
		treeGraphs.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				selectedTreeItem = (TreeItem) e.item;
				if (null == selectedTreeItem.getParentItem())
					btnAddFilter.setEnabled(true);
				else
					btnAddFilter.setEnabled(false);
				btnRemove.setEnabled(true);
			}
		});

		// Brings up a new dialog box when user clicks the add button. Allows
		// selecting a new graph to display.
		btnAdd.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				SelectGraphWizard wizard = new SelectGraphWizard(data);
				IWorkbench workbench = PlatformUI.getWorkbench();
				wizard.init(workbench, null);
				WizardDialog dialog = new WizardDialog(workbench
						.getActiveWorkbenchWindow().getShell(), wizard);
				dialog.create();
				dialog.open();

				GraphData gd = wizard.getGraphData();
				if (null != gd) {
					TreeItem item = new TreeItem(treeGraphs, SWT.NONE);
					item.setText(GraphFactory.getGraphName(gd.graphID) + ":" //$NON-NLS-1$
							+ gd.title);
					item.setData(gd);
				}
			}
		});

		// Brings up a new dialog for selecting filter options when the user
		// clicks the filter button.
		btnAddFilter.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				SelectFilterWizard wizard = new SelectFilterWizard(data
						.getTitles());
				IWorkbench workbench = PlatformUI.getWorkbench();
				wizard.init(workbench, null);
				WizardDialog dialog = new WizardDialog(workbench
						.getActiveWorkbenchWindow().getShell(), wizard);
				dialog.create();
				dialog.open();

				IDataSetFilter f = wizard.getFilter();
				if (null != f) {
					TreeItem item = new TreeItem(treeGraphs.getSelection()[0],
							SWT.NONE);
					item.setText(AvailableFilterTypes.getFilterName(f.getID()));
					item.setData(f);
				}
			}
		});

		// Removes the selected graph/filter from the tree
		btnRemove.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				selectedTreeItem.dispose();
				btnRemove.setEnabled(false);
			}
		});

		return comp;
	}

