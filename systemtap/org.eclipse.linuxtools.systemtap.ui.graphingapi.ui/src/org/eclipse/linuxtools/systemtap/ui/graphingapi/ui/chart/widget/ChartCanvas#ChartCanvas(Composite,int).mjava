    public ChartCanvas(Composite parent, int style) {
     super(parent, style | SWT.V_SCROLL | SWT.H_SCROLL);
     try {
     // INITIALIZE THE SWT RENDERING DEVICE
    	 //ChartEngine ce = ChartEngine.instance();
 //    PluginSettings ps = PluginSettings.instance();
     
     
     PlatformConfig pf = new PlatformConfig();

    	 //pf.setProperty(
    	 //"STANDALONE", true);

    	 // Returns a singleton instance of the Chart Engine

    	 ChartEngine ce = ChartEngine.instance(pf);

    	 // Returns a singleton instance of the Generator

    	// IGenerator gr = ce.getGenerator();

     
     try
     {
    	 render = ce.getRenderer("dv.SWT");
     }
     catch ( ChartException ex )
     {
     ex.printStackTrace( );
     } 
     //render = ps.getDevice("dv.PNG");
  
  } catch (Exception e) {
   // TODO Auto-generated catch block
   e.printStackTrace();
  }
  

  addPaintListener(new PaintListener() {

    /**
     * The SWT paint callback
     */
    public void paintControl(PaintEvent pe)
    {
             if (chart == null) return;
       try{
       render.setProperty(IDeviceRenderer.GRAPHICS_CONTEXT, pe.gc);
        Composite co = (Composite) pe.getSource();
        Rectangle re = co.getClientArea();
        Bounds bo = BoundsImpl.create(re.x, re.y, re.width, re.height);
        bo.scale(72d / render.getDisplayServer().getDpiResolution());
        Generator gr = Generator.instance();
       state = gr.build(render.getDisplayServer(),
           chart,
           bo,
           null,
           null,
           null);
   gr.render(render, state);
   } catch (ChartException e) {
   e.printStackTrace();
  }
     }
  }
  );
    }

