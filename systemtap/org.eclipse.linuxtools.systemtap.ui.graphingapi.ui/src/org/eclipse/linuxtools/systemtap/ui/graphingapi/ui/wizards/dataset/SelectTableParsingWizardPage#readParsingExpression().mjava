	@Override
	protected boolean readParsingExpression() {
		if(null == wizard.metaFile && !wizard.openFile())
			return false;

		try {
			FileReader reader = new FileReader(wizard.metaFile);

			if(!reader.ready()) {
				reader.close();
				return false;
			}

			XMLMemento data = XMLMemento.createReadRoot(reader, IDataSetParser.XMLDataSetSettings);

			IMemento[] children = data.getChildren(IDataSetParser.XMLFile);
			int i;
			for(i=0; i<children.length; i++) {
				if(children[i].getID().equals(wizard.scriptFile))
					break;
			}

			if(i>=children.length)	//Didn't find file
				return false;
			
			if(0 != children[i].getString(IDataSetParser.XMLdataset).compareTo(TableDataSet.ID))
				return false;
			
			IMemento[] children2 = children[i].getChildren(IDataSetParser.XMLColumn);
			txtSeries.setText("" + children2.length);
			for(int j=0; j<children2.length; j++)
				txtRegExpr[j*COLUMNS].setText(children2[j].getString(IDataSetParser.XMLname));

			children2 = children[i].getChildren(IDataSetParser.XMLSeries);
			txtSeries.setText("" + children2.length);
			for(int j=0; j<children2.length; j++) {
				txtRegExpr[j*COLUMNS+1].setText(children2[j].getString(IDataSetParser.XMLparsingExpression));
				txtRegExpr[j*COLUMNS+2].setText(children2[j].getString(IDataSetParser.XMLparsingSpacer));
			}
			txtDelim.setText(children[i].getChild(IDataSetParser.XMLDelimiter).getString(IDataSetParser.XMLparsingExpression));
			
			reader.close();
		} catch(FileNotFoundException fnfe) {
			return false;
		} catch(WorkbenchException we) {
			return false;
		} catch(IOException ioe) {
			return false;
		}
		
		return true;
	}

