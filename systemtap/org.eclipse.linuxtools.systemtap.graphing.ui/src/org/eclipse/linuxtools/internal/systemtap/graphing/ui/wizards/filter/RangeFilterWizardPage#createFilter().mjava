    @Override
    protected void createFilter() {
        filter = null;
        setErrorMessage(null);

        String highText = txtHigh.getText().trim();
        String lowText = txtLow.getText().trim();

        // Allow inside/outside bounds only if the range is bounded (has upper & lower bounds)
        boolean bounded = highText.length() * lowText.length() != 0;
        radInside.setEnabled(bounded);
        radOutside.setEnabled(bounded);

        if (highText.length() + lowText.length() == 0) {
            setErrorMessage(Localization.getString("RangeFilterWizardPage.EmptyError")); //$NON-NLS-1$
            return;
        }
        try {
            Double high = highText.length() > 0 ? Double.parseDouble(txtHigh.getText().trim()) : null;
            Double low = lowText.length() > 0 ? Double.parseDouble(txtLow.getText().trim()) : null;
            if (low != null && high != null && low >= high) {
                setErrorMessage(Localization.getString("RangeFilterWizardPage.BoundError")); //$NON-NLS-1$
                return;
            }

            // By default, if range is unbounded, force "inside" bounds to apply.
            int style = (!radInside.isEnabled() || radInside.getSelection() ? RangeFilter.INSIDE_BOUNDS : RangeFilter.OUTSIDE_BOUNDS);
            int selected = cboColumn.getSelectionIndex();
            if(chkInclusive.getSelection()) {
                style |= RangeFilter.INCLUSIVE;
            }
            filter = new RangeFilter(selected, low, high, style);
        } catch(NumberFormatException nfe) {}
    }

