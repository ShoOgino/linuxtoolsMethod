/**
 * Create a bunch of actions
 */
	public void createActions() {
		
		//Opens from some location in your program
		open_callgraph = new Action(Messages.getString("SystemTapView.7")){ //$NON-NLS-1$
			public void run(){
				FileDialog dialog = new FileDialog(new Shell(), SWT.NONE);
				String filePath =  dialog.open();
				if (filePath != null){
					StapGraphParser new_parser = new StapGraphParser(Messages.getString("SystemTapView.10"), filePath); //$NON-NLS-1$
					new_parser.schedule();					
				}
			}
		};
		
		//Opens from the default location
		open_default = new Action(Messages.getString("SystemTapView.11")){ //$NON-NLS-1$
			public void run(){
				StapGraphParser new_parser = new 
						StapGraphParser(Messages.getString("SystemTapView.12"),  //$NON-NLS-1$
										PluginConstants.STAP_GRAPH_DEFAULT_IO_PATH);
				new_parser.schedule();					
			}
		};
		
		
		error_errorLog = new Action("Error log") {
			public void run() {
				boolean error = false;
				File log = new File(PluginConstants.DEFAULT_OUTPUT + "Error.log");
				BufferedReader buff;
				try {
					buff = new BufferedReader(new FileReader(log));
				String logText = "";
				String line;
				
				while ((line = buff.readLine()) != null) {
					logText+=line + PluginConstants.NEW_LINE;
				}
				
				Shell sh = new Shell();
				sh.setLayout(new FillLayout());
				sh.setSize(400,400);
				Text txt = new Text(sh, SWT.MULTI | SWT.V_SCROLL | SWT.WRAP | SWT.READ_ONLY);
				
				txt.setText(logText);
				sh.open();
				} catch (FileNotFoundException e) {
					error = true;
				} catch (IOException e) {
					error = true;
				} finally {
					if (error) {
						SystemTapUIErrorMessages mess = new SystemTapUIErrorMessages(
							"ErrorLog reading error",
							"Error reading error log",
							"Error log could not be read, most likely this is because" +
							" the log file could not be found.");
						mess.schedule();
					}
				}
				
			}
		};
		
		error_deleteError = new Action("Clear log") {
			public void run() {
				
				try {
					File log = new File(PluginConstants.DEFAULT_OUTPUT + "Error.log");
					log.delete();
					log.createNewFile();
				} catch (IOException e) {
					e.printStackTrace();
				}
				
			}
		};
		
		//Save callgraph.out
		save_callgraph = new Action(Messages.getString("SystemTapView.8")){ //$NON-NLS-1$
			public void run(){
				Shell sh = new Shell();
				FileDialog dialog = new FileDialog(sh, SWT.SAVE);
				String filePath = dialog.open();
				
				if (filePath != null) {
					File file = new File(filePath);
					String content = Messages.getString("SystemTapView.25") //$NON-NLS-1$
					+ parser.graphText
					+ NEW_LINE
					+ parser.serialInfo
					+ NEW_LINE
					+ parser.timeInfo
					+ NEW_LINE
					+ parser.cumulativeTimeInfo
					+ NEW_LINE
					+ parser.markedNodes + NEW_LINE;
					try {
						// WAS THE FILE CREATED OR DOES IT ALREADY EXIST
						if (file.createNewFile()) {
							Helper.writeToFile(filePath, content);
						} else {
							if (MessageDialog
									.openConfirm(
											sh,
											Messages
													.getString("SystemTapView.FileExistsTitle"), //$NON-NLS-1$
											Messages
													.getString("SystemTapView.FileExistsMessage"))) { //$NON-NLS-1$
								file.delete();
								file.createNewFile();
								Helper.writeToFile(filePath, content);
							}
						}
					} catch (IOException e1) {
						e1.printStackTrace();
					}

				}
			}
		};
		
		
		
		
		//Set drawmode to tree view
		view_treeview = new Action(Messages.getString("SystemTapView.16")){ //$NON-NLS-1$
			public void run() {
				graph.draw(StapGraph.CONSTANT_DRAWMODE_TREE, graph.getAnimationMode(), graph
						.getRootVisibleNode(), graph.getBounds().width / 2, 0);
				graph.scrollTo(graph.getNode(graph.getRootVisibleNode()).getLocation().x
						- graph.getBounds().width / 2, graph.getNode(
						graph.getRootVisibleNode()).getLocation().y);
			}
		};
		
		
		//Set drawmode to radial view
		view_radialview = new Action(Messages.getString("SystemTapView.17")){ //$NON-NLS-1$
			public void run(){
				graph.draw(StapGraph.CONSTANT_DRAWMODE_RADIAL, graph.getAnimationMode(),
						graph.getRootVisibleNode(), 0, 0);
			}
		};
		
		//Set drawmode to aggregate view
		view_aggregateview = new Action(Messages.getString("SystemTapView.18")){ //$NON-NLS-1$
			public void run(){
				graph.draw(StapGraph.CONSTANT_DRAWMODE_AGGREGATE, graph.getAnimationMode(), 
						graph.getRootVisibleNode(), 0, 0);
			}
		};
		
		//Set drawmode to box view
		view_boxview = new Action(Messages.getString("SystemTapView.19")){ //$NON-NLS-1$
			public void run(){
				graph.draw(StapGraph.CONSTANT_DRAWMODE_BOX, graph.getAnimationMode(), 
						graph.getRootVisibleNode(), 0, 0);
			}
		};
		
		//Set animation mode to slow
		animation_slow = new Action(Messages.getString("SystemTapView.20"), Action.AS_RADIO_BUTTON){ //$NON-NLS-1$
			public void run(){
				graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_SLOW);
				this.setChecked(true);
				animation_slow.setChecked(true);
				animation_fast.setChecked(false);
			}
		};
		animation_slow.setChecked(true);
		
		//Set animation mode to fast
		animation_fast = new Action(Messages.getString("SystemTapView.22"), Action.AS_RADIO_BUTTON){ //$NON-NLS-1$
			public void run(){
				graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_FASTEST);
				animation_slow.setChecked(false);
				animation_fast.setChecked(true);
			}
		};
		
		//Toggle collapse mode
		mode_collapsednodes = new Action(Messages.getString("SystemTapView.24"), Action.AS_CHECK_BOX){ //$NON-NLS-1$
			public void run(){
				
				if (graph.isCollapseMode()) {
					graph.setCollapseMode(false);
					graph.draw(graph.getRootVisibleNode(), 0, 0);
				}
				else {
					graph.setCollapseMode(true);
					graph.draw(graph.getRootVisibleNode(), 0, 0);
				}
			}
		};
		mode_collapsednodes.setChecked(true);
		
    	
    	/*
    	 * Execute a kill command on all running processes containing 'stap' 
    	 */
		killSystemTapScript = new Action(Messages.getString("SystemTapView.KillScriptButton")) { //$NON-NLS-1$
			
			public void run() {
				Runtime rt = Runtime.getRuntime();
				try {
					rt.exec("kill stap"); //$NON-NLS-1$
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			
		};
		killSystemTapScript.setToolTipText(Messages.getString("SystemTapView.KillScriptToolTip")); //$NON-NLS-1$
		
		/*
		 * Check the current version of SystemTap
		 */
		checkSystemTapVersion = new Action(Messages.getString("SystemTapView.CheckVersionButton")) { //$NON-NLS-1$
			
			public void run() {
				Runtime rt = Runtime.getRuntime();
				try {
					Process pr = rt.exec("stap -V"); //$NON-NLS-1$
					BufferedReader buf = new BufferedReader(new InputStreamReader(pr
							.getErrorStream()));
					String line = ""; //$NON-NLS-1$
					String message = ""; //$NON-NLS-1$
					
					while ((line = buf.readLine()) != null) {
						message += line + NEW_LINE; //$NON-NLS-1$
					}
					
					try {
						pr.waitFor();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}

					
					Shell sh = new Shell();
					
					MessageDialog.openInformation(sh, Messages.getString("SystemTapView.SystemTapVersionBox"), message); //$NON-NLS-1$
						
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			
			
		};
		checkSystemTapVersion.setToolTipText(Messages.getString("SystemTapView.CheckVersionToolTip")); //$NON-NLS-1$
		
		
		disposeGraph = new Action("Dispose graph") { //$NON-NLS-1$
			
			public void run() {
				SystemTapView.disposeGraph();
			}
			
			
		};
		disposeGraph.setToolTipText("Dispose of graph area"); //$NON-NLS-1$
	}

