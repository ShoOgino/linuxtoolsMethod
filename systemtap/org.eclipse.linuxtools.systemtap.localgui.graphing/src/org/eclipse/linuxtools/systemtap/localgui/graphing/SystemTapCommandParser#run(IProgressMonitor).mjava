	@Override
	protected IStatus run(IProgressMonitor monitor) {
		
			if (graphingMode) {
				//Delegate to graphing parser instead of this one
				StapGraphParser p = new StapGraphParser(Messages.getString("SystemTapCommandParser.0"), filePath); //$NON-NLS-1$
				p.schedule();
				
				String text = Helper.getMainConsoleTextByName(configName);
				returnText = "       " + configName+"\n"; //$NON-NLS-1$ //$NON-NLS-2$
				returnText += dashes() + "\n\n"; //$NON-NLS-1$
				setText(text);

				
				SystemTapUIJob uijob = new SystemTapUIJob("SystemTapUIJob", this, this.useColours); //$NON-NLS-1$
				uijob.schedule();
			
				return Status.OK_STATUS;
				
			}
			
			printIsDone = true;				//Used to synchronize UIjobs and avoid 
			//running many useless UIjobs simultaneously
			returnText = ""; //$NON-NLS-1$
			// SEND THE COMMAND
			try {
				FileInputStream readFile = new FileInputStream(filePath);
				BufferedReader buf = new BufferedReader(new InputStreamReader(readFile));				
				String line = ""; //$NON-NLS-1$
				
				if (monitor.isCanceled()) {
					buf.close();
					File f = new File(filePath);
					f.delete();
					return Status.CANCEL_STATUS;
				}


				testOutput = ""; //$NON-NLS-1$
				
				returnText += Messages.getString("SystemTapCommand.1"); //$NON-NLS-1$
				returnText += "\n\n"; //$NON-NLS-1$
				returnText += dashes();
				returnText += "\n"; //$NON-NLS-1$

				clearDone();
				SystemTapUIJob uijob = new SystemTapUIJob("SystemTapUIJob", this, this.useColours); //$NON-NLS-1$
				uijob.schedule();

				while (processFinished == false) {
						while ((line = buf.readLine()) != null) {
							if (monitor.isCanceled()) {
								buf.close();
								File f = new File(filePath);
								f.delete();
								return Status.CANCEL_STATUS;
							}
							
						/*	if (errorLine.contains("stapdev") && errorLine.contains("stapusr")) {//$NON-NLS-1$ 
								Syste				mTapUIErrorMessages message = new SystemTapUIErrorMessages("staperror", 
										"Insufficient privileges", "It seems you don't have enough privileges " +
												"to run SystemTap on this system. Please run the install.sh script " +
												"before continuing.");
								message.schedule();
							}
							
							if (errorLine.contains("___STAP_MARKER___")) {
								SystemTapUIErrorMessages message = new SystemTapUIErrorMessages("staperror", 
										"No markers detected", "No systemtap markers were found in the " +
												"selected program. Please execute using the parse_function_nomark.stp" +
												" script instead. (If you are using the launch shortcut, just click" +
												" cancel when prompted to use stap markers)");
								message.schedule();
							}
						*/
								
							
							
							if (line != null) {
								if (line.length() > 0) {
									if (testMode)
										testOutput += line;
									setText(line + "\n"); //$NON-NLS-1$
	
									if (checkDone()) {
										clearDone();
										uijob.schedule();
									}
	
								}
							}
	
					} 
				}
					setText("\n\n   Terminating SystemTap script"); //$NON-NLS-1$
					
					//Schedule one more just in case
					uijob.schedule(); 
					buf.close();

			} catch (IOException e) {
				e.printStackTrace();
			}
			
			File f = new File(filePath);
			f.delete();
			

		return Status.OK_STATUS;
	}

