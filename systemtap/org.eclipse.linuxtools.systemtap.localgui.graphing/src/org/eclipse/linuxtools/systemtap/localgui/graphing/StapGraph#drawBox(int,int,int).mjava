	/**
	 * Draws a tree roughly starting from node id
	 */
	public void drawBox(int id, int x, int y) {
		setLevelLimits(id);
		int MaxLevelPixelWidth = 1;
		int currPixelWidth = 1;
		
		// FIND THE LEVEL THAT WILL BE THE WIDEST
		// WILL BE A USEFUL VALUE LATER ON
		int count;
		
		
		for (int i = topLevelToDraw; i <= getBottomLevelToDraw(); i++) {
			count = 0;
			levels.get(i).add(0, count);
			int size = levels.get(i).size();
			for (int j = 1; j < size; j++){
				int val = levels.get(i).get(j);
				if (collapse_mode && nodeDataMap.get(val).isPartOfCollapsedNode()) {
					continue;
				}
				if (!collapse_mode && nodeDataMap.get(val).isCollapsed)
					continue;
				
				currPixelWidth += nodeDataMap.get(val).name.length() * 10 + StapGraph.CONSTANT_HORIZONTAL_SPACING_FOR_BOX;
				if (MaxLevelPixelWidth < currPixelWidth) {
					MaxLevelPixelWidth = currPixelWidth;
				}
				count++;
				levels.get(i).remove(0);
				levels.get(i).add(0, count);
			}
			currPixelWidth = 1;
		}

		MaxLevelPixelWidth = (int)(MaxLevelPixelWidth/scale);
		
		nodeMap.get(id).setLocation(MaxLevelPixelWidth/2,y);
		drawFromBottomToTop(bottomLevelToDraw, y
				+ ((bottomLevelToDraw  - topLevelToDraw ) * 3 * (int)(CONSTANT_VERTICAL_INCREMENT/scale)),
				MaxLevelPixelWidth);
		nodeMap.get(id).setLocation(MaxLevelPixelWidth/2,y);	

	}

