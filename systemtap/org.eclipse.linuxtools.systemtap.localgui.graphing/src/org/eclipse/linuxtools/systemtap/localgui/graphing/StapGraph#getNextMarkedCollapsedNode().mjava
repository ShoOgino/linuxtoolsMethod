	/**
	 * Returns the id of the next marked collapsed node.
 	 * Wraps back to the first marked node.
	 *
	 * @return Node id of next marked collapsed node.
	 */
	public int getNextMarkedCollapsedNode() {
		if (markedCollapsedNodes.size() == 0)
			return -1;
		
		
		if (nextMarkedCollapsedNode >= markedCollapsedNodes.size())
			nextMarkedCollapsedNode = 0;
		int index = nextMarkedCollapsedNode;
		nextMarkedCollapsedNode++;
		
		
		return markedCollapsedNodes.get(index);
	}
//	
//	/**
//	 * Activated when mouse is pressed. Used for panning.
//	 * 
//	 * @return
//	 */
//	public boolean isMouseDown() {
//		return mouseDown;
//	}
//
//
//	/**
//	 * Set mouseDown flag, used for panning.
//	 * 
//	 * @return
//	 */
//	public void setMouseDown(boolean mouseDown) {
//		this.mouseDown = mouseDown;
//	}
//
//	
//	/**
//	 * X coordinate used for panning
//	 * 
//	 * @return
//	 */
//	public int getMouseDownX() {
//		return mouseDownX;
//	}
//
//	/**
//	 * Y coordinate used for panning
//	 * 
//	 * @return
//	 */
//	public int getMouseDownY() {
//		return mouseDownY;
//	}
//
//
//	/**
//	 * X coordinate used for panning
//	 * 
//	 * @return
//	 */
//	public void setMouseDownX(int mouseDownX) {
//		this.mouseDownX = mouseDownX;
//	}
//
//	
//	/**
//	 * Y coordinate used for panning
//	 * 
//	 * @return
//	 */
//	public void setMouseDownY(int mouseDownY) {
//		this.mouseDownY = mouseDownY;
//	}

