	/**
	 * Populates Animate menu.
	 */
	public void createAnimateActions() {
		//Set animation mode to slow
		animation_slow = new Action(Messages.getString("SystemTapView.20"), Action.AS_RADIO_BUTTON){ //$NON-NLS-1$
			public void run(){
				graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_SLOW);
				this.setChecked(true);
				animation_slow.setChecked(true);
				animation_fast.setChecked(false);
			}
		};
		
		animation_slow.setChecked(true);
		
		//Set animation mode to fast
		animation_fast = new Action(Messages.getString("SystemTapView.22"), Action.AS_RADIO_BUTTON){ //$NON-NLS-1$
			public void run(){
				graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_FASTEST);
				animation_slow.setChecked(false);
				animation_fast.setChecked(true);
			}
		};
		
		//Toggle collapse mode
		mode_collapsednodes = new Action(Messages.getString("SystemTapView.24"), Action.AS_CHECK_BOX){ //$NON-NLS-1$
			public void run(){
				
				if (graph.isCollapseMode()) {
					graph.setCollapseMode(false);
					graph.draw(graph.getRootVisibleNode());
				}
				else {
					graph.setCollapseMode(true);
					graph.draw(graph.getRootVisibleNode());
				}
			}
		};
		
		ImageDescriptor newImage = ImageDescriptor.createFromImage(
				new Image(Display.getCurrent(), PluginConstants.PLUGIN_LOCATION + "icons/mode_collapsednodes.gif"));
		mode_collapsednodes.setImageDescriptor(newImage);
		
		limits = new Action("Set limits", Action.AS_PUSH_BUTTON) {
			private Spinner limit;
			private Spinner buffer;
			private Shell sh;
			public void run() {
				sh = new Shell();
				sh.setLayout(new GridLayout());
				sh.setSize(150, 200);
				Label limitLabel = new Label(sh, SWT.NONE);
				limitLabel.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				limitLabel.setText("Max nodes: ");
				limit = new Spinner(sh, SWT.BORDER);
				limit.setMaximum(5000);
				limit.setSelection(graph.getMaxNodes());
				limit.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				
				Label bufferLabel = new Label(sh, SWT.NONE);
				bufferLabel.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				bufferLabel.setText("Max depth: ");
				buffer = new Spinner(sh, SWT.BORDER);
				buffer.setMaximum(5000);
				buffer.setSelection(graph.getLevelBuffer());
				buffer.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				
				Button set_limit = new Button(sh, SWT.PUSH);
				set_limit.setText("Set values");
				set_limit.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				set_limit.addSelectionListener(new SelectionAdapter() {
					public void widgetSelected(SelectionEvent e) {
						boolean redraw = false;
						if (limit.getSelection() > 0 && buffer.getSelection() > 0) {
							graph.setMaxNodes(limit.getSelection());
							graph.setLevelBuffer(buffer.getSelection());
							
							if (graph.changeLevelLimits(graph.getLevelOfNode(graph.getRootVisibleNode()))) {
								SystemTapUIErrorMessages mess = new SystemTapUIErrorMessages(
										"LevelBuffer too high", "LevelBuffer too high", 
										"Unfortunately the requested setting for level buffer " +
										"could not be processed due to the maximum number of nodes. " +
										"Setting levelBuffer to the maximum number of levels possible " +
										"without hitting the max nodes(" + graph.getLevelBuffer() +
										")." + PluginConstants.NEW_LINE + PluginConstants.NEW_LINE +  
										"If you really want to see more levels, increment max nodes. " +
										"This may cause lag on some systems.");
								mess.schedule();
							}
							
							redraw = true;
						}
						sh.dispose();
						
						if (redraw)
							graph.draw();
					}
					
				});

				
				sh.open();
			}
		};

	}

