	/**
	 * Initialize StapData object
	 * 
	 * @param graphModel
	 * @param style
	 * @param txt
	 * @param time
	 * @param called
	 * @param currentID
	 * @param caller
	 * @param isMarked
	 * @param message
	 */
	public StapData(StapGraph graphModel, int style, String txt, 
    		long time, int called, int currentID, int caller, boolean isMarked, String message) {
        this.time = time;
        this.style = style;
        this.called = called;
        this.expandable = false;
        callees = new ArrayList<Integer>();
        collapsedCallees = new ArrayList<Integer>();
        this.id = currentID;
        this.name = txt;
        this.graph = graphModel;
        this.hasCollapsedChildren = false;
        this.isCollapsed = false;
        this.onlyChildWithThisName = false;
        this.partOfCollapsedNode= false;
        this.collapsedCaller = -1;
        this.caller = caller;
        this.levelOfRecursion = 0;
        this.marked = isMarked;
        this.markedMessage = message;
        
        
    	//Add this data to the caller's list of IDs
		if (this.caller != -1) {
			if (graphModel.getData(this.caller) != null) {
				graphModel.getData(this.caller).addCallee(this.id, this.time);
				this.levelOfRecursion = graphModel.getData(this.caller).levelOfRecursion + 1;
			}
		}
        
		//---------------Recursion management
        //Insert new level if necessary
		if (graphModel.levels.get(levelOfRecursion) == null)
			graphModel.levels.put(levelOfRecursion, new ArrayList<Integer>());
        graphModel.levels.get(levelOfRecursion).add(this.id);
        
		//Keep track of the lowest level of recursion
		if (levelOfRecursion > graphModel.getLowestLevelOfNodesAdded())
			graphModel.setLowestLevelOfNodesAdded(levelOfRecursion);
        

        this.noCaller = (caller == -1) ? true : false;
    }

