	/**
	 * Run this method when there are no more error messages to handle. 
	 * Creates the error pop-up message and writes to log.
	 * 
	 */
	public void finishHandling() {
		if (!isErrorRecognized()) {
			errorMessage+=Messages.getString("SystemTapErrorHandler.4") + //$NON-NLS-1$
					Messages.getString("SystemTapErrorHandler.5"); //$NON-NLS-1$
		}
		
		writeToLog();
		
		if (mismatchedProbePoints){
			StringBuffer resultFileContent = new StringBuffer();
			String fileLocation = PluginConstants.DEFAULT_OUTPUT + "callgraphGen.stp";
			String line;
			boolean skip = false;
			File file = new File(fileLocation);
			try {
				BufferedReader buff = new BufferedReader(new FileReader(file));
				while ((line = buff.readLine()) != null){
					skip =  false;
					for (String func : functions){
						if (line.contains("function(\"" + func + "\").call")){
							skip = true;
							buff.readLine();
							buff.readLine();
							buff.readLine();
							buff.readLine();
							buff.readLine();
							break;
						}
					}
					
					if (!skip && !line.equals("\n")){							
						resultFileContent.append(line);
						resultFileContent.append("\n");
					}
				}
				
				buff.close();
				
				BufferedWriter wbuff= new BufferedWriter(new FileWriter(file));
				wbuff.write(resultFileContent.toString());
				wbuff.close();
				
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
			
		}else{
			SystemTapUIErrorMessages mes = new SystemTapUIErrorMessages(
					Messages.getString("SystemTapErrorHandler.ErrorMessageName"),  //$NON-NLS-1$
					Messages.getString("SystemTapErrorHandler.ErrorMessageTitle"),  //$NON-NLS-1$
					errorMessage); //$NON-NLS-1$ //$NON-NLS-2$
			mes.schedule();
		}
		
		
	}

