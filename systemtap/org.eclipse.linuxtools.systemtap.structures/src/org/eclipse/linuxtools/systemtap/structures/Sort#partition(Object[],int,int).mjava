    /**
     * Partitions the input list, used by Quiksort.
     *
     * @param list The list to partition.
     * @param p Recursed value, initially top value.
     * @param r Recursed value, initially bottom value.
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    private static int partition (Object[] list, int p, int r) {
        Comparable pivot = (list[p] instanceof Comparable ? (Comparable)list[p] : list[p].toString());
        int lo = p;
        int hi = r;

        while (true) {
            while (getComparable(list[hi]).compareTo(pivot) >= 0 && lo < hi) {
                hi--;
            }

            while (getComparable(list[lo]).compareTo(pivot) < 0 && lo < hi) {
                lo++;
            }

            if (lo < hi) {
                Object T = list[lo];
                list[lo] = list[hi];
                list[hi] = T;
            } else {
                return hi;
            }
        }
    }

