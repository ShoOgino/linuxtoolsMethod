	public void createFieldEditors() {
		BooleanFieldEditor logging = 
			new BooleanFieldEditor(PreferenceConstants.P_LOG_ENABLED, Localization.getString("LoggingPreferencePage.EnableLogging"), getFieldEditorParent());
		String[] debugLevel = {Localization.getString("LoggingPreferencePage.Debug"), "" + LogManager.DEBUG};
		String[] infoLevel = {Localization.getString("LoggingPreferencePage.Info"),"" + LogManager.INFO};
		String[] criticalLevel = {Localization.getString("LoggingPreferencePage.Critical"), "" + LogManager.CRITICAL};
		String[] fatalLevel = {Localization.getString("LoggingPreferencePage.Fatal"), "" + LogManager.FATAL};
		String[][] levels = {debugLevel,infoLevel,criticalLevel,fatalLevel};

		ComboFieldEditor level = 
			new ComboFieldEditor(PreferenceConstants.P_LOG_LEVEL, Localization.getString("LoggingPreferencePage.LoggingLevel"), levels, getFieldEditorParent());
		RadioGroupFieldEditor loggingType = 
			new RadioGroupFieldEditor(PreferenceConstants.P_LOG_TYPE, Localization.getString("LoggingPreferencePage.LogTo"), 1,
					new String[][] {{ Localization.getString("LoggingPreferencePage.Console"), "" + LogManager.CONSOLE}, 
									{Localization.getString("LoggingPreferencePage.File"), "" + LogManager.FILE} }
					, getFieldEditorParent());
		StringFieldEditor file = new StringFieldEditor(PreferenceConstants.P_LOG_FILE, Localization.getString("LoggingPreferencePage.File"), getFieldEditorParent());
		file.setEmptyStringAllowed(true);
		
		this.addField(logging);
		this.addField(level);
		this.addField(loggingType);
		this.addField(file);
	}

