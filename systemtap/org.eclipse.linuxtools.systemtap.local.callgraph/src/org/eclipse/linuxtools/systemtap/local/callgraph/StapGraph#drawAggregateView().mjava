	/**
	 * THE AGGREGATE VIEW FROM VIEW -> AGGREGATE VIEW
	 */
	public void drawAggregateView(){
		
		//TEMPORARY STORAGE OF THE ENTRIES
		//IMPLEMENTS A COMPARATOR TO STORE BY ORDER OF THE VALUE
		TreeSet<Entry<String, Long>> sortedValues = new TreeSet<Entry<String, Long>>(StapGraph.VALUE_ORDER);
		sortedValues.addAll(aggregateTime.entrySet());
		
		
		if (aggregateNodes == null){
			aggregateNodes = new ArrayList<GraphNode>();
		}else{
			aggregateNodes.clear();
		}
		
		//-------------Format numbers
		float percentage_time;
		float percentage_count;
		int maxTimesCalled = 0;
		final int colorLevels = 15;
		final int colorLevelDifference = 12;
		int primary;
		int secondary;
		
		NumberFormat num = NumberFormat.getInstance(Locale.CANADA);
		num.setMinimumFractionDigits(2);
		num.setMaximumFractionDigits(2);

		//FIND THE MOST TIMES A FUNCTION IS CALLED
		for (int val : aggregateCount.values()){
			if ( val > maxTimesCalled){
				maxTimesCalled = val;
			}
		}
		
		//-------------Draw nodes
		for (Entry<String, Long> ent : sortedValues) {
			if (!ent.getKey().equals("init")) { //$NON-NLS-1$

				GraphNode n = new GraphNode(this.getGraphModel(),SWT.NONE);
				aggregateNodes.add(n);
				
				percentage_count = (float)aggregateCount.get(ent.getKey()) / (float)maxTimesCalled;
				percentage_time = ((float) ent.getValue() / this
						.getTotalTime() * 100);
				n.setText(ent.getKey() + "\n"  //$NON-NLS-1$
						+ num.format((float)percentage_time) + "%" + "\n" //$NON-NLS-1$ //$NON-NLS-2$
						+ aggregateCount.get(ent.getKey()) + "\n") ; //$NON-NLS-1$
				
				
				primary = (int)(percentage_count * colorLevels * colorLevelDifference);
				secondary = (colorLevels * colorLevelDifference) - (int)(percentage_count * colorLevels * colorLevelDifference);
				
				primary = Math.max(0, primary);
				secondary = Math.max(0, secondary);
				
				primary = Math.min(primary, 255);
				secondary = Math.min(secondary, 255);
				
				
				Color c = new Color(this.getDisplay(),primary,0,secondary);
				n.setBackgroundColor(c);
				n.setHighlightColor(c);
				n.setForegroundColor(new Color(this.getDisplay(),255,255,255));
				n.setTooltip(new Label(
						Messages.getString("StapGraph.2")+ ent.getKey() + "\n" //$NON-NLS-1$ //$NON-NLS-2$
						+ Messages.getString("StapGraph.3") + num.format((float)percentage_time) + "%" + "\n" //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
						+ Messages.getString("StapGraph.1") + aggregateCount.get(ent.getKey())		 //$NON-NLS-1$
				));
				n.setBorderWidth(2);
			}
		}
		
		//Set layout to gridlayout
		this.setLayoutAlgorithm(new AggregateLayoutAlgorithm(LayoutStyles.NONE, sortedValues, this.getTotalTime(), this.getBounds().width), true);
	}

