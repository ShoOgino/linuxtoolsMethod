	/**
     * Send a disconnection request to the data manager, and attempt to
     * close the open socket to the data manager. If anything fails the
     * connection is left in a unknown state (see stderr).
     * 
     * @return	true if successfully destroyed, false otherwise
     */
	public boolean destroyConnection () {

    	final DMRequest dcpacket = new DMRequest (DMRequest.DESTROY_CONN, 0, clientID, 0);
    	
    	try {
    		sendRequest (dcpacket);
	    	in.close();
	    	connected = false;
	    	return true;
    	} catch (final IOException e) {
    		new ErrorMessage("Connection close error!", "See stderr for more details").open();
    		System.err.println("Close error: " + e.getMessage());
    		return false;
    	}
    	
// Old code that actually checks the response and whatnot,
// removed because we can hang waiting for a response from
// (for example) a recently deceased Data Manager 
//    	if (!sendRequest (dcpacket))
//    		rc = false;
//    
//    	final DMResponse respacket = recvResponse ();
//    	
//    	if (respacket.getreturnCode() != 0)
//    		rc = false;
//    	
//    	try {
//	    	in.close();
//    	} catch (final IOException e) {
//    		System.err.println("Close error: " + e.getMessage());
//    		rc = false;
//    	}
//
//    	return rc;
	}

