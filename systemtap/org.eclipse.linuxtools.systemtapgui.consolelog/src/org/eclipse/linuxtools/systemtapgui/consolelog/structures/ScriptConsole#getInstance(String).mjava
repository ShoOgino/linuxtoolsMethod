	/**
	 * This method is used to get a reference to a <code>ScriptConsole</code>.  If there
	 * is already an console that has the same name as that provided it will be stopped, 
	 * cleared and returned to the caller to use.  If there is no console matching the 
	 * provided name then a new <code>ScriptConsole</code> will be created for use.
	 * @param name The name of the console that should be returned if available.
	 * @return The console with the provided name, or a new instance if none exist.
	 */
	public static ScriptConsole getInstance(String name) {
		ScriptConsole console = null;
		try {
			IConsole ic[] = ConsolePlugin.getDefault().getConsoleManager().getConsoles();
	
			//Prevent running the same script twice
			if(null != ic) {
				ScriptConsole activeConsole;
				StopScriptAction ssa = new StopScriptAction();
				ssa.init(PlatformUI.getWorkbench().getActiveWorkbenchWindow());
				for(int i=0; i<ic.length; i++) {
					activeConsole = (ScriptConsole)ic[i];
					if(activeConsole.getName().endsWith(name)) {
						//Stop any script currently running
						ssa.run(i);
						//Remove output from last run
						activeConsole.clearConsole();
						activeConsole.setName(name);
						console = activeConsole;
					}
				}
			}
			
			if(null == console) {
				console = new ScriptConsole(name, null);
				ConsolePlugin.getDefault().getConsoleManager().addConsoles(new IConsole[] {console});
			}
		} catch(NullPointerException npe) {
			console = null;
		}
		return console;
	}

