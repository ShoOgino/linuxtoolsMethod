    /**
     * Runs the provided command in this ScriptConsole instance.
     * @param command The command and arguments to run.
     * @param envVars The environment variables to use while running
     * @param remoteOptions The remote options (such as username and password) to run the script with.
     * @param errorParser The parser to handle error messages generated by the command
     * @since 3.0
     */
    public void run(String[] command, String[] envVars, final RemoteScriptOptions remoteOptions, IErrorParser errorParser) {
        // Don't start a new command if one is already waiting to be started.
        if (waitingToStart()) {
            return;
        }
        cmd = new ScpExec(command, remoteOptions);

        this.stopCommand = new Runnable() {
            private final Command stopcmd = cmd;
            private final String stopString = getStopString();

            @Override
            public void run() {
                ScpExec stop = new ScpExec(new String[]{stopString}, remoteOptions);
                try {
                    synchronized (stopcmd) {
                        while (stopcmd.isRunning()) {
                            stop.start();
                            stopcmd.wait(RETRY_STOP_TIME);
                        }
                    }
                } catch (CoreException e) {
                    // Failed to start the 'stop' process. Ignore.
                } catch (InterruptedException e) {
                    // Wait was interrupted. Exit.
                }
            }
        };
        this.run(cmd, errorParser);
    }

