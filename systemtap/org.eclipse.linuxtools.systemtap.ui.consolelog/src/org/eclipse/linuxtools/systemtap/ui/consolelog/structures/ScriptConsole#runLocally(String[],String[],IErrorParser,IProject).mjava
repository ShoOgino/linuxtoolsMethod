    /**
     * Runs the provided command in this ScriptConsole instance on the current
     * host.
     * @param command The command and arguments to run.
     * @param envVars The environment variables to use while running
     * @param errorParser The parser to handle error messages generated by the command
     * @param project The project that command belongs to or null
     * @since 2.1
     */
    public void runLocally(String[] command, String[] envVars, IErrorParser errorParser, IProject project) {
        // Don't start a new command if one is already waiting to be started.
        if (waitingToStart()) {
            return;
        }
        cmd = new Command(command, envVars, project);
        final IProject proj = project;

        stopCommand = new Runnable() {
            private final Command stopcmd = cmd;
            String stopString = getStopString();

            @Override
            public void run() {
                try {
                    synchronized (stopcmd) {
                        while (stopcmd.isRunning()) {
                            RuntimeProcessFactory.getFactory().exec(stopString, null, proj);
                            stopcmd.wait(RETRY_STOP_TIME);
                        }
                    }
                } catch (IOException e) {
                    ExceptionErrorDialog.openError(Localization.getString("ScriptConsole.ErrorKillingStap"), e.getMessage(), e); //$NON-NLS-1$
                } catch (InterruptedException e) {
                    //Wait was interrupted. Exit.
                }
            }
        };
        this.run(cmd, errorParser);
    }

