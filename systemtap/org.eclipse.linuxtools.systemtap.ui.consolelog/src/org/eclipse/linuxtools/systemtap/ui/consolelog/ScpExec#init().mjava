	protected boolean init() {
		String user = ConsoleLogPlugin.getDefault().getPreferenceStore()
				.getString(ConsoleLogPreferenceConstants.SCP_USER);
		String host = ConsoleLogPlugin.getDefault().getPreferenceStore()
				.getString(ConsoleLogPreferenceConstants.HOST_NAME);
		try {
			JSch jsch = new JSch();

			session = jsch.getSession(user, host, 22);

			session.setPassword(ConsoleLogPlugin.getDefault()
					.getPreferenceStore()
					.getString(ConsoleLogPreferenceConstants.SCP_PASSWORD));

			java.util.Properties config = new java.util.Properties();
			config.put("StrictHostKeyChecking", "no"); //$NON-NLS-1$//$NON-NLS-2$
			session.setConfig(config);
			session.connect();
			channel = session.openChannel("exec"); //$NON-NLS-1$
			((ChannelExec) channel).setCommand(command);

			channel.setInputStream(null, true);
			channel.setOutputStream(System.out, true);
			channel.setExtOutputStream(System.err, true);

			errorGobbler = new StreamGobbler(channel.getExtInputStream());
			inputGobbler = new StreamGobbler(channel.getInputStream());

			this.transferListeners();
			return true;

		} catch (JSchException e) {
			e.printStackTrace();
			new ErrorMessage("Error in connection",
					"File Transfer failed.\n See stderr for more details")
					.open();
			return false;
		} catch (IOException e) {
			e.printStackTrace();
			new ErrorMessage("Error in connection",
					"File Transfer failed.\n See stderr for more details")
					.open();
			return false;
		}
	}

