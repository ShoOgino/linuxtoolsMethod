	protected boolean init()
	{
	  String user=ConsoleLogPlugin.getDefault().getPreferenceStore().getString(ConsoleLogPreferenceConstants.SCP_USER);
      String host=ConsoleLogPlugin.getDefault().getPreferenceStore().getString(ConsoleLogPreferenceConstants.HOST_NAME);
      try{
      JSch jsch=new JSch();
      
      session=jsch.getSession(user, host, 22);

      session.setPassword(ConsoleLogPlugin.getDefault().getPreferenceStore().getString(ConsoleLogPreferenceConstants.SCP_PASSWORD));
      
      java.util.Properties config = new java.util.Properties();
                      config.put("StrictHostKeyChecking", "no");
      session.setConfig(config); 
      session.connect();
      channel=session.openChannel("exec");
      ((ChannelExec)channel).setCommand(command);

      // get I/O streams for remote scp
    // channel.
      channel.setInputStream(null,true);
      channel.setOutputStream(System.out,true);
      channel.setExtOutputStream(System.err,
    		  true);
    //  InputStream in=channel.getInputStream();
   
		errorGobbler = new StreamGobbler(channel.getExtInputStream());            
		inputGobbler = new StreamGobbler(channel.getInputStream());
      	
		int i;
		for(i=0; i<inputListeners.size(); i++)
			inputGobbler.addDataListener(inputListeners.get(i));
		for(i=0; i<errorListeners.size(); i++)
			errorGobbler.addDataListener(errorListeners.get(i));
		return true;

      }catch(Exception e)
      {
    	  e.printStackTrace();
    	  new ErrorMessage("Error in connection", "File Transfer failed.\n See stderr for more details").open();
    	  return false;
      }
    }

