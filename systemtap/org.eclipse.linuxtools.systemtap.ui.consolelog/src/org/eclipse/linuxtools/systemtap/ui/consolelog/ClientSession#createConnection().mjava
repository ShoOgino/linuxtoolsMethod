	/**
     * Grab hostname and port settings from the settings, attempt to open
     * socket, and finally attempt to open a connection to the data manager
     * and store a clientID. If anything fails the connection is left in an
     * unknown state (see stderr).
     * 
     * @return	true if everything succeeded, false otherwise.
     */
	public boolean createConnection () {

		final DMRequest ccpacket = new DMRequest (DMRequest.CREATE_CONN, 0, 0, 0);
		final byte buffer[] = new byte[DMResponse.packetsize];
		final DMResponse respacket;
		hostname = ConsoleLogPlugin.getDefault().getPreferenceStore().getString(ConsoleLogPreferenceConstants.HOST_NAME);
		portnumber = ConsoleLogPlugin.getDefault().getPreferenceStore().getInt(ConsoleLogPreferenceConstants.PORT_NUMBER);

		OutputStream out = null;
		try {

			Socket tmp = new Socket(hostname, portnumber);
			out = tmp.getOutputStream();
			in = tmp.getInputStream();
			out.write(ccpacket.getData());
			out.flush();
			in.read(buffer, 0, buffer.length);
			respacket = new DMResponse (buffer);

		} catch (final UnknownHostException uhe) {
			new ErrorMessage("Unknown host!", "See stderr for more details").open();
			System.err.println("Unknown host: " + uhe.getMessage());
			return false;
		} catch (final IOException ioe) {
			new ErrorMessage("Connection I/O error!", "See stderr for more details").open();
			System.err.println("Con I/O error: " + ioe.getMessage());
			//ioe.printStackTrace();
			return false;
		}

		if (!respacket.isValid())
		{
			return false;}


			clientID = respacket.getclientID();
			return true;
	}

