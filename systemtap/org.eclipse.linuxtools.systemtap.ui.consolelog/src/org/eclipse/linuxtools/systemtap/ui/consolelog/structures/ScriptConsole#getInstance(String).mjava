    /**
     * This method is used to create a reference to a new <code>ScriptConsole</code>.  If there
     * is already a console that has the same name as that provided it will be stopped,
     * cleared and returned to the caller to use.  If there is no console matching the
     * provided name then a new <code>ScriptConsole</code> will be created for use.
     * @param name The name of the console that should be created & returned.
     * @return A console of the specified name.
     */
    public synchronized static ScriptConsole getInstance(String name) {
        IConsole ic[] = ConsolePlugin.getDefault().getConsoleManager().getConsoles();
        if (ic != null) {
            ScriptConsole activeConsole;
            for (IConsole consoleIterator : ic) {
                if (consoleIterator instanceof ScriptConsole) {
                    activeConsole = (ScriptConsole) consoleIterator;
                    if (activeConsole.getBaseName().equals(name)) {
                        activeConsole.reset();
                        return activeConsole;
                    }
                }
            }
        }

        // If no console with given name exists, make a new one
        ScriptConsole console = new ScriptConsole(name, null);
        ConsolePlugin.getDefault().getConsoleManager().addConsoles(new IConsole[] {console});
        return console;
    }

