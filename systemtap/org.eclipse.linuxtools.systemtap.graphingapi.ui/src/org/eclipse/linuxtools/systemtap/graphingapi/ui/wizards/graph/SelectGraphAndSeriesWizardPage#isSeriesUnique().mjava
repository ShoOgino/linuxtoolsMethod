	/**
	 * Checks for conflicts in data selection. (An example of a conflict
	 * is two Y-series fields set to the same output value.)
	 * @return <code>true</code> if there is no conflict, <code>false</code> otherwise.
	 * Also visually marks conficting series.
	 */
	private boolean isSeriesUnique() {
		boolean foundDuplicate = false;

		// Undo duplicate marking, as it is to be updated.
		markAsDuplicate(cboXItem, false);
		for (int i = 0; i < cboYItems.length; i++) {
			markAsDuplicate(cboYItems[i], false);
		}

		for(int j,i=0; i<cboYItems.length; i++) {
			if(cboYItems[i].isVisible() && !deleted[i+1]) {

				// Find duplicates by comparing selection indices. Every combo has an
				// extra selection before column names (Row Num or NA), except Y-series 0.
				int offset = (i == 0 ? 1 : 0);

				for(j=i+1; j<cboYItems.length; j++) {
					try {
						if(!deleted[j+1] && cboYItems[j].isVisible()
								&& cboYItems[i].getSelectionIndex() + offset == cboYItems[j].getSelectionIndex()) {
							markAsDuplicate(cboYItems[i], true);
							markAsDuplicate(cboYItems[j], true);
							foundDuplicate = true;
						}
					} catch (Exception e) {
						// If a cboYItem has no item selected, don't mark any duplicates. Ignore.
					}
				}

				if (deleted[0]) {
					continue;
				}
				try {
					int selection = cboYItems[i].getSelectionIndex() + offset;
					if(selection != 0 && selection == cboXItem.getSelectionIndex()) {
						markAsDuplicate(cboYItems[i], true);
						markAsDuplicate(cboXItem, true);
						foundDuplicate = true;
					}
				} catch (Exception e) {
					// Ignore for same reason as above.
				}
			}
		}
		return !foundDuplicate;
	}

