    /**
     * Search given string for recognizable error messages. Can append the
     * contents of the string to the error log if writeToLog() or
     * finishHandling() are called. A call to finishHandling() will also open a
     * popup window with user-friendly messages corresponding to the
     * recognizable errors.
     *
     * @param doc
     */
    public void handle(IProgressMonitor m, String errors) {
        String[] errorsList = errors.split("\n"); //$NON-NLS-1$

        // READ FROM THE PROP FILE AND DETERMINE TYPE OF ERROR
        File file = new File(PluginConstants.getPluginLocation() + FILE_PROP);
        try {
            BufferedReader buff = new BufferedReader(new FileReader(file));
            String line;
            int index;

            for (String message : errorsList) {
//                boolean firstLine = true; // Keep the error about mismatched
                                            // probe points first
                buff = new BufferedReader(new FileReader(file));
                while ((line = buff.readLine()) != null) {
                    if (m != null && m.isCanceled())
                        return;
                    index = line.indexOf('=');
                    Pattern pat = Pattern.compile(line.substring(0, index),Pattern.DOTALL);
                    Matcher matcher = pat.matcher(message);

                    if (matcher.matches()) {
                        if (!isErrorRecognized()) {
                            errorMessage.append(Messages.getString("SystemTapErrorHandler.ErrorMessage2")); //$NON-NLS-1$
                            setErrorRecognized(true);
                        }
                        String errorFound = line.substring(index+1);

                        if (!errorMessage.toString().contains(errorFound)) {
                            errorMessage.append(errorFound+ PluginConstants.NEW_LINE);
                        }

                        //first line in error properties is mismatched probes
                        /*if (firstLine) {
                            findFunctions(m, message, pat);
                            mismatchedProbePoints = true;
                        }*/
                        break;
                    }
//                    firstLine = false;
                }
                buff.close();
            }

            logContents.append(errors);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

    }

