	/**
	 * Parses a String according to XML formatting rules. Will return a HashMap indexed by an
	 * identification number, where each value is a further HashMap of String, String pairs representing
	 * attributes.
	 * @param message
	 */
	public void parse(String message) {
		String tabstrip = message.replaceAll("\t", ""); //$NON-NLS-1$ //$NON-NLS-2$
		String[] lines = tabstrip.split("\n"); //$NON-NLS-1$

		for (String line : lines) {
			if (line.length() < 1) {
				continue;
			}

			if (line.charAt(0) == '<') {
				//Either an open or close tag
				if (line.charAt(1) == '/') {
					//Closing tag -- assume properly formed
					idList.remove((Integer) currentlyIn);
					currentlyIn = -1;
					if (idList.size() > 0) {
						currentlyIn = idList.get(idList.size()-1);
					}
					setTextMode(true);

				} else if (line.substring(line.length()-2, line.length() - 1).equals("/>")) { //$NON-NLS-1$
					//This tag opens and closes in one line
					id++;
					String[] tokens = line.split(" "); //$NON-NLS-1$
					HashMap<String,String> map = new HashMap<>();
					map.put(ATTR_NAME, tokens[0]);
					keyValues.put(id,map);
					textMode = false;
					addAttributes(currentlyIn, tokens, 1);

				} else {
					//Open tag
					idList.add(id);
					id++;
					currentlyIn = id;

					String[] tokens = line.split(" "); //$NON-NLS-1$

					//Add name variable
					HashMap<String,String> map = new HashMap<>();
					map.put(ATTR_NAME, tokens[0]);
					keyValues.put(id,map);

					addAttributes(currentlyIn, tokens, 1);
				}
			} else {
				//Attribute addition
				if (currentlyIn < 0 ) {
					continue;
				}

				if (textMode) {
					HashMap<String,String> map = keyValues.get(currentlyIn);
					map.put(ATTR_TEXT, line);
				}

				String[] tokens = line.split(" "); //$NON-NLS-1$
				addAttributes(currentlyIn, tokens, 0);
			}
		}
	}

