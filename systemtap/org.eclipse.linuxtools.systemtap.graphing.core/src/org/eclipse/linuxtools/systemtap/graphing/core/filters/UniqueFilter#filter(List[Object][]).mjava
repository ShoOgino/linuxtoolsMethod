	/**
	 * Verify that the number passed is in the bounds of the created filter.
	 *
	 * @param data The data to verify.
	 *
	 * @return True if the number is within bounds.
	 */
	@Override
	public List<Object>[] filter(List<Object>[] data) {
		if(column < 0 || column >= data.length) {
			return null;
		}

		List<Object>[] newData = Copier.copy(data);
		ArrayList<Object>[] aggregates = GraphingCorePlugin.createArrayList(newData.length, new Object());
		for(int i=0; i<aggregates.length;i++) {
			aggregates[i] = new ArrayList<>();
		}

		for(int k,j,i=newData[0].size()-1; i>=0; i--) {
			for(j=i-1; j>=0; j--) {
				if(newData[column].get(i).toString().equals(newData[column].get(j).toString())) {	//TODO: Find better equivilance method
					i--;
					for(k=0; k<newData.length; k++) {
						aggregates[k].add(newData[k].get(j));
						newData[k].remove(j);
					}
				}
			}
			for(k=0; k<newData.length; k++) {
				aggregates[k].add(newData[k].get(i));
				if(k!=column) {
					newData[k].remove(i);
					try {
						newData[k].add(i, aggregate.aggregate(NumberType.cleanObj2Num(aggregates[k].toArray())));
					} catch(NumberFormatException nfe) {
						newData[k].add(i, columnMerge(aggregates[k].toArray()));
					}
				}
				aggregates[k].clear();
			}
		}
		return newData;
	}

