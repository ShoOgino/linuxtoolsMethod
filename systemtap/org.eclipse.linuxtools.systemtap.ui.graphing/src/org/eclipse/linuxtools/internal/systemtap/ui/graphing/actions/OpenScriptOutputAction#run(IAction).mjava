	/**
	 * This is the main method of the action.  It handles prompting the user
	 * for a file that they want to graph.  Then prompts the user to select a
	 * parsing expression to use to break the table into tabular output.  Finally,
	 * it will generate a new <code>DataSet</code> to hold all of the data.
	 * @param act The action that fired this method.
	 */
	public void run(IAction act) {
		LogManager.logDebug("Start OpenScriptOutputAction.run", this); //$NON-NLS-1$
		
		File f = queryFile();
		
		if(null == f) {
		} else if(!f.exists()) {
			displayError(Localization.getString("OpenScriptOutputAction.SelectedFileDNE"));
		} else if(!f.canRead()) {
			displayError(Localization.getString("OpenScriptOutputAction.SelectedFileCanNotRead"));
		} else {
			//Get the file from the user
			StringBuilder sb = new StringBuilder();
			readFile(f, sb);
			if(getChartingOptions(f.getAbsolutePath())) {
				IDataEntry output;
				while(true) {
					output = parser.parse(sb);
					if(null != output)
						dataSet.setData(output);
					else
						break;
				}

				try {
					IWorkbenchPage p = PlatformUI.getWorkbench().showPerspective(GraphingPerspective.ID, PlatformUI.getWorkbench().getActiveWorkbenchWindow());
					IViewPart ivp = p.findView(GraphSelectorView.ID);
					((GraphSelectorView)ivp).createScriptSet(f.getName(), dataSet);
				} catch(WorkbenchException we) {
					LogManager.logCritical("WorkbenchException OpenScriptOutputAction.run:" + we.getMessage(), this); //$NON-NLS-1$
				}
			}
		}

		LogManager.logDebug("End OpenScriptOutputAction.run", this); //$NON-NLS-1$
	}

