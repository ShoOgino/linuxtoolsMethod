	/**
	 * Creates a dialog that prompts the user to select from the given list
	 * of ICElements
	 * 
	 * @param list: list of ICElements
	 * @return
	 */
	protected Object[] chooseUnit(List<ICContainer> list, int numberOfValidFiles) {		
		ListTreeContentProvider prov = new ListTreeContentProvider();
		
	    RuledTreeDialogSelectionDialog dialog = new RuledTreeDialogSelectionDialog(getActiveWorkbenchShell(), 
	    		new WorkbenchLabelProvider(), prov);

	    dialog.setTitle("Tree Selection");
	    dialog.setMessage("Select .c/.cpp files to probe.");
	    dialog.setInput(list);
	    dialog.setHelpAvailable(false);
	    dialog.setStatusLineAboveButtons(true);
	    dialog.setEmptyListMessage("No files found.");
	    dialog.setContainerMode(true);

	    Object[] topLevel = prov.findElements(list);
	    dialog.setInitialSelections(topLevel);	    
	    dialog.setSize(cap(topLevel.length*10, 30, 55), 
	    		cap((int) (topLevel.length*1.5), 3, 13));

	    
	    
		if (dialog.open() == Window.OK) {
			Object[] result = dialog.getResult();
			if (result == null)
				return null;
			
			ArrayList<Object> output = new ArrayList<Object>();
			try {
				for (Object obj : result) {
					if (obj instanceof ICContainer){
						ICElement[] array = ((ICContainer) obj).getChildren();
						for (ICElement c : array) {
							if (!(c.getElementName().endsWith(".c") ||
									c.getElementName().endsWith(".cpp")))
								continue;
							if (!output.contains(c))
								output.add(c);
						}
					}
					else if (obj instanceof ICElement) {
						if (((ICElement) obj).getElementName().endsWith(".c") 
								|| ((ICElement) obj).getElementName().endsWith(".cpp")) {
							if (!output.contains(obj)) {
								output.add(obj);
							}
						}
					}
				}
			
				if ( output.size() >= numberOfValidFiles) {
					output.clear();
					output.add(USER_SELECTED_ALL);
				} else if (output.size() > 10 && numberOfValidFiles > 300) {
					if (confirmProbeAll(output.size())) {
						output.clear();
						output.add(USER_SELECTED_ALL);
					}
				}
			} catch (CModelException e) {
				e.printStackTrace();
			}
			
			return output.toArray();
		}
		return null;
	}

