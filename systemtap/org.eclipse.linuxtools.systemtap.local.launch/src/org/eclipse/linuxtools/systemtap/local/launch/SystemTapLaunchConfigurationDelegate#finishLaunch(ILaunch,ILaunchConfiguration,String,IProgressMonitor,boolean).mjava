	private void finishLaunch(ILaunch launch, ILaunchConfiguration config, String command,
			IProgressMonitor monitor, boolean retry) {
		try {
			File workDir = getWorkingDirectory(config);
			if (workDir == null) {
				workDir = new File(System.getProperty("user.home", ".")); //$NON-NLS-1$ //$NON-NLS-2$
			}



			// Generate the command
			SystemTapCommandGenerator cmdGenerator = new SystemTapCommandGenerator();
			cmd = cmdGenerator.generateCommand(scriptPath, binaryPath,
					command, needsBinary, needsArguments, arguments, binaryArguments);


//			MP.println(cmd);
			// Prepare cmd for execution - we need a command array of strings,
			// no string can contain a space character. (One of the process'
			// requirements)
			String tmp[] = cmd.split(" "); //$NON-NLS-1$
			ArrayList<String> cmdLine = new ArrayList<String>();
			for (String str : tmp) {
				cmdLine.add(str);
			}
			String[] commandArray = (String[]) cmdLine
					.toArray(new String[cmdLine.size()]);
			
			// Check for cancellation
			if (monitor.isCanceled()) {
				return;
			}

			monitor.worked(1);
			
			if (launch == null) {
				return;
			}
			// Not sure if this line is necessary
			// set the default source locator if required
			setDefaultSourceLocator(launch, config);
			
			boolean graphMode = config.getAttribute(
					LaunchConfigurationConstants.GRAPHICS_MODE,
					LaunchConfigurationConstants.DEFAULT_GRAPHICS_MODE);
			// Prepare a parser object - parser will read and update from the
			// output file continuously
			SystemTapCommandParser stapCmdPar = null;
			if (!graphMode) {
				stapCmdPar = new SystemTapCommandParser(Messages
						.getString("RunSystemTapAction.0"), outputPath, //$NON-NLS-1$
						new CallgraphView(), useColour, graphMode, config
								.getName());
				stapCmdPar.schedule();
			}

			monitor.worked(1);

			
			Process subProcess = execute(commandArray, getEnvironment(config),
					workDir, true);
			
			if (subProcess == null){
				//TODO: FIgure out what the console error message is so we can catch it in errorlog
				SystemTapUIErrorMessages mess = new SystemTapUIErrorMessages(Messages.getString("SystemTapLaunchConfigurationDelegate.NullProcessErrorName"), Messages.getString("SystemTapLaunchConfigurationDelegate.NullProcessErrorTitle"),  //$NON-NLS-1$ //$NON-NLS-2$
				Messages.getString("SystemTapLaunchConfigurationDelegate.NullProcessErrorMessage1") + //$NON-NLS-1$
				Messages.getString("SystemTapLaunchConfigurationDelegate.NullProcessErrorMessage2")); //$NON-NLS-1$
				mess.schedule();
				return;
			}
			
			IProcess process = createNewProcess(launch, subProcess,
					commandArray[0]);
			// set the command line used
			process.setAttribute(IProcess.ATTR_CMDLINE,
					cmd);
			monitor.worked(1);
			
			((TextConsole)Helper.getConsoleByName(config.getName())).activate();
			

			while (!process.isTerminated()) {
				Thread.sleep(100);
				if (monitor.isCanceled()) {
					Runtime run = Runtime.getRuntime();
					run.exec("kill stap"); //$NON-NLS-1$
					process.terminate();
					return;
				}
			}
			Thread.sleep(100);
			//SIGNAL THE PROCESS TO FINISH
			if (stapCmdPar != null)
				stapCmdPar.setProcessFinished(true);

			if (process.getExitValue() != 0) {
				//SystemTap terminated with errors, parse console to figure out which error 
				IDocument doc = Helper.getConsoleDocumentByName(config.getName());
				//Sometimes the console has not been printed to yet, wait for a little while longer
				if (doc.get().length() < 1)
					Thread.sleep(300);
				doc = Helper.getConsoleDocumentByName(config.getName());
				SystemTapErrorHandler errorHandler = new SystemTapErrorHandler();
				errorHandler.handle(config.getName() + Messages.getString("SystemTapLaunchConfigurationDelegate.stap_command")  //$NON-NLS-1$
						+ PluginConstants.NEW_LINE + cmd
						+ PluginConstants.NEW_LINE + PluginConstants.NEW_LINE 
						+ doc.get());
				if (errorHandler.hasMismatchedProbePoints() && retry) {
					File f = new File(binaryPath);
					ArrayList<String> excludedFunctions = errorHandler.getFunctions();
					//TODO: Delete 5 lines every time you encounter one of the excluded functions
					
					
					finishLaunch(launch, config, command, monitor, false);
					return;
				}
				errorHandler.finishHandling();
					
				return;
			}
					

			if (graphMode) {
				stapCmdPar = new SystemTapCommandParser(
						Messages.getString("RunSystemTapAction.0"), //$NON-NLS-1$
						outputPath, new CallgraphView(), useColour, graphMode,
						config.getName());
					stapCmdPar.schedule();
			}
			
			monitor.worked(1);

		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} catch (CoreException e) {
			e.printStackTrace();
		} finally {
			DocWriter dw = new DocWriter(Messages.getString("SystemTapLaunchConfigurationDelegate.DocWriterName"),  //$NON-NLS-1$
					((TextConsole)Helper.getConsoleByName(config.getName())), config.getName(),
					binaryArguments);
			dw.schedule();
			monitor.done();
		}
	}

