	/**
	 * Populates Animate menu.
	 */
	public void createAnimateActions() {
		//Set animation mode to slow
		animation_slow = new Action(Messages.getString("this.20"), Action.AS_RADIO_BUTTON){ //$NON-NLS-1$
			public void run(){
				graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_SLOW);
				this.setChecked(true);
				animation_slow.setChecked(true);
				animation_fast.setChecked(false);
			}
		};
		
		animation_slow.setChecked(true);
		
		//Set animation mode to fast
		animation_fast = new Action(Messages.getString("this.22"), Action.AS_RADIO_BUTTON){ //$NON-NLS-1$
			public void run(){
				graph.setAnimationMode(StapGraph.CONSTANT_ANIMATION_FASTEST);
				animation_slow.setChecked(false);
				animation_fast.setChecked(true);
			}
		};
		
		//Toggle collapse mode
		mode_collapsednodes = new Action(Messages.getString("this.24"), Action.AS_CHECK_BOX){ //$NON-NLS-1$
			public void run(){
				
				if (graph.isCollapseMode()) {
					graph.setCollapseMode(false);
					graph.draw(graph.getRootVisibleNodeNumber());
				}
				else {
					graph.setCollapseMode(true);
					graph.draw(graph.getRootVisibleNodeNumber());
				}
			}
		};
		
		ImageDescriptor newImage = ImageDescriptor.createFromImage(
				new Image(Display.getCurrent(), CallGraphConstants.PLUGIN_LOCATION + "icons/mode_collapsednodes.gif")); //$NON-NLS-1$
		mode_collapsednodes.setImageDescriptor(newImage);
		
		limits = new Action(Messages.getString("this.SetLimits"), Action.AS_PUSH_BUTTON) { //$NON-NLS-1$
			private Spinner limit;
			private Spinner buffer;
			private Shell sh;
			public void run() {
				sh = new Shell();
				sh.setLayout(new GridLayout());
				sh.setSize(150, 200);
				Label limitLabel = new Label(sh, SWT.NONE);
				limitLabel.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				limitLabel.setText(Messages.getString("this.MaxNodes")); //$NON-NLS-1$
				limit = new Spinner(sh, SWT.BORDER);
				limit.setMaximum(5000);
				limit.setSelection(graph.getMaxNodes());
				limit.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				
				Label bufferLabel = new Label(sh, SWT.NONE);
				bufferLabel.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				bufferLabel.setText(Messages.getString("this.MaxDepth")); //$NON-NLS-1$
				buffer = new Spinner(sh, SWT.BORDER);
				buffer.setMaximum(5000);
				buffer.setSelection(graph.getLevelBuffer());
				buffer.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				
				Button set_limit = new Button(sh, SWT.PUSH);
				set_limit.setText(Messages.getString("this.SetValues")); //$NON-NLS-1$
				set_limit.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
				set_limit.addSelectionListener(new SelectionAdapter() {
					public void widgetSelected(SelectionEvent e) {
						boolean redraw = false;
						if (limit.getSelection() > 0 && buffer.getSelection() > 0) {
							graph.setMaxNodes(limit.getSelection());
							graph.setLevelBuffer(buffer.getSelection());
							
							if (graph.changeLevelLimits(graph.getLevelOfNode(graph.getRootVisibleNodeNumber()))) {
								SystemTapUIErrorMessages mess = new SystemTapUIErrorMessages(
										Messages.getString("this.BufferTooHigh"), Messages.getString("this.BufferTooHigh"),  //$NON-NLS-1$ //$NON-NLS-2$
										Messages.getString("this.BufferMessage1") + //$NON-NLS-1$
										Messages.getString("this.BufferMessage2") + //$NON-NLS-1$
										Messages.getString("this.BufferMessage3") + //$NON-NLS-1$
										Messages.getString("this.BufferMessage4") + graph.getLevelBuffer() + //$NON-NLS-1$
										Messages.getString("this.BufferMessage5") + PluginConstants.NEW_LINE + PluginConstants.NEW_LINE +   //$NON-NLS-1$
										Messages.getString("this.BufferMessage6") + //$NON-NLS-1$
										Messages.getString("this.BufferMessage7")); //$NON-NLS-1$
								mess.schedule();
							}
							
							redraw = true;
						}
						sh.dispose();
						
						if (redraw)
							graph.draw();
					}
					
				});

				
				sh.open();			}
		};

	}

