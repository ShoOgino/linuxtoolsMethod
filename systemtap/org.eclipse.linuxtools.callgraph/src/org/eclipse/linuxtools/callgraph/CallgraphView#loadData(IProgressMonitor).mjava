	/**
	 * Load data.
	 * @param mon -- Progress monitor. Give null to use a new NullProgressMonitor instead.
	 * @return
	 */
	private IStatus loadData(IProgressMonitor mon) {
		IProgressMonitor monitor = mon;
		if (mon == null)
			monitor = new NullProgressMonitor();
		//Dummy node, set start time
		if (g.getNodeData(0) == null) {
			g.loadData(SWT.NONE, 0, StapGraph.CONSTANT_TOP_NODE_NAME, 
					1, 1, -1, false, ""); //$NON-NLS-1$
		}
		g.setStartTime(parser.startTime);
		g.setEndTime(parser.endingTimeInNS);

		
		/*
		 *                Load graph data
		 */
		
		
		boolean marked = false;
		String msg = ""; //$NON-NLS-1$
	    for (int id_parent : parser.serialMap.keySet()) {
	    	if (g.getNodeData(id_parent) == null) {
				if (parser.markedMap.get(id_parent) != null) {
					marked = true;
					msg = parser.markedMap.remove(id_parent);
				}
	    		g.loadData(SWT.NONE, id_parent, parser.serialMap.get(id_parent), parser.timeMap.get(id_parent),
	    				1, 0, marked, msg);
	    	}
	    	
			for (int id_child : parser.outNeighbours.get(id_parent)) {
				if (g.getNodeData(id_child) != null)
					continue;
				if (monitor.isCanceled()) {
					return Status.CANCEL_STATUS;
				}
				
				marked = false;
				msg = ""; //$NON-NLS-1$
				if (parser.markedMap.get(id_child) != null) {
					marked = true;
					msg = parser.markedMap.remove(id_child);
				}
				if (id_child != -1) {
					if (parser.timeMap.get(id_child) == null){						
						g.loadData(SWT.NONE, id_child, parser.serialMap
								.get(id_child), parser.timeMap.get(0),
								1, id_parent, marked,msg);
					}else{
						g.loadData(SWT.NONE, id_child, parser.serialMap
								.get(id_child), parser.timeMap.get(id_child),
								1, id_parent, marked,msg);
					}
				}
			}
			
		}
	    
	    if (parser.markedMap.size() > 0) {
	    	//Still some markers left
	    	for (int key : parser.markedMap.keySet()) {
	    		g.insertMessage(key, parser.markedMap.get(key));
	    	}
	    	
	    	//Erase the remaining nodes, just in case
	    	parser.markedMap.clear();
	    }
	    
	    
	    if (g.aggregateTime == null)
	    	g.aggregateTime = new HashMap<String, Long>();
		if (g.aggregateCount == null)
	    	g.aggregateCount = new HashMap<String, Integer>();	    
	    
	    g.aggregateCount.putAll(parser.countMap);
	    g.aggregateTime.putAll(parser.aggregateTimeMap);
	    
	    //Finish off by collapsing nodes, initializing the tree and setting options
	    g.recursivelyCollapseAllChildrenOfNode(g.getTopNode());
		setGraphOptions(true);
	    g.initializeTree();

	    return Status.OK_STATUS;
	}

