	/**
	 * Completes the loading process by calculating aggregate data.
	 * 
	 * @param monitor
	 * @return
	 */
	private IStatus finishLoad(IProgressMonitor monitor) {

		if (g.aggregateCount == null)
	    	g.aggregateCount = new HashMap<String, Integer>();
	    
	    g.aggregateCount.putAll(parser.countMap);
	    
	    if (g.aggregateTime == null)
	    	g.aggregateTime = new HashMap<String, Long>();
	    g.aggregateTime.putAll(parser.aggregateTimeMap);

	    //Set total time
	    if (parser.totalTime != -1)
	    	g.setTotalTime(parser.totalTime);
		
	    //-------------Finish initializations
	    //Generate data for collapsed nodes
		if (monitor.isCanceled()) {
			return Status.CANCEL_STATUS;
		}
	    g.initializeTree();
	    

		if (monitor.isCanceled()) {
			return Status.CANCEL_STATUS;
		}
	    g.setCallOrderList(parser.callOrderList);
	    
	    g.setProject(parser.project);
	    
	    this.initializePartControl();
		return Status.OK_STATUS;
	}

