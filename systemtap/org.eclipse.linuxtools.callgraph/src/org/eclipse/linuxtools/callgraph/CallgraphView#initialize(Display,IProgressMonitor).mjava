	public IStatus initialize(Display targetDisplay, IProgressMonitor monitor) {

		Display disp = targetDisplay;
		if (disp == null)
			disp = Display.getCurrent();
		if (disp == null)
			disp = Display.getDefault();
		
		
		
		//-------------Initialize shell, menu
		treeSize = 200;

		Composite treeComp = this.makeTreeComp(treeSize);
		Composite graphComp = this.makeGraphComp();
		graphComp.setBackgroundMode(SWT.INHERIT_FORCE);
		
		
		//Create papa canvas
		Canvas papaCanvas = new Canvas(graphComp, SWT.BORDER);
		GridLayout papaLayout = new GridLayout(1, true);
		papaLayout.horizontalSpacing=0;
		papaLayout.verticalSpacing=0;
		papaLayout.marginHeight=0;
		papaLayout.marginWidth=0;
		papaCanvas.setLayout(papaLayout);
		GridData papaGD = new GridData(SWT.BEGINNING, SWT.BEGINNING, false, false);
		papaGD.widthHint=160;
		papaCanvas.setLayoutData(papaGD);
		
		
		//Add first button
		Image image = new Image(disp, CallGraphConstants.PLUGIN_LOCATION+"icons/up.gif"); //$NON-NLS-1$
		Button up = new Button(papaCanvas, SWT.PUSH);
		GridData buttonData = new GridData(SWT.CENTER, SWT.CENTER, true, false);
		buttonData.widthHint = 150;
		buttonData.heightHint = 20;
		up.setData(buttonData);
		up.setImage(image);
		up.setToolTipText(Messages.getString("CallgraphView.ThumbNailUp")); //$NON-NLS-1$
		
		
		//Add thumb canvas
		Canvas thumbCanvas = new Canvas(papaCanvas, SWT.NONE);
		
		
		//Add second button
		image = new Image(disp, CallGraphConstants.PLUGIN_LOCATION+"icons/down.gif"); //$NON-NLS-1$
		Button down = new Button(papaCanvas, SWT.PUSH);
		buttonData = new GridData(SWT.CENTER, SWT.CENTER, true, false);
		buttonData.widthHint = 150;
		buttonData.heightHint = 0;
		down.setData(buttonData);
		down.setImage(image);
		down.setToolTipText(Messages.getString("CallgraphView.ThumbNailDown")); //$NON-NLS-1$

		
		//Initialize graph
		g = new StapGraph(graphComp, SWT.BORDER, treeComp, papaCanvas, this);
		g.setLayoutData(new GridData(masterComposite.getBounds().width - 220,
					masterComposite.getBounds().height));

		up.addSelectionListener(new AutoScrollSelectionListener(
				AutoScrollSelectionListener.AutoScroll_up, g));
		down.addSelectionListener(new AutoScrollSelectionListener(
				AutoScrollSelectionListener.AutoScroll_down, g));
		
		
		//Initialize thumbnail
		GridData thumbGD = new GridData(SWT.BEGINNING, SWT.BEGINNING, false, false);
		thumbGD.widthHint=160;
		thumbCanvas.setLayoutData(thumbGD);
		LightweightSystem lws = new LightweightSystem(thumbCanvas);
		ScrollableThumbnail thumb = new ScrollableThumbnail(g.getViewport());
		thumb.setSource(g.getContents());
		lws.setContents(thumb);

		/*
		 *                Load graph data
		 */
		g.loadData(SWT.NONE, 0, StapGraph.CONSTANT_TOP_NODE_NAME, 1, 1, -1, false, ""); //$NON-NLS-1$
		boolean marked = false;
		String msg = ""; //$NON-NLS-1$
		
		
	    for (int id_parent : parser.serialMap.keySet()) {
	    	if (g.getNodeData(id_parent) == null) {
				if (parser.markedMap.get(id_parent) != null) {
					marked = true;
					msg = parser.markedMap.get(id_parent);
				}
	    		g.loadData(SWT.NONE, id_parent, parser.serialMap.get(id_parent), parser.timeMap.get(id_parent),
	    				1, 0, marked, msg);
	    	}
	    	
			for (int id_child : parser.outNeighbours.get(id_parent)) {
				
				if (monitor.isCanceled()) {
					return Status.CANCEL_STATUS;
				}
				
				marked = false;
				msg = ""; //$NON-NLS-1$
				if (parser.markedMap.get(id_child) != null) {
					marked = true;
					msg = parser.markedMap.get(id_child);
				}
				if (id_child != -1) {
					if (parser.timeMap.get(id_child) == null){						
						g.loadData(SWT.NONE, id_child, parser.serialMap
								.get(id_child), parser.timeMap.get(0),
								1, id_parent, marked,msg);
					}else{
						g.loadData(SWT.NONE, id_child, parser.serialMap
								.get(id_child), parser.timeMap.get(id_child),
								1, id_parent, marked,msg);
					}
				}
			}
			
		}

	    
	    g.aggregateCount = parser.countMap;
	    g.aggregateTime = parser.aggregateTimeMap;

	    //Set total time
	    g.setTotalTime(parser.totalTime);
	    
	    //-------------Finish initializations
	    //Generate data for collapsed nodes
	    g.recursivelyCollapseAllChildrenOfNode(g.getTopNode());
		if (monitor.isCanceled()) {
			return Status.CANCEL_STATUS;
		}
	    g.initializeTree();
	    g.setLastFunctionCalled(parser.lastFunctionCalled);
	    

		if (monitor.isCanceled()) {
			return Status.CANCEL_STATUS;
		}
	    g.setFocus();
	    g.setCallOrderList(parser.callOrderList);
	    
	    g.setProject(parser.project);
	    
	    this.setValues(graphComp, treeComp, g, parser);
	    this.initializePartControl();
	    g.draw(StapGraph.CONSTANT_DRAWMODE_RADIAL, StapGraph.CONSTANT_ANIMATION_SLOW,
		g.getFirstUsefulNode());
		return Status.OK_STATUS;
	}

