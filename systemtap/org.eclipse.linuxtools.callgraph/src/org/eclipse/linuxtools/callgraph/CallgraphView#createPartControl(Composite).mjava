	/**
	 * This is a callback that will allow us to create the viewer and
	 * initialize it.
	 */
	public void createPartControl(Composite parent) {
		if (masterComposite != null)
			masterComposite.dispose();
		masterComposite = parent;
		GridLayout layout = new GridLayout(2, false);
		layout.horizontalSpacing=0;
		GridData gd = new GridData(100, 100);

		parent.setLayout(layout);
		parent.setLayoutData(gd);

		// LOAD ALL ACTIONS
		createActions();
		
		//MENU FOR SYSTEMTAP BUTTONS
		mgr = getViewSite().getActionBars().getToolBarManager();
		
		
		//MENU FOR SYSTEMTAP GRAPH OPTIONS
		menu = getViewSite().getActionBars().getMenuManager();
		
		// ADD OPTIONS TO THE GRAPH MENU
		addFileMenu();
		save_dot = new Action("Save uncollapsed as .dot file") {
            public void run(){
                Shell sh = new Shell();
                FileDialog dialog = new FileDialog(sh, SWT.SAVE);
                
                String filePath = dialog.open();
               
                if (filePath != null) {
                	File f = new File(filePath);
                    f.delete();
                    try {
						f.createNewFile();
					} catch (IOException e) {
						return;
					}

                    try {
    					BufferedWriter out = new BufferedWriter(new FileWriter(f));
    					StringBuilder build = new StringBuilder("");
                
    					out.write("digraph stapgraph {\n");
	                	for (int i : g.nodeDataMap.keySet()) {
	                		StapData d = g.getNodeData(i);
	                		if (d.isCollapsed && !d.isOnlyChildWithThisName())
	                			continue;
	                		build.append(d.id + " [label=\"" + d.name + " " + StapNode.numberFormat.format((float) d.getTime()/g.getTotalTime() * 100) + "%\"]\n");
	                		int j = d.parent;
	                		build.append(d.id + "->" + g.getNodeData(j).id);
	                		out.write(build.toString());
	                		build.setLength(0);
	                	}
	                	out.write("}");
	                	out.flush();
	                	out.close();
                    } catch (FileNotFoundException e) {
                    	// TODO Auto-generated catch block
                    	e.printStackTrace();
                    } catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					} 
                }
            }
		};
		
		save_col_dot = new Action ("Save collapsed as .dot") {
		     public void run(){
	                Shell sh = new Shell();
	                FileDialog dialog = new FileDialog(sh, SWT.SAVE);
	                String filePath = dialog.open();
	               
	                if (filePath != null) {
	                	File f = new File(filePath);
	                    f.delete();
	                    try {
							f.createNewFile();
						} catch (IOException e) {
							return;
						}

	                    try {
	    					BufferedWriter out = new BufferedWriter(new FileWriter(f));
	    					StringBuilder build = new StringBuilder("");
	    					
	    					out.write("digraph stapgraph {\n");
		                	for (int i : g.nodeDataMap.keySet()) {
		                		StapData d = g.getNodeData(i);
		                		if (!d.isCollapsed && !d.isOnlyChildWithThisName())
		                			continue;
		                		build.append(d.id + " [label=\"" + d.name);
		                		build.append(" " + StapNode.numberFormat.format((float) d.getTime()/g.getTotalTime() * 100) + "%\"]\n");
		                		int j = d.collapsedParent;
		                		build.append(d.id + "->" + g.getNodeData(j).id);
		                		build.append(" [label=\"" + g.getNodeData(j).timesCalled + "\"]\n");
		                		out.write(build.toString());
		                		build.setLength(0);
		                	}
		                	out.write("}");
		                	out.flush();
		                	out.close();
	                    } catch (FileNotFoundException e) {
	                    	// TODO Auto-generated catch block
	                    	e.printStackTrace();
	                    } catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} 
	                }
	            }
			
		};
		
		file.add(save_col_dot);
		file.add(save_dot);
		view = new MenuManager(Messages.getString("CallgraphView.1")); //$NON-NLS-1$
		animation = new MenuManager(Messages.getString("CallgraphView.2")); //$NON-NLS-1$
		markers = new MenuManager(Messages.getString("CallgraphView.6")); //$NON-NLS-1$
		gotoMenu = new MenuManager(Messages.getString("CallgraphView.9")); //$NON-NLS-1$
		menu.add(view);
//		menu.add(animation);	
		menu.add(gotoMenu);
		addErrorMenu();
		addHelpMenu();
		
		view.add(view_treeview);
		view.add(view_radialview);
		view.add(view_aggregateview);
		view.add(view_levelview);
		view.add(getView_refresh());
		view.add(mode_collapsednodes);
		view.add(limits);
		
		
		gotoMenu.add(play);
		gotoMenu.add(goto_previous);
		gotoMenu.add(goto_next);
		gotoMenu.add(goto_last);
		
		addKillButton();
		mgr.add(play);
		mgr.add(view_radialview);
		mgr.add(view_treeview);
		mgr.add(view_levelview);
		mgr.add(view_aggregateview);
		mgr.add(mode_collapsednodes);
		
//		help.add(help_about);
		
		markers.add(markers_next);
		markers.add(markers_previous);
		
		animation.add(animation_slow);
		animation.add(animation_fast);
//		menu.add(markers);

		setGraphOptions(false);
	}

