    /**
     * Initialize StapData object. This object is not intended to be called by users.
     *
     * @param graphModel StapGraph containing the StapNode that matches this StapData
     * @param style
     * @param txt Text to be displayed when rendering the StapNode
     * @param time Time taken for this particular node to execute
     * @param called Number of times this particular node was called
     * @param currentID The unique identifier for this node
     * @param caller The parent of this node
     * @param isMarked
     */
    public StapData(StapGraph graphModel, int style, String txt,
            long time, int called, int currentID, int parent, boolean isMarked) {
        this.time = time;
        this.style = style;
        this.timesCalled = called;
        children = new ArrayList<>();
        collapsedChildren = new ArrayList<>();
        this.id = currentID;
        this.name = txt;
        this.graph = graphModel;
        this.hasCollapsedChildren = false;
        this.isCollapsed = false;
        this.onlyChildWithThisName = false;
        this.partOfCollapsedNode= NOT_PART_OF_COLLAPSED_NODE;
        this.collapsedParent = -1;
        this.parent = parent;
        this.levelOfRecursion = 0;
        this.marked = isMarked;
        this.uncollapsedPiece = -1;


        //Add this data to the caller's list of IDs
        if (this.parent != -1 && graphModel.getNodeData(this.parent) != null) {
            graphModel.getNodeData(this.parent).addCallee(this.id);
            this.levelOfRecursion = graphModel.getNodeData(this.parent).levelOfRecursion + 1;
        }

        //---------------Recursion management
        //Insert new level if necessary
        if (graphModel.levels.get(levelOfRecursion) == null)
            graphModel.levels.put(levelOfRecursion, new ArrayList<Integer>());
        graphModel.levels.get(levelOfRecursion).add(this.id);

        //Keep track of the lowest level of recursion
        if (levelOfRecursion > graphModel.getLowestLevelOfNodesAdded())
            graphModel.setLowestLevelOfNodesAdded(levelOfRecursion);
    }

