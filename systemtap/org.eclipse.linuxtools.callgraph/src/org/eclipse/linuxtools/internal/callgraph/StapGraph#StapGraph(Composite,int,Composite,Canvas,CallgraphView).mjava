	public StapGraph(Composite parent, int style, Composite treeComp, Canvas tCanvas,
			CallgraphView callgraphView) {
		super(parent, style);

		//-------------Initialize variables
		thumbCanvas = tCanvas;
		nodeMap = new HashMap<Integer, StapNode>();
		levels = new HashMap<Integer, List<Integer>>();
		nodeDataMap = new HashMap<Integer, StapData>();
		aggregateTime = new HashMap<String, Long>();
		aggregateCount = new HashMap<String, Integer>();
		currentPositionInLevel = new HashMap<Integer, Integer>();
		collapsedLevelSize = new HashMap<Integer, Integer>();
		markedNodes = new ArrayList<Integer>();
		markedCollapsedNodes = new ArrayList<Integer>();
		animation_mode = 1;
		idOfLastNode = 0;
		rootVisibleNodeNumber=0;
		totalTime = 0;
		collapse_mode = false;
		killInvalidFunctions = true;
		nextMarkedNode = -1;
		scale = 1;
		treeLevelFromRoot = 0;
		idOfLastCollapsedNode = 0;
		this.callgraphView = callgraphView;

		this.treeComp = treeComp;
		if (treeViewer == null || treeViewer.getControl().isDisposed()) {
			//Only create once
			treeViewer = new TreeViewer(this.treeComp);
			StapTreeListener stl = new StapTreeListener(treeViewer.getTree().getHorizontalBar());
			treeViewer.addTreeListener(stl);
		}


		//-------------Add listeners
		mListener = new StapGraphMouseListener(this);
		kListener = new StapGraphKeyListener(this);
		mwListener = new StapGraphMouseWheelListener(this);
		this.addMouseListener(mListener);
		this.addKeyListener(kListener);
		this.addMouseWheelListener(mwListener);

	}

