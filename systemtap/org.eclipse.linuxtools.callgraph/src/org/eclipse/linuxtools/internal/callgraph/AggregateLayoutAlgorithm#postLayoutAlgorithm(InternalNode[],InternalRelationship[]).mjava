    /**
     * Called at the end of the layout algorithm -- change the size and colour
     * of each node according to times called/total time
     */
    @Override
    protected void postLayoutAlgorithm(InternalNode[] entitiesToLayout,
            InternalRelationship[] relationshipsToConsider) {
        final int minimumSize = 40;
        double xcursor = 0.0;
        double ycursor = 0.0;

        for (InternalNode sn : entitiesToLayout) {
            Long time = list.remove(0);
            double percent = (double) time / (double) totalTime;
            double snWidth = (sn.getInternalWidth() * percent) + minimumSize;
            double snHeight = (sn.getInternalHeight() * percent) + minimumSize;


            sn.setSize(snWidth, snHeight);
            if (xcursor + snWidth > graphWidth) {
                //reaching the end of row, move to lower column
                ycursor += snHeight;
                xcursor = 0;
                sn.setLocation(xcursor, ycursor);
            } else {
                sn.setLocation(xcursor, ycursor);
                xcursor += snWidth;
            }
        }
    }

