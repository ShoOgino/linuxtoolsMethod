	private IStatus parseDotFile() {
		if (!(internalData instanceof BufferedReader))
			return Status.CANCEL_STATUS;

		BufferedReader buff = (BufferedReader) internalData;

		HashMap <Integer, ArrayList<Integer>> outNeighbours= new HashMap<Integer, ArrayList<Integer>>();
		ArrayList<String> nameList = new ArrayList<String>();
		ArrayList<Integer> idList = new ArrayList<Integer>();
		endingTimeInNS =0l;
		totalTime=10000l;
		try {
			String line;
			while ((line = buff.readLine()) != null) {
				if (line.equals("}")) { //$NON-NLS-1$
					break;
				}
				if (monitor.isCanceled()) {
					return Status.CANCEL_STATUS;
				}
				if (line.length() < 1) {
					continue;
				}

				String[] args = new String[2];
				args = line.split(" ", 2); //$NON-NLS-1$
				if (args[0].contains("->")) { //$NON-NLS-1$
					//connection
					int[] ids = new int[2];
					int called = 1;
					try {
						ids[0] = Integer.parseInt(args[0].split("->")[0]); //$NON-NLS-1$
						ids[1] = Integer.parseInt(args[0].split("->")[1]); //$NON-NLS-1$
						int index1 = args[1].indexOf("=\""); //$NON-NLS-1$
						int index2 = args[1].indexOf("\"]"); //$NON-NLS-1$
						called = Integer.parseInt(args[1].substring(index1 + 2,index2));
					} catch (NumberFormatException e) {
						SystemTapUIErrorMessages m = new SystemTapUIErrorMessages(
								Messages.getString("StapGraphParser.idOrLabel"), Messages.getString("StapGraphParser.idOrLabel"),  //$NON-NLS-1$ //$NON-NLS-2$
								Messages.getString("StapGraphParser.nonNumericLabel")); //$NON-NLS-1$
						m.schedule();
						return Status.CANCEL_STATUS;
					}

					//Set neighbour
					ArrayList<Integer> tmpList = outNeighbours.get(ids[0]);
					if (tmpList == null) {
						tmpList = new ArrayList<Integer>();
					}

					for (int i = 0; i < called; i++) {
						tmpList.add(ids[1]);
					}

					outNeighbours.put(ids[0], tmpList);
				} else {
					//node
					try {
						int id = Integer.parseInt(args[0]);
						if (firstNode == -1) {
							firstNode = id;
						}
						int index = args[1].indexOf("=\""); //$NON-NLS-1$
						String name = args[1].substring(index + 2, args[1].indexOf(" ", index)); //$NON-NLS-1$
						double dtime = 0.0;
						dtime = Double.parseDouble(args[1].substring(args[1].indexOf(" ") + 1, args[1].indexOf("%"))); //$NON-NLS-1$ //$NON-NLS-2$
						long time = (long) (dtime*100);

						nameList.add(name);
						idList.add(id);
						timeMap.put(id, time);
						serialMap.put(id, name);
						if (countMap.get(name) == null){
							countMap.put(name, 0);
						}
						countMap.put(name, countMap.get(name) + 1);

						long cumulativeTime = (aggregateTimeMap.get(name) != null ? aggregateTimeMap.get(name) : 0) + time;
						aggregateTimeMap.put(name, cumulativeTime);
					} catch (NumberFormatException e) {
						SystemTapUIErrorMessages m = new SystemTapUIErrorMessages(
								Messages.getString("StapGraphParser.idOrTime"), Messages.getString("StapGraphParser.idOrTime"),  //$NON-NLS-1$ //$NON-NLS-2$
						Messages.getString("StapGraphParser.nonNumericTime")); //$NON-NLS-1$
						m.schedule();
						return Status.CANCEL_STATUS;
					}

				}


			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				buff.close();
			} catch (IOException e) {
				//Do nothing
			}
		}
		neighbourMaps.put(0, outNeighbours);
		nameMaps.put(0, nameList);
		idMaps.put(0, idList);
		try {
			view.update();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		return Status.OK_STATUS;
	}

