    /**
     * Populates Animate menu.
     */
    private void createAnimateActions() {
        //Set animation mode to slow
        animationSlow = new Action(Messages.getString("CallgraphView.AnimationSlow"), IAction.AS_RADIO_BUTTON){ //$NON-NLS-1$
            @Override
            public void run(){
                g.setAnimationMode(StapGraph.CONSTANT_ANIMATION_SLOW);
                this.setChecked(true);
                animationSlow.setChecked(true);
                animationFast.setChecked(false);
            }
        };

        animationSlow.setChecked(true);

        //Set animation mode to fast
        animationFast = new Action(Messages.getString("CallgraphView.AnimationFast"), IAction.AS_RADIO_BUTTON){ //$NON-NLS-1$
            @Override
            public void run(){
                g.setAnimationMode(StapGraph.CONSTANT_ANIMATION_FASTEST);
                animationSlow.setChecked(false);
                animationFast.setChecked(true);
            }
        };

        //Toggle collapse mode
        modeCollapsedNodes = new Action(Messages.getString("CallgraphView.CollapsedMode"), IAction.AS_CHECK_BOX){ //$NON-NLS-1$
            @Override
            public void run(){

                if (g.isCollapseMode()) {
                    g.setCollapseMode(false);
                    g.draw(g.getRootVisibleNodeNumber());
                } else {
                    g.setCollapseMode(true);
                    g.draw(g.getRootVisibleNodeNumber());
                }
            }
        };

        ImageDescriptor newImage = getImageDescriptor("icons/mode_collapsednodes.gif"); //$NON-NLS-1$
        modeCollapsedNodes.setImageDescriptor(newImage);

        limits = new Action(Messages.getString("CallgraphView.SetLimits"), IAction.AS_PUSH_BUTTON) { //$NON-NLS-1$
            private Spinner limit;
            private Spinner buffer;
            private Shell sh;
            @Override
            public void run() {
                sh = new Shell();
                sh.setLayout(new GridLayout());
                sh.setSize(150, 200);
                Label limitLabel = new Label(sh, SWT.NONE);
                limitLabel.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
                limitLabel.setText(Messages.getString("CallgraphView.MaxNodes")); //$NON-NLS-1$
                limit = new Spinner(sh, SWT.BORDER);
                limit.setMaximum(5000);
                limit.setSelection(g.getMaxNodes());
                limit.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));

                Label bufferLabel = new Label(sh, SWT.NONE);
                bufferLabel.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
                bufferLabel.setText(Messages.getString("CallgraphView.MaxDepth")); //$NON-NLS-1$
                buffer = new Spinner(sh, SWT.BORDER);
                buffer.setMaximum(5000);
                buffer.setSelection(g.getLevelBuffer());
                buffer.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));

                Button setLimit = new Button(sh, SWT.PUSH);
                setLimit.setText(Messages.getString("CallgraphView.SetValues")); //$NON-NLS-1$
                setLimit.setLayoutData(new GridData(SWT.CENTER, SWT.DEFAULT, true, false));
                setLimit.addSelectionListener(new SelectionAdapter() {
                    @Override
                    public void widgetSelected(SelectionEvent e) {
                        boolean redraw = false;
                        if (limit.getSelection() >= 0 && buffer.getSelection() >= 0) {
                            g.setMaxNodes(limit.getSelection());
                            g.setLevelBuffer(buffer.getSelection());

                            if (g.changeLevelLimits(g.getLevelOfNode(g.getRootVisibleNodeNumber()))) {
                                SystemTapUIErrorMessages mess = new SystemTapUIErrorMessages(
                                        Messages.getString("CallgraphView.BufferTooHigh"), Messages.getString("CallgraphView.BufferTooHigh"),  //$NON-NLS-1$ //$NON-NLS-2$
                                        Messages.getString("CallgraphView.BufferMessage1") + //$NON-NLS-1$
                                        Messages.getString("CallgraphView.BufferMessage2") + //$NON-NLS-1$
                                        Messages.getString("CallgraphView.BufferMessage3") + //$NON-NLS-1$
                                        Messages.getString("CallgraphView.BufferMessage4") + g.getLevelBuffer() + //$NON-NLS-1$
                                        Messages.getString("CallgraphView.BufferMessage5") + PluginConstants.NEW_LINE + PluginConstants.NEW_LINE +   //$NON-NLS-1$
                                        Messages.getString("CallgraphView.BufferMessage6") + //$NON-NLS-1$
                                        Messages.getString("CallgraphView.BufferMessage7")); //$NON-NLS-1$
                                mess.schedule();
                            }

                            redraw = true;
                        }
                        sh.dispose();

                        if (redraw) {
                            g.draw();
                        }
                    }

                });


                sh.open();            }
        };

    }

