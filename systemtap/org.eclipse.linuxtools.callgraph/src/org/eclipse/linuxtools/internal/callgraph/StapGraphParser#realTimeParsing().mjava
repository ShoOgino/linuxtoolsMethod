	@Override
	public IStatus realTimeParsing() {
		if (!(internalData instanceof BufferedReader))
			return Status.CANCEL_STATUS;

		BufferedReader buff = (BufferedReader) internalData;

		String line;
		boolean draw = false;
		boolean first = true;
		try {
			while ((line = buff.readLine()) != null) {
				if (monitor.isCanceled())
					return Status.CANCEL_STATUS;
				if (line.length() < 1)
					continue;
				if (first && (line.contains(Messages.getString("StapGraphParser.17")))) { //$NON-NLS-1$
					return parseDotFile();
				}
				first = false;

				draw = true;
				if (line.equals("PROBE_BEGIN")) { //$NON-NLS-1$
					buff.mark(100);
					String tmp = buff.readLine();

					if (tmp != null && tmp.length() > 0) {
						char tchar = tmp.charAt(0);
						if (tchar != '-' && tchar != '+' && tchar != '?' && tchar != '>' && tchar != '<')
							project = CoreModel.getDefault().getCModel().getCProject(tmp);
						else
							buff.reset();
					}

				} else if (line.charAt(0) == '-') {
					endingTimeInNS = Long.parseLong(line.substring(1));
				} else if (line.charAt(0) == '+') {
					totalTime = Long.parseLong(line.substring(1));
					//Total time should be the last line in the output
					parseEnd();
				} else if (line.charAt(0) == '?') {
					if (line.length() > 1)
						parseMarked(line.substring(1));
				} else {
					if (parse(line) == Status.CANCEL_STATUS)
						break;
				}
			}
			if (draw && view != null) {
				view.update();
				//Repeat until all lines are read
				realTimeParsing();
			}
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		return Status.OK_STATUS;
	}

