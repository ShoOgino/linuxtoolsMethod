	//IFilteredDataSet Methods
	@Test
	public void testAddFilter() {
		data.remove(0);
		data.remove(0);
		
		RowEntry entry;

		entry = new RowEntry();
		entry.putRow(0, new Integer[] {new Integer(3), new Integer(2), new Integer(5)});
		data.append(entry);
		entry = new RowEntry();
		entry.putRow(0, new Integer[] {new Integer(4), new Integer(2), new Integer(3)});
		data.append(entry);
		entry = new RowEntry();
		entry.putRow(0, new Integer[] {new Integer(7), new Integer(2), new Integer(9)});
		data.append(entry);
		entry = new RowEntry();
		entry.putRow(0, new Integer[] {new Integer(2), new Integer(2), new Integer(6)});
		data.append(entry);
		entry = new RowEntry();
		entry.putRow(0, new Integer[] {new Integer(5), new Integer(2), new Integer(2)});
		data.append(entry);
		
		fdata.addFilter(new RangeFilter(0, new Integer(3), new Integer(5), RangeFilter.INCLUSIVE | RangeFilter.INSIDE_BOUNDS));

		assertEquals(3, fdata.getRowCount());
		Object[] row = fdata.getRow(1);
		assertEquals(4, ((Integer)row[0]).intValue());
		assertEquals(3, ((Integer)row[2]).intValue());

		row = fdata.getRow(2);
		assertEquals(5, ((Integer)row[0]).intValue());
		assertEquals(2, ((Integer)row[1]).intValue());


		fdata.addFilter(new SortFilter(2, SortFilter.ASCENDING));

		assertEquals(3, fdata.getRowCount());
		row = fdata.getRow(0);
		assertEquals(5, ((Integer)row[0]).intValue());
		assertEquals(2, ((Integer)row[2]).intValue());

		row = fdata.getRow(1);
		assertEquals(4, ((Integer)row[0]).intValue());
		assertEquals(3, ((Integer)row[2]).intValue());
	}

