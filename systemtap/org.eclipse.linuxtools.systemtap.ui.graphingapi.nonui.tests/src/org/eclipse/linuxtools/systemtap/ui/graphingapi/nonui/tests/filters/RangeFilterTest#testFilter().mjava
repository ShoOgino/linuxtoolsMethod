	public void testFilter() {
		int width = 4;
		int height = 10;
		int wrap = height / 3;
		ArrayList<Object>[] data = MockDataSet.buildArray(width, height, wrap);

		assertEquals(width, data.length);
		assertEquals(height, data[0].size());
		ArrayList<Object>[] data2 = filter.filter(data);

		assertEquals(width, data.length);
		assertEquals(height, data[0].size());
		assertEquals(width, data2.length);
		assertEquals(6, data2[0].size());
		assertEquals("1", data2[0].get(0));
		assertEquals("2", data2[0].get(1));
		assertEquals("1", data2[0].get(2));
		assertEquals("2", data2[0].get(3));

		assertEquals(data[2].get(1), data2[2].get(0));
		assertEquals(data[2].get(2), data2[2].get(1));
		assertEquals(data[2].get(4), data2[2].get(2));
		assertEquals(data[2].get(5), data2[2].get(3));


		filter = new RangeFilter(0, new Integer(0), new Integer(2), RangeFilter.INSIDE_BOUNDS);
		data2 = filter.filter(data);

		assertEquals(width, data.length);
		assertEquals(height, data[0].size());
		assertEquals(width, data2.length);
		assertEquals(3, data2[0].size());
		assertEquals("1", data2[0].get(0));
		assertEquals("1", data2[0].get(1));
		assertEquals("1", data2[0].get(2));

		assertEquals(data[2].get(1), data2[2].get(0));
		assertEquals(data[2].get(4), data2[2].get(1));
		assertEquals(data[2].get(7), data2[2].get(2));


		filter = new RangeFilter(0, new Integer(0), new Integer(2), RangeFilter.OUTSIDE_BOUNDS | RangeFilter.INCLUSIVE);
		data2 = filter.filter(data);

		assertEquals(width, data.length);
		assertEquals(height, data[0].size());
		assertEquals(width, data2.length);
		assertEquals(7, data2[0].size());
		assertEquals("0", data2[0].get(0));
		assertEquals("2", data2[0].get(1));
		assertEquals("0", data2[0].get(2));
		assertEquals("2", data2[0].get(3));

		assertEquals(data[2].get(0), data2[2].get(0));
		assertEquals(data[2].get(2), data2[2].get(1));
		assertEquals(data[2].get(3), data2[2].get(2));
		assertEquals(data[2].get(5), data2[2].get(3));


		filter = new RangeFilter(0, new Integer(0), new Integer(2), RangeFilter.INSIDE_BOUNDS);
		data2 = filter.filter(data);

		assertEquals(width, data.length);
		assertEquals(height, data[0].size());
		assertEquals(width, data2.length);
		assertEquals(3, data2[0].size());
		assertEquals("1", data2[0].get(0));
		assertEquals("1", data2[0].get(1));
		assertEquals("1", data2[0].get(2));

		assertEquals(data[2].get(1), data2[2].get(0));
		assertEquals(data[2].get(4), data2[2].get(1));
		assertEquals(data[2].get(7), data2[2].get(2));
		

		filter = new RangeFilter(0, new Integer(0), new Integer(2), RangeFilter.OUTSIDE_BOUNDS);
		data2 = filter.filter(data);

		assertEquals(width, data.length);
		assertEquals(height, data[0].size());
		assertEquals(width, data2.length);
		assertEquals(0, data2[0].size());
		
		
		filter = new RangeFilter(-1, new Integer(1), new Integer(3), 0);
		assertNull(filter.filter(data));
	}

