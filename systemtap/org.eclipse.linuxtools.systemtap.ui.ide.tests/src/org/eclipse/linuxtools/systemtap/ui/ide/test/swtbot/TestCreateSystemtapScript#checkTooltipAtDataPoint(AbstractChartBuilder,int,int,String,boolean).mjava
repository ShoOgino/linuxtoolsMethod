	/**
	 * May move the mouse to a desired data point on a chart and test for the tooltip that appears.
	 * @param cb The AbstractChartBuilder containing the chart to test.
	 * @param series The index of the data series to hover over.
	 * @param dataPoint The data point of the series to move the mouse to. Set this to -1 or less if the mouse should stay where it is.
	 * @param expectedTooltip The expected contents of the tooltip.
	 * @param shellShouldExist Set to <code>false</code> if the tooltip should not be found.
	 */
	private void checkTooltipAtDataPoint(final AbstractChartBuilder cb, final int series,
			final int dataPoint, final String expectedTooltip, final boolean shellShouldExist) {
		if (dataPoint >= 0) {
			UIThreadRunnable.syncExec(new VoidResult() {

				@Override
				public void run() {
					Event event = new Event();
					event.type = SWT.MouseMove;
					Point mousePoint = cb.getChart().getPlotArea().toDisplay(
							cb.getChart().getSeriesSet().getSeries()[0].getPixelCoordinates(dataPoint));
					event.x = mousePoint.x;
					event.y = mousePoint.y + 1; // Adjust the mouse to be a bit lower, as it sometimes goes above bars
					bot.getDisplay().post(event);
				}
			});
		}

		bot.sleep(100); // Give some time for the tooltip to appear/change
		UIThreadRunnable.syncExec(new VoidResult() {

			@Override
			public void run() {
				for (SWTBotShell bshell : bot.shells()) {
					Control[] children = bshell.widget.getChildren();
					if (children.length == 1 && children[0] instanceof Text && expectedTooltip.equals(((Text) children[0]).getText())) {
						if (!shellShouldExist) {
							throw new AssertionError("Did not expect to find this tooltip, but found it: " + expectedTooltip);
						}
						return;
					}
				}
				if (shellShouldExist) {
					throw new AssertionError("Didn't find the expected tooltip: " + expectedTooltip);
				}
			}
		});
	}

