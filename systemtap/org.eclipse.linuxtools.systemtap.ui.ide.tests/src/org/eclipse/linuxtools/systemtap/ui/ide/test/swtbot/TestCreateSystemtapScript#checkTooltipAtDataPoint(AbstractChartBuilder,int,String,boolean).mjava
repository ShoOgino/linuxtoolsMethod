    /**
     * May move the mouse to a desired data point on a chart and test for the tooltip that appears.
     * @param cb The AbstractChartBuilder containing the chart to test.
     * @param dataPoint The data point of the series to move the mouse to. Set this to -1
     * or less if the mouse should stay where it is.
     * @param expectedTooltip The expected contents of the tooltip.
     * @param shellShouldExist Set to <code>false</code> if the tooltip should not be found.
     */
    private static void checkTooltipAtDataPoint(final AbstractChartBuilder cb, final int dataPoint, final String expectedTooltip,
            final boolean shellShouldExist) {

        for (int retries = 5; retries > 0; retries--) {

            if (dataPoint >= 0) {
                final Event event = new Event();
                event.type = SWT.MouseMove;
                // Jitter the mouse before moving to the data point
				UIThreadRunnable.syncExec(() -> {
					event.x = 0;
					event.y = 0;
					bot.getDisplay().post(event);
				});
                bot.sleep(100);
				UIThreadRunnable.syncExec(() -> {
					Point mousePoint = cb.getChart().getPlotArea()
							.toDisplay(cb.getChart().getSeriesSet().getSeries()[0].getPixelCoordinates(dataPoint));
					event.x = mousePoint.x;
					event.y = mousePoint.y;
					bot.getDisplay().post(event);
				});
            }

            bot.sleep(500); // Give some time for the tooltip to appear/change
            if (expectedTooltip.equals(cb.getMouseMessage()) == shellShouldExist) {
                return;
            }
        }

        if (shellShouldExist) {
            throw new AssertionError("Didn't find the expected tooltip: " + expectedTooltip);
        } else {
            throw new AssertionError("Did not expect to find this tooltip, but found it: " + expectedTooltip);
        }
    }

