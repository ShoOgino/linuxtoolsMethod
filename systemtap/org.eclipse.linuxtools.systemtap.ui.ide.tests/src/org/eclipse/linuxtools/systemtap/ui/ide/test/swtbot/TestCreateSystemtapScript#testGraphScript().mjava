	@Test
	public void testGraphScript() {
		String scriptName = "testGraph.stp";
		createScript(bot, scriptName);

		// Write a script
		SWTBotEclipseEditor editor = bot.editorByTitle(scriptName).toTextEditor();
		editor.setText("#!/usr/bin/env stap"
				+ "\nglobal i,j,k"
				+ "\nprobe begin{i=0;j=0;k=0}"
				+ "\nprobe timer.ms(100){printf(\"Value:%d %d\\n\",i,j);i++;j+=2}"
				+ "\nprobe timer.ms(250){printf(\"Other:%d %d\\n\",i,k);k++}"
				+ "\nprobe timer.ms(1000){exit()}");
		editor.save();

		final String val0 = "i";
		final String val1 = "j";
		final String val2 = "k";

		openRunConfigurations(scriptName);
		SWTBotShell shell = bot.shell("Run Configurations");
		shell.setFocus();
		bot.tree().select("SystemTap").contextMenu("New").click();
		bot.textWithLabel("Name:").setText(scriptName);

		// Select the "Graphing" tab.
		SWTBotCTabItem tab = bot.cTabItem(Messages.SystemTapScriptGraphOptionsTab_graphingTitle);
		tab.activate();

		// Enable output graphing.
		bot.checkBox(Messages.SystemTapScriptGraphOptionsTab_graphOutputRun).click();
		SWTBotCombo combo = bot.comboBoxWithLabel(Messages.SystemTapScriptGraphOptionsTab_regexLabel);
		combo.setText("Value:(\\d+) (\\d+)");
		assertEquals("Value:(\\d+) (\\d+)", combo.getText());

		SWTBotText text = bot.textWithLabel(Messages.SystemTapScriptGraphOptionsTab_sampleOutputLabel);
		text.setText("Value:1 2");
		assertEquals("Value:1 2", text.getText());

		text = bot.text(MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_defaultColumnTitleBase, 1));
		text.setText(val0);
		assertEquals(val0, text.getText());
		text = bot.text(MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_defaultColumnTitleBase, 2));
		text.setText(val1);
		assertEquals(val1, text.getText());

		// Add a graph.
		setupGraphWithTests("Values");
		String setTitle1 = MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_graphSetTitleBase, 1);
		String graphTitle1 = "Values - Scatter Graph";

		// Make a second regex, and a graph for it.
		shell.setFocus();
		combo = bot.comboBoxWithLabel(Messages.SystemTapScriptGraphOptionsTab_regexLabel);
		assertEquals(2, combo.itemCount());
		combo.setSelection(combo.selectionIndex() + 1);
		assertEquals(3, combo.itemCount());
		assertEquals("", combo.getText());
		combo.setText("Other:(\\d+) (\\d+)");
		assertEquals("Other:(\\d+) (\\d+)", combo.getText());

		text = bot.text(MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_defaultColumnTitleBase, 1));
		text.setText(val0);
		assertEquals(val0, text.getText());
		text = bot.text(MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_defaultColumnTitleBase, 2));
		text.setText(val2);
		assertEquals(val2, text.getText());

		text = bot.textWithLabel(Messages.SystemTapScriptGraphOptionsTab_sampleOutputLabel);
		assertEquals("", text.getText());

		setupGraphWithTests("Others");
		String setTitle2 = MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_graphSetTitleBase, 2);
		String graphTitle2 = "Others - Scatter Graph";

		// Apply the changes, then close the menu & reopen it to make sure settings were saved.
		shell.setFocus();
		bot.button("Apply").click();
		bot.button("Close").click();
		bot.waitUntil(Conditions.shellCloses(shell));
		openRunConfigurations(scriptName);
		shell = bot.shell("Run Configurations");
		shell.setFocus();
		shell.bot().text().setText(scriptName); // Set the filter text to show configs of the current script
		bot.waitUntil(new NodeAvailableAndSelect(bot.tree(), "SystemTap", scriptName));
		tab = bot.cTabItem(Messages.SystemTapScriptGraphOptionsTab_graphingTitle);
		tab.activate();

		combo = bot.comboBoxWithLabel(Messages.SystemTapScriptGraphOptionsTab_regexLabel);
		text = bot.textWithLabel(Messages.SystemTapScriptGraphOptionsTab_sampleOutputLabel);
		SWTBotTable table = bot.table();
		assertEquals(3, combo.itemCount());
		assertEquals("Value:(\\d+) (\\d+)", combo.getText());
		assertEquals("Value:1 2", text.getText());
		assertEquals(1, table.rowCount());
		String graphName = GraphFactory.getGraphName("org.eclipse.linuxtools.systemtap.graphing.ui.charts.scatterchartbuilder");
		assertTrue(table.containsItem(graphName.concat(":Values")));
		combo.setSelection(1);
		assertEquals("Other:(\\d+) (\\d+)", combo.getText());
		assertEquals("", text.getText());
		assertEquals(1, table.rowCount());
		assertTrue(table.containsItem(graphName.concat(":Others")));

		// If Systemtap is not installed, don't test graph output. Otherwise, do.
		if (!stapInstalled) {
			return;
		}

		bot.button("Run").click();
		bot.waitUntil(Conditions.shellCloses(shell));
		SWTBotView console = bot.viewById("org.eclipse.ui.console.ConsoleView");
		console.setFocus();
		bot.waitUntil(new StapHasExited()); // The script should end on its own

		// Give time for the table to be fully constructed.
		SWTBotEditor graphEditor = bot.activeEditor();
		bot.waitUntil(new TableHasUpdated(scriptName, 1, 10, false));
		bot.waitUntil(new TableHasUpdated(scriptName, 2, 4, false));

		// Test table & graph contents.
		graphEditor.setFocus();
		graphEditor.bot().cTabItem(setTitle1).activate();
		graphEditor.bot().cTabItem("Data View").activate();
		SWTBotTable dataTable = bot.table();
		List<String> colNames = dataTable.columns();
		assertEquals(3, colNames.size());
		assertEquals(val0, colNames.get(1));
		assertEquals(val1, colNames.get(2));
		assertEquals("2", dataTable.cell(2, 1));
		assertEquals("4", dataTable.cell(2, 2));

		graphEditor.bot().cTabItem(graphTitle1).activate();
		Matcher<AbstractChartBuilder> matcher = widgetOfType(AbstractChartBuilder.class);
		AbstractChartBuilder cb = bot.widget(matcher);
		ISeries[] series = cb.getChart().getSeriesSet().getSeries();
		assertEquals(2, series.length);
		assertEquals(10, series[0].getXSeries().length);
		assertEquals(10, series[1].getXSeries().length);
		assertEquals(2, (int) series[0].getYSeries()[2]);
		assertEquals(4, (int) series[1].getYSeries()[2]);

		graphEditor.bot().cTabItem(setTitle2).activate();
		graphEditor.bot().cTabItem("Data View").activate();
		dataTable = bot.table();
		colNames = dataTable.columns();
		assertEquals(3, colNames.size());
		assertEquals(val0, colNames.get(1));
		assertEquals(val2, colNames.get(2));
		assertEquals("7", dataTable.cell(2, 1));
		assertEquals("2", dataTable.cell(2, 2));

		graphEditor.bot().cTabItem(graphTitle2).activate();
		cb = bot.widget(matcher);
		series = cb.getChart().getSeriesSet().getSeries();
		assertEquals(2, series.length);
		assertEquals(4, series[0].getXSeries().length);
		assertEquals(4, series[1].getXSeries().length);
		assertEquals(7, (int) series[0].getYSeries()[2]);
		assertEquals(2, (int) series[1].getYSeries()[2]);

		// Test filters on the data table & graphs.
		graphEditor.bot().cTabItem(setTitle1).activate();
		graphEditor.bot().cTabItem("Data View").activate();
		dataTable = bot.table();
		click(ContextMenuHelper.contextMenu(dataTable, "Add filter..."));
		shell = bot.shell("Create Filter");
		shell.setFocus();

		// Match Filter - Remove a matching
		bot.button("Match Filter").click();
		bot.button("Next >").click();
		bot.text().setText("2");
		deselectDefaultSelection(0);
		bot.radio(1).click();
		bot.button("Finish").click();
		bot.waitUntil(Conditions.shellCloses(shell));
		bot.waitUntil(new TableHasUpdated(scriptName, 1, 9, true));
		assertEquals("3", dataTable.cell(2, 1));
		assertEquals("6", dataTable.cell(2, 2));

		// Filters should be applied to graphs as well as data tables.
		graphEditor.bot().cTabItem(graphTitle1).activate();
		cb = bot.widget(matcher);
		series = cb.getChart().getSeriesSet().getSeries();
		bot.waitUntil(new ChartHasUpdated(cb.getChart(), 9));
		assertEquals(3, (int) series[0].getYSeries()[2]);
		assertEquals(6, (int) series[1].getYSeries()[2]);

		// Each graph set should have its own filters.
		graphEditor.bot().cTabItem(setTitle2).activate();
		graphEditor.bot().cTabItem("Data View").activate();
		dataTable = bot.table();
		assertEquals(4, dataTable.rowCount());
		assertEquals("2", dataTable.cell(0, 1));

		// Test removing a filter.
		graphEditor.bot().cTabItem(setTitle1).activate();
		graphEditor.bot().cTabItem("Data View").activate();
		dataTable = bot.table();
		click(ContextMenuHelper.contextMenu(dataTable, "Remove filter...", "Match Filter: \"" + val0 + "\" removing \"2\""));
		bot.waitUntil(new TableHasUpdated(scriptName, 1, 10, true));
		assertEquals("2", dataTable.cell(2, 1));
		assertEquals("4", dataTable.cell(2, 2));

		clearAllTerminated();
	}

