    @Test
    public void testGraphContents() {
        final String valA1 = "A1";
        final String valB1 = "B1";
        createAndViewDummyData(
                new String[]{valA1, valB1},
                new Integer[]{
                        0,0, 1,2, 2,4, 3,6, 4,8, 5,10, 6,12, 7,14, 8,16, 9,18});
        SWTBotEditor graphEditorA = bot.activeEditor();

        final String valA2 = "A2";
        final String valB2 = "B2";
        createAndViewDummyData(
                new String[]{valA2, valB2},
                new Integer[]{
                        2,0, 5,1, 7,2, 10,3});
        SWTBotEditor graphEditorB = bot.activeEditor();

        // Add graphs.
        setupGraphWithTests("Others", true);
        String graphTitle2 = "Others - Scatter Graph";
        graphEditorA.show();
        setupGraphWithTests("Values", true);
        String graphTitle1 = "Values - Scatter Graph";

        // Test table & graph contents.
        graphEditorA.bot().cTabItem("Data View").activate();
        SWTBotTable dataTable = bot.table();
        List<String> colNames = dataTable.columns();
        assertEquals(3, colNames.size());
        assertEquals(valA1, colNames.get(1));
        assertEquals(valB1, colNames.get(2));
        assertEquals("2", dataTable.cell(2, 1));
        assertEquals("4", dataTable.cell(2, 2));

        graphEditorA.bot().cTabItem(graphTitle1).activate();
        Matcher<AbstractChartBuilder> matcher = widgetOfType(AbstractChartBuilder.class);
        AbstractChartBuilder cb = bot.widget(matcher);
        ISeries[] series = cb.getChart().getSeriesSet().getSeries();
        assertEquals(2, series.length);
        assertEquals(10, series[0].getXSeries().length);
        assertEquals(10, series[1].getXSeries().length);
        assertEquals(2, (int) series[0].getYSeries()[2]);
        assertEquals(4, (int) series[1].getYSeries()[2]);

        graphEditorB.show();
        graphEditorB.bot().cTabItem("Data View").activate();
        dataTable = bot.table();
        colNames = dataTable.columns();
        assertEquals(3, colNames.size());
        assertEquals(valA2, colNames.get(1));
        assertEquals(valB2, colNames.get(2));
        assertEquals("7", dataTable.cell(2, 1));
        assertEquals("2", dataTable.cell(2, 2));

        graphEditorB.bot().cTabItem(graphTitle2).activate();
        cb = bot.widget(matcher);
        series = cb.getChart().getSeriesSet().getSeries();
        assertEquals(2, series.length);
        assertEquals(4, series[0].getXSeries().length);
        assertEquals(4, series[1].getXSeries().length);
        assertEquals(7, (int) series[0].getYSeries()[2]);
        assertEquals(2, (int) series[1].getYSeries()[2]);

        // Test filters on the data table & graphs.
        graphEditorA.show();
        graphEditorA.bot().cTabItem("Data View").activate();
        dataTable = bot.table();
        new SWTBotMenu(ContextMenuHelper.contextMenu(dataTable, "Add filter...")).click();
        SWTBotShell shell = bot.shell("Create Filter");
        shell.setFocus();

        // Match Filter - Remove a matching
        bot.button("Match Filter").click();
        bot.button("Next >").click();
        bot.text().setText("2");
        deselectDefaultSelection(0);
        bot.radio(1).click();
        bot.button("Finish").click();
        bot.waitUntil(Conditions.shellCloses(shell));
        bot.waitUntil(new TableHasUpdated(graphEditorA.bot().table(), 9, true));
        assertEquals("3", dataTable.cell(2, 1));
        assertEquals("6", dataTable.cell(2, 2));

        // Filters should be applied to graphs as well as data tables.
        graphEditorA.bot().cTabItem(graphTitle1).activate();
        cb = bot.widget(matcher);
        series = cb.getChart().getSeriesSet().getSeries();
        bot.waitUntil(new ChartHasUpdated(cb.getChart(), 9));
        assertEquals(3, (int) series[0].getYSeries()[2]);
        assertEquals(6, (int) series[1].getYSeries()[2]);

        // Each graph set should have its own filters.
        graphEditorB.show();
        graphEditorB.bot().cTabItem("Data View").activate();
        dataTable = bot.table();
        assertEquals(4, dataTable.rowCount());
        assertEquals("2", dataTable.cell(0, 1));

        // Test removing a filter.
        graphEditorA.show();
        graphEditorA.bot().cTabItem("Data View").activate();
        dataTable = bot.table();
        new SWTBotMenu(ContextMenuHelper.contextMenu(dataTable,
                "Remove filter...",
                "Match Filter: \"" + valA1 + "\" removing \"2\"")).click();
        bot.waitUntil(new TableHasUpdated(graphEditorA.bot().table(), 10, true));
        assertEquals("2", dataTable.cell(2, 1));
        assertEquals("4", dataTable.cell(2, 2));
    }

