	/**
	 * Retrieves the names of all functions referenced by the binary. If
	 * searchForResource is true, this function will return all function names
	 * belonging to an element with name matching the String held by
	 * resourceToSearchFor. Otherwise it will create a dialog prompting the user
	 * to select from a list of files to profile, or select the only available
	 * file if only one file is available.
	 * 
	 * 
	 * @param bin
	 * @return
	 */
	protected String getFunctionsFromBinary(IBinary bin, String targetResource) {
		String funcs = ""; //$NON-NLS-1$
		if (bin == null)
			return funcs;
		try {
			ArrayList<ICContainer> list = new ArrayList<ICContainer>();
			TranslationUnitVisitor v = new TranslationUnitVisitor();
			// ASTTranslationUnitVisitor v = new ASTTranslationUnitVisitor();

			for (ICElement b : bin.getCProject().getChildrenOfType(
					ICElement.C_CCONTAINER)) {
				ICContainer c = (ICContainer) b;

				for (ITranslationUnit tu : c.getTranslationUnits()) {
					if (searchForResource
							&& tu.getElementName().contains(targetResource)) {
						tu.accept(v);
						funcs += v.getFunctions();
						return funcs;
					} else {
						if (!list.contains(c))
							list.add(c);
					}
				}

				// Iterate down to all children, checking for more C_Containers
				while (c.getChildrenOfType(ICElement.C_CCONTAINER).size() > 0) {
					ICContainer e = null;
					for (ICElement d : c
							.getChildrenOfType(ICElement.C_CCONTAINER)) {
						e = (ICContainer) d;
						for (ITranslationUnit tu : e.getTranslationUnits()) {
							if (searchForResource
									&& tu.getElementName().contains(
											targetResource)) {
								tu.accept(v);
								funcs += (v.getFunctions());
								return funcs;
							} else {
								if (!list.contains(c))
									list.add(c);
							}
						}
					}
					c = e;
				}
			}

			int numberOfFiles = numberOfValidFiles(list.toArray());
			if (numberOfFiles == 1) {
				for (ICContainer c : list) {
					for (ITranslationUnit e : c.getTranslationUnits()) {
						if (e.getElementName().endsWith(".c") || //$NON-NLS-1$
								e.getElementName().endsWith(".cpp")) { //$NON-NLS-1$
							e.accept(v);
							funcs += v.getFunctions();
						}
					}
				}
			} else {

				Object[] unitList = chooseUnit(list, numberOfFiles);
				if (unitList == null || unitList.length == 0) {
					return null; //$NON-NLS-1$
				} else if (unitList.length == 1
						&& unitList[0].toString().equals(USER_SELECTED_ALL)) {
					funcs = "*"; //$NON-NLS-1$
					return funcs;
				}

				StringBuilder tmpFunc = new StringBuilder();
				for (String item : getAllFunctions(bin.getCProject(), unitList)) {
					tmpFunc.append(item);
					tmpFunc.append(" "); //$NON-NLS-1$
				}
				funcs = tmpFunc.toString();

			}

			return funcs;

		} catch (CModelException e) {
			e.printStackTrace();
		} catch (CoreException e) {
			e.printStackTrace();
		}

		return null;
	}

