	private void createParserOption(Composite parserTop) {
		Composite browseTop = new Composite(parserTop, SWT.NONE);
		browseTop.setLayout(new GridLayout(1, false));
		GridData browseData = new GridData(GridData.FILL_HORIZONTAL);
		browseTop.setLayoutData(browseData);

		Label suppFileLabel = new Label(browseTop, SWT.NONE);
		suppFileLabel.setText("Parser"); //$NON-NLS-1$

		parser = new Text(browseTop, SWT.BORDER);
		parser.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		parser.addModifyListener(modifyListener);

		parserButton = createPushButton(browseTop,
				"Find parsers", null);  //$NON-NLS-1$
		parserButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ElementListSelectionDialog dialog = new ElementListSelectionDialog(getShell(),
						new ListLabelProvider());
				dialog.setTitle("Select parser");  //$NON-NLS-1$
				dialog.setMessage("Select parser to use.");  //$NON-NLS-1$
				IExtensionRegistry reg = Platform.getExtensionRegistry();
				IConfigurationElement[] extensions = reg
						.getConfigurationElementsFor(PluginConstants.PARSER_RESOURCE,
								PluginConstants.PARSER_NAME);

				dialog.setElements(extensions);
				if (dialog.open() == IDialogConstants.OK_ID) {
					String arg = getUsefulLabel(dialog.getFirstResult());
					parser.setText(arg);
				}
			}
		});


		viewer = new Text(browseTop, SWT.BORDER);
		viewer.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
		viewer.addModifyListener(modifyListener);

		viewerButton = createPushButton(browseTop,
				"Find viewers", null);  //$NON-NLS-1$
		viewerButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				ElementListSelectionDialog dialog = new ElementListSelectionDialog(getShell(),
						new ListLabelProvider());
				dialog.setTitle("Select viewer");  //$NON-NLS-1$
				dialog.setMessage("Select viewer to use.");  //$NON-NLS-1$
				IExtensionRegistry reg = Platform.getExtensionRegistry();
				IConfigurationElement[] extensions = reg
						.getConfigurationElementsFor(PluginConstants.VIEW_RESOURCE,
								PluginConstants.VIEW_NAME);
				ArrayList<IConfigurationElement> ext = new ArrayList<>();
				for (IConfigurationElement el : extensions) {
					if (!el.getNamespaceIdentifier().contains("org.eclipse.linuxtools")) //$NON-NLS-1$
						continue;
					//TODO: Rough hack to get all the objects. We restrict to id's containing org.eclipse.linuxtools, then see if the class extends SystemTapView
					try {
						if (el.createExecutableExtension(PluginConstants.ATTR_CLASS)
								instanceof SystemTapView) {
							ext.add(el);
						}
					} catch (CoreException e1) {
					}
				}

				dialog.setElements(ext.toArray());
				if (dialog.open() == IDialogConstants.OK_ID) {
					String arg = getUsefulLabel(dialog.getFirstResult());
					viewer.setText(arg);
				}
			}
		});

	}

