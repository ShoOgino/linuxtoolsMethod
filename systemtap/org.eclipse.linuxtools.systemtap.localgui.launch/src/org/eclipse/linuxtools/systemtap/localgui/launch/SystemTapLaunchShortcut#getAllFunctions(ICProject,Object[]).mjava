	/**
	 * @param project : C Project Type
	 * @return A String list of all functions contained within the specified
	 * C Project 
	 */
	public static HashMap<String, ArrayList<String>> getAllFunctions(ICProject project, Object [] listOfFiles){
		long time = System.currentTimeMillis();
		ArrayList<String> functionList;
		HashMap<String, ArrayList<String>> filesToFunctionsMap = new HashMap<String, ArrayList<String>>();
		IIndexManager manager = CCorePlugin.getIndexManager();
		IIndex index = null;
		
		try {
			index = manager.getIndex(project);
			index.acquireReadLock();
			
			IIndexFile[] blah = index.getAllFiles();
			for (IIndexFile file : blah) {
				String fullFilePath = file.getLocation().getFullPath();
				if (fullFilePath == null || !specialContains(listOfFiles, fullFilePath)) {
					continue;
				}

				IIndexName[] indexNamesArray = file.findNames(0, Integer.MAX_VALUE);
				functionList = new ArrayList<String>();
				for (IIndexName name : indexNamesArray) {
					if (name.isDeclaration() && specialContains(listOfFiles, name.getFile().getLocation().getFullPath())) {
						IIndexBinding binder = index.findBinding(name);
						if (binder instanceof IFunction && !filesToFunctionsMap.containsValue(binder.getName()) && !functionList.contains(binder.getName())) {
								functionList.add(binder.getName());					
						}
					}
				}
				filesToFunctionsMap.put(fullFilePath, functionList);
			}
			
		} catch (CoreException e) {
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		index.releaseReadLock();
		System.out.println(System.currentTimeMillis() - time);
		
		int num = 0;
		for (String key : filesToFunctionsMap.keySet()){
			num += filesToFunctionsMap.get(key).size();
		}
		
		MP.println("FILES : "+ filesToFunctionsMap.keySet().size());
		MP.println("FUNCTIONS : "+ num);
		return filesToFunctionsMap;
	}

