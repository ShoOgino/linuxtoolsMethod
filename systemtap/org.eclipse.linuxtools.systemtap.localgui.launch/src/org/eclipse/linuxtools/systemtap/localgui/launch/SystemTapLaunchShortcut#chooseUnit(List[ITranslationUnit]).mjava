	/**
	 * Creates a dialog that prompts the user to select from the given list
	 * of translation units.
	 * 
	 * @param list
	 * @return
	 */
	protected Object[] chooseUnit(List<ITranslationUnit> list) {
		ILabelProvider programLabelProvider = new LabelProvider() {
			public String getText(Object element) {
				if (element instanceof ITranslationUnit) {
					String name = ((ITranslationUnit) element).getElementName();
					//Only select names that are not .h files
					return name;
				}
				return super.getText(element);
			}
		};
	
		//TODO: Currently we end up visiting the translation unit twice, could be
		//expensive for larger programs
		ILabelProvider qualifierLabelProvider = new LabelProvider() {
			public String getText(Object element) {
				try {
					if (element instanceof ITranslationUnit) {
						//Only select names that are not .h files
						TranslationUnitVisitor v = new TranslationUnitVisitor();
						((ITranslationUnit) element).accept(v);
						return "Functions: " + v.getNumberOfFunctions();
					}
				} catch (CoreException e) {
					e.printStackTrace();
				}
				return super.getText(element);
			}
		};
	
		ElementListSelectionDialog dialog = new ElementListSelectionDialog(
				getActiveWorkbenchShell(), programLabelProvider);
//		TwoPaneElementSelector dialog = new TwoPaneElementSelector(
//				getActiveWorkbenchShell(), programLabelProvider, qualifierLabelProvider);
		dialog.setElements(list.toArray());
		dialog.setTitle("Choose files"); //$NON-NLS-1$
		dialog.setMessage("Probe functions declared in selected files."); //$NON-NLS-1$
//		dialog.setUpperListLabel("Detected files"); //$NON-NLS-1$
//		dialog.setLowerListLabel("Number of functions"); //$NON-NLS-1$
		dialog.setMultipleSelection(true);
		dialog.setInitialElementSelections(list);
		if (dialog.open() == Window.OK) {
			return (Object[]) dialog.getResult();
		}
	
		return null;
	}

