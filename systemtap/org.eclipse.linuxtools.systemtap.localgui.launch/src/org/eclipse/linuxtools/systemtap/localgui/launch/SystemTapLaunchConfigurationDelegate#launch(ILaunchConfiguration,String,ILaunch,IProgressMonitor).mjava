	@Override
	public void launch(ILaunchConfiguration config, String mode,
			ILaunch launch, IProgressMonitor m) throws CoreException {

		if (m == null) {
			m = new NullProgressMonitor();
		}
		SubMonitor monitor = SubMonitor.convert(m,
				"SystemTap runtime monitor", 10); //$NON-NLS-1$

		// check for cancellation
		if (monitor.isCanceled()) {
			return;
		}

		File temporaryScript = null;
		String command = ""; //$NON-NLS-1$
		String arguments = ""; //$NON-NLS-1$
		String scriptPath = ""; //$NON-NLS-1$
		String binaryPath = ""; //$NON-NLS-1$
		String outputPath = ""; //$NON-NLS-1$
		boolean needsBinary = false; // Set to false if we want to use SystemTap
		// binary selection
		boolean needsArguments = false;
		boolean useColour = false;

		if (config.getAttribute(LaunchConfigurationConstants.USE_COLOUR,
				LaunchConfigurationConstants.DEFAULT_USE_COLOUR))
			useColour = true;

		if (config.getAttribute(LaunchConfigurationConstants.COMMAND_VERBOSE,
				LaunchConfigurationConstants.DEFAULT_COMMAND_VERBOSE)) {
			command += "-v "; //$NON-NLS-1$
		}

		if (config.getAttribute(LaunchConfigurationConstants.COMMAND_PASS,
				LaunchConfigurationConstants.DEFAULT_COMMAND_PASS) > 0) {
			command += "-p" + config.getAttribute(LaunchConfigurationConstants.COMMAND_PASS, LaunchConfigurationConstants.DEFAULT_COMMAND_PASS) + " "; //$NON-NLS-1$ //$NON-NLS-2$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_KEEP_TEMPORARY,
				LaunchConfigurationConstants.DEFAULT_COMMAND_KEEP_TEMPORARY)) {
			command += "-k "; //$NON-NLS-1$
		}

		if (config.getAttribute(LaunchConfigurationConstants.COMMAND_GURU,
				LaunchConfigurationConstants.DEFAULT_COMMAND_GURU)) {
			command += "-g "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_PROLOGUE_SEARCH,
				LaunchConfigurationConstants.DEFAULT_COMMAND_PROLOGUE_SEARCH)) {
			command += "-P "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_NO_CODE_ELISION,
				LaunchConfigurationConstants.DEFAULT_COMMAND_NO_CODE_ELISION)) {
			command += "-u "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_DISABLE_WARNINGS,
				LaunchConfigurationConstants.DEFAULT_COMMAND_DISABLE_WARNINGS)) {
			command += "-w "; //$NON-NLS-1$
		}

		if (config.getAttribute(LaunchConfigurationConstants.COMMAND_BULK_MODE,
				LaunchConfigurationConstants.DEFAULT_COMMAND_BULK_MODE)) {
			command += "-b "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_TIMING_INFO,
				LaunchConfigurationConstants.DEFAULT_COMMAND_TIMING_INFO)) {
			command += "-t "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_BUFFER_BYTES,
				LaunchConfigurationConstants.DEFAULT_COMMAND_BUFFER_BYTES) > 0) {
			command += "-s" + config.getAttribute(LaunchConfigurationConstants.COMMAND_BUFFER_BYTES, LaunchConfigurationConstants.DEFAULT_COMMAND_BUFFER_BYTES) + " "; //$NON-NLS-1$ //$NON-NLS-2$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_TARGET_PID,
				LaunchConfigurationConstants.DEFAULT_COMMAND_TARGET_PID) > 0) {
			command += "-x" + config.getAttribute(LaunchConfigurationConstants.COMMAND_TARGET_PID, LaunchConfigurationConstants.DEFAULT_COMMAND_TARGET_PID) + " "; //$NON-NLS-1$ //$NON-NLS-2$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_C_DIRECTIVES,
				LaunchConfigurationConstants.DEFAULT_COMMAND_C_DIRECTIVES) != LaunchConfigurationConstants.DEFAULT_COMMAND_C_DIRECTIVES) {
			command += config.getAttribute(
					LaunchConfigurationConstants.COMMAND_C_DIRECTIVES,
					LaunchConfigurationConstants.DEFAULT_COMMAND_C_DIRECTIVES)
					+ " "; //$NON-NLS-1$ //$NON-NLS-2$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_LEAVE_RUNNING,
				LaunchConfigurationConstants.DEFAULT_COMMAND_LEAVE_RUNNING)) {
			command += "-F "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_SKIP_BADVARS,
				LaunchConfigurationConstants.DEFAULT_COMMAND_SKIP_BADVARS)) {
			command += "--skip-badvars "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_IGNORE_DWARF,
				LaunchConfigurationConstants.DEFAULT_COMMAND_IGNORE_DWARF)) {
			command += "--ignore-dwarf "; //$NON-NLS-1$
		}

		if (config.getAttribute(
				LaunchConfigurationConstants.COMMAND_TAPSET_COVERAGE,
				LaunchConfigurationConstants.DEFAULT_COMMAND_TAPSET_COVERAGE)) {
			command += "-q "; //$NON-NLS-1$
		}

		if (!config.getAttribute(LaunchConfigurationConstants.ARGUMENTS,
				LaunchConfigurationConstants.DEFAULT_ARGUMENTS).equals(
				LaunchConfigurationConstants.DEFAULT_ARGUMENTS)) {
			arguments = config.getAttribute(
					LaunchConfigurationConstants.ARGUMENTS,
					LaunchConfigurationConstants.DEFAULT_ARGUMENTS);
			needsArguments = true;
		}

		// UNCOMMENT if we decide to go with a SystemTap Binary selector instead
		// of using the one in Main tab
		if (!config.getAttribute(LaunchConfigurationConstants.BINARY_PATH,
				LaunchConfigurationConstants.DEFAULT_BINARY_PATH).equals(
				LaunchConfigurationConstants.DEFAULT_BINARY_PATH)) {
			binaryPath = config.getAttribute(
					LaunchConfigurationConstants.BINARY_PATH,
					LaunchConfigurationConstants.DEFAULT_BINARY_PATH);
			needsBinary = true;
		}

		if (!config.getAttribute(LaunchConfigurationConstants.SCRIPT_PATH,
				LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH).equals(
				LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH)) {
			scriptPath = config.getAttribute(
					LaunchConfigurationConstants.SCRIPT_PATH,
					LaunchConfigurationConstants.DEFAULT_SCRIPT_PATH);
		}

		// Generate script if needed
		if (config.getAttribute(LaunchConfigurationConstants.NEED_TO_GENERATE,
				LaunchConfigurationConstants.DEFAULT_NEED_TO_GENERATE)) {
			temporaryScript = new File(scriptPath);
			temporaryScript.delete();

			try {
				temporaryScript.createNewFile();
				FileWriter fstream = new FileWriter(temporaryScript);
				BufferedWriter out = new BufferedWriter(fstream);
				out.write(config.getAttribute(
						LaunchConfigurationConstants.GENERATED_SCRIPT,
						LaunchConfigurationConstants.DEFAULT_GENERATED_SCRIPT));
				out.close();
			} catch (IOException e1) {
				e1.printStackTrace();
			}
		}

		outputPath = config.getAttribute(
				LaunchConfigurationConstants.OUTPUT_PATH,
				LaunchConfigurationConstants.DEFAULT_OUTPUT_PATH);
		command += "-o " + outputPath; //$NON-NLS-1$
		try {
			File tempFile = new File(outputPath);
			tempFile.createNewFile();
			//Make sure the output file exists
		} catch (IOException e1) {
			e1.printStackTrace();
		}


		// check for cancellation
		if (monitor.isCanceled()) {
			return;
		}
		try {
			File workDir = getWorkingDirectory(config);
			if (workDir == null) {
				workDir = new File(System.getProperty("user.home", ".")); //$NON-NLS-1$ //$NON-NLS-2$
			}

			// Not sure if this line is necessary
			// set the default source locator if required
			setDefaultSourceLocator(launch, config);

			// Generate the command
			cmdGenerator = new SystemTapCommandGenerator();
			String cmd = cmdGenerator.generateCommand(scriptPath, binaryPath,
					command, needsBinary, needsArguments, arguments, useColour);


			// Prepare cmd for execution - we need a command array of strings,
			// no string can contain a space character. (One of the process'
			// requirements)
			String tmp[] = cmd.split(" "); //$NON-NLS-1$
			ArrayList<String> cmdLine = new ArrayList<String>();
			for (String str : tmp) {
				cmdLine.add(str);
			}
			String[] commandArray = (String[]) cmdLine
					.toArray(new String[cmdLine.size()]);

			
			// Check for cancellation
			if (monitor.isCanceled()) {
				return;
			}

			
			MP.println(cmd);
			boolean graphMode = config.getAttribute(
					LaunchConfigurationConstants.GRAPHICS_MODE,
					LaunchConfigurationConstants.DEFAULT_GRAPHICS_MODE);
			// Prepare a parser object - parser will read and update from the
			// output file continuously
			SystemTapCommandParser stapCmdPar = null;
			if (!graphMode) {
				stapCmdPar = new SystemTapCommandParser(Messages
						.getString("RunSystemTapAction.0"), outputPath, //$NON-NLS-1$
						new SystemTapView(), useColour, graphMode, config
								.getName());
				stapCmdPar.schedule();
				
			}

			monitor.worked(1);
			Process subProcess = execute(commandArray, getEnvironment(config),
					workDir, true);
			IProcess process = createNewProcess(launch, subProcess,
					commandArray[0]);

			// set the command line used
			process.setAttribute(IProcess.ATTR_CMDLINE,
					cmd);
			
			while (!process.isTerminated()) {
				Thread.sleep(100);
				if (monitor.isCanceled()) {
					Runtime run = Runtime.getRuntime();
					run.exec("kill stap"); //$NON-NLS-1$
					process.terminate();
					return;
				}
			}
			Thread.sleep(100);
			

			if (process.getExitValue() != 0) {
				//SystemTap terminated with errors, parse console to figure out which error 
				IDocument doc = Helper.getConsoleDocumentByName(config.getName());
				SystemTapErrorHandler.handle(doc);
				return;
			}
					
			if (stapCmdPar != null)
				stapCmdPar.setProcessFinished(true);

			if (graphMode) {
				stapCmdPar = new SystemTapCommandParser(
						Messages.getString("RunSystemTapAction.0"), //$NON-NLS-1$
						outputPath, new SystemTapView(), useColour, graphMode,
						config.getName());
				stapCmdPar.schedule();
			}

		} catch (IOException e) {
			abort("Could not start process", e, //$NON-NLS-1$
					ICDTLaunchConfigurationConstants.ERR_INTERNAL_ERROR); //$NON-NLS-1$
			e.printStackTrace();
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			m.done();
		}

	}

