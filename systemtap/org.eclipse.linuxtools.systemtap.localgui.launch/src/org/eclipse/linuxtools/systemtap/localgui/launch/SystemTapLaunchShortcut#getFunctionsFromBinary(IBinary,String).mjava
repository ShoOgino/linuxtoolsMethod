	/**
	 * Retrieves the names of all functions referenced by the binary. If searchForResource
	 * is true, this function will return all function names belonging to an element with name
	 * matching the String held by resourceToSearchFor. Otherwise it will create a dialog
	 * prompting the user to select from a list of files to profile, or select the only 
	 * available file if only one file is available.
	 * 
	 * 
	 * @param bin
	 * @return
	 */
	protected ArrayList<String> getFunctionsFromBinary(IBinary bin, String targetResource) {
		ArrayList<String> funcs = new ArrayList<String>();
		try {			
			ArrayList<ITranslationUnit> list = new ArrayList<ITranslationUnit>();
			
			for (ICElement b : bin.getCProject().getChildrenOfType(ICElement.C_CCONTAINER)) {
				ICContainer c = (ICContainer) b;
				for (ITranslationUnit ast : c.getTranslationUnits()) {
					if (searchForResource && ast.getElementName().contains(targetResource)) {
						TranslationUnitVisitor v = new TranslationUnitVisitor();
						ast.accept(v);
						funcs.addAll(v.getFunctions());
						return funcs;
					} else {
						if (!ast.getElementName().contains(".h"))
						list.add(ast);
					}
				}
			}
			
			if (list.size() == 1) {
				ITranslationUnit ast = (ITranslationUnit) list.get(0);
				TranslationUnitVisitor v = new TranslationUnitVisitor();
				ast.accept(v);
				funcs.addAll(v.getFunctions());
			}
			
			if (list.size() > 1) {
				Object[] unitList = chooseUnit(list); 
				for (Object obj : unitList) {
					if (obj instanceof ITranslationUnit) {
						ITranslationUnit ast = (ITranslationUnit) obj;
						System.out.println(ast.getElementName());
						TranslationUnitVisitor v = new TranslationUnitVisitor();
						ast.accept(v);
						funcs.addAll(v.getFunctions());
					}
				}
			}
			
			return funcs;
			
		} catch (CModelException e) {
			e.printStackTrace();
		} catch (CoreException e) {
			e.printStackTrace();
		}
		
		return null;
	}

