	/**
	 * Retrieves the names of all functions referenced by the binary. If searchForResource
	 * is true, this function will return all function names belonging to an element with name
	 * matching the String held by resourceToSearchFor. Otherwise it will create a dialog
	 * prompting the user to select from a list of files to profile, or select the only 
	 * available file if only one file is available.
	 * 
	 * 
	 * @param bin
	 * @return
	 */
	protected ArrayList<String> getFunctionsFromBinary(IBinary bin, String targetResource) {
		ArrayList<String> funcs = new ArrayList<String>();
		try {			
			ArrayList<ITranslationUnit> list = new ArrayList<ITranslationUnit>();
			TranslationUnitVisitor v = new TranslationUnitVisitor();
//			ASTTranslationUnitVisitor v  = new ASTTranslationUnitVisitor();
			
			for (ICElement b : bin.getCProject().getChildrenOfType(ICElement.C_CCONTAINER)) {
				ICContainer c = (ICContainer) b;
				
				for (ITranslationUnit tu : c .getTranslationUnits()) {
					if (searchForResource && tu.getElementName().contains(targetResource)) {
						tu.accept(v);
						funcs.addAll(v.getFunctions());
						return funcs;
					} else {
						if (!tu.getElementName().contains(".h")) {
							list.add(tu);
						}
					}
				}
				
				//Iterate down to all children, checking for more C_Containers
				while (c.getChildrenOfType(ICElement.C_CCONTAINER).size() > 0) {
					ICContainer e = null;
					for (ICElement d : c.getChildrenOfType(ICElement.C_CCONTAINER)) {
						e = (ICContainer) d;
						for (ITranslationUnit tu : e.getTranslationUnits()) {
							if (searchForResource && tu.getElementName().contains(targetResource)) {
								tu.accept(v);
								funcs.addAll(v.getFunctions());
								return funcs;
							} else {
								if (!tu.getElementName().contains(".h")) {
									list.add(tu);
								}
							}
						}
					}
					c = e;
				}
			}
			
			if (list.size() == 1) {
				ITranslationUnit tu = (ITranslationUnit) list.get(0);
				tu.accept(v);
				funcs.addAll(v.getFunctions());
			}
			
			if (list.size() > 1) {
				Object[] unitList = chooseUnit(list); 
				for (Object obj : unitList) {
					if (obj instanceof ITranslationUnit) {
						ITranslationUnit tu = (ITranslationUnit) obj;
						tu.accept(v);

						funcs.addAll(v.getFunctions());
					}
				}
				
//				for (ITranslationUnit tu : list) {
////					System.out.println(tu.getElementName());
//					try {
//						long snapshot = System.currentTimeMillis();
//					IASTTranslationUnit ast = tu.getAST();
//					System.out.println("Creating AST: " + (System.currentTimeMillis() - snapshot));
//					if (ast == null) continue;
//					v.setFileName(tu.getElementName());
//					snapshot = System.currentTimeMillis();
//					ast.accept(v);
//					System.out.println("Visiting AST: " + (System.currentTimeMillis() - snapshot));
//					funcs.addAll(v.getFunctions());
//					} catch (Exception e) {
//						continue;
//					}
//				}
					
			}
			
			return funcs;
			
		} catch (CModelException e) {
			e.printStackTrace();
		} catch (CoreException e) {
			e.printStackTrace();
		}
		
		return null;
	}

