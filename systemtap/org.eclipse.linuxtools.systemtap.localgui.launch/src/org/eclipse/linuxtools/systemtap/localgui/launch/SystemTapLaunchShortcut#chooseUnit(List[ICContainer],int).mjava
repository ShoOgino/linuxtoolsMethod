	/**
	 * Creates a dialog that prompts the user to select from the given list
	 * of translation units.
	 * 
	 * @param list
	 * @return
	 */
	protected Object[] chooseUnit(List<ICContainer> list, int numberOfValidFiles) {
//		ILabelProvider programLabelProvider = new LabelProvider() {
//			public String getText(Object element) {
//				if (element instanceof ITranslationUnit) {
//					String name = ((ITranslationUnit) element).getElementName();
//					return name;
//				}
//				return super.getText(element);
//			}
//		};
//	
//		//Currently we end up visiting the translation unit twice, could be
//		//expensive for larger programs
//		ILabelProvider qualifierLabelProvider = new LabelProvider() {
//			public String getText(Object element) {
//				try {
//					if (element instanceof ITranslationUnit) {
//						//Only select names that are not .h files
//						TranslationUnitVisitor v = new TranslationUnitVisitor();
//						((ITranslationUnit) element).accept(v);
//						return "Functions: " + v.getNumberOfFunctions();
//					}
//				} catch (CoreException e) {
//					e.printStackTrace();
//				}
//				return super.getText(element);
//			}
//		};
//	
//		ElementListSelectionDialog dialog = new ElementListSelectionDialog(
//				getActiveWorkbenchShell(), programLabelProvider);
//		TwoPaneElementSelector dialog = new TwoPaneElementSelector(
//				getActiveWorkbenchShell(), programLabelProvider, qualifierLabelProvider);
//		dialog.setElements(list.toArray());
//		dialog.setTitle("Choose files"); //$NON-NLS-1$
//		dialog.setMessage("Probe functions declared in selected files."); //$NON-NLS-1$
////		dialog.setUpperListLabel("Detected files"); //$NON-NLS-1$
////		dialog.setLowerListLabel("Number of functions"); //$NON-NLS-1$
//		dialog.setMultipleSelection(true);
//		dialog.setInitialElementSelections(list);
//		
		
		ListTreeContentProvider prov = new ListTreeContentProvider();
		
	    CheckedTreeSelectionDialog dialog = new CheckedTreeSelectionDialog(getActiveWorkbenchShell(), 
	    		new WorkbenchLabelProvider(), prov);
	    
	    dialog.setTitle("Tree Selection");
	    dialog.setMessage("Select .c/.cpp files to probe. Leave selection blank to select all.");
	    dialog.setInput(list);
		
		if (dialog.open() == Window.OK) {
			Object[] result = dialog.getResult();
			if (result == null)
				return null;
			
			ArrayList<Object> output = new ArrayList<Object>();
			try {
				for (Object obj : result) {
					if (obj instanceof ICContainer){
						List<ITranslationUnit> units =
							Arrays.asList(((ICContainer) obj).getTranslationUnits()); 
						for (ITranslationUnit c : units) {
							if (!(c.getElementName().endsWith(".c") ||
									c.getElementName().endsWith(".cpp")))
								continue;
							if (!output.contains(c))
								output.add(c);
						}
					}
					else if (obj instanceof ICElement) {
						ICElement parent = ((ICElement) obj).getParent();
						if (parent instanceof ICContainer){
							String name =((ICElement) obj).getElementName(); 
							if (name.endsWith(".c") || name.endsWith(".cpp")) {
							ITranslationUnit b = ((ICContainer) parent).getTranslationUnit(name);
							if (!output.contains(b)) {
								output.add(b);
							}
							}
						}
					}
				}
			
				int totalValidFiles = numberOfValidFiles;
				if ( output.size() >= totalValidFiles) {
					output.clear();
					output.add(new Object());
				} else if (output.size() > 10 && totalValidFiles > 300) {
					if (confirmProbeAll(output.size())) {
						output.clear();
						output.add(new Object());
					}
				}
			} catch (CModelException e) {
				e.printStackTrace();
			}
	
//			
//			if ( output.size() == 0) {
//				output.clear();
//				output.add(new Object());
//			} else if (output.size() > 1) {
//				if (confirmProbeAll(output.size())) {
//					output.clear();
//					output.add(new Object());
//				}
//			}
			
			return output.toArray();
		}
		return null;
	}

