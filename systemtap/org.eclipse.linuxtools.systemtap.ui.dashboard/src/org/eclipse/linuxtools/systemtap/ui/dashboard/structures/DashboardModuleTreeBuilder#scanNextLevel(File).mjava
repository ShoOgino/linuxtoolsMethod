	/**
	 * This is the main method for this class. It searches through the provided
	 * file/folder and builds the tree with any dashboard modules it finds.
	 * @param f The file/folder to scan for modules
	 */
	private void scanNextLevel(File f) {
		File[] fs = f.listFiles(new DashboardModuleFileFilter());
		if (fs == null){
			return;
		}
		DashboardMetaData dmd;
		DashboardModule dm;
		
		TreeNode location;
		for(int i=0; i<fs.length; i++) {
			if(fs[i].isDirectory())
				scanNextLevel(fs[i]);
			else {
				try {
					File folder = new File(SystemTapGUISettings.tempDirectory + "/bundles/");
					if(!folder.exists())
						folder.mkdirs();
					
					File file = new File(folder + "/" + fs[i].getName() + ".tmp");
					file.createNewFile();
					ZipArchive.uncompressFile(file.getAbsolutePath(), fs[i].getAbsolutePath());
					ZipArchive.unzipFiles(file.getAbsolutePath(), folder.getAbsolutePath());
					dmd = new DashboardMetaData(folder.getAbsolutePath() + DashboardModule.metaFileName);
					dm = dmd.getModule();
					dm.archiveFile = fs[i];
					int index = searchModuleNames(dm.category);
					if (index == -1)
					{
						moduleNames.add(dm.category);
						//
						DashboardView.addmodulename(dm.category);
					}
					location = findInsertLocation(dm.category);
					location.add(new ModuleTreeNode(dm, dm.display, true));
					
					File[] files = folder.listFiles();
					for(int j=0; j<files.length; j++)
						files[j].delete();
					folder.delete();
				} catch(IOException ioe) {}
			}
		}
	}

