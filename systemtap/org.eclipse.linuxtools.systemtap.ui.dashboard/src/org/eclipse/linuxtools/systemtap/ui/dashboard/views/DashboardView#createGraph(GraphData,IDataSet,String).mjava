	/**
	 * This method creates a new graph in the view.  It creates a wrapper for the graph
	 * and then adds an update listener to the graph, and finally registers it with
	 * the composite.
	 * @param gd The data needed to create a new graph
	 * @param ds The dataset used to store all script output data
	 * @return The newly create graph component.
	 */
/*	public DashboardAdapter createGraph(GraphData gd, IDataSet ds) {
		DashboardAdapter adapter = new DashboardAdapter(composite, gd, ds);
		updater.addUpdateListener(adapter.getGraph());
		composite.add(adapter);
		
		return adapter;
	}*/
	/**
	 * This method creates a new graph in the view.  It creates a wrapper for the graph
	 * and then adds an update listener to the graph, and finally registers it with
	 * the composite.
	 * @param gd The data needed to create a new graph
	 * @param ds The dataset used to store all script output data
	 * @return The newly create graph component.
	 */
	public DashboardAdapter createGraph(GraphData gd, IDataSet ds, String moduleName) {
		 Display disp = PlatformUI.getWorkbench().getDisplay();
		  Cursor cursor = new Cursor(disp, SWT.CURSOR_WAIT);
		  PlatformUI.getWorkbench().getDisplay().getActiveShell().setCursor(cursor);
   //    while (ds.getRowCount() <= 0 ) {}
		int index = searchModuleNames(moduleName);
	
		DashboardAdapter adapter = null;
		if (index == -1)
		{
				createComposite(moduleName);
			index = searchModuleNames(moduleName);
		}
		adapter = new DashboardAdapter(composites.get(index), gd, ds, moduleName);
		updater.addUpdateListener(adapter.getGraph());
		composites.get(index).add(adapter);
		  PlatformUI.getWorkbench().getDisplay().getActiveShell().setCursor(null);
		  cursor.dispose();
		return adapter;
	}

