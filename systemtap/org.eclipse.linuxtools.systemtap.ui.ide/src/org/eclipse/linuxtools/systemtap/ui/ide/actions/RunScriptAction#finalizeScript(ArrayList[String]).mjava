	/**
	 * Produces a <code>String[]</code> from the <code>ArrayList</code> passed in with stap inserted
	 * as the first entry, and the filename as the last entry. Used to convert the arguments generated
	 * earlier in <code>buildStandardScript</code> such as tapset locations and guru mode into an actual
	 * command line argument array that can be passed to <code>Runtime.exec</code>.
	 * @param cmdList The list of arguments for stap for this script
	 * @return An array suitable to pass to <code>Runtime.exec</code> to start stap on this file.
	 */
	protected String[] finalizeScript(ArrayList<String> cmdList) {
		
		String[] script;

		script = new String[cmdList.size() + 4];
		script[0] = "stap"; //$NON-NLS-1$

		if(getRunLocal() == false)
			script[script.length-1] = tmpfileName;
		else
			script[script.length-1] = fileName;
		
		for(int i=0; i< cmdList.size(); i++) {
			script[i+1] = cmdList.get(i).toString();
		}
		script[script.length-3]="-m";

		String modname;
		if(getRunLocal() == false) {
			modname = serverfileName.substring(0, serverfileName.indexOf('.'));
		}
		/* We need to remove the directory prefix here because in the case of
		 * running the script remotely, this is already done.  Not doing so
		 * causes a modname error.
		 */
		else {
			modname = fileName.substring(fileName.lastIndexOf('/')+1);
			modname = modname.substring(0, modname.indexOf('.'));
		}
		if (modname.indexOf('-') != -1)
			modname = modname.substring(0, modname.indexOf('-'));
		script[script.length-2]=modname;
		return script;
	}

