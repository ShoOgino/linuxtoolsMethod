	/**
	 * Opposite action as writeTree. Reads the <code>IMemento</code> passed in into the <code>TreeNode</code>
	 * up to the requested maximum depth.
	 * @param data The <code>IMemento</code> to read the tree out of.
	 * @param parent The <code>TreeNode</code> to store the tree in.
	 * @param depth The maximum depth to read.
	 */
	private static void readTree(IMemento data, TreeNode parent, int depth) {
		IMemento[] children = data.getChildren("level" + depth); //$NON-NLS-1$

		try {
			if(null != children) {
				for(int i=0; i<children.length; i++) {
					String s = children[i].getString("string"); //$NON-NLS-1$
					String d = children[i].getString("data"); //$NON-NLS-1$
					String def = children[i].getString("definition"); //$NON-NLS-1$

					boolean c = ((0==children[i].getInteger("click").intValue())?false:true); //$NON-NLS-1$

					if ("<null>".equals(s)) { //$NON-NLS-1$
						s = null;
					}
					if ("<null>".equals(d)) { //$NON-NLS-1$
						d = null;
					}

					TreeNode t;
					if(null == def) {
						t = new TreeNode(d, s, c);
					} else {
						if ("<null>".equals(def)) { //$NON-NLS-1$
							def = null;
						}

						t = new TreeDefinitionNode(d, s, def, c);
					}
					parent.add(t);

					readTree(children[i], t, depth+1);
				}
			}
		} catch(NullPointerException e) {
		}
	}

