	/**
	 * Parses the output generated from running stap -v -p1 -L. Pulls out all functions
	 * and probe aliases from the provided string. Populates the probe and function
	 * trees.
	 * 
	 * ProbeTree organized as:
	 * 	Root->Files->ProbePoints->Variables
	 * 
	 * FunctionTree organized as:
	 * 	Root->Files->Functions
	 * @param s The entire output from running stap -v -p1 -L.
	 */
	private void parseLevel1(String s) {
		String prev = null;
		StringBuilder token = new StringBuilder("");
		TreeNode parent;
		TreeNode item;

		TreeNode child;
	
	 	StringTokenizer st = new StringTokenizer(s, "\n", false);
 		st.nextToken(); //skip the stap command itself
	 	while(st.hasMoreTokens()){
	 		StringTokenizer next_level = new StringTokenizer(st.nextToken());
 			token.setLength(0);
 			int total = next_level.countTokens();
	 		for(int i = 0; i < total; i++){
	 			prev = next_level.nextToken();
	 			if(i == 0) {
	 				probes.add(new TreeNode(prev, prev, true));
	 				parent = probes.getChildAt(probes.getChildCount()-1);
	 				parent.add(new TreeDefinitionNode("probe " + prev, prev, parent.getData().toString(), true));
	 			}
	 			else if(i < (total - 1)) {
	 				//if the token is empty, of course add it
	 				if(token.length() == 0) {
	 					token.append(prev);
	 				}
	 				//if the token has a : already, and the current token doesn't, append it
	 				else if(!(token.length()==0) && !prev.contains(":")) {
	 					token.append(prev + " ");
	 				}
	 				//if token isn't empty, and the current one contains a ':', add token, empty, and append prev
	 				else if(!(token.length()==0) && prev.contains(":")) {
	 					item = probes.getChildAt(probes.getChildCount()-1);
	 					child = item.getChildAt(item.getChildCount()-1);
	 					child.add(new TreeNode(token.toString(), token.toString(), false));
	 					token.setLength(0);
	 					token.append(prev + " ");
	 				}
	 			}
	 			else if(i == (total - 1)) {
	 				if(prev.contains(":")) { //add token, then add prev
	 					item = probes.getChildAt(probes.getChildCount()-1);
	 					child = item.getChildAt(item.getChildCount()-1);
	 					child.add(new TreeNode(token.toString(), token.toString(), false));
	 					item = probes.getChildAt(probes.getChildCount()-1);
	 					child = item.getChildAt(item.getChildCount()-1);
	 					child.add(new TreeNode(prev, prev, false));
	 				}
	 				else { // end var type, append to token, then add token
	 					token.append(prev);
	 					item = probes.getChildAt(probes.getChildCount()-1);
	 					child = item.getChildAt(item.getChildCount()-1);
	 					child.add(new TreeNode(token.toString(), token.toString(), false));
	 				}
	 			}
	 		}
	 	}
	}

