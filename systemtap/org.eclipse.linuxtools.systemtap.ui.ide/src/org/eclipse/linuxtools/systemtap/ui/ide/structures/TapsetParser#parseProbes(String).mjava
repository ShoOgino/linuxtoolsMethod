	/**
	 * Parses the output generated from running stap -v -p1 -L. Pulls out all functions
	 * and probe aliases from the provided string. Populates the probe and function
	 * trees.
	 *
	 * ProbeTree organized as:
	 * 	Root->Files->ProbePoints->Variables
	 *
	 * FunctionTree organized as:
	 * 	Root->Files->Functions
	 * @param s The entire output from running stap -v -p1 -L.
	 */
	private void parseProbes(String s) {
		String token = null;
		StringBuilder prev = new StringBuilder(""); //$NON-NLS-1$
		TreeNode currentProbe = null;
		TreeNode group = null;

	 	StringTokenizer st = new StringTokenizer(s, "\n", false); //$NON-NLS-1$
 		st.nextToken(); //skip the stap command itself
	 	while(st.hasMoreTokens()){
	 		String tokenString = st.nextToken();

			// If the token starts with '_' or '__' it is a private probe so
			// skip it.
 			if (tokenString.startsWith("_")) //$NON-NLS-1$
 				continue;

	 		int firstDotIndex = tokenString.indexOf('.');
 			String groupName = tokenString;
	 		if (firstDotIndex > 0){
	 			groupName = tokenString.substring(0, firstDotIndex);
	 		}

			// If the current probe belongs to a group other than
			// the most recent group. This should rarely be needed because the
			// probe list is sorted... mostly.
	 		if(group == null || !group.getData().equals(groupName)){
	 			group = probes.getChildByName(groupName);
	 		}

	 		// Create a new group and add it
	 		if(group == null){
	 			group = new TreeNode(groupName, groupName, true);
	 			probes.add(group);
	 		}

	 		StringTokenizer probe = new StringTokenizer(tokenString);
 			prev.setLength(0);

 			// The first token is the probe name
 			token = probe.nextToken();
 			currentProbe = new TreeDefinitionNode("probe " + token, token, null, true); //$NON-NLS-1$
 			group.add(currentProbe);

 			// the remaining tokens are variable names and variable types name:type.
	 		while(probe.hasMoreTokens()){
	 			token = probe.nextToken();

				// Because some variable types contain spaces (var2:struct task_struct)
	 			// the only way to know if we have the entire string representing a
	 			// variable is if we reach the next token containing a ':' or we reach
	 			// the end of the stream.
	 			if (token.contains(":") && prev.length() > 0){ //$NON-NLS-1$
	 				prev.setLength(prev.length() - 1); // Remove the trailing space.
	 				currentProbe.add(new TreeNode(prev.toString(), prev.toString(), false));
	 				prev.setLength(0);
	 			}
	 			prev.append(token + " "); //$NON-NLS-1$
	 		}

 			// Add the last token if there is one
	 		if (prev.length() > 0){
	 			prev.setLength(prev.length() - 1); // Remove the trailing space.
	 			currentProbe.add(new TreeNode(prev.toString(), prev.toString(), false));
	 		}
	 	}
	}

