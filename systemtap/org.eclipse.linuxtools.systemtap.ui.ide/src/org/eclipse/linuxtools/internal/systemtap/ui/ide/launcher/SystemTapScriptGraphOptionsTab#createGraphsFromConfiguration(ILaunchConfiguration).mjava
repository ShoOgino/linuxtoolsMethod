	/**
	 * Creates graph data corresponding to the graphs that will plot a script's parsed output data.
	 * @param configuration The desired run configuration.
	 * @return A data set.
	 */
	public static ArrayList<LinkedList<GraphData>> createGraphsFromConfiguration (ILaunchConfiguration configuration)
			throws CoreException {
		// Restrict number of regexs to at least one, so at least
		// one inner list will exist in the return value.
		int numberOfRegexs = Math.max(configuration.getAttribute(NUMBER_OF_REGEXS, 1), 1);
		ArrayList<LinkedList<GraphData>> graphsList = new ArrayList<>(numberOfRegexs);

		for (int r = 0; r < numberOfRegexs; r++) {
			int numberOfGraphs = configuration.getAttribute(NUMBER_OF_GRAPHS + r, 0);
			LinkedList<GraphData> graphs = new LinkedList<>();
			for (int i = 0; i < numberOfGraphs; i++) {
				GraphData graphData = new GraphData();
				graphData.title = configuration.getAttribute(get2DConfigData(GRAPH_TITLE, r, i), (String) null);

				graphData.key = configuration.getAttribute(get2DConfigData(GRAPH_KEY, r, i), (String) null);
				graphData.xSeries = configuration.getAttribute(get2DConfigData(GRAPH_X_SERIES, r, i), 0);
				graphData.graphID = configuration.getAttribute(get2DConfigData(GRAPH_ID, r, i), (String) null);

				int ySeriesLength = configuration.getAttribute(get2DConfigData(GRAPH_Y_SERIES_LENGTH, r, i), 0);
				if (ySeriesLength == 0) {
					graphData.ySeries = null;
				} else {
					int[] ySeries = new int[ySeriesLength];
					for (int j = 0; j < ySeriesLength; j++) {
						ySeries[j] = configuration.getAttribute(get2DConfigData(GRAPH_Y_SERIES, r, i + "_" + j), 0); //$NON-NLS-1$
					}
					graphData.ySeries = ySeries;
				}

				graphs.add(graphData);
			}
			graphsList.add(graphs);
		}

		return graphsList;
	}

