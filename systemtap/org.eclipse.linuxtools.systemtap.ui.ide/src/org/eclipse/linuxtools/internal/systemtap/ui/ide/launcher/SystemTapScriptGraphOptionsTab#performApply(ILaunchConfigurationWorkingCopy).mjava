	@Override
	public void performApply(ILaunchConfigurationWorkingCopy configuration) {
		configuration.setAttribute(RUN_WITH_CHART, this.runWithChartCheckButton.getSelection());

		configuration.setAttribute(REGULARE_EXPRESSION, regularExpressionText.getText());
		configuration.setAttribute(SAMPLE_OUTPUT, sampleOutputText.getText());

		Control[] textBoxes = this.textFieldsComposite.getChildren();
		int numberOfColumns = textBoxes.length/2;
		configuration.setAttribute(NUMBER_OF_COLUMNS, numberOfColumns);

		for (int i = 0; i < numberOfColumns; i++) {
			String text = ((Text)textBoxes[i*2]).getText();
			configuration.setAttribute(REGEX_BOX+i, text);
		}
		//clear what's unused
		for (int i = numberOfColumns; i < oldNumColumns; i++) {
			configuration.setAttribute(REGEX_BOX+i, (String) null);
		}
		oldNumColumns = numberOfColumns;

		int numberOfExtras = (badGraphs.size() == 0) ? 0 : cachedNames.size();
		configuration.setAttribute(NUMBER_OF_EXTRAS, numberOfExtras);
		for (int i = 0; i < numberOfExtras; i++) {
			configuration.setAttribute(EXTRA_BOX+i, cachedNames.get(i));
		}
		for (int i = numberOfExtras; i < oldNumExtras; i++) {
			configuration.setAttribute(EXTRA_BOX+i, (String) null);
		}
		oldNumExtras = numberOfExtras;

		// Save graphs.
		TableItem[] list = this.graphsTable.getItems();
		configuration.setAttribute(NUMBER_OF_GRAPHS, list.length);
		for (int i = 0; i < list.length; i++) {
			GraphData graphData = (GraphData)list[i].getData();
			configuration.setAttribute(GRAPH_TITLE + i, graphData.title);

			configuration.setAttribute(GRAPH_KEY + i, graphData.key);
			configuration.setAttribute(GRAPH_X_SERIES + i, graphData.xSeries);
			configuration.setAttribute(GRAPH_ID + i, graphData.graphID);

			configuration.setAttribute(GRAPH_Y_SERIES_LENGTH + i, graphData.ySeries.length);
			for (int j = 0; j < graphData.ySeries.length; j++) {
				configuration.setAttribute(GRAPH_Y_SERIES + i + "_" + j, graphData.ySeries[j]); //$NON-NLS-1$
			}
		}

		addGraphButton.setEnabled(numberOfColumns > 0);
	}

