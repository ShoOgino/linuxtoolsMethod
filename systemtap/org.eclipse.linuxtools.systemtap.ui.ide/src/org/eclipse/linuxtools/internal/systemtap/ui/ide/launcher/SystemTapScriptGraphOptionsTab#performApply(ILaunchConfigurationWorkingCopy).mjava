    @Override
    public void performApply(ILaunchConfigurationWorkingCopy configuration) {
        configuration.setAttribute(RUN_WITH_CHART, this.runWithChartCheckButton.getSelection());

        int numberOfRegexs = getNumberOfRegexs();
        for (int r = 0; r < numberOfRegexs; r++) {
            // Save data sets, and clear removed ones.
            configuration.setAttribute(REGULAR_EXPRESSION + r, regularExpressionCombo.getItem(r));
            configuration.setAttribute(SAMPLE_OUTPUT + r, outputList.get(r));

            List<String> columnNames = columnNamesList.get(r);
            int numberOfColumns = columnNames.size();
            for (int i = 0; i < numberOfColumns; i++) {
                configuration.setAttribute(get2DConfigData(REGEX_BOX, r, i), columnNames.get(i));
            }
            cleanUpConfigurationItem(configuration, NUMBER_OF_COLUMNS, REGEX_BOX, r, numberOfColumns);
            configuration.setAttribute(NUMBER_OF_COLUMNS + r, numberOfColumns);

            // If the current regex has graphs with missing data, store all cached names
            // in the configuration so that they will be easily restorable for next time.
            Stack<String> extranames = cachedNamesList.get(r);
            int numberOfExtras = findBadGraphs(r) == null ? 0 : extranames.size();
            for (int i = 0; i < numberOfExtras; i++) {
                configuration.setAttribute(get2DConfigData(EXTRA_BOX, r, i), extranames.get(i));
            }
            cleanUpConfigurationItem(configuration, NUMBER_OF_EXTRAS, EXTRA_BOX, r, numberOfExtras);
            configuration.setAttribute(NUMBER_OF_EXTRAS + r, numberOfExtras);

            // Save new graphs, and clear removed ones.
            LinkedList<GraphData> list = graphsDataList.get(r);
            int numberOfGraphs = list.size();
            for (int i = 0; i < numberOfGraphs; i++) {
                GraphData graphData = list.get(i);
                configuration.setAttribute(get2DConfigData(GRAPH_TITLE, r, i), graphData.title);
                configuration.setAttribute(get2DConfigData(GRAPH_KEY, r, i), graphData.key);
                configuration.setAttribute(get2DConfigData(GRAPH_X_SERIES, r, i), graphData.xSeries);
                configuration.setAttribute(get2DConfigData(GRAPH_ID, r, i), graphData.graphID);

                int ySeriesLength = graphData.ySeries.length;
                for (int j = 0; j < ySeriesLength; j++) {
                    configuration.setAttribute(get2DConfigData(GRAPH_Y_SERIES, r, i + "_" + j), //$NON-NLS-1$
                            graphData.ySeries[j]);
                }
                cleanUpConfigurationGraphYSeries(configuration, r, i, ySeriesLength);
                configuration.setAttribute(get2DConfigData(GRAPH_Y_SERIES_LENGTH, r, i), ySeriesLength);
            }
            cleanUpConfigurationGraphs(configuration, r, numberOfGraphs);
            configuration.setAttribute(NUMBER_OF_GRAPHS + r, numberOfGraphs);
        }
        cleanUpConfiguration(configuration, numberOfRegexs);
        configuration.setAttribute(NUMBER_OF_REGEXS, numberOfRegexs);
    }

