	/**
	 * Returns the reference position regarding to indentation for <code>position</code>,
	 * or {@link STPHeuristicScanner#NOT_FOUND NOT_FOUND}.
	 *
	 * <p>If <code>peekNextChar</code> is <code>true</code>, the next token after
	 * <code>offset</code> is read and taken into account when computing the
	 * indentation. Currently, if the next token is the first token on the line
	 * (i.e. only preceded by whitespace), the following tokens are specially
	 * handled:
	 * <ul>
	 * 	<li><code>switch</code> labels are indented relative to the switch block</li>
	 * 	<li>opening curly braces are aligned correctly with the introducing code</li>
	 * 	<li>closing curly braces are aligned properly with the introducing code of
	 * 		the matching opening brace</li>
	 * 	<li>closing parenthesis' are aligned with their opening peer</li>
	 * 	<li>the <code>else</code> keyword is aligned with its <code>if</code>, anything
	 * 		else is aligned normally (i.e. with the base of any introducing statements).</li>
	 *  <li>if there is no token on the same line after <code>offset</code>, the indentation
	 * 		is the same as for an <code>else</code> keyword</li>
	 * </ul>
	 *
	 * @param offset the offset for which the reference is computed
	 * @param nextToken the next token to assume in the document
	 * @return the reference statement relative to which <code>offset</code>
	 *         should be indented, or {@link STPHeuristicScanner#NOT_FOUND NOT_FOUND}
	 */
	private int findReferencePosition(int offset, int nextToken) {
		boolean danglingElse= false;
		boolean cancelIndent= false; // If set to true, fIndent is ignored.
		int extraIndent= 0; // Can be either positive or negative.
		MatchMode matchMode = MatchMode.REGULAR;

		// Account for un-indentation characters already typed in, but after position.
		// If they are on a line by themselves, the indentation gets adjusted accordingly.
		//
		// Also account for a dangling else.
		if (offset < fDocument.getLength()) {
			try {
				IRegion line= fDocument.getLineInformationOfOffset(offset);
				int lineOffset= line.getOffset();
				int prevPos= Math.max(offset - 1, 0);
				boolean isFirstTokenOnLine=
						fDocument.get(lineOffset, prevPos + 1 - lineOffset).trim().length() == 0;
				int prevToken= fScanner.previousToken(prevPos, STPHeuristicScanner.UNBOUND);
				boolean bracelessBlockStart= fScanner.isBracelessBlockStart(prevPos, STPHeuristicScanner.UNBOUND);

				switch (nextToken) {
				case STPSymbols.TokenELSE:
					danglingElse= true;
					break;

				case STPSymbols.TokenCASE:
				case STPSymbols.TokenDEFAULT:
					if (isFirstTokenOnLine)
						matchMode = MatchMode.MATCH_CASE;
					break;

				case STPSymbols.TokenPUBLIC:
				case STPSymbols.TokenPROTECTED:
				case STPSymbols.TokenPRIVATE:
					if (isFirstTokenOnLine && peekSecondToken(offset) != STPSymbols.TokenIDENT)
						matchMode = MatchMode.MATCH_ACCESS_SPECIFIER;
					break;

				case STPSymbols.TokenLBRACE: // for opening-brace-on-new-line style
					if (bracelessBlockStart) {
						extraIndent= fPrefs.prefIndentBracesForBlocks ? 0 : -1;
					} else if (prevToken == STPSymbols.TokenCOLON && !fPrefs.prefIndentBracesForBlocks) {
						extraIndent= -1;
					} else if ((prevToken == STPSymbols.TokenEQUAL || prevToken == STPSymbols.TokenRBRACKET) &&
							!fPrefs.prefIndentBracesForArrays) {
						cancelIndent= true;
					} else if ((prevToken == STPSymbols.TokenRPAREN || prevToken == STPSymbols.TokenCONST) && fPrefs.prefIndentBracesForMethods) {
						extraIndent= 1;
					} else if (prevToken == STPSymbols.TokenIDENT) {
						if (fPrefs.prefIndentBracesForTypes) {
							extraIndent= 1;
						}
						int pos = fPosition;
						fPosition = offset;
						if (matchTypeDeclaration() != NOT_FOUND) {
							matchMode = MatchMode.MATCH_TYPE_DECLARATION;
						}
						fPosition = pos;
					}
					break;

				case STPSymbols.TokenRBRACE: // closing braces get unindented
					if (isFirstTokenOnLine || prevToken != STPSymbols.TokenLBRACE)
						matchMode = MatchMode.MATCH_BRACE;
					break;

				case STPSymbols.TokenRPAREN:
					if (isFirstTokenOnLine)
						matchMode = MatchMode.MATCH_PAREN;
					break;
				}
			} catch (BadLocationException e) {
			}
		} else {
			// Don't assume an else could come if we are at the end of file.
			danglingElse= false;
		}

		int ref= findReferencePosition(offset, danglingElse, matchMode);
		if (cancelIndent) {
			fIndent = 0;
		} else if (extraIndent > 0) {
			fAlign= NOT_FOUND;
			fIndent += extraIndent;
		} else {
			fIndent += extraIndent;
		}
		return ref;
	}

