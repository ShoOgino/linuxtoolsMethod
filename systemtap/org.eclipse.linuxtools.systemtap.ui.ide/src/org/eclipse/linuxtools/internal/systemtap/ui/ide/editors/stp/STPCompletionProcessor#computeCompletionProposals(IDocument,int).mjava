	public ICompletionProposal[] computeCompletionProposals(IDocument document, int offset){

		ITypedRegion partition = null;

		try {
			partition = document.getPartition(offset);
		} catch (BadLocationException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		String prefix = ""; //$NON-NLS-1$
		String prePrefix = ""; //$NON-NLS-1$

		// Get completion hint from document
		try {
			prefix = getPrefix(document, offset);
			Token previousToken = getPrecedingToken(document, offset - prefix.length() - 1);

			while (previousToken.tokenString.equals("=") || //$NON-NLS-1$
					previousToken.tokenString.equals(",") ){ //$NON-NLS-1$
				previousToken = getPrecedingToken(document, previousToken.offset - 1);
				previousToken = getPrecedingToken(document, previousToken.offset - 1);
			}

			prePrefix = previousToken.tokenString;

		} catch (BadLocationException e) {
			return NO_COMPLETIONS;
		}

		if (prePrefix.startsWith("probe")){ //$NON-NLS-1$
			return getProbeCompletionList(prefix, offset);
		}

		// In the global scope return global keyword completion.
		if (partition.getType() == IDocument.DEFAULT_CONTENT_TYPE ){
			return getGlobalKeywordCompletion(prefix, offset);
		}

		// If inside a probe return probe variable completions and functions
		// which can be called.
		if (partition.getType() == STPPartitionScanner.STP_PROBE){
			ICompletionProposal[] variableCompletions = getProbeVariableCompletions(document, offset, prefix);
			ICompletionProposal[] functionCompletions = getFunctionCompletions(offset, prefix);

			ArrayList<ICompletionProposal> completions = new ArrayList<ICompletionProposal>(
					variableCompletions.length + functionCompletions.length);
			completions.addAll(Arrays.asList(variableCompletions));
			completions.addAll(Arrays.asList(functionCompletions));

			return completions.toArray(new ICompletionProposal[0]);
		}

		return NO_COMPLETIONS;
	}

