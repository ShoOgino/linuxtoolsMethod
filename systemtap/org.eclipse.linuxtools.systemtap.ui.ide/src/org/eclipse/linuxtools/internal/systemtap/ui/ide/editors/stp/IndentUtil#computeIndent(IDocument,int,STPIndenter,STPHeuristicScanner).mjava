    /**
     * Computes and returns the indentation for a source line.
     *
     * @param document the document
     * @param line the line in document
     * @param indenter the C indenter
     * @param scanner the scanner
     * @return the indent, never <code>null</code>
     * @throws BadLocationException
     */
    public static String computeIndent(IDocument document, int line, STPIndenter indenter, STPHeuristicScanner scanner) throws BadLocationException {
        IRegion currentLine= document.getLineInformation(line);
        final int offset= currentLine.getOffset();

        String indent= null;
        if (offset < document.getLength()) {
            ITypedRegion partition= TextUtilities.getPartition(document, STPPartitionScanner.STP_PARTITIONING, offset, true);
            ITypedRegion startingPartition= TextUtilities.getPartition(document, STPPartitionScanner.STP_PARTITIONING, offset, false);
            String type= partition.getType();
            if (type.equals(STPPartitionScanner.STP_COMMENT)) {
                indent= computeCommentIndent(document, line, scanner, startingPartition);
            } else if (startingPartition.getType().equals(STPPartitionScanner.STP_CONDITIONAL)) {
                indent= computePreprocessorIndent(document, line, startingPartition);
            }
        }

        // standard C code indentation
        if (indent == null) {
            StringBuilder computed= indenter.computeIndentation(offset);
            if (computed != null)
                indent= computed.toString();
            else
                indent= new String();
        }
        return indent;
    }

