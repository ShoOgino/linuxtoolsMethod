    /**
     * Adds one column to the list of the currently-selected regex's columns.
     * This creates an extra Text in which the name of the column may be entered,
     * and a corresponding Label containing sample expected output.
     * @param nameToAdd If non-null, the name of the newly-created column will
     * match this String. If null, the column will be given a name recovered from
     * the active stack of cached names, or a default name if one doesn't exist.
     */
    private void addColumn(String nameToAdd) {
        // Show the "shift" buttons of the previous column, if it exists.
        if (this.numberOfVisibleColumns > 0) {
            textFieldsComposite.getChildren()[(this.numberOfVisibleColumns - 1) * 4].setVisible(true);
            textFieldsComposite.getChildren()[(this.numberOfVisibleColumns - 1) * 4 + 1].setVisible(true);
        }

        // Add buttons for shifting column names up/down in the list.
        Button buttonUp = new Button(textFieldsComposite, SWT.PUSH);
        buttonUp.setText(Messages.SystemTapScriptGraphOptionsTab_columnShiftUp);
        buttonUp.setVisible(false);
        Button buttonDown = new Button(textFieldsComposite, SWT.PUSH);
        buttonDown.setText(Messages.SystemTapScriptGraphOptionsTab_columnShiftDown);
        buttonDown.setVisible(false);

        Text text = new Text(textFieldsComposite, SWT.BORDER);
        GridData data = new GridData(SWT.FILL, SWT.FILL, false, false);
        data.minimumWidth = 200;
        data.widthHint = 200;
        text.setLayoutData(data);

        numberOfVisibleColumns++;
        text.addModifyListener(columnNameListener);
        if (nameToAdd == null) {
            // Restore a deleted name by popping from the stack.
            if (cachedNames.size() > 0) {
                text.setText(cachedNames.pop());
            } else {
                text.setText(MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_defaultColumnTitleBase,
                        numberOfVisibleColumns));
            }
        } else {
            text.setText(nameToAdd);
        }

        Label label = new Label(textFieldsComposite, SWT.BORDER);
        label.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));

        textFieldsComposite.layout();
        textFieldsComposite.pack();

        // Special value: if an empty string is given, don't add button listeners.
        if (nameToAdd == "") { //$NON-NLS-1$
            return;
        }

        // Add button listeners for shifting column names.
        buttonUp.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                Control clickedButton = (Control) e.widget;
                Control[] children = textFieldsComposite.getChildren();
                int currentColumn = 0;
                for (; currentColumn < numberOfVisibleColumns - 1; currentColumn++) {
                    if (children[currentColumn*4].equals(clickedButton)) {
                        break;
                    }
                }
                String edgeName = ((Text)children[currentColumn*4 + 2]).getText();
                for (int i = currentColumn; i < numberOfVisibleColumns - 1; i++) {
                    ((Text)children[i*4 + 2]).setText(((Text)children[(i + 1)*4 + 2]).getText());
                }
                ((Text)children[(numberOfVisibleColumns - 1)*4 + 2]).setText(edgeName);
            }
        });

        buttonDown.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                Control clickedButton = (Control) e.widget;
                Control[] children = textFieldsComposite.getChildren();
                int currentColumn = 0;
                for (; currentColumn < numberOfVisibleColumns - 1; currentColumn++) {
                    if (children[currentColumn*4 + 1].equals(clickedButton)) {
                        break;
                    }
                }
                String edgeName = ((Text)children[(numberOfVisibleColumns - 1)*4 + 2]).getText();
                for (int i = numberOfVisibleColumns - 1; i > currentColumn; i--) {
                    ((Text)children[i*4 + 2]).setText(((Text)children[(i - 1)*4 + 2]).getText());
                }
                ((Text)children[currentColumn*4 + 2]).setText(edgeName);
            }
        });
    }

