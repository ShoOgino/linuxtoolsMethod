	/**
	 * Returns the reference position regarding to indentation for <code>position</code>,
	 * or {@link STPHeuristicScanner#NOT_FOUND NOT_FOUND}. <code>fIndent</code> will contain
	 * the relative indentation (in indentation units, not characters) after the call. If there is
	 * a special alignment (e.g. for a method declaration where parameters should be aligned),
	 * <code>fAlign</code> will contain the absolute position of the alignment reference
	 * in <code>fDocument</code>, otherwise <code>fAlign</code> is set to
	 * {@link STPHeuristicScanner#NOT_FOUND}.
	 *
	 * @param offset the offset for which the reference is computed
	 * @param danglingElse whether a dangling else should be assumed at <code>position</code>
	 * @param matchMode determines what kind of reference position should be returned.
	 *     See {@link MatchMode}.
	 * @return the reference statement relative to which <code>position</code>
	 *         should be indented, or {@link STPHeuristicScanner#NOT_FOUND}
	 */
	public int findReferencePosition(int offset, boolean danglingElse, MatchMode matchMode) {
		fIndent= 0; // The indentation modification
		fExtraSpaces= 0;
		fAlign= NOT_FOUND;
		fPosition= offset;

		// Forward cases.
		// An unindentation happens sometimes if the next token is special, namely on braces,
		// parens and case labels align braces, but handle the case where we align with the method
		// declaration start instead of the opening brace.
		switch (matchMode) {
		case MATCH_BRACE:
			if (skipScope(STPSymbols.TokenLBRACE, STPSymbols.TokenRBRACE)) {
				try {
					// Align with the opening brace that is on a line by its own
					int lineOffset= fDocument.getLineOffset(fLine);
					if (lineOffset <= fPosition &&
							fDocument.get(lineOffset, fPosition - lineOffset).trim().isEmpty()) {
						return fPosition;
					}
				} catch (BadLocationException e) {
					// Concurrent modification - walk default path
				}
				// If the opening brace is not on the start of the line, skip to the start.
				int pos= skipToStatementStart(true, true);
				fIndent= 0; // indent is aligned with reference position
				return pos;
			} else {
				// If we can't find the matching brace, the heuristic is to unindent
				// by one against the normal position
				int pos= findReferencePosition(offset, danglingElse, MatchMode.REGULAR);
				fIndent--;
				return pos;
			}

		case MATCH_PAREN:
			// Align parentheses.
			if (skipScope(STPSymbols.TokenLPAREN, STPSymbols.TokenRPAREN)) {
				return fPosition;
			} else {
				// If we can't find the matching paren, the heuristic is to unindent by one
				// against the normal position.
				int pos= findReferencePosition(offset, danglingElse, MatchMode.REGULAR);
				fIndent--;
				return pos;
			}

		case MATCH_CASE:
			// The only reliable way to get case labels aligned (due to many different styles of
			// using braces in a block) is to go for another case statement, or the scope opening
			// brace.
			return matchCaseAlignment();

		case MATCH_ACCESS_SPECIFIER:
			// The only reliable way to get access specifiers aligned (due to many different styles
			// of using braces in a block) is to go for another access specifier, or the scope
			// opening brace.
			return matchAccessSpecifierAlignment();

		case MATCH_TYPE_DECLARATION:
			return matchTypeDeclaration();

		case REGULAR:
			break;
		}

		if (peekToken(offset) == STPSymbols.TokenCOLON) {
			int pos= fPosition;
			if (looksLikeTypeInheritanceDecl()) {
				fIndent = fPrefs.prefContinuationIndent;
				return fPosition;
			}
			fPosition = pos;
		}

		nextToken();
		// Skip access specifiers
		while (fToken == STPSymbols.TokenCOLON && isAccessSpecifier()) {
			nextToken();
		}

		int line= fLine;
		switch (fToken) {
		case STPSymbols.TokenGREATERTHAN:
		case STPSymbols.TokenRBRACE:
			// Skip the block and fall through.
			// If we can't complete the scope, reset the scan position
			int pos= fPosition;
			if (!skipScope())
				fPosition= pos;
			return skipToStatementStart(danglingElse, false);

		case STPSymbols.TokenSEMICOLON:
			// This is the 90% case: after a statement block
			// the end of the previous statement / block previous.end
			// search to the end of the statement / block before the previous;
			// the token just after that is previous.start
			return skipToStatementStart(danglingElse, false);

		// Scope introduction: special treat who special is
		case STPSymbols.TokenLPAREN:
		case STPSymbols.TokenLBRACE:
		case STPSymbols.TokenLBRACKET:
			return handleScopeIntroduction(Math.min(offset + 1, fDocument.getLength()), true);

		case STPSymbols.TokenEOF:
			// trap when hitting start of document
			return NOT_FOUND;

		case STPSymbols.TokenEQUAL:
			// indent assignments
			fIndent= fPrefs.prefAssignmentIndent;
			return fPosition;

		case STPSymbols.TokenCOLON:
			pos= fPosition;
			if (looksLikeCaseStatement()) {
				fIndent= fPrefs.prefCaseBlockIndent;
				return pos;
			}
			fPosition= pos;
			if (looksLikeTypeInheritanceDecl()) {
				fIndent= fPrefs.prefContinuationIndent;
				return pos;
			}
			fPosition= pos;
			if (looksLikeConstructorInitializer()) {
				fIndent= fPrefs.prefBlockIndent;
				return pos;
			}
			fPosition= pos;
			if (isConditional()) {
				fPosition= offset;
				fLine= line;
				return skipToPreviousListItemOrListStart();
			}
			fPosition= pos;
			return skipToPreviousListItemOrListStart();

		case STPSymbols.TokenQUESTIONMARK:
			if (fPrefs.prefTernaryDeepAlign) {
				setFirstElementAlignment(fPosition, offset + 1);
			} else {
				fIndent= fPrefs.prefTernaryIndent;
			}
			return fPosition;

		// Indentation for blockless introducers:
		case STPSymbols.TokenDO:
		case STPSymbols.TokenWHILE:
		case STPSymbols.TokenELSE:
			fIndent= fPrefs.prefSimpleIndent;
			return fPosition;

		case STPSymbols.TokenTRY:
			return skipToStatementStart(danglingElse, false);

		case STPSymbols.TokenRETURN:
		case STPSymbols.TokenTYPEDEF:
		case STPSymbols.TokenUSING:
			fIndent = fPrefs.prefContinuationIndent;
			return fPosition;

		case STPSymbols.TokenCONST:
			nextToken();
			if (fToken != STPSymbols.TokenRPAREN) {
				return skipToPreviousListItemOrListStart();
			}
			// could be const method decl
			//$FALL-THROUGH$
		case STPSymbols.TokenRPAREN:
			if (skipScope(STPSymbols.TokenLPAREN, STPSymbols.TokenRPAREN)) {
				int scope= fPosition;
				nextToken();
				if (fToken == STPSymbols.TokenIF || fToken == STPSymbols.TokenWHILE || fToken == STPSymbols.TokenFOR) {
					fIndent= fPrefs.prefSimpleIndent;
					return fPosition;
				}
				if (fToken == STPSymbols.TokenSWITCH) {
					return fPosition;
				}
				fPosition= scope;
				if (looksLikeMethodDecl()) {
					return skipToStatementStart(danglingElse, false);
				}
				if (fToken == STPSymbols.TokenCATCH) {
					return skipToStatementStart(danglingElse, false);
				}
				fPosition= scope;
				if (looksLikeAnonymousTypeDecl()) {
					return skipToStatementStart(danglingElse, false);
				}
			}
			// restore
			fPosition= offset;
			fLine= line;
			// else: fall through to default
			return skipToPreviousListItemOrListStart();

		case STPSymbols.TokenCOMMA:
			// Inside a list of some type.
			// Easy if there is already a list item before with its own indentation - we just align.
			// If not: take the start of the list (LPAREN, LBRACE, LBRACKET) and either align or
			// indent by list-indent.
			return skipToPreviousListItemOrListStart();

		default:
			// Inside whatever we don't know about: 
			// C would treat this as a list, but in SystemTap we might just have a line that doesn't
			// end in a semi-colon.  We want to indent to the same level as the statement.
			return skipToStatementStart(danglingElse, false);
		}
	}

