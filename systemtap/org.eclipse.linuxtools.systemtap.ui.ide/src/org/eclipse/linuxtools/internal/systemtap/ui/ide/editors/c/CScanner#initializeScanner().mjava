	/**
	 * This method initializes this instance of <code>CScanner</code>, allowing it to be used
	 * for syntax highlighting purposes by the editor.
	 */
	public void initializeScanner()
	{
		IPreferenceStore store = IDEPlugin.getDefault().getPreferenceStore();
		RGB cKeyword, cType, cString, cComment, cDefault, cPreprocessor;

		cKeyword = PreferenceConverter.getColor(store, IDEPreferenceConstants.P_C_KEYWORD_COLOR);
		cType = PreferenceConverter.getColor(store, IDEPreferenceConstants.P_C_TYPE_COLOR);
		cString = PreferenceConverter.getColor(store, IDEPreferenceConstants.P_C_STRING_COLOR);
		cComment = PreferenceConverter.getColor(store, IDEPreferenceConstants.P_C_COMMENT_COLOR);
		cDefault = PreferenceConverter.getColor(store, IDEPreferenceConstants.P_C_DEFAULT_COLOR);
		cPreprocessor = PreferenceConverter.getColor(store, IDEPreferenceConstants.P_C_PREPROCESSOR_COLOR);

		IToken keyword = new Token(new TextAttribute(manager.getColor(cKeyword), null, SWT.BOLD));
		IToken type = new Token(new TextAttribute(manager.getColor(cType)));
		IToken string = new Token(new TextAttribute(manager.getColor(cString)));
		IToken comment = new Token(new TextAttribute(manager.getColor(cComment)));
		IToken other = new Token(new TextAttribute(manager.getColor(cDefault)));
		IToken preprocessor = new Token(new TextAttribute(manager.getColor(cPreprocessor)));

		List<IRule> rules= new ArrayList<IRule>();

		// Add rules for single line comments.
		rules.add(new EndOfLineRule("//", comment)); //$NON-NLS-1$
		rules.add(new SingleLineRule("#", " ", preprocessor));

		// Add rule for multiple-line comment.
		rules.add(new PatternRule("/*", "*/", comment, '\\', false));

		// Add rule for strings and character constants.
		rules.add(new SingleLineRule("\"", "\"", string, '\\')); //$NON-NLS-2$ //$NON-NLS-1$
		rules.add(new SingleLineRule("'", "'", string, '\\')); //$NON-NLS-2$ //$NON-NLS-1$

		// Add generic whitespace rule.
		rules.add(new WhitespaceRule(new WhitespaceDetector()));

		// Add word rule for keywords, types, and constants.
		WordRule wordRule= new WordRule(new WordDetector(), other);
		for (String fgKeyword: fgKeywords) {
			wordRule.addWord(fgKeyword, keyword);
		}
		for (String fgType: fgTypes) {
			wordRule.addWord(fgType, type);
		}
		for (String fgConstant: fgConstants) {
			wordRule.addWord(fgConstant, type);
		}
		rules.add(wordRule);

		IRule[] result= new IRule[rules.size()];
		setDefaultReturnToken(other);
		rules.toArray(result);
		setRules(result);
	}

