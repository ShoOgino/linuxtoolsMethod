    /**
     * Writes the tree passed in to the {@link IMemento} argument.
     * @param data The {@link IMemento} to store the tree to.
     * @param name The name to give to the <code>parent</code> node.
     * @param tree The {@link TreeNode} to store.
     */
    private static void writeTree(IMemento data, String name, TreeNode tree) {
        IMemento child = data.createChild(name);
        child.putString(M_DISP, tree.toString());
        Object treeData = tree.getData();
        if (treeData != null) {
            child.putString(M_DATA, treeData.toString());
            child.putString(M_DATATYPE, StapTreeDataFactory.getDataObjectID(treeData));
        }
        if (tree instanceof TreeDefinitionNode) {
            child.putString(M_DEFINITON,
                    getStringFromValue(((TreeDefinitionNode) tree).getDefinition()));
        }
        child.putBoolean(M_CLICKABLE, tree.isClickable());
        for (int i = 0, n = tree.getChildCount(); i < n; i++) {
            writeTree(child, M_ITEM, tree.getChildAt(i));
        }
    }

