	/**
	 * Runs the stap with the given options and returns the output generated
	 * @param options String[] of any optional parameters to pass to stap
	 * @param probe String containing the script to run stap on
	 * @since 1.2
	 */
	protected String runStap(String[] options, String probe) {
		String[] args = null;

		int size = 2;	//start at 2 for stap, script, options will be added in later
		if (null != tapsets && tapsets.length > 0 && tapsets[0].trim().length() > 0) {
			size += tapsets.length<<1;
		}
		if (null != options && options.length > 0 && options[0].trim().length() > 0) {
			size += options.length;
		}

		args = new String[size];
		args[0] = "stap"; //$NON-NLS-1$
		args[size-1] = probe;
		args[size-2] = ""; //$NON-NLS-1$

		//Add extra tapset directories
		if(null != tapsets && tapsets.length > 0 && tapsets[0].trim().length() > 0) {
			for(int i=0; i<tapsets.length; i++) {
				args[2+(i<<1)] = "-I"; //$NON-NLS-1$
				args[3+(i<<1)] = tapsets[i];
			}
		}
		if(null != options && options.length > 0 && options[0].trim().length() > 0) {
			for(int i=0; i<options.length; i++) {
				args[args.length-options.length-1+i] = options[i];
			}
		}

		String output = null;
		try {
			if (IDEPlugin.getDefault().getPreferenceStore().getBoolean(IDEPreferenceConstants.P_REMOTE_PROBES)) {
				StringOutputStream str = new StringOutputStream();
				StringOutputStream strErr = new StringOutputStream();

				IPreferenceStore p = ConsoleLogPlugin.getDefault().getPreferenceStore();
				String user = p.getString(ConsoleLogPreferenceConstants.SCP_USER);
				String host = p.getString(ConsoleLogPreferenceConstants.HOST_NAME);
				String password = p.getString(ConsoleLogPreferenceConstants.SCP_PASSWORD);

				Channel channel = SystemtapProcessFactory.execRemoteAndWait(args,str, strErr, user, host, password);
				if(channel == null){
					displayError(Messages.TapsetParser_CannotRunStapTitle, Messages.TapsetParser_CannotRunStapMessage);
				}

				output = str.toString();
			} else {
				Process process = SystemtapProcessFactory.exec(args, null);
				StringStreamGobbler gobbler = new StringStreamGobbler(process.getInputStream());
				gobbler.start();
				process.waitFor();
				output = gobbler.getOutput().toString();
			}

		} catch (JSchException e) {
			ExceptionErrorDialog.openError(Messages.TapsetParser_ErrorRunningSystemtap, e);
		} catch (IOException e) {
			ExceptionErrorDialog.openError(Messages.TapsetParser_ErrorRunningSystemtap, e);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return output;
	}

