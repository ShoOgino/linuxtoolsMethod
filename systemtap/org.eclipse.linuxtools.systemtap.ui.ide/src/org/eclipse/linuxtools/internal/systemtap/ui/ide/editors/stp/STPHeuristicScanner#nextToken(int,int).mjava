	/**
	 * Returns the next token in forward direction, starting at <code>start</code>, and not extending
	 * further than <code>bound</code>. The return value is one of the constants defined in {@link STPSymbols}.
	 * After a call, {@link #getPosition()} will return the position just after the scanned token
	 * (i.e. the next position that will be scanned).
	 *
	 * @param start the first character position in the document to consider
	 * @param bound the first position not to consider any more
	 * @return a constant from {@link STPSymbols} describing the next token
	 */
	public int nextToken(int start, int bound) {
		int pos= scanForward(start, bound, fNonWS);
		if (pos == NOT_FOUND)
			return TokenEOF;
		try {
			// check for string or char literal
			char ch = fDocument.getChar(pos);
			if (ch == '"' || ch == '\'') {
				fChar= ch;
				fPos= fNonWSDefaultPart.nextPosition(pos, true);
				return TokenOTHER;
			}
		} catch (BadLocationException exc) {
		}
		pos= scanForward(pos, bound, fNonWSDefaultPart);
		if (pos == NOT_FOUND)
			return TokenEOF;

		fPos++;

		switch (fChar) {
			case LBRACE:
				return TokenLBRACE;
			case RBRACE:
				return TokenRBRACE;
			case LBRACKET:
				return TokenLBRACKET;
			case RBRACKET:
				return TokenRBRACKET;
			case LPAREN:
				return TokenLPAREN;
			case RPAREN:
				return TokenRPAREN;
			case SEMICOLON:
				return TokenSEMICOLON;
			case COLON:
				switch (peekNextChar()) {
				case COLON:
					++fPos;
					return TokenDOUBLECOLON;
				}
				return TokenCOLON;
			case COMMA:
				return TokenCOMMA;
			case QUESTIONMARK:
				return TokenQUESTIONMARK;
			case EQUAL:
				return TokenEQUAL;
			case LANGLE:
				switch (peekNextChar()) {
				case LANGLE:
					++fPos;
					if (peekNextChar() == LANGLE) {
						++fPos;
						return TokenAGGREGATE;
					}
					return TokenSHIFTLEFT;
				case EQUAL:
					++fPos;
					return TokenOTHER;
				}
				return TokenLESSTHAN;
			case RANGLE:
				switch (peekNextChar()) {
				case RANGLE:
					++fPos;
					return TokenSHIFTRIGHT;
				case EQUAL:
					++fPos;
					return TokenOTHER;
				}
				return TokenGREATERTHAN;
			case DOT:
				return TokenDOT;
			case MINUS:
				switch (peekNextChar()) {
				case RANGLE:
					++fPos;
					return TokenARROW;
				}
				return TokenMINUS;
			case PLUS:
				return TokenPLUS;
			case TILDE:
				return TokenTILDE;
		}

		// else
		if (Character.isJavaIdentifierPart(fChar)) {
			// assume an identifier or keyword
			int from= pos, to;
			pos= scanForward(pos + 1, bound, fNonIdent);
			if (pos == NOT_FOUND)
				to= bound == UNBOUND ? fDocument.getLength() : bound;
			else
				to= pos;

			String identOrKeyword;
			try {
				identOrKeyword= fDocument.get(from, to - from);
			} catch (BadLocationException e) {
				return TokenEOF;
			}

			return getToken(identOrKeyword);


		}
		// operators, number literals etc
		return TokenOTHER;
	}

