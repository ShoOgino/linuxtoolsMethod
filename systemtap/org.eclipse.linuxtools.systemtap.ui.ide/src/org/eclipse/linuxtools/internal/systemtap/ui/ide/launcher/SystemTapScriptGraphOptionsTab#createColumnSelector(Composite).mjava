    private void createColumnSelector(Composite parent) {

        GridLayout layout = new GridLayout();
        parent.setLayout(layout);

        Composite topLayout = new Composite(parent, SWT.NONE);
        topLayout.setLayout(new GridLayout(1, false));
        topLayout.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false));

        generateExpsButton = new Button(topLayout, SWT.PUSH);
        generateExpsButton.setLayoutData(new GridData(GridData.FILL_HORIZONTAL));
        generateExpsButton.setText(Messages.SystemTapScriptGraphOptionsTab_generateFromPrintsButton);
        generateExpsButton.setToolTipText(Messages.SystemTapScriptGraphOptionsTab_generateFromPrintsTooltip);
        generateExpsButton.addSelectionListener(regexGenerator);

        Composite regexButtonLayout = new Composite(parent, SWT.NONE);
        regexButtonLayout.setLayout(new GridLayout(3, false));
        regexButtonLayout.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));

        Label selectedRegexLabel = new Label(regexButtonLayout, SWT.NONE);
        selectedRegexLabel.setText(Messages.SystemTapScriptGraphOptionsTab_regexLabel);
        selectedRegexLabel.setToolTipText(Messages.SystemTapScriptGraphOptionsTab_regexTooltip);
        regularExpressionCombo = new Combo(regexButtonLayout, SWT.DROP_DOWN);
        regularExpressionCombo.setTextLimit(MAX_REGEX_LENGTH);
        regularExpressionCombo.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false));
        regularExpressionCombo.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                int selected = regularExpressionCombo.getSelectionIndex();
                if (selected == selectedRegex) {
                    return;
                }

                // If deselecting an empty regular expression, delete it automatically.
                if (regularExpressionCombo.getItem(selectedRegex).isEmpty()
                        && graphsDataList.get(selectedRegex).size() == 0
                        && outputList.get(selectedRegex).isEmpty()) {

                    // If the deselected regex is the last one in the combo, just quit.
                    // Otherwise, the deleted blank entry would be replaced by another blank entry.
                    if (selected == regularExpressionCombo.getItemCount() - 1) {
                        regularExpressionCombo.select(selectedRegex); // To keep the text blank.
                        return;
                    }
                    removeRegex(false);
                    if (selected > selectedRegex) {
                        selected--;
                    }
                }

                // When selecting the "Add New Regex" item in the combo (which is always the last item),
                // update all appropriate values to make room for a new regular expression.
                if (selected == regularExpressionCombo.getItemCount() - 1 && getNumberOfRegexs() < MAX_NUMBER_OF_REGEXS) {
                    outputList.add(""); //$NON-NLS-1$
                    regexErrorMessages.add(null);
                    columnNamesList.add(new ArrayList<String>());
                    cachedNamesList.add(new Stack<String>());
                    graphsDataList.add(new LinkedList<GraphData>());

                    // Remove "Add New Regex" from the selected combo item; make it blank.
                    regularExpressionCombo.setItem(selected, ""); //$NON-NLS-1$
                    regularExpressionCombo.select(selected);
                    updateRegexSelection(selected, false);
                    updateLaunchConfigurationDialog();

                    // Enable the "remove" button if only one item was present before.
                    // (Don't do this _every_ time something is added.)
                    if (getNumberOfRegexs() == 2) {
                        removeRegexButton.setEnabled(true);
                    }
                    if (getNumberOfRegexs() < MAX_NUMBER_OF_REGEXS) {
                        regularExpressionCombo.add(Messages.SystemTapScriptGraphOptionsTab_regexAddNew);
                    }
                } else {
                    updateRegexSelection(selected, false);
                }
            }
        });
        regularExpressionCombo.addModifyListener(regexListener);

        removeRegexButton = new Button(regexButtonLayout, SWT.PUSH);
        removeRegexButton.setLayoutData(new GridData(SWT.BEGINNING, SWT.BEGINNING, false, false));
        removeRegexButton.setText(Messages.SystemTapScriptGraphOptionsTab_regexRemove);
        removeRegexButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                IWorkbench workbench = PlatformUI.getWorkbench();
                MessageDialog dialog = new MessageDialog(workbench
                        .getActiveWorkbenchWindow().getShell(), Messages.SystemTapScriptGraphOptionsTab_removeRegexTitle, null,
                        MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_removeRegexAsk,
                                regularExpressionCombo.getItem(selectedRegex)),
                                MessageDialog.QUESTION, new String[]{"Yes", "No"}, 0); //$NON-NLS-1$ //$NON-NLS-2$
                int result = dialog.open();
                if (result == 0) { //Yes
                    removeRegex(true);
                }
            }
        });

        GridLayout twoColumns = new GridLayout(2, false);

        Composite regexSummaryComposite = new Composite(parent, SWT.NONE);
        regexSummaryComposite.setLayout(twoColumns);
        regexSummaryComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

        Label sampleOutputLabel = new Label(regexSummaryComposite, SWT.NONE);
        sampleOutputLabel.setText(Messages.SystemTapScriptGraphOptionsTab_sampleOutputLabel);
        sampleOutputLabel.setToolTipText(Messages.SystemTapScriptGraphOptionsTab_sampleOutputTooltip);
        this.sampleOutputText = new Text(regexSummaryComposite, SWT.BORDER);
        this.sampleOutputText.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        this.sampleOutputText.addModifyListener(sampleOutputListener);
        sampleOutputText.setToolTipText(Messages.SystemTapScriptGraphOptionsTab_sampleOutputTooltip);


        Composite expressionTableLabels = new Composite(parent, SWT.NONE);
        expressionTableLabels.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false));
        expressionTableLabels.setLayout(twoColumns);

        Label label = new Label(expressionTableLabels, SWT.NONE);
        label.setText(Messages.SystemTapScriptGraphOptionsTab_columnTitle);
        label.setAlignment(SWT.LEFT);

        Label label2 = new Label(expressionTableLabels, SWT.NONE);
        label2.setAlignment(SWT.LEFT);
        label2.setText(Messages.SystemTapScriptGraphOptionsTab_extractedValueLabel);

        this.regexTextScrolledComposite = new ScrolledComposite(parent, SWT.V_SCROLL | SWT.BORDER);
        GridData data = new GridData(SWT.FILL, SWT.FILL, true, false);
        data.heightHint = 200;
        regexTextScrolledComposite.setLayoutData(data);

        textFieldsComposite = new Composite(regexTextScrolledComposite, SWT.NONE);
        textFieldsComposite.setLayout(new GridLayout(4, false));
        regexTextScrolledComposite.setContent(textFieldsComposite);
        regexTextScrolledComposite.setExpandHorizontal(true);

        // To position the column labels properly, add a dummy column and use its children's sizes for reference.
        // This is necessary since expressionTableLabels can't share a layout with textFieldsComposite.
        textListenersEnabled = false;
        addColumn(""); //$NON-NLS-1$
        data = new GridData(SWT.FILL, SWT.FILL, false, false);
        data.horizontalIndent = textFieldsComposite.getChildren()[2].getLocation().x;
        data.widthHint = textFieldsComposite.getChildren()[2].getSize().x;
        label.setLayoutData(data);
        label2.setLayoutData(new GridData(SWT.FILL, SWT.FILL, false, false));
        removeColumn(false);
        textListenersEnabled = true;
    }

