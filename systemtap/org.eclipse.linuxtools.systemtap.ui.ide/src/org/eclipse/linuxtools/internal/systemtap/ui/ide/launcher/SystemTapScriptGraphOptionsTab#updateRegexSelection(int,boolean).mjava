	/**
	 * This handles UI & list updating whenever a different regular expression is selected.
	 * @param newSelection The index of the regex to be selected.
	 * @param force If true, the UI will update even if the index of the selected regex did not change.
	 */
	private void updateRegexSelection(int newSelection, boolean force) {
		// Quit if the selection didn't change anything, or if the selection is invalid (-1).
		if (newSelection == -1 || (!force && selectedRegex == newSelection)) {
			return;
		}
		selectedRegex = newSelection;

		boolean textListenersDisabled = !textListenersEnabled;
		if (!textListenersDisabled) {
			textListenersEnabled = false;
		}

		sampleOutputText.setText(outputList.get(selectedRegex));
		cachedNames = cachedNamesList.get(selectedRegex);

		// Update the number of columns and their titles here, and not in refreshRegexRows,
		// using the list of saved active names instead of a cachedNames stack.
		ArrayList<String> columnNames = columnNamesList.get(selectedRegex);
		int desiredNumberOfColumns = columnNames.size();
		// Remove all columns to easily update them all immediately afterwards.
		while (numberOfVisibleColumns > 0) {
			removeColumn(false);
		}
		while (numberOfVisibleColumns < desiredNumberOfColumns) {
			addColumn(columnNames.get(numberOfVisibleColumns));
		}

		refreshRegexRows();

		// Now, only display graphs that are associated with the selected regex.
		graphsData = graphsDataList.get(selectedRegex);
		graphsTable.removeAll();
		selectedTableItem = null;
		setSelectionControlsEnabled(false);

		for (GraphData gd : graphsData) {
			TableItem item = new TableItem(graphsTable, SWT.NONE);
			setUpGraphTableItem(item, gd, badGraphs.contains(gd));
		}
		graphsGroup.setText(MessageFormat.format(Messages.SystemTapScriptGraphOptionsTab_graphSetTitleBase,
				selectedRegex + 1));

		if (!textListenersDisabled) {
			textListenersEnabled = true;
		}
	}

