	/**
	 * 
	 * Build Element scanner for Syntax Highlighting for Systemtap Editor
	 *  
	 * @param manager ColorManager to source highlighting.
	 * 
	 */
	public STPElementScanner(ColorManager manager) {
		IToken defaultToken = new Token(new TextAttribute(manager
				.getColor(STPColorConstants.DEFAULT)));

		IToken keywordToken = new Token(new TextAttribute(manager
				.getColor(STPColorConstants.KEYWORD),null,SWT.BOLD));

		IToken commentToken = new Token(new TextAttribute(manager
				.getColor(STPColorConstants.COMMENT)));

		IToken stringToken = new Token(new TextAttribute(manager
				.getColor(STPColorConstants.STP_STRING)));


		// Build keyword scanner
		WordRule keywordsRule = new WordRule(new IWordDetector() {

			public boolean isWordStart(char c) {
				// probe kernel.function("schedule") is a valid name in
				// Systemtap, but we do not want to highlight the function
				// here as a keyword. Same with foo.return and so on.
				if (c == '.') {
					return true;
				}

				return Character.isJavaIdentifierStart(c);
			}

			public boolean isWordPart(char c) {
				// Set isWordStart for . rule.
				if (c == '.') {
					return true;
				}
				
				return  Character.isJavaIdentifierPart(c);
			}

		}, defaultToken, true);

		for (int i=0; i<keywordList.length; i++)
			keywordsRule.addWord(keywordList[i], keywordToken);

        setRules(new IRule[] {
        		new MultiLineRule("/*", "*/", commentToken),
        		new EndOfLineRule("/*", commentToken),
                new EndOfLineRule("#", commentToken),
                new EndOfLineRule("//",  commentToken),
        		new EndOfLineRule("#if", defaultToken),
                new EndOfLineRule("#else", defaultToken),
                new EndOfLineRule("#endif", defaultToken),
                new EndOfLineRule("#define", defaultToken),
                new SingleLineRule("\"", "\"", stringToken, '\\'),
                new SingleLineRule("'", "'", stringToken, '\\'),
        		keywordsRule,
                new WhitespaceRule(new IWhitespaceDetector() {
                   public boolean isWhitespace(char c) {
                      return Character.isWhitespace(c);
                   }
                }),
             });
	}

