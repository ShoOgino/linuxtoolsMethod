    /**
     *
     * Build Element scanner for Syntax Highlighting for Systemtap Editor
     *
     */
    public STPElementScanner() {
		ColorRegistry colorRegistry = PlatformUI.getWorkbench().getThemeManager().getCurrentTheme().getColorRegistry();
		IToken defaultToken = new Token(new TextAttribute(colorRegistry.get(STPColorConstants.DEFAULT)));

		IToken keywordToken = new Token(new TextAttribute(colorRegistry.get(STPColorConstants.KEYWORD), null, SWT.BOLD));

		IToken commentToken = new Token(new TextAttribute(colorRegistry.get(STPColorConstants.COMMENT)));

		IToken stringToken = new Token(new TextAttribute(colorRegistry.get(STPColorConstants.STRING)));


        // Build keyword scanner
        WordRule keywordsRule = new WordRule(new IWordDetector() {

            @Override
            public boolean isWordStart(char c) {
                // probe kernel.function("schedule") is a valid name in
                // Systemtap, but we do not want to highlight the function
                // here as a keyword. Same with foo.return and so on.
                if (c == '.') {
                    return true;
                }

                return Character.isJavaIdentifierStart(c);
            }

            @Override
            public boolean isWordPart(char c) {
                // Set isWordStart for . rule.
                if (c == '.') {
                    return true;
                }

                return  Character.isJavaIdentifierPart(c);
            }

        }, defaultToken, true);

        for (int i=0; i<keywordList.length; i++)
            keywordsRule.addWord(keywordList[i], keywordToken);

        setRules(new IRule[] { new MultiLineRule("/*", "*/", commentToken), //$NON-NLS-1$//$NON-NLS-2$
                new EndOfLineRule("/*", commentToken), //$NON-NLS-1$
                new EndOfLineRule("#", commentToken), //$NON-NLS-1$
                new EndOfLineRule("//", commentToken), //$NON-NLS-1$
                new EndOfLineRule("#if", defaultToken), //$NON-NLS-1$
                new EndOfLineRule("#else", defaultToken), //$NON-NLS-1$
                new EndOfLineRule("#endif", defaultToken), //$NON-NLS-1$
                new EndOfLineRule("#define", defaultToken), //$NON-NLS-1$
                new SingleLineRule("\"", "\"", stringToken, '\\'), //$NON-NLS-1$ //$NON-NLS-2$
                new SingleLineRule("'", "'", stringToken, '\\'), //$NON-NLS-1$//$NON-NLS-2$
                keywordsRule, new WhitespaceRule(c -> Character.isWhitespace(c)), });
    }

