	@Override
	public Object execute(ExecutionEvent event) { // Update has been called by
													// the framework
		if (!isEnabled())
			return null;

		ITextEditor editor = (ITextEditor) HandlerUtil.getActiveEditor(event);
		if (editor == null || !editor.isEditable()) {
			return null;
		}

		ITextSelection selection = getSelection(editor);
		final IDocument document = getDocument(editor);

		if (document != null) {
			final int offset = selection.getOffset();
			final int length = selection.getLength();
			final Position end = new Position(offset + length);
			final int firstLine, nLines;
			fCaretOffset = -1;

			try {
				firstLine = document.getLineOfOffset(offset);
				// check for marginal (zero-length) lines
				int minusOne = length == 0 ? 0 : 1;
				nLines = document.getLineOfOffset(offset + length - minusOne)
						- firstLine + 1;
				document.addPosition(end);
			} catch (BadLocationException e) {
				// will only happen on concurrent modification
				IDEPlugin.log(new Status(IStatus.ERROR,
						IDEPlugin.getPluginId(), IStatus.OK, "", e)); //$NON-NLS-1$
				return null;
			}

			Runnable runnable = new STPRunnable(editor) {
				@Override
				public void run() {
					IRewriteTarget target = (IRewriteTarget) getTextEditor()
							.getAdapter(IRewriteTarget.class);
					if (target != null) {
						target.beginCompoundChange();
					}

					try {
						STPHeuristicScanner scanner = new STPHeuristicScanner(
								document);
						STPIndenter indenter = new STPIndenter(document,
								scanner, getProject(getTextEditor()));
						final boolean multiLine = nLines > 1;
						boolean hasChanged = false;
						for (int i = 0; i < nLines; i++) {
                            hasChanged |= indentLine(document, firstLine + i,
                                    offset, indenter, scanner, multiLine);
						}

						// update caret position: move to new position when
						// indenting just one line
						// keep selection when indenting multiple
						int newOffset, newLength;
						if (!fIsTabAction && multiLine) {
							newOffset = offset;
							newLength = end.getOffset() - offset;
						} else {
							newOffset = fCaretOffset;
							newLength = 0;
						}

						// always reset the selection if anything was replaced
						// but not when we had a single line non-tab invocation
						if (newOffset != -1
								&& (hasChanged || newOffset != offset || newLength != length))
							selectAndReveal(getTextEditor(), newOffset,
									newLength);

					} catch (BadLocationException e) {
						// will only happen on concurrent modification
						IDEPlugin.log(new Status(IStatus.ERROR, IDEPlugin
								.getPluginId(), IStatus.OK,
								"ConcurrentModification in IndentAction", e)); //$NON-NLS-1$
					} finally {
						document.removePosition(end);
						if (target != null) {
							target.endCompoundChange();
						}
					}
				}
			};

			if (nLines > 50) {
				Display display = editor.getEditorSite().getWorkbenchWindow()
						.getShell().getDisplay();
				BusyIndicator.showWhile(display, runnable);
			} else {
				runnable.run();
			}
		}

		return null;
	}

