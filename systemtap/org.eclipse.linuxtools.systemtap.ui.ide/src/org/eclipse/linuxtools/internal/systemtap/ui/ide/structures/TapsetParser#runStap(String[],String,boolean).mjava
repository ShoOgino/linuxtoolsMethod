    /**
     * Runs the stap with the given options and returns the output generated
     * @param options String[] of any optional parameters to pass to stap
     * @param probe String containing the script to run stap on,
     * or <code>null</code> for scriptless commands
     * @param getErrors Set this to <code>true</code> if the script's error
     * stream contents should be returned instead of its standard output
     */
    protected String runStap(String[] options, String probe, boolean getErrors) {
        String[] args = null;
        String[] tapsets = IDEPlugin.getDefault().getPreferenceStore()
                .getString(IDEPreferenceConstants.P_TAPSETS).split(File.pathSeparator);
        boolean noTapsets = tapsets[0].trim().length() == 0;
        boolean noOptions = options[0].trim().length() == 0;

        int size = probe != null ? 2 : 1;
        if (tapsets.length > 0 && !noTapsets) {
            size += tapsets.length<<1;
        }
        if (options.length > 0 && !noOptions) {
            size += options.length;
        }

        args = new String[size];
        args[0] = "stap"; //$NON-NLS-1$
        if (probe != null) {
            args[size-1] = probe;
        }

        //Add extra tapset directories
        if (tapsets.length > 0 && !noTapsets) {
            for (int i = 0; i < tapsets.length; i++) {
                args[1 + 2*i] = "-I"; //$NON-NLS-1$
                args[2 + 2*i] = tapsets[i];
            }
        }
        if (options.length > 0 && !noOptions) {
            for (int i = 0, s = noTapsets ? 1 : 1 + tapsets.length*2; i<options.length; i++) {
                args[s + i] = options[i];
            }
        }

        try {
            if (IDEPlugin.getDefault().getPreferenceStore().getBoolean(IDEPreferenceConstants.P_REMOTE_PROBES)) {
                StringOutputStream str = new StringOutputStream();
                StringOutputStream strErr = new StringOutputStream();

                IPreferenceStore p = ConsoleLogPlugin.getDefault().getPreferenceStore();
                String user = p.getString(ConsoleLogPreferenceConstants.SCP_USER);
                String host = p.getString(ConsoleLogPreferenceConstants.HOST_NAME);
                String password = p.getString(ConsoleLogPreferenceConstants.SCP_PASSWORD);

                Channel channel = SystemtapProcessFactory.execRemoteAndWait(args,str, strErr, user, host, password);
                if (channel == null) {
                    displayError(Messages.TapsetParser_CannotRunStapTitle, Messages.TapsetParser_CannotRunStapMessage);
                }

                return (!getErrors ? str : strErr).toString();
            } else {
                Process process = RuntimeProcessFactory.getFactory().exec(args, null, null);
                if(process == null){
                    displayError(Messages.TapsetParser_CannotRunStapTitle, Messages.TapsetParser_CannotRunStapMessage);
                    return null;
                }

                StringStreamGobbler gobbler = new StringStreamGobbler(process.getInputStream());
                StringStreamGobbler egobbler = null;
                gobbler.start();
                if (getErrors) {
                    egobbler = new StringStreamGobbler(process.getErrorStream());
                    egobbler.start();
                }
                process.waitFor();
                gobbler.stop();
                if (egobbler == null) {
                    return gobbler.getOutput().toString();
                } else {
                    egobbler.stop();
                    return egobbler.getOutput().toString();
                }
            }

        } catch (JSchException|IOException e) {
            ExceptionErrorDialog.openError(Messages.TapsetParser_ErrorRunningSystemtap, e);
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return null;
    }

