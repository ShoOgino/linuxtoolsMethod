	/**
	 * Marks all graphs belonging to the indicated regular expression that have an
	 * error (missing column data, invalid graphID), or unmarks graphs that don't.
	 * @param	regex The index of the regular expression to check for invalid graphs.
	 * @return	An appropriate error message if an invalid graph is found, or if the
	 * selected regular expression parses nothing.
	 */
	private String findBadGraphs(int regex) {
		boolean foundBadID = false;
		int numberOfColumns = columnNamesList.get(regex).size();
		for (GraphData gd : graphsDataList.get(regex)) {
			boolean removed = false;
			if (GraphFactory.getGraphName(gd.graphID) == null) {
				foundBadID = true;
			} else {
				if (gd.xSeries >= numberOfColumns) {
					removed = true;
				}
				for (int s = 0; s < gd.ySeries.length && !removed; s++) {
					if (gd.ySeries[s] >= numberOfColumns) {
						removed = true;
					}
				}
			}
			if (removed || foundBadID) {
				if (!badGraphs.contains(gd)) {
					badGraphs.add(gd);
					setUpGraphTableItem(findGraphTableItem(gd), null, true);
				}
			} else if (badGraphs.contains(gd)) {
				badGraphs.remove(gd);
				setUpGraphTableItem(findGraphTableItem(gd), null, false);
			}
		}
		if (numberOfColumns == 0) {
			return Messages.SystemTapScriptGraphOptionsTab_noGroups;
		}
		if (foundBadID) {
			return Messages.SystemTapScriptGraphOptionsTab_badGraphID;
		}
		if (!badGraphs.isEmpty()) {
			return Messages.SystemTapScriptGraphOptionsTab_deletedGraphData;
		}
		return null;
	}

