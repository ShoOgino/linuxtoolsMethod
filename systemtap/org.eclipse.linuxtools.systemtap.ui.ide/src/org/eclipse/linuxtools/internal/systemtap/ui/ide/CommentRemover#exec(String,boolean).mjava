	private static String exec(String contents, boolean standardizeLineBreaks) {
		if (contents == null || contents.isEmpty()) {
			return ""; //$NON-NLS-1$
		}
		if (standardizeLineBreaks) {
			contents = doStandardizeLineBreaks(contents);
		}

		char curchar, nxtchar;
		boolean inQuotes = false;
		boolean inComment = false;

		int c = 0;
		StringBuffer buffer = new StringBuffer();

		do {
			curchar = contents.charAt(c++);
			nxtchar = c < contents.length() ? contents.charAt(c) : '\0';

			// Comment tags don't count if they are in a string.
			if (!inQuotes) {
				if (!inComment) {
					if (curchar == '#' || (curchar == '/' && nxtchar == '/')) {
						buffer.append('\n'); // Replace the rest of this line with a newline.
						c = contents.indexOf('\n', c); // Skip past the next newline, if one exists.
						if (c == -1) {
							break;
						}
						c++; // Skip the newline character on the next character scan.
						continue;
					}
					if (curchar == '/' && nxtchar == '*') {
						inComment = true;
						c++; // Skip the * on the next character scan.
						continue;
					}
				} else if (curchar == '*' && nxtchar == '/') {
					inComment = false;
					c++; // Skip the / on the next character scan.
					continue;
				}
			}

			// Quotes only count if they aren't commented out.
			if (!inComment) {
				if (curchar == '\"') {
					inQuotes = !inQuotes;
				}
				else if (curchar == '\n' && inQuotes) {
					inQuotes = false;
				}
				buffer.append(curchar);
			}
			else if (curchar == '\n') {
				// Print the line breaks of multiline comments.
				buffer.append(curchar);
			}

		} while (c < contents.length());

		return buffer.toString();
	}

