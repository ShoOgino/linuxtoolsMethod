    /**
     * This method is used to build up the list of functions that were found
     * during the first pass of stap.  Stap is invoked by: $stap -v -p1 -e
     * 'probe begin{}' and parsing the output.
     *
     * FunctionTree organized as:
     *    Root->Functions->Parameters
     *
     * @return <code>false</code> if a cancellation prevented all probes from being added;
     * <code>true</code> otherwise.
     */
    private boolean runPass2Functions() {
        String tapsetContents = SharedParser.getInstance().getTapsetContents();
        // Create a new function tree each time, so as to not add duplicates
        functions = new TreeNode(null, false);
        if (tapsetContents == null) {
            // Functions are only drawn from the tapset dump, so exit if it's empty.
            return true;
        }
        try (Scanner st = new Scanner(tapsetContents)) {
            String filename = null;
            String scriptText = null;

            SharedParser sparser = SharedParser.getInstance();
            while (st.hasNextLine()) {
                if (isCancelRequested()) {
                    return false;
                }
                String tok = st.nextLine();
                Matcher mFilename = sparser.filePattern.matcher(tok);
                if (mFilename.matches()) {
                    filename = mFilename.group(1).toString();
                    scriptText = null;
                } else if (filename != null) {
                    Matcher mFunction = P_FUNCTION.matcher(tok);
                    if (mFunction.matches()) {
                        String functionName = mFunction.group(1);
                        if (P_ALL_CAP.matcher(functionName).matches()) {
                            // Ignore ALL_CAPS functions, since they are not meant for end-user use.
                            continue;
                        }
                        if (scriptText == null) {
                            // If this is the first time seeing this file, remove its comments.
                            scriptText = CommentRemover.execWithFile(filename);
                        }
                        addFunctionFromScript(functionName, scriptText, filename);
                    }
                }
            }
            return true;
        }
    }

