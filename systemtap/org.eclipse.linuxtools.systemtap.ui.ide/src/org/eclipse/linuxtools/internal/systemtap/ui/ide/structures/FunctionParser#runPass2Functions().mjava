	/**
	 * This method is used to build up the list of functions that were found
	 * during the first pass of stap.  Stap is invoked by: $stap -v -p1 -e
	 * 'probe begin{}' and parsing the output.
	 */
	private void runPass2Functions() {
		// Create a new function tree each time, so as to not add duplicates
		functions = new TreeNode("", false); //$NON-NLS-1$
		String script = "probe begin{}"; //$NON-NLS-1$
		String result = runStap(new String[] {"-v", "-p1", "-e"}, script, false);   //$NON-NLS-1$//$NON-NLS-2$//$NON-NLS-3$
		if (result == null) {
			return;
		}
		StringTokenizer st = new StringTokenizer(result, "\n", false); //$NON-NLS-1$
		st.nextToken(); //skip that stap command
		String tok = ""; //$NON-NLS-1$
		String filename = null;
		String scriptText = null;

		String functionRegex = "(?s)(?<!\\w)function\\s+({0})(?:\\s*:\\s*(\\w+))?\\s*\\(([^)]+?)?\\)"; //$NON-NLS-1$
		// Get functions (with proper typing) directly from the .stp files being used by stap.
		Pattern pFilename = Pattern.compile("# file (/.*\\.stp)"); //$NON-NLS-1$
		Pattern pFunction = Pattern.compile("function (?!_)(\\w+) \\(.*?\\)"); //Ignore functions starting with _. //$NON-NLS-1$
		Pattern pParams = Pattern.compile("(\\w+)(?:\\s*:\\s*(\\w+))?"); //$NON-NLS-1$
		Pattern pAllCaps = Pattern.compile("[A-Z_1-9]*"); //$NON-NLS-1$
		Pattern pReturn = Pattern.compile("\\sreturn\\W"); //$NON-NLS-1$

		while(st.hasMoreTokens()) {
			tok = st.nextToken();
			Matcher mFilename = pFilename.matcher(tok);
			if(mFilename.matches()) {
				filename = mFilename.group(1).toString();
				scriptText = null;
			} else if (filename != null) {
				Matcher mFunction = pFunction.matcher(tok);
				if(mFunction.matches()) {
					// Ignore ALL_CAPS functions, since they are not meant for end-user use.
					String functionName = mFunction.group(1);
					if (pAllCaps.matcher(functionName).matches()) {
						continue;
					}
					if (scriptText == null) {
						scriptText = CommentRemover.execWithFile(filename);
					}
					Matcher mScript = Pattern.compile(MessageFormat.format(functionRegex, functionName)).matcher(scriptText);
					while (mScript.find()) {
						String functionLine = mScript.group();
						String functionType = mScript.group(2);
						// If the function has no return type, look for a "return" statement to check
						// if it's really a void function, or if its return type is just unspecified
						if (functionType == null && searchForPattern(scriptText, mScript.end(), pReturn)) {
							functionType = FunctionNodeData.UNKNOWN_TYPE;
						}
						TreeDefinitionNode function = new TreeDefinitionNode(
								new FunctionNodeData(functionLine, functionType),
								functionName, filename, true);
						functions.add(function);
						// Add all function parameters that exist
						String params = mScript.group(3);
						if (params != null) {
							Matcher mParams = pParams.matcher(params);
							while (mParams.find()) {
								function.add(new TreeNode(
										new FunctionNodeData(null, mParams.group(2)),
										mParams.group(1), false));
							}
						}
					}
				}
			}
		}
		functions.sortTree();
	}

