		/**
		 * The doubleclick event handler method.
		 * @param	e	The <code>MouseEvent</code> that represents this doubleclick event.
		 */
		@Override
		public void mouseDoubleClick(MouseEvent e)
		{
			getSite().getShell().setCursor(new Cursor(getSite().getShell().getDisplay(), SWT.CURSOR_WAIT));
			int lineno = getVerticalRuler().getLineOfLastMouseButtonActivity();

			String s = getSourceViewer().getDocument().get();
			String[] lines = s.split("\n"); //$NON-NLS-1$
			String line = lines[lineno].trim();
			boolean die = false;
			if("".equals(line))		//eat blank lines //$NON-NLS-1$
			   die = true;
			if(line.startsWith("#"))	//eat preprocessor directives //$NON-NLS-1$
				die = true;
			if(line.startsWith("//"))	//eat C99 comments //$NON-NLS-1$
				die = true;
			if(line.startsWith("/*") && !line.contains("*/") && !line.endsWith("*/"))	//try to eat single-line C comments //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				die = true;

			//gogo find comment segments
			try
			{
				ArrayList<Integer> commentChunks = new ArrayList<Integer>();
				char[] chars = s.toCharArray();
				int needle = 1;
				int offset = getSourceViewer().getDocument().getLineOffset(lineno);
				while (needle < chars.length)
				{
					if(chars[needle-1] == '/' && chars[needle] == '*')
					{
						commentChunks.add(needle);
						while(needle < chars.length)
						{
							if(chars[needle-1] == '*' && chars[needle] == '/')
							{
								commentChunks.add(needle);
								needle++;
								break;
							}
							needle++;
						}
					}
					needle++;
				}
				for(int i=0, pair, start, end; i < commentChunks.size(); i++)
				{
					if(!(commentChunks.get(i).intValue() < offset))
					{
						pair = i - i%2;
						start = commentChunks.get(pair).intValue();
						end = commentChunks.get(pair+1).intValue();
						if(offset >= start && offset <= end)
							die=true;
					}
				}
			} catch (BadLocationException excp) {
				LogManager.logCritical("Exception mouseDoubleClick: " + excp.getMessage(), this); //$NON-NLS-1$
			}
			if(die) {
				MessageDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),
						Localization.getString("CEditor.ProbeInsertFailed"),Localization.getString("CEditor.CanNotProbeLine")); //$NON-NLS-1$ //$NON-NLS-2$
			} else {
				IEditorInput in = getEditorInput();
				if(in instanceof FileStoreEditorInput) {
					FileStoreEditorInput input = (FileStoreEditorInput)in;

					IPreferenceStore p = IDEPlugin.getDefault().getPreferenceStore();
					String kernroot = p.getString(IDEPreferenceConstants.P_KERNEL_SOURCE);

					String filepath = input.getURI().getPath();
					String kernrelative = filepath.substring(kernroot.length()+1, filepath.length());
					StringBuffer sb = new StringBuffer();

					sb.append("probe kernel.statement(\"*@"+ kernrelative + ":" + (lineno+1) + "\")"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$

						sb.append("\n{\n\t\n}\n"); //$NON-NLS-1$
						STPEditor activeSTPEditor = IDESessionSettings.getActiveSTPEditor();
						if(null == activeSTPEditor) {
							NewFileAction action = new NewFileAction();
							action.run();
							IEditorPart ed = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().getActiveEditor();
							if(ed instanceof STPEditor)
								IDESessionSettings.setActiveSTPEditor((STPEditor)ed);
						}

						if(null != activeSTPEditor)
							activeSTPEditor.insertText(sb.toString());
				}
			}
			getSite().getShell().setCursor(null);	//Return the cursor to normal
		}

