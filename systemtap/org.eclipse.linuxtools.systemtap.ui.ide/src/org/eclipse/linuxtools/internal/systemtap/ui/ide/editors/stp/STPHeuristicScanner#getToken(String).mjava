	/**
	 * Returns one of the keyword constants or <code>TokenIDENT</code> for a scanned identifier.
	 *
	 * @param s a scanned identifier
	 * @return one of the constants defined in {@link STPSymbols}
	 */
	private int getToken(String s) {
		Assert.isNotNull(s);

		switch (s.length()) {
			case 2:
				if ("if".equals(s)) //$NON-NLS-1$
					return TokenIF;
				if ("do".equals(s)) //$NON-NLS-1$
					return TokenDO;
				break;
			case 3:
				if ("for".equals(s)) //$NON-NLS-1$
					return TokenFOR;
				if ("try".equals(s)) //$NON-NLS-1$
					return TokenTRY;
				if ("new".equals(s)) //$NON-NLS-1$
					return TokenNEW;
				break;
			case 4:
				if ("case".equals(s)) //$NON-NLS-1$
					return TokenCASE;
				if ("else".equals(s)) //$NON-NLS-1$
					return TokenELSE;
				if ("enum".equals(s)) //$NON-NLS-1$
					return TokenENUM;
				if ("goto".equals(s)) //$NON-NLS-1$
					return TokenGOTO;
				break;
			case 5:
				if ("break".equals(s)) //$NON-NLS-1$
					return TokenBREAK;
				if ("catch".equals(s)) //$NON-NLS-1$
					return TokenCATCH;
				if ("class".equals(s)) //$NON-NLS-1$
					return TokenCLASS;
				if ("const".equals(s)) //$NON-NLS-1$
					return TokenCONST;
				if ("while".equals(s)) //$NON-NLS-1$
					return TokenWHILE;
				if ("union".equals(s)) //$NON-NLS-1$
					return TokenUNION;
				if ("using".equals(s)) //$NON-NLS-1$
					return TokenUSING;
				if ("throw".equals(s)) //$NON-NLS-1$
					return TokenTHROW;
				break;
			case 6:
				if ("delete".equals(s)) //$NON-NLS-1$
					return TokenDELETE;
				if ("public".equals(s)) //$NON-NLS-1$
					return TokenPUBLIC;
				if ("return".equals(s)) //$NON-NLS-1$
					return TokenRETURN;
				if ("static".equals(s)) //$NON-NLS-1$
					return TokenSTATIC;
				if ("struct".equals(s)) //$NON-NLS-1$
					return TokenSTRUCT;
				if ("switch".equals(s)) //$NON-NLS-1$
					return TokenSWITCH;
				if ("extern".equals(s)) //$NON-NLS-1$
					return TokenEXTERN;
				break;
			case 7:
				if ("default".equals(s)) //$NON-NLS-1$
					return TokenDEFAULT;
				if ("foreach".equals(s)) //$NON-NLS-1$
					return TokenFOREACH;
				if ("private".equals(s)) //$NON-NLS-1$
					return TokenPRIVATE;
				if ("typedef".equals(s)) //$NON-NLS-1$
					return TokenTYPEDEF;
				if ("virtual".equals(s)) //$NON-NLS-1$
					return TokenVIRTUAL;
				break;
			case 8:
				if ("operator".equals(s)) //$NON-NLS-1$
					return TokenOPERATOR;
				if ("template".equals(s)) //$NON-NLS-1$
					return TokenTEMPLATE;
				if ("typename".equals(s)) //$NON-NLS-1$
					return TokenTYPENAME;
				break;
			case 9:
				if ("namespace".equals(s)) //$NON-NLS-1$
					return TokenNAMESPACE;
				if ("protected".equals(s)) //$NON-NLS-1$
					return TokenPROTECTED;
		}
		return TokenIDENT;
	}

