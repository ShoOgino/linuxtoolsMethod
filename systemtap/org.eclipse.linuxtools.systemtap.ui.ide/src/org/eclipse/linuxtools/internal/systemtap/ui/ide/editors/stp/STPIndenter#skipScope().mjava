	/**
	 * Skips a scope and positions the cursor (<code>fPosition</code>) on the
	 * token that opens the scope. Returns <code>true</code> if a matching peer
	 * could be found, <code>false</code> otherwise. The current token when calling
	 * must be one out of <code>STPSymbols.TokenRPAREN</code>, <code>STPSymbols.TokenRBRACE</code>,
	 * and <code>STPSymbols.TokenRBRACKET</code>.
	 *
	 * @return <code>true</code> if a matching peer was found, <code>false</code> otherwise
	 */
	private boolean skipScope() {
		switch (fToken) {
		case STPSymbols.TokenRPAREN:
			return skipScope(STPSymbols.TokenLPAREN, STPSymbols.TokenRPAREN);
		case STPSymbols.TokenRBRACKET:
			return skipScope(STPSymbols.TokenLBRACKET, STPSymbols.TokenRBRACKET);
		case STPSymbols.TokenRBRACE:
			return skipScope(STPSymbols.TokenLBRACE, STPSymbols.TokenRBRACE);
		case STPSymbols.TokenGREATERTHAN:
			if (!fPrefs.prefHasTemplates)
				return false;
			int storedPosition= fPosition;
			int storedToken= fToken;
			nextToken();
			switch (fToken) {
				case STPSymbols.TokenIDENT:
					fPosition = storedPosition;
					if (skipScope(STPSymbols.TokenLESSTHAN, STPSymbols.TokenGREATERTHAN))
						return true;
					break;
				case STPSymbols.TokenQUESTIONMARK:
				case STPSymbols.TokenGREATERTHAN:
					fPosition = storedPosition;
					if (skipScope(STPSymbols.TokenLESSTHAN, STPSymbols.TokenGREATERTHAN))
						return true;
					break;
			}
			// <> are harder to detect - restore the position if we fail
			fPosition= storedPosition;
			fToken= storedToken;
			return false;

		default:
			 // programming error
			Assert.isTrue(false);
			return false;
		}
	}

