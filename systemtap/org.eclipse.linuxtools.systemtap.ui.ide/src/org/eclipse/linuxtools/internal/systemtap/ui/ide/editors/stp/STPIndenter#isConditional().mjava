	/**
	 * Returns <code>true</code> if the colon at the current position is part of a conditional
	 * (ternary) expression, <code>false</code> otherwise.
	 *
	 * @return <code>true</code> if the colon at the current position is part of a conditional
	 */
	private boolean isConditional() {
		while (true) {
			int previous= fToken;
			nextToken();
			switch (fToken) {
			// search for case labels, which consist of (possibly qualified) identifiers or numbers
			case STPSymbols.TokenIDENT:
				if (previous == STPSymbols.TokenIDENT) {
					return false;
				}
				// fall thru
				continue;
			case STPSymbols.TokenDOUBLECOLON:
			case STPSymbols.TokenOTHER:
			case STPSymbols.TokenMINUS:
			case STPSymbols.TokenPLUS:
				continue;

			case STPSymbols.TokenQUESTIONMARK:
				return true;

			case STPSymbols.TokenSEMICOLON:
			case STPSymbols.TokenLBRACE:
			case STPSymbols.TokenRBRACE:
			case STPSymbols.TokenCASE:
			case STPSymbols.TokenDEFAULT:
			case STPSymbols.TokenPUBLIC:
			case STPSymbols.TokenPROTECTED:
			case STPSymbols.TokenPRIVATE:
			case STPSymbols.TokenCLASS:
			case STPSymbols.TokenSTRUCT:
			case STPSymbols.TokenUNION:
				return false;

			default:
				return true;
			}
		}
	}

