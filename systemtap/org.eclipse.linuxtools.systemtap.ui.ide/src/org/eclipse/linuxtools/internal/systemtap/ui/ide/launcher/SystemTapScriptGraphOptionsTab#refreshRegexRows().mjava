	private void refreshRegexRows() {

		try{
			pattern = Pattern.compile(regularExpressionCombo.getText());
			matcher = pattern.matcher(sampleOutputText.getText());
			regexErrorMessages.set(selectedRegex, null);
		}catch (PatternSyntaxException e){
			regexErrorMessages.set(selectedRegex, e.getMessage());
			return;
		}
		regexErrorMessages.set(selectedRegex, checkRegex(regularExpressionCombo.getText()));
		if (regexErrorMessages.get(selectedRegex) != null) {
			return;
		}

		int desiredNumberOfColumns = matcher.groupCount();

		while (numberOfVisibleColumns < desiredNumberOfColumns){
			addColumn(null);
		}

		while (numberOfVisibleColumns > desiredNumberOfColumns){
			removeColumn(true);
		}

		// Set values
		Control[] children = textFieldsComposite.getChildren();
		for (int i = 0; i < numberOfVisibleColumns; i++) {
			String sampleOutputResults;
			if (matcher.matches()) {
				sampleOutputResults = matcher.group(i+1);
			}
			else if (sampleOutputText.getText().length() == 0){
				sampleOutputResults = Messages.SystemTapScriptGraphOptionsTab_sampleOutputIsEmpty;
			} else {
				sampleOutputResults = Messages.SystemTapScriptGraphOptionsTab_sampleOutputNoMatch;
			}
			((Label)children[i*2+1]).setText(" " + sampleOutputResults); //$NON-NLS-1$
		}

		// May only add/edit graphs if there is output data being captured.
		addGraphButton.setEnabled(numberOfVisibleColumns > 0);
		if (selectedTableItem != null) {
			editGraphButton.setEnabled(numberOfVisibleColumns > 0);
		}

		regexErrorMessages.set(selectedRegex, findBadGraphs(selectedRegex));
	}

