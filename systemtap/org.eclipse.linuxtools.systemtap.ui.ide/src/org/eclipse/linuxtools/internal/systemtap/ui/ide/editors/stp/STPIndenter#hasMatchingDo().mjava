	/**
	 * while(condition); is ambiguous when parsed backwardly, as it is a valid
	 * statement by its own, so we have to check whether there is a matching
	 * do. A <code>do</code> can either be separated from the while by a
	 * block, or by a single statement, which limits our search distance.
	 *
	 * @return <code>true</code> if the <code>while</code> currently in
	 *         <code>fToken</code> has a matching <code>do</code>.
	 */
	private boolean hasMatchingDo() {
		Assert.isTrue(fToken == STPSymbols.TokenWHILE);
		nextToken();
		switch (fToken) {
		case STPSymbols.TokenRBRACE:
			skipScope(); // and fall thru
			skipToStatementStart(false, false);
			return fToken == STPSymbols.TokenDO;

		case STPSymbols.TokenSEMICOLON:
			skipToStatementStart(false, false);
			return fToken == STPSymbols.TokenDO;
		}
		return false;
	}

