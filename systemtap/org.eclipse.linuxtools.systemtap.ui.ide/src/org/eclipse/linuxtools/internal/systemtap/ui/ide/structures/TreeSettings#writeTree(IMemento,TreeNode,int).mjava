	/**
	 * Writes the tree passed in to the <code>IMemento</code> argument, up to the specified depth.
	 * @param child The <code>IMemento</code> to store the tree to.
	 * @param tree The <code>TreeNode</code> to store.
	 * @param depth The maximum depth level to write out.
	 */
	private static void writeTree(IMemento child, TreeNode tree, int depth) {
		if (null == tree.toString()) {
			child.putString("string", "<null>"); //$NON-NLS-1$ //$NON-NLS-2$
		} else {
			child.putString("string", tree.toString()); //$NON-NLS-1$
		}

		if (null == tree.getData()) {
			child.putString("data", "<null>"); //$NON-NLS-1$ //$NON-NLS-2$
		} else {
			child.putString("data", tree.getData().toString()); //$NON-NLS-1$
		}

		if (tree instanceof TreeDefinitionNode) {
			if (null == ((TreeDefinitionNode) tree).getDefinition()) {
				child.putString("definition", "<null>"); //$NON-NLS-1$ //$NON-NLS-2$
			} else {
				child.putString(
						"definition", ((TreeDefinitionNode) tree).getDefinition()); //$NON-NLS-1$
			}
		}

		child.putInteger("click", (tree.isClickable()?1:0)); //$NON-NLS-1$
		for(int i=0; i<tree.getChildCount(); i++) {
			writeTree(child.createChild("level" + depth), tree.getChildAt(i), depth+1); //$NON-NLS-1$
		}
	}

