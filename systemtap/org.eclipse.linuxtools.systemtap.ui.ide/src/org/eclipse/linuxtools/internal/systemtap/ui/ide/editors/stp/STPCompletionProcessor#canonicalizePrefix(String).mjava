	/**
	 * Returns a standardized version of the given prefix so that completion matching
	 * can be performed.
	 * For example for process("/some/long/path") this returns process("PATH");
	 * @param prefix
	 * @return
	 */
	private String canonicalizePrefix(String prefix) {

		if (prefix.isEmpty())
		 {
			return ""; //$NON-NLS-1$
		}

		if(prefix.matches("process\\(\".*\"\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("process\\(\".*\"\\)", "process\\(\"PATH\"\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		if(prefix.matches("process\\(\\d*\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("process\\(\\d*\\)", "process\\(PID\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		if(prefix.matches("procfs\\(\".*\"\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("procfs\\(\".*\"\\)", "procfs\\(\"PATH\"\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		if(prefix.matches(".*function\\(\".*\"\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("function\\(\".*\"\\)", "function\\(\"PATTERN\"\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		if(prefix.matches(".*module\\(\".*\"\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("module\\(\".*\"\\)", "module\\(\"MPATTERN\"\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		if(prefix.matches("jiffies\\(\\d*\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("jiffies\\(\\d*\\)", "jiffies\\(N\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		if(prefix.matches("randomize\\(\\d*\\).*")){ //$NON-NLS-1$
			prefix = prefix.replaceAll("randomize\\(\\d*\\)", "randomize\\(M\\)"); //$NON-NLS-1$ //$NON-NLS-2$
		}

		return prefix;
	}

