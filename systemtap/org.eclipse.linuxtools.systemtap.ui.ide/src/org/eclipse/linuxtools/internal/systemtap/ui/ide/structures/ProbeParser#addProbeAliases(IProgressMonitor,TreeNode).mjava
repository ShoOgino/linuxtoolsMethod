    /**
     * Runs stap to obtain a log of all probe aliases & their variables,
     * and populate the probe tree with them.
     *
     * @return <code>false</code> if a cancelation prevented all probes from being added;
     * <code>true</code> otherwise.
     */
    private boolean addProbeAliases(IProgressMonitor monitor, TreeNode statics) {
        TreeNode aliases = new TreeNode(Messages.ProbeParser_aliasProbes, false);
        tree.add(aliases);
        if (statics == null || monitor.isCanceled()) {
            return false;
        }

        String probeDump = runStap(new String[]{"-L"}, "**", false); //$NON-NLS-1$ //$NON-NLS-2$
        if (probeDump == null) {
            return false;
        }

        boolean canceled = false;
        try (Scanner st = new Scanner(probeDump)) {
            TreeNode group = null;
            while (st.hasNextLine()) {
                if (monitor.isCanceled()) {
                    canceled = false;
                    break;
                }
                String tokenString = st.nextLine();
                // If the token starts with '_' or '__' it is a private probe so
                // skip it.
                if (tokenString.startsWith("_")) { //$NON-NLS-1$
                    continue;
                }

                StringTokenizer probeTokenizer = new StringTokenizer(tokenString);
                String probeName = probeTokenizer.nextToken();

                String groupName = extractProbeGroupName(tokenString);
                // Only add this group if it is not a static probe group
                if (statics.getChildByName(groupName) == null) {
                    TreeNode probeNode = makeProbeAliasNode(probeName);
                    group = addOrFindProbeGroup(groupName, group, aliases);
                    group.add(probeNode);
                    addAllVarNodesToProbeNode(probeTokenizer, probeNode);
                }
            }
        }
        aliases.sortTree();
        return !canceled;
    }

