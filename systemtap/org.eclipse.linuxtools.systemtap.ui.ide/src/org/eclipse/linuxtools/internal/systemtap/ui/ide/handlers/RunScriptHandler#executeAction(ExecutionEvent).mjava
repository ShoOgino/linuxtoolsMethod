    private void executeAction(ExecutionEvent event) throws ExecutionException {
        cmdList.clear();
        final boolean local = getRunLocal();
        findTargetEditor(event);
        findFilePath();
        tryEditorSave(event);
        if (!local) {
            prepareNonLocalScript();
        }
        final String[] script = buildStandardScript();
        final String[] envVars = EnvironmentVariablesPreferencePage.getEnvironmentVariables();
        Display.getDefault().asyncExec(new Runnable() {
            @Override
            public void run() {
                String name = getConsoleName();
                if (ScriptConsole.instanceIsRunning(name)) {
                    MessageDialog dialog = new MessageDialog(
                            PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(),
                            Messages.RunScriptHandler_AlreadyRunningDialogTitle, null,
                            MessageFormat.format(Messages.RunScriptHandler_AlreadyRunningDialogMessage, fileName),
                            MessageDialog.QUESTION, new String[]{"Yes", "No"}, 0); //$NON-NLS-1$ //$NON-NLS-2$
                    if (dialog.open() != Window.OK) {
                        if (launch != null) {
                            launch.forceRemove();
                        }
                        return;
                    }
                }
                final ScriptConsole console = ScriptConsole.getInstance(name);
                synchronized (console) {
                    if (!local) {
                        console.run(script, envVars, remoteOptions, new StapErrorParser());
                    } else {
                        console.runLocally(script, envVars, new StapErrorParser(), getProject());
                    }
                    scriptConsoleInitialized(console);
                }
            }
        });
    }

