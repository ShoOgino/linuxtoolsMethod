    /**
     * Opposite action as writeTree. Reconstruct a tree from a previously-saved {@link IMemento}.
     * @param data The {@link IMemento} to read the tree out of.
     * @return The reconstructed {@link TreeNode}.
     */
    private static TreeNode readTree(IMemento data) {
        String disp = data.getString(M_DISP);
        String def = data.getString(M_DEFINITON);
        boolean c = data.getBoolean(M_CLICKABLE);
        Object d = StapTreeDataFactory.createObjectFromString(data.getString(M_DATA), data.getString(M_DATATYPE));

        TreeNode parent;
        if (def == null) {
            parent = new TreeNode(d, disp, c);
        } else {
            parent = new TreeDefinitionNode(d, disp, getValueFromString(def), c);
        }
        for (IMemento child : data.getChildren()) {
            parent.add(readTree(child));
        }
        return parent;
    }

