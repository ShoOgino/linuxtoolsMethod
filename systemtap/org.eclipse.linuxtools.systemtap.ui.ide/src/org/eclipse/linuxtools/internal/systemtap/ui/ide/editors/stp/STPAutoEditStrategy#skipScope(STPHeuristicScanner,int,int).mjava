    /**
     * Skips the scope opened by <code>token</code> in <code>document</code>,
     * returns either the position of the
     * @param pos
     * @param token
     * @return the position after the scope
     */
    private static int skipScope(STPHeuristicScanner scanner, int pos, int token) {
        int openToken= token;
        int closeToken;
        switch (token) {
            case STPSymbols.TokenLPAREN:
                closeToken= STPSymbols.TokenRPAREN;
                break;
            case STPSymbols.TokenLBRACKET:
                closeToken= STPSymbols.TokenRBRACKET;
                break;
            case STPSymbols.TokenLBRACE:
                closeToken= STPSymbols.TokenRBRACE;
                break;
            default:
                Assert.isTrue(false);
                return -1; // dummy
        }

        int depth= 1;
        int p= pos;

        while (true) {
            int tok= scanner.nextToken(p, STPHeuristicScanner.UNBOUND);
            p= scanner.getPosition();

            if (tok == openToken) {
                depth++;
            } else if (tok == closeToken) {
                depth--;
                if (depth == 0)
                    return p + 1;
            } else if (tok == STPSymbols.TokenEOF) {
                return STPHeuristicScanner.NOT_FOUND;
            }
        }
    }

