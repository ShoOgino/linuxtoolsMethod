	/**
	 * Generates a RPM specfile based on the parsed data from the feature.xml.
	 * @return The generated specfile.
	 */
	public String generateSpecfile() {
		StringBuilder buffer = new StringBuilder();
		String simplePackageName = getPackageName(mainPackage.getName());
		String packageName = "eclipse-" + simplePackageName;
		if (withGCJSupport)
			buffer.append("%define gcj_support    1\n");
		if (withFetchScript)
			buffer.append("%define src_repo_tag   FIXME\n");
		buffer.append("%define eclipse_base   %{_libdir}/eclipse\n");
		buffer.append("%define install_loc    %{_datadir}/eclipse/dropins/"
				+ simplePackageName + "\n\n");
		buffer.append("Name:           " + packageName + "\n");
		buffer.append("Version:        "
				+ mainPackage.getVersion().replaceAll("\\.qualifier", "")
				+ "\n");
		buffer.append("Release:        1%{?dist}" + "\n");
		buffer.append("Summary:        " + mainPackage.getSummary() + "\n\n");
		buffer.append("Group:          Development/Tools\n");
		buffer.append("License:        " + mainPackage.getLicense() + "\n");
		buffer.append("URL:            " + mainPackage.getURL() + "\n");
		if (withFetchScript) {
			String fetchScriptName = packageName + "-fetch-src.sh";
			buffer.append("## sh ").append(fetchScriptName).append("\n");
			buffer.append("Source0:        %{name}-fetched-src-%{src_repo_tag}.tar.bz2\n");
			buffer.append("Source1:        " ).append(fetchScriptName).append("\n");
		} else {
			buffer.append("Source0:        FIXME\n");
		}
		buffer
				.append("BuildRoot:      %{_tmppath}/%{name}-%{version}-%{release}-root-%(%{__id_u} -n)\n\n");
		if (withGCJSupport) {
			buffer.append("%if %{gcj_support}\n");
			buffer.append("BuildRequires:    gcc-java\n");
			buffer.append("BuildRequires:    java-gcj-compat-devel\n");
			buffer.append("Requires(post):   java-gcj-compat\n");
			buffer.append("Requires(postun): java-gcj-compat\n");
			buffer.append("%else\n");
			buffer.append("BuildRequires:    java-devel >= 1.5.0\n");
			buffer.append("%endif\n");
			buffer.append("%if ! %{gcj_support}\n");
			buffer.append("BuildArch: noarch\n");
			buffer.append("%endif\n\n");
		} else
			buffer.append("BuildArch: noarch\n\n");
		buffer.append("BuildRequires: eclipse-pde >= 1:3.4.0\n");
		buffer.append("Requires: eclipse-platform >= 3.4.0\n");
		buffer.append(getDepsOrReqs("Requires: ", mainPackage.getRequires()));
		buffer.append("\n%description\n" + mainPackage.getDescription() + "\n");
		for (SubPackage subPackage : subPackages) {
			String subPackageName = getPackageName(subPackage.getName());
			buffer.append("\n%package  " + subPackageName + "\n");
			buffer.append("Summary:  " + subPackage.getSummary() + "\n");
			buffer.append("Requires: %{name} = %{version}-%{release}\n");
			buffer
					.append(getDepsOrReqs("Requires: ", subPackage
							.getRequires()));
			buffer
					.append(getDepsOrReqs("Provides: ", subPackage
							.getProvides()));
			buffer.append("Group: Development/Tools\n\n");
			buffer.append("%description " + subPackageName + "\n");
			buffer.append(subPackage.getDescription() + "\n");
		}
		generatePrepSection(buffer);

		generateBuildSection(buffer);
		buffer.append("%install\n");
		buffer.append("%{__rm} -rf %{buildroot}\n");
		buffer.append("install -d -m 755 $RPM_BUILD_ROOT%{install_loc}\n\n");
		buffer.append("%{__unzip} -q -d $RPM_BUILD_ROOT%{install_loc} \\\n");
		buffer.append("     build/rpmBuild/" + mainPackage.getName()
				+ ".zip \n\n");
		if (withGCJSupport) {
			buffer.append("%if %{gcj_support}\n");
			buffer.append("  %{_bindir}/aot-compile-rpm\n");
			buffer.append("%endif\n\n");
		}
		buffer.append("%clean\n");
		buffer.append("%{__rm} -rf %{buildroot}\n\n");
		if (withGCJSupport) {
			buffer.append("%if %{gcj_support}\n");
			buffer.append("%post\n");
			buffer.append("if [ -x %{_bindir}/rebuild-gcj-db ]; then\n");
			buffer.append("  %{_bindir}/rebuild-gcj-db\n");
			buffer.append("fi\n\n");
			buffer.append("%preun\n");
			buffer.append("if [ -x %{_bindir}/rebuild-gcj-db ]; then\n");
			buffer.append("  %{_bindir}/rebuild-gcj-db\n");
			buffer.append("fi\n");
			buffer.append("%endif\n\n");
		}
		buffer.append("%files\n");
		buffer.append("%defattr(-,root,root,-)\n");
		buffer.append("%{install_loc}\n\n");
		generateFilesSections(buffer);
		buffer.append("%changelog\n\n");
		buffer.append("FIXME\n");
		return buffer.toString();
	}

