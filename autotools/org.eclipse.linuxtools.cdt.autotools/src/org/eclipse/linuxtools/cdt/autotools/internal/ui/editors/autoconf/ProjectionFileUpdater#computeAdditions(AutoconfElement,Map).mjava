	private void computeAdditions(AutoconfElement element, Map map) {
		
		boolean createProjection= false;
		
		boolean collapse= false;
			
		if (element instanceof AutoconfIfElement ||
				element instanceof AutoconfElseElement ||
				element instanceof AutoconfElifElement) {
			collapse= fAllowCollapsing && fCollapseConditional;
			createProjection= true;
		} else if (element instanceof AutoconfMacroElement) {
			collapse= fAllowCollapsing && fCollapseMacroDef;
			createProjection= true;
		} else if (element instanceof AutoconfMacroArgumentElement) {
			collapse= fAllowCollapsing && fCollapseMacroDef;
			createProjection= true;
		} else if (element instanceof AutoconfCaseElement) {
			collapse= fAllowCollapsing && fCollapseCase;
			createProjection= true;
		} else if (element instanceof AutoconfForElement ||
				element instanceof AutoconfWhileElement ||
				element instanceof AutoconfUntilElement ||
				element instanceof AutoconfSelectElement) {
			collapse = fAllowCollapsing && fCollapseLoop;
			createProjection = true;
		}
	
		if (createProjection) {
			Position position= createProjectionPosition(element);
			if (position != null) {
				map.put(new AutoconfProjectionAnnotation(element, fAllowCollapsing, true), position);
			}
		}
	}

