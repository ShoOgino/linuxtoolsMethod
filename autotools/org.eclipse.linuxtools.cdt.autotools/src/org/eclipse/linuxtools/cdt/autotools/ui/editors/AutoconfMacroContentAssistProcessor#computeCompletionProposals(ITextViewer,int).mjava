	public ICompletionProposal[] computeCompletionProposals(ITextViewer viewer,
			int offset) {
		
		IDocument document = viewer.getDocument();
		String prefix = "";
		AutoconfMacro[] macros = AutoconfTextHover.getMacroList(editor);
		try {
			int macroStart = computeMacroStart(document, offset);
			if (macroStart < offset) {
				prefix = prefix + document.get(macroStart, offset - macroStart);
			}
		} catch (BadLocationException e) {
			// Do nothing.  Leave prefix empty.
		}
		ICompletionProposal[] result = null;
		if (macros != null) {
			ArrayList validList = new ArrayList();
			for (int i = 0; i < macros.length; ++i) {
				String name = macros[i].getName();
				if (name.length() >= prefix.length()) {
					if (name.startsWith(prefix)) {
						String template = macros[i].getTemplate();
						int cursorPos = template.length();
						int prefixLen = prefix.length();
						if (template.charAt(template.length() - 1) == ')')
							cursorPos -= 1;
						AutoconfMacroProposalContextInformation ci = null;
						if (macros[i].hasParms()) {
							// Provide parameter info as context information that
							// is tied to the completion proposal.
							ci = new AutoconfMacroProposalContextInformation(macros[i].getParms(), macros[i].getParms());
							ci.setContextInformationPosition(offset - prefixLen + cursorPos - 1);
						}
						ICompletionProposal cp = new CompletionProposal(template, offset - prefixLen, prefixLen, cursorPos, null, 
								name, ci, AutoconfTextHover.getIndexedInfo(name, editor));
						validList.add(cp);
					}
				}
			}
			result = new ICompletionProposal[validList.size()];
			result = (ICompletionProposal[])validList.toArray(result);
		}
		return result;
	}

