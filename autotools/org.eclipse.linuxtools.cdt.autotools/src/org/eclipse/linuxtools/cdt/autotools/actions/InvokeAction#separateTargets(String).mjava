	/**
	 * Separate targets to array from a string.
	 * 
	 * @param rawArgList
	 * @return targets in string[] array. if targets are not formatted properly,
	 *         returns null
	 */
	protected String[] separateTargets(String rawArgList) {

		StringTokenizer st = new StringTokenizer(rawArgList, " "); //$NON-NLS-1$
		ArrayList<String> targetList = new ArrayList<String>();

		while (st.hasMoreTokens()) {
			String currentWord = st.nextToken().trim();

			if (currentWord.startsWith("'")) { //$NON-NLS-1$
				String tmpTarget = ""; //$NON-NLS-1$
				while (!currentWord.endsWith("'")) { //$NON-NLS-1$
					tmpTarget += currentWord + " "; //$NON-NLS-1$
					if (!st.hasMoreTokens()) {
						// quote not closed properly, so return null
						return null;
					}
					currentWord = st.nextToken().trim();
				}

				tmpTarget += currentWord;
				targetList.add(tmpTarget);
				continue;
			}

			if (currentWord.startsWith("\"")) { //$NON-NLS-1$
				String tmpTarget = ""; //$NON-NLS-1$
				while (!currentWord.endsWith("\"")) { //$NON-NLS-1$
					tmpTarget += currentWord + " "; //$NON-NLS-1$
					if (!st.hasMoreTokens()) {
						// double quote not closed properly, so return null
						return null;
					}
					currentWord = st.nextToken().trim();
				}

				tmpTarget += currentWord;
				targetList.add(tmpTarget);
				continue;
			}

			// for targets without quote/double quotes.
			targetList.add(currentWord);

		}

		return (String[])targetList.toArray(new String[targetList.size()]);
	}

