	/**
	 * Parse through a single expression up to a semicolon or newline.
	 * Add a macro call to the element or just return upon finding the desired token.
	 * Whenever a token terminates the expression, we check its validity and return the final token
	 * Throw {@link BlockEndCondition} if an unexpected token was found.
	 * @param parent the parent into which to add statements.  The type of this element is used
	 * to validate the legality of block closing tokens.
	 */
	protected Token parseExpression(AutoconfElement parent) throws BlockEndCondition {
	
		while (true) {
			Token token = tokenizer.readToken();
			
			// 0. Ignore comments (tokenizer skipped them!)
			
			switch (token.getType()) {
			// 1. Check EOF
			case ITokenConstants.EOF:
				throw new BlockEndCondition(token);
		
			// 2. Check macro expansions
			case ITokenConstants.WORD:
				token = checkMacro(parent, token);
				break;
			
			// 3. Check expression terminators
			case ITokenConstants.SEMI:
			case ITokenConstants.EOL:
				return token;

			// 4. Handle variables
			case ITokenConstants.SH_DOLLAR:
				token = tokenizer.readToken();
				break;
				
			case ITokenConstants.SH_IN:
				// in 'for' or 'select, an 'in' may occur before 'do'
				if (!(parent instanceof AutoconfForElement)
						&& !(parent instanceof AutoconfSelectElement)) 
					return token;
				// fall through
				
			// 5. Abort on unexpected tokens
			case ITokenConstants.SH_DO:
			case ITokenConstants.SH_THEN:
				handleError(parent, token, AutoconfEditorMessages.getFormattedString(INVALID_SPECIFIER, token.getText()));
				tokenizer.unreadToken(token);
				// close enough...
				return token;
				
			case ITokenConstants.SH_ESAC:
			case ITokenConstants.SH_CASE:
			case ITokenConstants.SH_CASE_CONDITION_END:
			case ITokenConstants.SH_FOR:
			case ITokenConstants.SH_IF:
			case ITokenConstants.SH_ELIF:
			case ITokenConstants.SH_ELSE:
			case ITokenConstants.SH_FI:
			case ITokenConstants.SH_DONE:
				handleError(parent, token, AutoconfEditorMessages.getFormattedString(UNTERMINATED_CONSTRUCT, parent.getName()));
				tokenizer.unreadToken(token);
				throw new BlockEndCondition(token);
			}
		}
	}

