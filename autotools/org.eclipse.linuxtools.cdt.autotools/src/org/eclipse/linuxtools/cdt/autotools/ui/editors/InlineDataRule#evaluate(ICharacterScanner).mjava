	public IToken evaluate(ICharacterScanner scanner) {
		int c = scanner.read();
		fBuffer.setLength(0);

		// Looking for <<WORD or <<-WORD or <<'WORD' at end of line.
		for (int i = 0; i < fStartingSequence.length(); i++) {
			fBuffer.append((char) c);
			if (fStartingSequence.charAt(i) != c) {
				unreadBuffer(scanner);
				return Token.UNDEFINED;
			}
			c = scanner.read();
		}

		char[][] lineDelimeters = scanner.getLegalLineDelimiters();
		StringBuffer endMarkerBuffer = new StringBuffer();
		if (c == '-') {
			fBuffer.append((char)c);
			c = scanner.read();
		} else if (c == '\'') {
			fBuffer.append((char)c);
			c = scanner.read();
		}
		
		while (c != ICharacterScanner.EOF &&
				Character.isJavaIdentifierPart((char)c) &&
				c != '\'') {
			fBuffer.append((char)c);
			endMarkerBuffer.append((char)c);
			c = scanner.read();
		}
		
		if (c == '\'') {
			fBuffer.append((char)c);
			c = scanner.read();
		}
		
		if (endMarkerBuffer.length() == 0) {
			unreadBuffer(scanner);
			return Token.UNDEFINED;
		}
			
		// At this point we read until we find id by itself on its own line
		boolean eol = false;
		boolean finished = false;
		boolean foundMarker = false;
		String endMarker = endMarkerBuffer.toString();
		while (!finished && c != ICharacterScanner.EOF) {
			for (int i = 0; i < lineDelimeters.length; ++i) {
				if (c == lineDelimeters[i][0]) {
					if (confirmDelimeter(scanner, lineDelimeters[i])) {
						c = scanner.read();
						eol = true;
						break;
					}
				}
			}
			if (eol) {
				eol = false;
				if (foundMarker) {
					// We get here if we have found the marker by itself
					// on the line
					finished = true;
				} else {
					foundMarker = false;
					int j = 0;
					while (j < endMarker.length()) {
						if (c == endMarker.charAt(j)) {
							c = scanner.read();
							++j;
						} else {
							break;
						}
					}
					if (j == endMarker.length()) {
						foundMarker = true;
					}
				}
			} else {
				// otherwise ignore all other characters
				eol = false;
				foundMarker = false;
				c = scanner.read();
			}
		}

		// unread last character
		scanner.unread();
		return token;
	}

