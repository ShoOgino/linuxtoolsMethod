	/* (non-Javadoc)
	 * @see org.eclipse.core.internal.events.InternalBuilder#build(int, java.util.Map, org.eclipse.core.runtime.IProgressMonitor)
	 */
	@SuppressWarnings("unchecked")
	protected IProject[] build(int kind, Map args, IProgressMonitor monitor) throws CoreException {
		IProject[] results = null;
		IProject project = getProject();
		IManagedBuildInfo info = ManagedBuildManager.getBuildInfo(project);
		IManagedBuilderMakefileGenerator generator = null;
		try {
			// Figure out the working directory for the build and make sure there is a makefile there
			// If not, mark a rebuild is required so that configuration will get
			// invoked.
			IWorkspace workspace = project.getWorkspace();
			if (workspace != null) {
				IWorkspaceRoot root = workspace.getRoot();
				if (root != null) {
					if (info.getDefaultConfiguration() == null)
						return null;
					generator = new MakeGenerator();
					generator.initialize(getProject(), info, monitor);
					IPath buildDir = project.getLocation().append(generator.getBuildWorkingDir());
					IPath makefilePath = buildDir.append(generator.getMakefileName());
					IFile makefile = root.getFileForLocation(makefilePath);
					if (makefile == null || !makefile.exists()) {
						info.setRebuildState(true);
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			makeTargetName = (String)args.get("org.eclipse.cdt.make.core.build.target.inc"); //$NON-NLS-1$
			
			buildCalled = true;
			/**
			 * @see IncrementalProjectBuilder#build
			 */
//			fBuildSet.start(this);

			// Hijack the build.  This is because the CommonBuilder code will
			// try and create builders for a MakeTarget build.  We don't want
			// that because this will default to using the GnuMakefileGenerator
			// which fails.  We want to use our Autotools MakeGenerator and
			// perform a make from the top-level.
			if(VERBOSE)
				outputTrace(project.getName(), ">>build requested, type = " + kind); //$NON-NLS-1$

//			IBuilder builders[] = new IBuilder[1];
//			IConfiguration cfg = info.getDefaultConfiguration();
//			// Hijack the builder itself so that instead of ManagedMake
//			// policy of defaulting the build path to the configuration name,
//			// we get the build occurring in the builddir configure tool setting.
//			builders[0] = new AutotoolsBuilder(cfg.getEditableBuilder(), project);
//			builders[0].setBuildPath(project.getLocation().append(generator.getBuildWorkingDir()).toOSString());
//			builders[0].setAutoBuildEnable(true);
//			builders[0].setCleanBuildEnable(true);
//			IProject[] projects = build(kind, project, builders, true, monitor);
			
			IConfiguration cfg = info.getDefaultConfiguration();
			ToolChain toolChain = (ToolChain)cfg.getToolChain();
			IBuilder builder = new AutotoolsBuilder(cfg.getEditableBuilder(), project, toolChain);
			builder.setBuildPath(project.getLocation().append(generator.getBuildWorkingDir()).toOSString());
			builder.setAutoBuildEnable(true);
			builder.setCleanBuildEnable(true);
			toolChain.setBuilder((Builder)builder);
			
			IProject[] projects = super.build(kind, args, monitor);

			if(VERBOSE)
				outputTrace(project.getName(), "<<done build requested, type = " + kind); //$NON-NLS-1$

			results = projects;
			buildCalled = false;
		}
		return results;
	}

