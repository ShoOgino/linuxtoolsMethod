	protected HashMap<String, String> executeCommand(IPath command,
			String[] argumentList, String[] envList, IPath execDir) {

		ByteArrayOutputStream stdout = new ByteArrayOutputStream();
		ByteArrayOutputStream stderr = new ByteArrayOutputStream();
		CommandLauncher cmdL = new CommandLauncher();

		// invoke command
		try {
			Process automakeProcess = cmdL.execute(command, argumentList, envList,
					execDir, new NullProgressMonitor());

			if (cmdL.waitAndRead(stdout, stderr) == CommandLauncher.OK) {
				try {
					automakeProcess.getOutputStream().close();
				} catch (IOException e) {
					// ignore
				}
			} else {
				// FIXME: following is kludge so Galileo build can build
				//        with outdated CDT.
				if (cmdL == null)
					throw new CoreException(Status.CANCEL_STATUS);
				// failed to execute command
				showError(InvokeMessages
						.getString("InvokeAction.execute.windowTitle.error"), InvokeMessages //$NON-NLS-1$
						.getString("InvokeAction.execute.message") //$NON-NLS-1$
						+ command.toOSString()); //$NON-NLS-1$
				return null;
			}
		} catch (CoreException e) {
			showError(InvokeMessages
					.getString("InvokeAction.execute.windowTitle.error"), InvokeMessages //$NON-NLS-1$
					.getString("InvokeAction.execute.message") //$NON-NLS-1$
					+ command.toOSString()); //$NON-NLS-1$
			AutotoolsPlugin.logException(e);
			return null;
		}
 
		HashMap<String, String> outputs = new HashMap<String, String>();

		outputs.put("stdout", stdout.toString()); //$NON-NLS-1$
		outputs.put("stderr", stderr.toString()); //$NON-NLS-1$

		try {
			stdout.close();
			stderr.close();
		} catch (IOException e) {
			// ignore
		}

		return outputs;
	}

