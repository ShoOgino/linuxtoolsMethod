	@Test
	// Verify a new configuration will copy the configuration parameters
	// of its base configuration.
	public void newConfigCopiesParms() throws Exception {
		SWTBotView view = bot.viewByTitle("Project Explorer");
		view.bot().tree().select("GnuProject0");
		bot.menu("Project", 1).menu("Build Configurations").menu("Manage...").click();
		SWTBotShell shell = bot.shell("GnuProject0: Manage Configurations");
		shell.activate();
		bot.button("New...").click();
		shell = bot.shell("Create New Configuration");
		shell.activate();
		SWTBotText t = bot.textWithLabel("Name:");
		t.typeText("debug");
		SWTBotRadio radio = bot.radio("Existing configuration");
		if (!radio.isSelected())
			radio.click();
		bot.button("OK").click();
		shell = bot.shell("GnuProject0: Manage Configurations");
		shell.activate();
		bot.button("New...").click();
		shell = bot.shell("Create New Configuration");
		shell.activate();
		t = bot.textWithLabel("Name:");
		t.typeText("default");
		radio = bot.radio("Default configuration");
		if (!radio.isSelected())
			radio.click();
		bot.button("OK").click();
		shell = bot.shell("GnuProject0: Manage Configurations");
		shell.activate();
		SWTBotTable table = bot.table();
		assertTrue(table.containsItem("debug"));
		table.getTableItem("debug").select();
		bot.button("Set Active").click();
		bot.button("OK").click();
		// Verify the debug configuration is active and has a user parameter: --enable-jeff
		view = bot.viewByTitle("Project Explorer");
		view.bot().tree().select("GnuProject0");
		bot.menu("Project", 1).menu("Properties").click();
		shell = bot.shell("Properties for GnuProject0");
		shell.activate();
		bot.tree().expandNode("Autotools").select("Configure Settings");
		SWTBotCombo configs = bot.comboBoxWithLabel(UIMessages.getString("AbstractPage.6"));
		configs.setFocus();
		String[] items = configs.items();
		for (int i = 0; i < items.length; ++i) {
			if (items[i].contains("debug") && items[i].contains("Active"))
				configs.setSelection(i);
		}
		assertTrue(configs.getText().contains("debug"));
		bot.treeWithLabel("Configure Settings").expandNode("configure").select("Advanced");
		SWTBotText text = bot.textWithLabel("Additional command-line options");
		String val = text.getText();
		assertEquals(val, "--enable-jeff");
		// Verify that the build directory for the new configuration has been
		// switched to build-debug
		bot.tree().expandNode("C/C++ Build").select();
		String buildDir = bot.textWithLabel("Build directory:").getText();
		assertTrue(buildDir.endsWith("build-debug"));
		// Verify the default configuration has no user setting
		bot.tree().expandNode("Autotools").select("Configure Settings");
		configs = bot.comboBoxWithLabel(UIMessages.getString("AbstractPage.6"));
		configs.setSelection("default");
		bot.treeWithLabel("Configure Settings").expandNode("configure").select("Advanced");
		text = bot.textWithLabel("Additional command-line options");
		val = text.getText();
		assertEquals(val, "");
		bot.button("OK").click();
		// Build the project again and verify we get a build-debug directory
		view = bot.viewByTitle("Project Explorer");
		view.bot().tree().select("GnuProject0");
		bot.menu("Project", 1).menu("Build Project").click();
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		assertTrue(workspace != null);
		IWorkspaceRoot root = workspace.getRoot();
		assertTrue(root != null);
		IProject project = root.getProject("GnuProject0");
		assertTrue(project != null);
		IPath path = project.getLocation();
		// We need to wait until the config.status file is created so
		// sleep a bit and look for it...give up after 20 seconds
		for (int i = 0; i < 40; ++i) {
			bot.sleep(500);
			File f = new File(path.append("build-debug/src/a.out").toOSString());
			if (f.exists())
				break;
		}
		File f = new File(path.append("build-debug/config.status").toOSString());
		assertTrue(f.exists());
		BufferedReader r = new BufferedReader(new FileReader(f));
		int ch;
		boolean optionFound = false;
		// Read config.status and look for the string --enable-jeff
		// which is a simple verification that the option was used in the 
		// configure step.
		while ((ch = r.read()) != -1) {
			if (ch == '-') {
				char[] buf = new char[12];
				r.mark(100);
				int count = r.read(buf);
				if (count < 12)
					break;
				String s = new String(buf);
				if (s.equals("-enable-jeff")) {
					optionFound = true;
					break;
				} else {
					r.reset();
				}
			}
		}
		assertTrue(optionFound);
		// Verify we cleaned out the top-level build directory (i.e. that there
		// is no config.status there anymore).
		path = project.getLocation().append("config.status");
		f = new File(path.toOSString());
		assertTrue(!f.exists());
		path = project.getLocation().append(".autotools");
		f = new File(path.toOSString());
		assertTrue(f.exists());
		DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
		DocumentBuilder db = dbf.newDocumentBuilder();
		Document d = db.parse(f);
		Element e = d.getDocumentElement();
		// Get the stored configuration data
		NodeList cfgs = e.getElementsByTagName("configuration"); // $NON-NLS-1$
		assertEquals(3, cfgs.getLength());
		int foundUser = 0;
		for (int x = 0; x < cfgs.getLength(); ++x) {
			Node n = cfgs.item(x);
			NodeList l = n.getChildNodes();
			// Verify two of the user fields in .autotools file are set to --enable-jeff
			for (int y = 0; y < l.getLength(); ++y) {
				Node child = l.item(y);
				if (child.getNodeName().equals("option")) { // $NON-NLS-1$
					NamedNodeMap optionAttrs = child.getAttributes();
					Node idNode = optionAttrs.getNamedItem("id"); // $NON-NLS-1$
					Node valueNode = optionAttrs.getNamedItem("value"); // $NON-NLS-1$
					assertTrue(idNode != null);
					assertTrue(valueNode != null);
					String id = idNode.getNodeValue();
					String value = valueNode.getNodeValue();
					if (id.equals("user")) {
						if (value.equals("--enable-jeff"))
							++foundUser;
					}
				}
			}
		}
		assertEquals(foundUser, 2);
	}

