	public void convertProject(IProject project, IProgressMonitor monitor, String projectID) throws CoreException {
		monitor.beginTask(AutotoolsUIPlugin.getResourceString("WizardMakeProjectConversion.monitor.convertingToMakeProject"), 6); //$NON-NLS-1$
		try {
			super.convertProject(project, new SubProgressMonitor(monitor, 1), projectID);
			monitor.subTask(AutotoolsUIPlugin.getResourceString(MSG_ADD_NATURE));
			ManagedCProjectNature.addManagedNature(project, new SubProgressMonitor(monitor, 1));
			AutotoolsNewProjectNature.addAutotoolsNature(project, new SubProgressMonitor(monitor, 1));
			monitor.subTask(AutotoolsUIPlugin.getResourceString(MSG_ADD_BUILDER));
//			ManagedCProjectNature.addManagedBuilder(project, new SubProgressMonitor(monitor, 1));
			AutotoolsNewProjectNature.addAutotoolsBuilder(project, new SubProgressMonitor(monitor,1));
			// FIXME: Default scanner property: make -w - eventually we want to use Make core's build scanner
			project.setPersistentProperty(AutotoolsPropertyConstants.SCANNER_USE_MAKE_W, AutotoolsPropertyConstants.TRUE);
			CCorePlugin.getDefault().mapCProjectOwner(project, projectID, true);
			// Add the ManagedProject to the project
			IManagedProject newManagedProject = null;
			IManagedBuildInfo info = null;
			try {
				info = ManagedBuildManager.createBuildInfo(project);
				IProjectType parent = getProjectType();
				newManagedProject = ManagedBuildManager.createManagedProject(project, parent);
				if (newManagedProject != null) {
					IConfiguration [] selectedConfigs = getSelectedConfigurations();
					for (int i = 0; i < selectedConfigs.length; i++) {
						IConfiguration config = selectedConfigs[i];
						int id = ManagedBuildManager.getRandomNumber();
						IConfiguration newConfig = newManagedProject.createConfiguration(config, config.getId() + "." + id); //$NON-NLS-1$
						newConfig.setArtifactName(newManagedProject.getDefaultArtifactName());
					}
					// Now add the first supported config in the list as the default
					IConfiguration defaultCfg = null;
					IConfiguration[] newConfigs = newManagedProject.getConfigurations();
					for(int i = 0; i < newConfigs.length; i++) {
						if(newConfigs[i].isSupported()){
							defaultCfg = newConfigs[i];
							break;
						}
					}
					
					if(defaultCfg == null && newConfigs.length > 0)
						defaultCfg = newConfigs[0];
					
					// Create a default Autotools configuration and save it.
					AutotoolsConfigurationManager.getInstance().getConfiguration(project, defaultCfg.getName(), true);
					AutotoolsConfigurationManager.getInstance().saveConfigs(project.getName());
					
					if(defaultCfg != null) {
						ManagedBuildManager.setDefaultConfiguration(project, defaultCfg);
						ManagedBuildManager.setSelectedConfiguration(project, defaultCfg);
					}
					ManagedBuildManager.setNewProjectVersion(project);
				}
			} catch (BuildException e) {
				AutotoolsUIPlugin.log(e);
			}

			// Following is a bit of a hack because changing the project options
			// causes a change event to be fired which will try to reindex the project.  
			// We are in the middle of setting the project indexer which may end up 
			// being the null indexer.  In that case, we don't want the default indexer 
			// (Fast Indexer) to be invoked.
			//IIndexManager manager = CCorePlugin.getIndexManager();
			//ICProject cproject = CoreModel.getDefault().create(project);
			//manager.setIndexerId(cproject, ConvertToAutotoolsProjectWizard.NULL_INDEXER_ID);
		
			// Modify the project settings
			if (project != null) {
				applyOptions(project, new SubProgressMonitor(monitor, 2));
			}

//			 Set the ScannerInfoProvider.  We must do this after
//			 applying the options because changing the ScannerInfoProvider
//			 is considered a change to the project and a reindex will
//			 occur.  One of the options being applied above is the indexer
//			 selected by the user.  Thus, we wait until now.
//			try {
//				AutotoolsUIPlugin.setScannerInfoProvider(project);
//			} catch (CoreException e) {
//				ManagedBuilderUIPlugin.log(e);
//			}

			// Save the build options
			monitor.subTask(AutotoolsUIPlugin.getResourceString(MSG_SAVE));
			if (info != null) {
				info.setValid(true);
				ManagedBuildManager.saveBuildInfo(project, true);
			}
		} finally {
			IStatus initResult = ManagedBuildManager.initBuildInfoContainer(project);
			if (initResult.getCode() != IStatus.OK) {
				// At this point, I can live with a failure
				AutotoolsUIPlugin.log(initResult);
			}
			monitor.done();
		}
	}

