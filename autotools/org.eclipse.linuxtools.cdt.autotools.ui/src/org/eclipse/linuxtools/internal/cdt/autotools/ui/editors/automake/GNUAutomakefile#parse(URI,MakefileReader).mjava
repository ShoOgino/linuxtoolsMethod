	protected void parse(URI fileURI, MakefileReader reader) throws IOException {
		String line;
		Rule[] rules = null;
		Stack<IDirective> conditions = new Stack<IDirective>();
		Stack<GNUVariableDef> defines = new Stack<GNUVariableDef>();
		int startLine = 0;
		int endLine = 0;

		// Clear any old directives.
		clearDirectives();

		setFileURI(fileURI);
	
		while ((line = reader.readLine()) != null) {
			startLine = endLine + 1;
			endLine = reader.getLineNumber();
			
			// Check if we enter in "define"
			if (GNUMakefileUtil.isEndef(line)) {
				// We should have a "define" for a "endef".
				if (!defines.empty()) {
					GNUVariableDef def = (GNUVariableDef) defines.pop();
					def.setEndLine(endLine);
				}
				Endef endef = new Endef((Directive)this);
				endef.setLines(startLine, endLine);
				addDirective(conditions, endef);
				continue;
			} else if (GNUMakefileUtil.isDefine(line)) {
				GNUVariableDef def = parseGNUVariableDef(line);
				def.setLines(startLine, endLine);
				addDirective(conditions, def);
				defines.push(def);
				continue;
			} else if (GNUMakefileUtil.isOverrideDefine(line)) {
				GNUVariableDef oDef = parseGNUVariableDef(line);
				oDef.setLines(startLine, endLine);
				addDirective(conditions, oDef);
				defines.push(oDef);
				continue;
			}

			// We still in a define.
			if (!defines.empty()) {
				GNUVariableDef def = (GNUVariableDef) defines.peek();
				StringBuffer sb = def.getValue();
				if (sb.length() > 0) {
					sb.append('\n');
				}
				sb.append(line);
				continue;
			}

			// 1- Try command first, since we can not strip '#' in command line
			if (PosixMakefileUtil.isCommand(line) ||
					AutomakefileUtil.isAutomakeCommand(line)) {
				Command cmd = new Command(this, line);
				cmd.setLines(startLine, endLine);
				if (rules != null) {
					// The command is added to the rules
					for (int i = 0; i < rules.length; i++) {
						rules[i].addDirective(cmd);
						rules[i].setEndLine(endLine);
					}
					continue;
				}
				if (!conditions.isEmpty()) {
					addDirective(conditions, cmd);
					continue;
				}
				// If we have no rules/condition for the command,
				// give the other directives a chance by falling through
			}

			// 2- Strip away any comments.
			int pound = Util.indexOfComment(line);
			if (pound != -1) {
				Comment cmt = new Comment(this, line.substring(pound + 1));
				cmt.setLines(startLine, endLine);
				if (rules != null) {
					// The comment is added to the rules.
					for (int i = 0; i < rules.length; i++) {
						rules[i].addDirective(cmt);
						rules[i].setEndLine(endLine);
					}
				} else {
					addDirective(conditions, cmt);
				}
				line = line.substring(0, pound);
				// If all we have left are spaces continue
				if (Util.isEmptyLine(line)) {
					continue;
				}
				// The rest of the line maybe a valid directives.
				// keep on trying by falling through.
			}

			// 3- Empty lines ?
			if (Util.isEmptyLine(line)) {
				Directive empty = new EmptyLine(this);
				empty.setLines(startLine, endLine);
				if (rules != null) {
					// The EmptyLine is added to the rules.
					for (int i = 0; i < rules.length; i++) {
						rules[i].addDirective(empty);
						rules[i].setEndLine(endLine);
					}
				} else {
					addDirective(conditions, empty);
				}
				continue;
			}

			// 3b - look for if statement which is an Automake directive.
			// These will be processed at configure time and all statements
			// in-between are modified with a prefix.  We will treat these as
			// standard conditionals even though they can affect the behavior
			// of lines that follow the construct.  For
			// example, an automake-if could start in the middle of a rule
			// and the else might be outside a target.
			if (GNUMakefileUtil.isIf(line)) {
				// We cache the rules that were in effect at entry to the
				// if/else block.  We treat the endif as restoring the
				// state of the rules at this point.  It is possible for
				// commands to follow the if/else that belong to different
				// rules that start inside the if/else, but we are not
				// prepared to handle that in an outline view and it is
				// pretty bad Automake coding.
				If ifDirective = parseIf(line, rules);
				ifDirective.setLines(startLine, endLine);
				if (rules != null) {
					// The if statement is added to the rules.
					for (int i = 0; i < rules.length; i++) {
						rules[i].addDirective(ifDirective);
						rules[i].setEndLine(endLine);
					}
				} else {
					addDirective(conditions, ifDirective);
				}
				conditions.push(ifDirective);
				rules = null;
				continue;
			}
			
			// 3c - Check for else or endif

			if (GNUMakefileUtil.isElse(line)) {
				Else elseDirective = (Else)parseConditional(line);
				elseDirective.setLines(startLine, endLine);
				Conditional cond = null;
				// FIXME: Are we missing a if condition ?
				if (!conditions.empty()) {
					cond = (Conditional) conditions.pop();
					cond.setEndLine(endLine - 1);
				}
				if (cond != null && cond.isIf()) {
					// See 3b above for description on automake if/else handling.
					elseDirective.setAutomake(true);
					rules = ((If)cond).getRules();
					// We cache the rules at the time of entry into the if/else block.
					elseDirective.setRules(rules);
					if (rules != null) {
						// The else is added to the rules.
						for (int i = 0; i < rules.length; i++) {
							rules[i].addDirective(elseDirective);
							rules[i].setEndLine(endLine);
						}
					} else {
						addDirective(conditions, elseDirective);
					}
					rules = null;
				} else {
					addDirective(conditions, elseDirective);
				}
				conditions.push(elseDirective);
				continue;
			} else if (GNUMakefileUtil.isEndif(line)) {
				Endif endif = new Endif(this);
				endif.setLines(startLine, endLine);
				Conditional cond = null;
				// FIXME: Are we missing a if/else condition ?
				if (!conditions.empty()) {
					cond = (Conditional) conditions.pop();
					cond.setEndLine(endLine);
				}
				if (cond != null && cond instanceof IAutomakeConditional) {
				   rules = ((IAutomakeConditional)cond).getRules();
				}
				if (rules != null) {
					// The endif is added to the rules.
					for (int i = 0; i < rules.length; i++) {
						rules[i].addDirective(endif);
						rules[i].setEndLine(endLine);
					}
				} else {
					addDirective(conditions, endif);
				}
				continue;
			}
			
			// 4 - reset rules to null
			// The first non empty line that does not begin with a <TAB> or '#'
			// shall begin a new entry.
			rules = null;

			// 5- Check for the conditionals.
			Directive directive = processConditions(line);
			if (directive != null) {
				directive.setLines(startLine, endLine);
				addDirective(conditions, directive);
				conditions.push(directive);
				continue;
			}

			// 6- Check for other special gnu directives.
			directive = processGNUDirectives(line);
			if (directive != null) {
				directive.setLines(startLine, endLine);
				addDirective(conditions, directive);
				continue;
			}

			// 7- Check for GNU special rules.
			SpecialRule special = processSpecialRules(line);
			if (special != null) {
				rules = new Rule[] { special };
				special.setLines(startLine, endLine);
				addDirective(conditions, special);
				continue;
			}

			// - Check for inference rule.
			if (PosixMakefileUtil.isInferenceRule(line)) {
				InferenceRule irule = parseInferenceRule(line);
				irule.setLines(startLine, endLine);
				addDirective(conditions, irule);
				rules = new Rule[] { irule };
				continue;
			}

			// - Variable Definiton ?
			if (GNUMakefileUtil.isVariableDefinition(line)) {
				GNUVariableDef vd = parseGNUVariableDef(line);
				vd.setLines(startLine, endLine);
				addDirective(conditions, vd);
				if (!vd.isTargetSpecific()) {
					continue;					
				}
			}

			// - GNU Static Target rule ?
			if (GNUMakefileUtil.isStaticTargetRule(line)) {
				StaticTargetRule[] srules = parseStaticTargetRule(line);
				for (int i = 0; i < srules.length; i++) {
					srules[i].setLines(startLine, endLine);
					addDirective(conditions, srules[i]);
				}
				rules = srules;
				continue;
			}

			// - Target Rule ?
			if (GNUMakefileUtil.isGNUTargetRule(line)) {
				GNUTargetRule[] trules = parseGNUTargetRules(line);
				for (int i = 0; i < trules.length; i++) {
					trules[i].setLines(startLine, endLine);
					addDirective(conditions, trules[i]);
				}
				rules = trules;
				continue;
			}
			
			// - Configure macro (@xxxx@)
			if (AutomakefileUtil.isConfigMacro(line)) {
				AutomakeConfigMacro macro = parseConfigMacro(line);
				if (macro != null) {
					macro.setLines(startLine, endLine);
					addDirective(macro);
					continue;
				}
			}

			// XXX ?? Should not be here.
			BadDirective stmt = new BadDirective(this, line);
			stmt.setLines(startLine, endLine);
			addDirective(conditions, stmt);

		}
		setLines(1, endLine);
		// TEST please remove.
		//GNUMakefileValidator validator = new GNUMakefileValidator();
		//validator.validateDirectives(null, getDirectives());
	}

