	protected static Document getAMDoc(String amDocVer) {
		Document am_document = null;
		if (amHoverDocs == null) {
			amHoverDocs = new HashMap<String, Document>();
		}
		am_document = (Document)amHoverDocs.get(amDocVer);
		if (am_document == null) {
			Document doc = null;
			try {
				// see comment in initialize()
				try {
					InputStream docStream = null;
					try {
						URI uri = new URI(getLocalAutomakeMacrosDocName(amDocVer));
						IPath p = URIUtil.toPath(uri);
						// Try to open the file as local to this plug-in.
						docStream = FileLocator.openStream(AutotoolsPlugin.getDefault().getBundle(), p, false);
					} catch (IOException e) {
						// Local open failed.  Try normal external location.
						URI acDoc = new URI(getAutomakeMacrosDocName(amDocVer));
						IPath p = URIUtil.toPath(acDoc);
						if (p == null) {
							URL url = acDoc.toURL();
							docStream = url.openStream();
						} else {
							docStream = new FileInputStream(p.toFile());
						}
					}
					DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
					factory.setValidating(false);
					try {
						DocumentBuilder builder = factory.newDocumentBuilder();
						doc = builder.parse(docStream);
					}
					catch (SAXParseException saxException) {
						doc = null;
					}
					catch (SAXException saxEx) {
						doc = null;
					}
					catch (ParserConfigurationException pce) {
						doc = null;
					}
					catch (IOException ioe) {
						doc = null;
					}
				} catch (FileNotFoundException e) {
					AutotoolsPlugin.log(e);
				} catch (MalformedURLException e) {
					AutotoolsPlugin.log(e);
				} catch (URISyntaxException e) {
					AutotoolsPlugin.log(e);
				}
				am_document = doc;
			}
			catch (IOException ioe) {
			}
		}
		amHoverDocs.put(amDocVer, am_document);
		return am_document;
	}

