	private ArrayList<IAConfiguration> getConfigs(IProject project) {
		String projectName = project.getName();
		ArrayList<IAConfiguration> list = configs.get(projectName);
		if (list == null) {
			try {
				IPath fileLocation = project.getLocation().append(CFG_FILE_NAME);
				File dirFile = fileLocation.toFile();
				ArrayList<IAConfiguration> cfgList = new ArrayList<IAConfiguration>();
				DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
				DocumentBuilder db = dbf.newDocumentBuilder();
				if (dirFile.exists()) {
					Document d = db.parse(dirFile);
					Element e = d.getDocumentElement();
					// Figure out the name of the active configuration.
					NodeList cfgs = e.getElementsByTagName("configuration"); // $NON-NLS-1$
					for (int x = 0; x < cfgs.getLength(); ++x) {
						Node n = cfgs.item(x);
						NamedNodeMap attrs = n.getAttributes();
						Node name = attrs.getNamedItem("name"); // $NON-NLS-1$
						if (name != null) {
							String cfgName = name.getNodeValue();
							IAConfiguration cfg = new AutotoolsConfiguration(cfgName);
							NodeList l = n.getChildNodes();
							for (int y = 0; y < l.getLength(); ++y) {
								Node child = l.item(y);
								if (child.getNodeName().equals("option")) { // $NON-NLS-1$
									NamedNodeMap optionAttrs = child.getAttributes();
									Node id = optionAttrs.getNamedItem("id"); // $NON-NLS-1$
									Node value = optionAttrs.getNamedItem("value"); // $NON-NLS-1$
									if (id != null && value != null)
										cfg.setOption(id.getNodeValue(), value.getNodeValue());
								}
							}
							cfg.setDirty(false);
							cfgList.add(cfg);
						}
					}
					if (cfgList.size() > 0) {
						configs.put(projectName, cfgList);
						list = cfgList;
					}
				}
			} catch (ParserConfigurationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (SAXException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return list;
	}

