	public void testMacroParsing5() throws Exception {
		// check that complex shell constructs don't throw off the
		// parser, and also that we don't mistake shell tokens in a macro argument
		String arg2 =
			"AC_MSG_CHECKING(for working $2)\n" + 
			"# Run test in a subshell; some versions of sh will print an error if\n" + 
			"# an executable is not found, even if stderr is redirected.\n" + 
			"# Redirect stdin to placate older versions of autoconf.  Sigh.\n" + 
			"if ($2 --version) < /dev/null > /dev/null 2>&1; then\n" + 
			"   $1=$2\n" + 
			"   AC_MSG_RESULT(found)\n" + 
			"else\n" + 
			"   $1=\"$3/missing $2\"\n" + 
			"   AC_MSG_RESULT(missing)\n" + 
			"fi\n" + 
			"AC_SUBST($1)";
		String text =
			"AC_DEFUN([AM_MISSING_PROG],\n" + 
			"[" + arg2 + "])\n" + 
			"";
		AutoconfElement root = parse(text);
		assertTreeStructure(root, new String[] {
				"AC_DEFUN", 
					"AM_MISSING_PROG", 
					arg2, 
					null,
		});
		AutoconfElement[] kids = root.getChildren();
		assertEquals(1, kids.length);
		assertTrue(kids[0] instanceof AutoconfMacroElement);
		AutoconfMacroElement macro = (AutoconfMacroElement) kids[0];
		assertEquals("AC_DEFUN", macro.getName());
		assertEquals("AM_MISSING_PROG", macro.getVar());

		// spaces dropped
		assertEquals(2, macro.getParameterCount());
		assertEquals("AM_MISSING_PROG", macro.getParameter(0));
		
		// be sure complex arguments aren't mangled
		assertEquals(arg2, macro.getParameter(1));
		assertEqualSource("[" + arg2 + "]", macro.getChildren()[1]);
		
	}

