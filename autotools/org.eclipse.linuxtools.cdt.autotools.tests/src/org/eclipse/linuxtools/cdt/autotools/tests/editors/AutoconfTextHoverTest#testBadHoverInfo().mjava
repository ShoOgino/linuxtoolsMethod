	public void testBadHoverInfo() {
		String autoconfVersion = null;
		String automakeVersion = null;
		String autoconfDocName = AutoconfTextHover.AUTOCONF_MACROS_DOC_NAME;
		String automakeDocName = AutoconfTextHover.AUTOMAKE_MACROS_DOC_NAME;
		try {
			autoconfVersion = project.getPersistentProperty(AutotoolsPropertyConstants.AUTOCONF_VERSION);
			automakeVersion = project.getPersistentProperty(AutotoolsPropertyConstants.AUTOMAKE_VERSION);
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't get current autoconf and automake document versions");
		}
		try {
			project.setPersistentProperty(AutotoolsPropertyConstants.AUTOCONF_VERSION, "nonexistent");
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't set autoconf document version");
		}
		IRegion region = textHover.getHoverRegion(editor.getViewer(), 0);
		String s = textHover.getHoverInfo(editor.getViewer(), region);
		assertEquals(s, null);
		region = textHover.getHoverRegion(editor.getViewer(), 52);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
		
		AutoconfTextHover.AUTOCONF_MACROS_DOC_NAME = project.getLocation().append("test").toString();
		try {
			project.setPersistentProperty(AutotoolsPropertyConstants.AUTOCONF_VERSION, "bad");
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't set autoconf document version");
		}
		region = textHover.getHoverRegion(editor.getViewer(), 0);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertEquals(s, null);
		region = textHover.getHoverRegion(editor.getViewer(), 52);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
		AutoconfTextHover.AUTOCONF_MACROS_DOC_NAME = autoconfDocName;
	
		try {
			project.setPersistentProperty(AutotoolsPropertyConstants.AUTOCONF_VERSION, autoconfVersion);
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't set autoconf document version");
		}
		region = textHover.getHoverRegion(editor.getViewer(), 0);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
		region = textHover.getHoverRegion(editor.getViewer(), 52);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);

		try {
			project.setPersistentProperty(AutotoolsPropertyConstants.AUTOMAKE_VERSION, "nonexistent");
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't set automake document version");
		}

		region = textHover.getHoverRegion(editor.getViewer(), 0);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
		region = textHover.getHoverRegion(editor.getViewer(), 52);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertEquals(s, null);

		AutoconfTextHover.AUTOMAKE_MACROS_DOC_NAME = project.getLocation().append("test").toString();
		try {
			project.setPersistentProperty(AutotoolsPropertyConstants.AUTOMAKE_VERSION, "bad");
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't set automake document version");
		}

		region = textHover.getHoverRegion(editor.getViewer(), 0);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
		region = textHover.getHoverRegion(editor.getViewer(), 52);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertEquals(s, null);
		AutoconfTextHover.AUTOMAKE_MACROS_DOC_NAME = automakeDocName;

		try {
			project.setPersistentProperty(AutotoolsPropertyConstants.AUTOMAKE_VERSION, automakeVersion);
		} catch (CoreException e1) {
			// TODO Auto-generated catch block
			fail("Can't set autoconf document version");
		}
		region = textHover.getHoverRegion(editor.getViewer(), 0);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
		region = textHover.getHoverRegion(editor.getViewer(), 52);
		s = textHover.getHoverInfo(editor.getViewer(), region);
		assertNotNull(s);
	}

