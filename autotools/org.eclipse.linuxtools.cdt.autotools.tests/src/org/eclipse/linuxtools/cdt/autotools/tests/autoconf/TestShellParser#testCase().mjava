	public void testCase() {
		String text = 
			"case $VAL in\n"+
			"linux-*-*) AC_FIRST($VAL) ; true ;;\n"+
			"bsd-* | macosx-*) : ;;\n"+
			"*) echo \"I dunno $VAL\";;\n"+
			"esac\n";
		AutoconfElement tree = parse(text, false);
		assertTreeStructure(tree, new String[] { 
				"case", 
					"linux-*-*", 
						"AC_FIRST", 
							"$VAL",
							null,
						null,
					"bsd-* | macosx-*",
					"*",
					null
					});

		AutoconfElement[] kids = tree.getChildren();
		assertEquals(1, kids.length);
		assertTrue(kids[0] instanceof AutoconfCaseElement);
		
		AutoconfCaseElement caseEl = (AutoconfCaseElement) kids[0];
		assertEqualSource(text.substring(0, text.length()-1), caseEl);
		
		assertEquals(3, caseEl.getChildren().length);
		
		assertTrue(caseEl.getChildren()[0] instanceof AutoconfCaseConditionElement);
		assertTrue(caseEl.getChildren()[1] instanceof AutoconfCaseConditionElement);
		assertTrue(caseEl.getChildren()[2] instanceof AutoconfCaseConditionElement);
		
		AutoconfCaseConditionElement caseCond = (AutoconfCaseConditionElement) caseEl.getChildren()[0];
		assertEquals("linux-*-*) AC_FIRST($VAL) ; true ;;", caseCond.getSource());
		assertEquals(1, caseCond.getChildren().length);
		assertEqualSource("AC_FIRST($VAL)", caseCond.getChildren()[0]);

		caseCond = (AutoconfCaseConditionElement) caseEl.getChildren()[1];
		assertEquals("bsd-* | macosx-*) : ;;", caseCond.getSource());
		assertEquals(0, caseCond.getChildren().length);

		caseCond = (AutoconfCaseConditionElement) caseEl.getChildren()[2];
		assertEquals("*) echo \"I dunno $VAL\";;", caseCond.getSource());
		assertEquals(0, caseCond.getChildren().length);
		
	}

