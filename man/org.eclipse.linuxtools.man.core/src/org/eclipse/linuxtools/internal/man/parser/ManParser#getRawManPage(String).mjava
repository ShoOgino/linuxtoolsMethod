    /**
     * Returns the raw representation of the man executable for a given man page
     * i.e. `man ls`.
     *
     * @param manPage
     *            The man page to fetch.
     * @return Raw output of the man command.
     */
    public StringBuilder getRawManPage(String manPage) {
        String manExecutable = Activator.getDefault().getPreferenceStore()
                .getString(PreferenceConstants.P_PATH);
        ProcessBuilder builder = new ProcessBuilder(manExecutable, manPage);
        builder.redirectErrorStream(true);
        Process process;
        StringBuilder sb = new StringBuilder();
        try {
            process = builder.start();
            if (!(System.getProperty("os.name").toLowerCase() //$NON-NLS-1$
                    .indexOf("windows") == 0)) { //$NON-NLS-1$
                process.waitFor();
            }

            String line = null;
            try (InputStream manContent = process.getInputStream();
                    BufferedReader reader = new BufferedReader(
                            new InputStreamReader(manContent))) {
                while ((line = reader.readLine()) != null) {
                    sb.append(line + "\n"); //$NON-NLS-1$
                }
            }
        } catch (IOException | InterruptedException e1) {
            Status status = new Status(IStatus.ERROR, e1.getMessage(),
                    Activator.PLUGIN_ID);
            Activator.getDefault().getLog().log(status);
        }
        return sb;
    }

