	private void startRemoteProcess(final ILaunchConfiguration config,
			final ILaunch launch, final IPath valgrindLocation,
			final IPath exePath, final String[] arguments, final File workDir, IPath logDir)
	throws Exception {
		// set output directory in config
		setOutputPath(config, logDir);
		outputPath = verifyOutputPath(config);
		
		// create/empty local output directory
		IValgrindOutputDirectoryProvider provider = getPlugin().getOutputDirectoryProvider();
		localOutputDir = provider.getOutputPath();
		createDirectory(localOutputDir);

		// tool that was launched
		toolID = getTool(config);
		// ask tool extension for arguments
		dynamicDelegate = getDynamicDelegate(toolID);
		String[] opts = getValgrindArgumentsArray(config);

		// set the default source locator if required
		setDefaultSourceLocator(launch, config);

		ArrayList<String> cmdLine = new ArrayList<String>(
				1 + arguments.length);
		cmdLine.add(valgrindLocation.toOSString());
		cmdLine.addAll(Arrays.asList(opts));
		cmdLine.add(exePath.toOSString());
		cmdLine.addAll(Arrays.asList(arguments));
		final String[] commandArray = (String[]) cmdLine
		.toArray(new String[cmdLine.size()]);
		boolean usePty = config.getAttribute(
				ICDTLaunchConfigurationConstants.ATTR_USE_TERMINAL,
				ICDTLaunchConfigurationConstants.USE_TERMINAL_DEFAULT);
		monitor.worked(1);

		// TODO Get remote environment
		@SuppressWarnings("unchecked")
		Map<String, String> env = (Map<String, String>) config.getAttribute(ILaunchManager.ATTR_ENVIRONMENT_VARIABLES, (Map<String, String>) null);

		// check for cancellation
		if (monitor.isCanceled()) {
			disconnect(null);
		}
		// call Valgrind
		command.execute(commandArray, env, workDir, valgrindLocation.toOSString(), usePty);

		new RemoteLaunchStep(launchSteps, channel) {
			@Override
			public void start() throws Exception {
				monitor.worked(3);
				process = createNewProcess(launch, command.getProcess(),
						commandArray[0]);
				// set the command line used
				process.setAttribute(IProcess.ATTR_CMDLINE,
						command.getCommandLine());
				done();
			}
		};
	}

