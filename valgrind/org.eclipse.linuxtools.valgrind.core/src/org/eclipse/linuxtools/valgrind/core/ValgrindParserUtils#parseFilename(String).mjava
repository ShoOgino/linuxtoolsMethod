	/**
	 * Parses string ending with format ([FILE]:[LINE MODULE])
	 * Assumes syntax is: "\(.*:[0-9]+(\s.+)?\)$"
	 * @param line - String with the above criteria
	 * @return a tuple of [String filename, Integer line] 
	 */
	public static Object[] parseFilename(String line) {
		String filename = null;
		int lineNo = 0;
	
		int ix = line.lastIndexOf("("); //$NON-NLS-1$
		if (ix >= 0) {
			String part = line.substring(ix, line.length());
			part = part.substring(1, part.length() - 1); // remove leading and trailing parentheses
			if ((ix = part.lastIndexOf(":")) >= 0) { //$NON-NLS-1$		
				String strLineNo = part.substring(ix + 1);
				if (isNumber(strLineNo)) {
					lineNo = Integer.parseInt(strLineNo);
					filename = part.substring(0, ix);
				} else {
					// handle format: (FILE:LINE MODULE)
					int ix1 = strLineNo.indexOf(" "); //$NON-NLS-1$
					if (ix1 > 0) {
						strLineNo = strLineNo.substring(0, ix1);
						if (isNumber(strLineNo)) {
							lineNo = Integer.parseInt(strLineNo);
							filename = part.substring(0, ix);
						}
					}
				}
			}
			else {
				// check for "in " token (lib, with symbol)
				part = part.replaceFirst("^in ", EMPTY_STRING); //$NON-NLS-1$
				// check for "within " token (lib, without symbol)
				part = part.replaceFirst("^within ", EMPTY_STRING); //$NON-NLS-1$
				filename = part; // library, no line number
			}
		}
		
		return new Object[] { filename, lineNo };
	}	

