	@SuppressWarnings("unchecked")
	public void initializeFrom(ILaunchConfiguration configuration) {
		isInitializing = true;
		try {
			heapButton.setSelection(configuration.getAttribute(ATTR_MASSIF_HEAP, true));
			heapAdminSpinner.setSelection(configuration.getAttribute(ATTR_MASSIF_HEAPADMIN, 8));
			stacksButton.setSelection(configuration.getAttribute(ATTR_MASSIF_STACKS, false));
			depthSpinner.setSelection(configuration.getAttribute(ATTR_MASSIF_DEPTH, 30));
			java.util.List<String> allocFns = configuration.getAttribute(ATTR_MASSIF_ALLOCFN, Collections.EMPTY_LIST);
			allocFnList.setItems(allocFns.toArray(new String[allocFns.size()]));
			thresholdSpinner.setSelection(configuration.getAttribute(ATTR_MASSIF_THRESHOLD, 10));
			peakInaccuracySpinner.setSelection(configuration.getAttribute(ATTR_MASSIF_PEAKINACCURACY, 10));
			String timeUnit = configuration.getAttribute(ATTR_MASSIF_TIMEUNIT, TIME_I);
			if (timeUnit.equals(TIME_I)) {
				timeUnitCombo.select(0);
			}
			else if (timeUnit.equals(TIME_MS)) {
				timeUnitCombo.select(1);
			}
			else {
				timeUnitCombo.select(2);
			}
			detailedFreqSpinner.setSelection(configuration.getAttribute(ATTR_MASSIF_DETAILEDFREQ, 10));
			maxSnapshotsSpinner.setSelection(configuration.getAttribute(ATTR_MASSIF_MAXSNAPSHOTS, 100));
			int alignment = configuration.getAttribute(ATTR_MASSIF_ALIGNMENT, 8);
			alignmentSpinner.setSelection(alignment);
		} catch (CoreException e) {
			e.printStackTrace();
		}
		isInitializing = false;
	}

