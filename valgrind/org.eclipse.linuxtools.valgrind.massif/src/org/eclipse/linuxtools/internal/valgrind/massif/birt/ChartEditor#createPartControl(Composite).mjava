	@Override
	public void createPartControl(Composite parent) {
		final ChartEditorInput input = (ChartEditorInput) getEditorInput();
		control = new Chart(parent, SWT.FILL);

		Color color = new Color(Display.getDefault(), 255, 128, 128);

		control.setBackground(color);
		control.setBackgroundInPlotArea(color);

		control.getTitle().setText("Valgrind Title");
		control.getAxisSet().getXAxis(0).getTitle().setText(input.getChart().xUnits);
		control.getAxisSet().getYAxis(0).getTitle().setText(input.getChart().yUnits);

		final HeapChart heapChart = input.getChart();

		// x-axis range
		double min = Double.MAX_VALUE;
		double max = 0.0;
		double [] heapChartTime = heapChart.time;
		for (int i=0; i < heapChartTime.length; i++){
			if (min > heapChartTime[i]){
				min = heapChartTime[i];
			}
			if (max < heapChartTime[i]){
				max = heapChartTime[i];
			}
		}

		// data
		final ILineSeries lsUseful = (ILineSeries) control.getSeriesSet().createSeries(SeriesType.LINE, "line 1");
		lsUseful.setXSeries(heapChart.time);
		lsUseful.setYSeries(heapChart.dataUseful);
		lsUseful.setSymbolType(PlotSymbolType.DIAMOND);

		final ILineSeries lsExtra = (ILineSeries) control.getSeriesSet().createSeries(SeriesType.LINE, "line 2");
		lsExtra.setXSeries(heapChart.time);
		lsExtra.setYSeries(heapChart.dataExtra);
		lsExtra.setSymbolType(PlotSymbolType.DIAMOND);

		if (heapChart.dataStacks != null){
			final ILineSeries lsStack = (ILineSeries) control.getSeriesSet().createSeries(SeriesType.LINE, "line 3");
			lsStack.setXSeries(heapChart.time);
			lsStack.setYSeries(heapChart.dataStacks);
			lsStack.setSymbolType(PlotSymbolType.DIAMOND);
		}

		final ILineSeries lsTotal = (ILineSeries) control.getSeriesSet().createSeries(SeriesType.LINE, "line 4");
		lsTotal.setXSeries(heapChart.time);
		lsTotal.setYSeries(heapChart.dataTotal);
		lsTotal.setSymbolType(PlotSymbolType.DIAMOND);

		// adjust axes
		control.getAxisSet().adjustRange();
		control.getAxisSet().getXAxis(0).setRange(new Range(min, max + 1.0));

		// listeners
		control.getPlotArea().addMouseListener(new MouseListener() {

			public void mouseUp(MouseEvent e) {
				// TODO Auto-generated method stub
			}

			public void mouseDown(MouseEvent e) {
				showView();
				TableViewer viewer = input.getView().getTableViewer();
				input.getView().setTopControl(viewer.getControl());				

				Point p = new Point(e.x, e.y);
//				System.out.println(e.x + " " + e.y);

				int closest = 0;
				double d1, d2, d3, currMin;
				double globalMin = Double.MAX_VALUE;
				for (int i = 0; i < heapChart.time.length; i++){
					// get distance from click event to data points for the given index
					d1 = distance(lsUseful.getPixelCoordinates(i), p);
					d2 = distance(lsExtra.getPixelCoordinates(i), p);
					d3 = distance(lsTotal.getPixelCoordinates(i), p);
					// find the closest data point to the click event
					currMin = Math.min(Math.min(d1, d2), d3);
					if (currMin < globalMin){
						closest = i;
						globalMin = currMin;
					}
				}

//				System.out.println(lsUseful.getPixelCoordinates(closest));
//				System.out.println(lsExtra.getPixelCoordinates(closest));
//				System.out.println(lsTotal.getPixelCoordinates(closest));

				MassifSnapshot snapshot = (MassifSnapshot) viewer.getElementAt(closest);
				viewer.setSelection(new StructuredSelection(snapshot));

				if (e.count == 2 && snapshot.isDetailed()) {
					ChartLocationsDialog dialog = new ChartLocationsDialog(Display.getCurrent().getActiveShell());
					dialog.setInput(snapshot);

					if (dialog.open() == Window.OK) {
						dialog.openEditorForResult();
					}
				}

			}

			public void mouseDoubleClick(MouseEvent e) {
				// TODO Auto-generated method stub
			}

		});

		/*Display dsp = Display.getCurrent();
		GC gc = new GC(control);
		Image img = new Image(dsp, 640, 480);
		gc.copyArea(img, 0, 0);
		gc.dispose();
		ImageLoader imageLoader = new ImageLoader();
		imageLoader.data = new ImageData[] {img.getImageData()};
		imageLoader.save("/home/rgrunber/Desktop/test.jpg",SWT.IMAGE_JPEG);*/

	}

