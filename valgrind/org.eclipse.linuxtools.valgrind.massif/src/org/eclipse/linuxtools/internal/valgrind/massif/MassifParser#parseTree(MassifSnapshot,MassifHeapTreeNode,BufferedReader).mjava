    private MassifHeapTreeNode parseTree(MassifSnapshot snapshot, MassifHeapTreeNode parent, BufferedReader br) throws IOException {
        String line = br.readLine();
        if (line == null) {
            throw new IOException(Messages.getString("MassifParser.Unexpected_EOF")); //$NON-NLS-1$
        }
        line = line.trim(); // remove leading whitespace
        String[] parts = line.split(" "); //$NON-NLS-1$
        // bounds checking so we can fail with a more informative error
        if (parts.length < 2) {
            ValgrindParserUtils.fail(line);
        }

        Integer numChildren = parseNumChildren(parts[0]);
        if (numChildren == null) {
            ValgrindParserUtils.fail(line);
        }

        Long numBytes = parseNumBytes(parts[1]);
        if (numBytes == null) {
            ValgrindParserUtils.fail(line);
        }

        double percentage;
        if (numBytes.intValue() == 0) {
            percentage = 0;
        } else {
            percentage = numBytes.doubleValue() / snapshot.getTotal() * 100;
        }

        MassifHeapTreeNode node;
        String address = null;
        String function = null;
        String filename = null;
        int lineNo = 0;
        if (parts[2].startsWith("0x")) { //$NON-NLS-1$
            // we extend the above bounds checking
            if (parts.length < 3) {
                ValgrindParserUtils.fail(line);
            }
            // remove colon from address
            address = parts[2].substring(0, parts[2].length() - 1);

            function = parseFunction(parts[3], line);

            // Parse source file if specified
            Object[] subparts = ValgrindParserUtils.parseFilename(line);
            filename = (String) subparts[0];
            lineNo = (Integer) subparts[1];

            node = new MassifHeapTreeNode(parent, percentage, numBytes, address, function, filename, lineNo);
        } else {
            // concatenate the rest
            StringBuffer text = new StringBuffer();
            for (int i = 2; i < parts.length; i++) {
                text.append(parts[i]);
                text.append(" "); //$NON-NLS-1$
            }

            node = new MassifHeapTreeNode(parent, percentage, numBytes, text.toString().trim());
        }


        for (int i = 0; i < numChildren.intValue(); i++) {
            node.addChild(parseTree(snapshot, node, br));
        }
        return node;
    }

