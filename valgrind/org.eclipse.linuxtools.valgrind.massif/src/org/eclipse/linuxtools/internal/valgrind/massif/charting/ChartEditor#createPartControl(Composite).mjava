    @Override
    public void createPartControl(Composite parent) {
        final ChartEditorInput input = (ChartEditorInput) getEditorInput();
        final HeapChart heapChart = input.getChart();
        control = new Chart(parent, SWT.FILL);
        heapChart.setChartControl(control);

        final Color LIGHTYELLOW = new Color(Display.getDefault(), 255, 255, 225);
        final Color WHITE = Display.getDefault().getSystemColor(SWT.COLOR_WHITE);
        final Color BLACK = Display.getDefault().getSystemColor(SWT.COLOR_BLACK);
        final Color RED = Display.getDefault().getSystemColor(SWT.COLOR_RED);
        final Color ORANGE = new Color(Display.getDefault(), 255, 165, 0);
        final Color GREEN = Display.getDefault().getSystemColor(SWT.COLOR_GREEN);
        final Color DARK_BLUE = new Color(Display.getDefault(), 64, 128, 128);
        final int TICK_GAP = 40;

        control.setBackground(WHITE);
        control.setBackgroundInPlotArea(LIGHTYELLOW);

        FontData fd = JFaceResources.getDialogFont().getFontData()[0];
        fd.setStyle(SWT.BOLD);

        Font font = new Font(Display.getDefault(), fd);
        fd.setHeight(fd.getHeight() + 2);
        Font titleFont = new Font(Display.getDefault(), fd);

        ITitle title = control.getTitle();
        title.setFont(titleFont);
        title.setForeground(BLACK);
        title.setText(heapChart.title);

        IAxis xAxis = control.getAxisSet().getXAxis(0);
        xAxis.getGrid().setStyle(LineStyle.NONE);
        xAxis.getTick().setForeground(BLACK);
        ITitle xTitle = xAxis.getTitle();
        xTitle.setFont(font);
        xTitle.setForeground(BLACK);
        xTitle.setText(heapChart.xUnits);

        IAxis yAxis = control.getAxisSet().getYAxis(0);
        yAxis.getGrid().setStyle(LineStyle.SOLID);
        yAxis.getTick().setForeground(BLACK);
        yAxis.getTick().setTickMarkStepHint(TICK_GAP);
        ITitle yTitle = yAxis.getTitle();
        yTitle.setFont(font);
        yTitle.setText(heapChart.yUnits);
        yTitle.setForeground(BLACK);

        control.getLegend().setPosition(SWT.BOTTOM);

        // data
        final ILineSeries lsUseful = (ILineSeries) control.getSeriesSet().
                createSeries(SeriesType.LINE, Messages.getString("HeapChart.Useful_Heap")); //$NON-NLS-1$;
        lsUseful.setXSeries(heapChart.time);
        lsUseful.setYSeries(heapChart.dataUseful);
        lsUseful.setSymbolType(PlotSymbolType.DIAMOND);
        lsUseful.setSymbolColor(RED);
        lsUseful.setLineColor(RED);

        final ILineSeries lsExtra = (ILineSeries) control.getSeriesSet().
                createSeries(SeriesType.LINE, Messages.getString("HeapChart.Extra_Heap")); //$NON-NLS-1$;
        lsExtra.setXSeries(heapChart.time);
        lsExtra.setYSeries(heapChart.dataExtra);
        lsExtra.setSymbolType(PlotSymbolType.DIAMOND);
        lsExtra.setSymbolColor(ORANGE);
        lsExtra.setLineColor(ORANGE);

        if (heapChart.dataStacks != null){
            final ILineSeries lsStack = (ILineSeries) control.getSeriesSet().
                    createSeries(SeriesType.LINE, Messages.getString("HeapChart.Stacks")); //$NON-NLS-1$;
            lsStack.setXSeries(heapChart.time);
            lsStack.setYSeries(heapChart.dataStacks);
            lsStack.setSymbolType(PlotSymbolType.DIAMOND);
            lsStack.setSymbolColor(DARK_BLUE);
            lsStack.setLineColor(DARK_BLUE);
        }

        final ILineSeries lsTotal = (ILineSeries) control.getSeriesSet().
                createSeries(SeriesType.LINE, Messages.getString("HeapChart.Total_Heap")); //$NON-NLS-1$;
        lsTotal.setXSeries(heapChart.time);
        lsTotal.setYSeries(heapChart.dataTotal);
        lsTotal.setSymbolType(PlotSymbolType.DIAMOND);
        lsTotal.setSymbolColor(GREEN);
        lsTotal.setLineColor(GREEN);

        // adjust axes
        control.getAxisSet().adjustRange();

        IAxisSet axisSet = control.getAxisSet();
        Range xRange = axisSet.getXAxis(0).getRange();
        Range yRange = axisSet.getYAxis(0).getRange();

        double xExtra = 0.05 * (xRange.upper - xRange.lower);
        double yExtra = 0.05 * (yRange.upper - yRange.lower);

        axisSet.getXAxis(0).setRange(new Range(xRange.lower, xRange.upper + xExtra));
        axisSet.getYAxis(0).setRange(new Range(yRange.lower, yRange.upper + yExtra));

        // listeners
		control.getPlotArea().getControl().addMouseListener(new MouseAdapter() {

            @Override
            public void mouseDown(MouseEvent e) {
                showView();
                TableViewer viewer = input.getView().getTableViewer();
                input.getView().setTopControl(viewer.getControl());

                Point p = new Point(e.x, e.y);

                int closest = 0;
                double d1, d2, d3, currMin;
                double globalMin = Double.MAX_VALUE;
                for (int i = 0; i < heapChart.time.length; i++){
                    // get distance from click event to data points for the given index
                    d1 = distance(lsUseful.getPixelCoordinates(i), p);
                    d2 = distance(lsExtra.getPixelCoordinates(i), p);
                    d3 = distance(lsTotal.getPixelCoordinates(i), p);
                    // find the closest data point to the click event
                    currMin = Math.min(Math.min(d1, d2), d3);
                    if (currMin < globalMin){
                        closest = i;
                        globalMin = currMin;
                    }
                }

                MassifSnapshot snapshot = (MassifSnapshot) viewer.getElementAt(closest);
                viewer.setSelection(new StructuredSelection(snapshot), true);

                if (e.count == 2 && snapshot.isDetailed()) {
                    ChartLocationsDialog dialog = new ChartLocationsDialog(Display.getCurrent().getActiveShell());
                    dialog.setInput(snapshot);

                    if (dialog.open() == Window.OK) {
                        dialog.openEditorForResult();
                    }
                }

            }
        });

    }

