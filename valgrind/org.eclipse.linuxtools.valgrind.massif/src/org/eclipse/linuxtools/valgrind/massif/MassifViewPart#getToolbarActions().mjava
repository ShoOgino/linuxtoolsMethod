	public IAction[] getToolbarActions() {		
		chartAction = new Action(Messages.getString("MassifViewPart.Display_Heap_Allocation"), IAction.AS_PUSH_BUTTON) { //$NON-NLS-1$
			@Override
			public void run() {
				if (snapshots.length > 0) {
					IProgressService ps = PlatformUI.getWorkbench().getProgressService();
					final IWorkbenchPage page = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
					try {
						ps.busyCursorWhile(new IRunnableWithProgress() {
							public void run(IProgressMonitor monitor)
									throws InvocationTargetException,
									InterruptedException {
								monitor.beginTask(Messages.getString("MassifViewPart.Rendering_Chart"), 2); //$NON-NLS-1$
								displayChart(page, monitor); // this can be long running
								monitor.done();
							}						
						});
					} catch (InvocationTargetException e) {
						e.printStackTrace();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
			}
		};
		chartAction.setImageDescriptor(MassifPlugin.imageDescriptorFromPlugin(MassifPlugin.PLUGIN_ID, "icons/linecharticon.gif")); //$NON-NLS-1$
		chartAction.setToolTipText(Messages.getString("MassifViewPart.Display_Heap_Allocation")); //$NON-NLS-1$

		treeAction = new Action(Messages.getString("MassifViewPart.Show_Heap_Tree"), IAction.AS_CHECK_BOX) { //$NON-NLS-1$
			@Override
			public void run() {
				if (isChecked()) {
					setTopControl(treeViewer.getControl());
				}
				else {
					setTopControl(viewer.getControl());
				}
			}
		};
		treeAction.setImageDescriptor(MassifPlugin.imageDescriptorFromPlugin(MassifPlugin.PLUGIN_ID, "icons/call_hierarchy.gif")); //$NON-NLS-1$
		treeAction.setToolTipText(Messages.getString("MassifViewPart.Show_Heap_Tree")); //$NON-NLS-1$

		return new IAction[] { chartAction, treeAction };
	}

