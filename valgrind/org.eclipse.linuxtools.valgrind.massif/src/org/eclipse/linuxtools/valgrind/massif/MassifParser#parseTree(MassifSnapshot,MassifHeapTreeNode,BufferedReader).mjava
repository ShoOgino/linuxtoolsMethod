	private MassifHeapTreeNode parseTree(MassifSnapshot snapshot, MassifHeapTreeNode parent, BufferedReader br) throws IOException {
		String line = br.readLine();
		if (line == null) {
			throw new IOException(Messages.getString("MassifParser.Unexpected_EOF")); //$NON-NLS-1$
		}
		line = line.trim(); // remove leading whitespace
		String[] parts = line.split(" "); //$NON-NLS-1$
		Integer numChildren = parseNumChildren(parts[0]);
		if (numChildren == null) {
			fail(line);
		}

		StringBuffer nodeText = new StringBuffer();
		Integer numBytes = parseNumBytes(parts[1]);
		if (numBytes == null) {
			fail(line);
		}
		
		double percentage;
		if (numBytes.intValue() == 0) {
			percentage = 0;
		}
		else {
			percentage = numBytes.doubleValue() / snapshot.getTotal() * 100;
		}
		nodeText.append(Double.valueOf(new DecimalFormat("#.##").format(percentage)) + "%"); //$NON-NLS-1$ //$NON-NLS-2$
		nodeText.append(" ("); //$NON-NLS-1$
		nodeText.append(numBytes.intValue() + "B"); //$NON-NLS-1$
		nodeText.append(")"); //$NON-NLS-1$
		
		// append the rest
		for (int i = 2; i < parts.length; i++) {
			nodeText.append(" "); //$NON-NLS-1$
			nodeText.append(parts[i]);
		}
		
		MassifHeapTreeNode node = new MassifHeapTreeNode(parent, nodeText.toString());
		
		// Parse source file if specified
		parseSourceFile(node, line);
		for (int i = 0; i < numChildren.intValue(); i++) {
			node.addChild(parseTree(snapshot, node, br));
		}
		return node;
	}

