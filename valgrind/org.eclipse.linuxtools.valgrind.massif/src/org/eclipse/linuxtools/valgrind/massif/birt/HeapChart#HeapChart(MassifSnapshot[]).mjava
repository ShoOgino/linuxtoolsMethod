	public HeapChart(MassifSnapshot[] snapshots) {
		TimeUnit timeUnit = snapshots[0].getUnit();
		long xScaling = getXScaling(snapshots, timeUnit);
		long yScaling = getYScaling(snapshots);

		double[] time = new double[snapshots.length];
		double[] dataUseful = new double[snapshots.length];
		double[] dataExtra = new double[snapshots.length];
		double[] dataStacks = null;

		boolean isStack = isStackProfiled(snapshots);
		if (isStack) {
			dataStacks = new double[snapshots.length];
		}
		double[] dataTotal = new double[snapshots.length];
		for (int i = 0; i < snapshots.length; i++) {
			time[i] = snapshots[i].getTime() / xScaling;
			dataUseful[i] = snapshots[i].getHeapBytes() / yScaling;
			dataExtra[i] = snapshots[i].getHeapExtra() / yScaling;
			dataTotal[i] = dataUseful[i] + dataExtra[i];
			if (isStack) {
				dataStacks[i] = snapshots[i].getStacks() / yScaling;
				dataStacks[i] += dataStacks[i];
			}
		}

		initialize();
		setDimension(ChartDimension.TWO_DIMENSIONAL_LITERAL);
		setType("Line Chart"); //$NON-NLS-1$
		setSubType("Overlay"); //$NON-NLS-1$

		Font font = JFaceResources.getDialogFont();
		FontData fd = font.getFontData()[0];

		// Title
		FontDefinition titleFont = getTitle().getLabel().getCaption().getFont();
		titleFont.setName(fd.getName());
		titleFont.setSize(fd.getHeight() + 2);

		// Plot
		getBlock().setBackground(ColorDefinitionImpl.WHITE());
		Plot p = getPlot();
		p.getClientArea().setBackground(
				ColorDefinitionImpl.create(255, 255, 225));

		// X-Axis
		Axis xAxisPrimary = getPrimaryBaseAxes()[0];
		xAxisPrimary.setType(AxisType.LINEAR_LITERAL);
		xAxisPrimary.getMajorGrid().setTickStyle(TickStyle.BELOW_LITERAL);
		xAxisPrimary.getOrigin().setType(IntersectionType.VALUE_LITERAL);
		xAxisPrimary.getTitle().getCaption().setValue(xUnits);
		xAxisPrimary.getTitle().setVisible(true);

		FontDefinition xAxisFont = xAxisPrimary.getTitle().getCaption()
				.getFont();
		xAxisFont.setName(fd.getName());
		xAxisFont.setSize(fd.getHeight());

		xAxisFont = xAxisPrimary.getLabel().getCaption().getFont();
		xAxisFont.setName(fd.getName());
		xAxisFont.setSize(fd.getHeight());

		// Y-Axis
		Axis yAxisPrimary = getPrimaryOrthogonalAxis(xAxisPrimary);
		yAxisPrimary.getMajorGrid().setTickStyle(TickStyle.LEFT_LITERAL);
		yAxisPrimary.getMajorGrid().getLineAttributes().setVisible(true);
		yAxisPrimary.getTitle().getCaption().setValue(yUnits);
		yAxisPrimary.getTitle().setVisible(true);

		FontDefinition yAxisFont = yAxisPrimary.getTitle().getCaption()
				.getFont();
		yAxisFont.setName(fd.getName());
		yAxisFont.setSize(fd.getHeight());

		yAxisFont = yAxisPrimary.getLabel().getCaption().getFont();
		yAxisFont.setName(fd.getName());
		yAxisFont.setSize(fd.getHeight());

		// // Z-Axis
		// Axis zAxis = AxisImpl.create(Axis.ANCILLARY_BASE);
		// zAxis.setType(AxisType.LINEAR_LITERAL);
		// zAxis.setLabelPosition(Position.BELOW_LITERAL);
		// zAxis.setTitlePosition(Position.BELOW_LITERAL);
		// zAxis.getMajorGrid().setTickStyle(TickStyle.BELOW_LITERAL);
		// zAxis.setOrientation(Orientation.HORIZONTAL_LITERAL);
		// xAxisPrimary.getAncillaryAxes().add(zAxis);

		// Legend
		Legend legend = getLegend();
		legend.setPosition(Position.BELOW_LITERAL);
		legend.setOrientation(Orientation.HORIZONTAL_LITERAL);

		FontDefinition legendFont = legend.getText().getFont();
		legendFont.setName(fd.getName());
		legendFont.setSize(fd.getHeight());

		// Data Set
		NumberDataSet mainValues = NumberDataSetImpl.create(time);
		NumberDataSet orthoValues1 = NumberDataSetImpl.create(dataUseful);
		NumberDataSet orthoValues2 = NumberDataSetImpl.create(dataExtra);
		NumberDataSet orthoValuesS = null;
		if (isStack) {
			orthoValuesS = NumberDataSetImpl.create(dataStacks);
		}
		NumberDataSet orthoValues3 = NumberDataSetImpl.create(dataTotal);

		SampleData sd = DataFactory.eINSTANCE.createSampleData();
		BaseSampleData sdBase = DataFactory.eINSTANCE.createBaseSampleData();
		sdBase.setDataSetRepresentation("");//$NON-NLS-1$
		sd.getBaseSampleData().add(sdBase);

		OrthogonalSampleData sdOrthogonal1 = DataFactory.eINSTANCE
				.createOrthogonalSampleData();
		sdOrthogonal1.setDataSetRepresentation("");//$NON-NLS-1$
		sdOrthogonal1.setSeriesDefinitionIndex(0);
		sd.getOrthogonalSampleData().add(sdOrthogonal1);

		OrthogonalSampleData sdOrthogonal2 = DataFactory.eINSTANCE
				.createOrthogonalSampleData();
		sdOrthogonal2.setDataSetRepresentation("");//$NON-NLS-1$
		sdOrthogonal2.setSeriesDefinitionIndex(1);
		sd.getOrthogonalSampleData().add(sdOrthogonal2);

		if (isStack) {
			OrthogonalSampleData sdOrthogonalS = DataFactory.eINSTANCE
					.createOrthogonalSampleData();
			sdOrthogonalS.setDataSetRepresentation("");//$NON-NLS-1$
			sdOrthogonalS.setSeriesDefinitionIndex(2);
			sd.getOrthogonalSampleData().add(sdOrthogonalS);
		}

		OrthogonalSampleData sdOrthogonal3 = DataFactory.eINSTANCE
				.createOrthogonalSampleData();
		sdOrthogonal3.setDataSetRepresentation("");//$NON-NLS-1$
		sdOrthogonal3.setSeriesDefinitionIndex(isStack ? 3 : 2);
		sd.getOrthogonalSampleData().add(sdOrthogonal3);

		setSampleData(sd);

		// X-Series
		Series seCategory = SeriesImpl.create();
		seCategory.setDataSet(mainValues);
		SeriesDefinition sdX = SeriesDefinitionImpl.create();
		xAxisPrimary.getSeriesDefinitions().add(sdX);
		sdX.getSeries().add(seCategory);

		// Y-Series
		LineSeries ls1 = (LineSeries) LineSeriesImpl.create();
		ls1.setDataSet(orthoValues1);
		ls1.getLineAttributes().setColor(ColorDefinitionImpl.CREAM());
		for (int i = 0; i < ls1.getMarkers().size(); i++) {
			Marker marker = (Marker) ls1.getMarkers().get(i);
			marker.setType(MarkerType.DIAMOND_LITERAL);
		}

		ls1.setPaletteLineColor(true);
		ls1.setSeriesIdentifier(Messages.getString("HeapChart.Useful_Heap")); //$NON-NLS-1$	
		ls1.getTriggers().add(
				TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL, ActionImpl
						.create(ActionType.CALL_BACK_LITERAL, CallBackValueImpl
								.create(String.valueOf(ls1
										.getSeriesIdentifier())))));

		// Y-Series
		LineSeries ls2 = (LineSeries) LineSeriesImpl.create();
		ls2.setDataSet(orthoValues2);
		ls2.getLineAttributes().setColor(ColorDefinitionImpl.CREAM());
		for (int i = 0; i < ls2.getMarkers().size(); i++) {
			Marker marker = (Marker) ls2.getMarkers().get(i);
			marker.setType(MarkerType.DIAMOND_LITERAL);
		}
		ls2.setPaletteLineColor(true);
		ls2.setSeriesIdentifier(Messages.getString("HeapChart.Extra_Heap")); //$NON-NLS-1$
		ls2.getTriggers().add(
				TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL, ActionImpl
						.create(ActionType.CALL_BACK_LITERAL, CallBackValueImpl
								.create(String.valueOf(ls2
										.getSeriesIdentifier())))));

		// Y-Series
		LineSeries lsS = null;
		if (isStack) {
			lsS = (LineSeries) LineSeriesImpl.create();
			lsS.setDataSet(orthoValuesS);
			lsS.getLineAttributes().setColor(ColorDefinitionImpl.CREAM());
			for (int i = 0; i < lsS.getMarkers().size(); i++) {
				Marker marker = (Marker) lsS.getMarkers().get(i);
				marker.setType(MarkerType.DIAMOND_LITERAL);
			}
			lsS.setPaletteLineColor(true);
			lsS.setSeriesIdentifier(Messages.getString("HeapChart.Stacks")); //$NON-NLS-1$
			lsS.getTriggers().add(
					TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL, ActionImpl
							.create(ActionType.CALL_BACK_LITERAL, CallBackValueImpl
									.create(String.valueOf(lsS
											.getSeriesIdentifier())))));
		}

		// Y-Series
		LineSeries ls3 = (LineSeries) LineSeriesImpl.create();
		ls3.setDataSet(orthoValues3);
		ls3.getLineAttributes().setColor(ColorDefinitionImpl.CREAM());
		for (int i = 0; i < ls3.getMarkers().size(); i++) {
			Marker marker = (Marker) ls3.getMarkers().get(i);
			marker.setType(MarkerType.DIAMOND_LITERAL);
		}
		ls3.setPaletteLineColor(true);
		ls3.setSeriesIdentifier(Messages.getString("HeapChart.Total_Heap")); //$NON-NLS-1$
		ls3.getTriggers().add(
				TriggerImpl.create(TriggerCondition.ONCLICK_LITERAL, ActionImpl
						.create(ActionType.CALL_BACK_LITERAL, CallBackValueImpl
								.create(String.valueOf(ls3
										.getSeriesIdentifier())))));

		SeriesDefinition sdY = SeriesDefinitionImpl.create();
		sdY.getSeriesPalette().shift(-1);
		yAxisPrimary.getSeriesDefinitions().add(sdY);
		sdY.getSeries().add(ls1);
		sdY.getSeries().add(ls2);
		if (isStack) {
			sdY.getSeries().add(lsS);
		}
		sdY.getSeries().add(ls3);

		// // Z-Series
		// SeriesDefinition sdZ = SeriesDefinitionImpl.create();
		// zAxis.getSeriesDefinitions().add(sdZ);
	}

