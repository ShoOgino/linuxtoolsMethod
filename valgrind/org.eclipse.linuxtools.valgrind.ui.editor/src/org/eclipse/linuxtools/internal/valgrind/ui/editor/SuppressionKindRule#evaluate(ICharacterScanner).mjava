    @Override
    public IToken evaluate(ICharacterScanner scanner) {
        IToken result = subrule.evaluate(scanner);
        StringBuilder tool = new StringBuilder();
        StringBuilder kind = new StringBuilder();

        if (!result.isUndefined()) {
            boolean match = true;

            // move to beginning of token
            int tokenLength = ((SuppressionsElementScanner) scanner).getTokenLength();
            for (int i = 0; i < tokenLength; i++) {
                scanner.unread();
            }

            // check first char before token is a ':'
            match = checkColon(scanner);
            if (match) {
                // move to beginning of line
                int preTokenLength = 0;
                while (scanner.getColumn() > 0) {
                    scanner.unread();
                    preTokenLength++;
                }

                // ensure any leading characters are whitespace
                boolean foundChar = false;
                while (preTokenLength-- > 1) { // skip colon
                    int ch = scanner.read();
                    if (match && !Character.isWhitespace(ch)) {
                        foundChar = true;
                        tool.append(Character.toChars(ch));
                    }
                    else if (foundChar) {
                        // encountered whitespace after tool name started
                        match = false;
                    }
                }

                scanner.read(); // consume colon

                // reset to end of token
                for (int i = 0; i < tokenLength; i++) {
                    int ch = scanner.read();
                    if (match) {
                        kind.append(Character.toChars(ch));
                    }
                }

                // assert kind is valid for tool
                if (match) {
                    List<String> kindList = kinds.get(tool.toString());
                    if (kindList == null || !kindList.contains(kind.toString())) {
                        match = false;
                    }
                }
                else {
                    // reset to beginning of token
                    unreadBuffer(scanner, tokenLength);
                }
            }

            if (!match) {
                result = Token.UNDEFINED;
            }
            else {
                result = token;
            }
        }

        return result;
    }

