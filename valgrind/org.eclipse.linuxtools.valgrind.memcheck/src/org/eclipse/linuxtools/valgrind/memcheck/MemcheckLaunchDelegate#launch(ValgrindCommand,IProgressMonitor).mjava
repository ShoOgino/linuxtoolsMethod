	public void launch(ValgrindCommand command, IProgressMonitor monitor) throws CoreException {

		// wait for Valgrind to exit
		try {
			command.getProcess().waitFor();

			File[] logs = command.getTempDir().listFiles(LOG_FILTER);
			final ArrayList<ValgrindError> errors = new ArrayList<ValgrindError>(logs.length);
			for (File log : logs) {
				ValgrindXMLParser parser;
				parser = new ValgrindXMLParser(new FileInputStream(log));

				errors.addAll(parser.getErrors());
			}		

			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					try {
						IWorkbenchPage activePage = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage();
						activePage.showView(ValgrindUIPlugin.VIEW_ID);

						ValgrindViewPart view = ValgrindUIPlugin.getDefault().getView();
						view.createDynamicView(TOOL_ID);
						IValgrindToolView memcheckPart = view.getDynamicView();
						if (memcheckPart instanceof MemcheckViewPart) {
							((MemcheckViewPart) memcheckPart).setErrors(errors.toArray(new ValgrindError[errors.size()]));
						}						
						view.refreshView();
					} catch (PartInitException e) {
						e.printStackTrace();
					} catch (CoreException e) {
						e.printStackTrace();
					}
				}					
			});

		} catch (ParserConfigurationException e) {
			abort(Messages.getString("MemcheckLaunchDelegate.Error_parsing_output"), e, ICDTLaunchConfigurationConstants.ERR_INTERNAL_ERROR); //$NON-NLS-1$
			e.printStackTrace();
		} catch (IOException e) {
			abort(Messages.getString("MemcheckLaunchDelegate.Error_parsing_output"), e, ICDTLaunchConfigurationConstants.ERR_INTERNAL_ERROR); //$NON-NLS-1$
			e.printStackTrace();
		} catch (SAXException e) {
			abort(Messages.getString("MemcheckLaunchDelegate.Error_parsing_output"), e, ICDTLaunchConfigurationConstants.ERR_INTERNAL_ERROR); //$NON-NLS-1$
			e.printStackTrace();
		} catch (InterruptedException e1) {
		}

	}

