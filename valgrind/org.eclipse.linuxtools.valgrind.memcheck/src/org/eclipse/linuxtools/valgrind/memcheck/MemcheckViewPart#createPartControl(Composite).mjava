	@Override
	public void createPartControl(Composite parent) {
		viewer = new TreeViewer(parent, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL);
		viewer.getControl().setLayoutData(new GridData(GridData.FILL_BOTH));
		contentProvider = new ITreeContentProvider() {

			public Object[] getChildren(Object parentElement) {
				return ((ValgrindTreeElement) parentElement).getChildren();
			}

			public Object getParent(Object element) {
				return ((ValgrindTreeElement) element).getParent();
			}

			public boolean hasChildren(Object element) {
				return getChildren(element).length > 0;
			}

			public Object[] getElements(Object inputElement) {
				return getChildren(inputElement);
			}

			public void dispose() {}

			public void inputChanged(Viewer viewer, Object oldInput,
					Object newInput) {}

		};
		viewer.setContentProvider(contentProvider);

		viewer.setLabelProvider(new LabelProvider() {
			@Override
			public String getText(Object element) {
				return ((ValgrindTreeElement) element).getText();
			}

			@Override
			public Image getImage(Object element) {
				return ((ValgrindTreeElement) element).getImage();
			}

		});

		doubleClickListener = new IDoubleClickListener() {

			public void doubleClick(DoubleClickEvent event) {
				Object element = ((TreeSelection) event.getSelection()).getFirstElement();
				if (element instanceof StackFrameTreeElement) {
					ValgrindStackFrame frame = ((StackFrameTreeElement) element).getFrame();
					if (frame.getFile() != null) {
						String strpath = frame.getDir() + Path.SEPARATOR + frame.getFile();
						int line = frame.getLine();
						try {
							ProfileUIUtils.openEditorAndSelect(strpath, line);
						} catch (PartInitException e) {
							e.printStackTrace();
						} catch (BadLocationException e) {
							e.printStackTrace();
						}						
					}
				}
				else {
					if (viewer.getExpandedState(element)) {
						viewer.collapseToLevel(element, TreeViewer.ALL_LEVELS);
					}
					else {
						viewer.expandToLevel(element, 1);
					}
				}
			}
		};
		viewer.addDoubleClickListener(doubleClickListener);
		
		expandAction = new ExpandAction(viewer);
		collapseAction = new CollapseAction(viewer);
		
		MenuManager manager = new MenuManager();
		manager.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				ITreeSelection selection = (ITreeSelection) viewer.getSelection();
				ValgrindTreeElement element = (ValgrindTreeElement) selection.getFirstElement();
				if (contentProvider.hasChildren(element)) {
					manager.add(expandAction);
					manager.add(collapseAction);
				}
			}			
		});
		
		manager.setRemoveAllWhenShown(true);	
		Menu contextMenu = manager.createContextMenu(viewer.getTree());
		viewer.getControl().setMenu(contextMenu);
	}

