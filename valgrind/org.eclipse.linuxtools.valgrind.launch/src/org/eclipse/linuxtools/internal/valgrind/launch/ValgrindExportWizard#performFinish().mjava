	@Override
	public boolean performFinish() {
		final File[] logs = exportPage.getSelectedFiles();
		final IPath outputPath = exportPage.getOutputPath();

		IProgressService ps = PlatformUI.getWorkbench().getProgressService();
		try {
			ps.busyCursorWhile(new IRunnableWithProgress() {
				@Override
				public void run(IProgressMonitor monitor)
						throws InvocationTargetException {
					if (logs.length > 0) {
						File outputDir = outputPath.toFile();
						monitor.beginTask(
								NLS.bind(
										Messages.getString("ValgrindExportWizard.Export_task"), outputPath.toOSString()), logs.length); //$NON-NLS-1$
						for (File log : logs) {
							monitor.subTask(NLS.bind(
									Messages.getString("ValgrindExportWizard.Export_subtask"), log.getName())); //$NON-NLS-1$

							File outLog = new File(outputDir, log.getName());
							try (FileInputStream fis = new FileInputStream(log);
									FileChannel inChan = fis.getChannel();
									FileOutputStream fos = new FileOutputStream(
											outLog);
									FileChannel outChan = fos.getChannel()) {
								outChan.transferFrom(inChan, 0, inChan.size());
							} catch (IOException e) {
								throw new InvocationTargetException(e);
							}
							monitor.worked(1);
						}
						monitor.done();
					}
				}

			});

		} catch (InvocationTargetException e) {
			IStatus status = new Status(IStatus.ERROR, ValgrindLaunchPlugin.PLUGIN_ID, Messages.getString("ValgrindExportWizard.Export_fail"), e); //$NON-NLS-1$
			ErrorDialog.openError(getShell(), ExportWizardConstants.WIZARD_TITLE, null, status);
			e.printStackTrace();
			return false;
		} catch (InterruptedException e) {
		}

		return true;
	}

