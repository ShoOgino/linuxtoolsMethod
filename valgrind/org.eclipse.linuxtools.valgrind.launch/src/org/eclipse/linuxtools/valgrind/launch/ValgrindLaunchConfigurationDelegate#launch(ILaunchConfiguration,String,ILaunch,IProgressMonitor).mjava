	public void launch(ILaunchConfiguration config, String mode,
			ILaunch launch, IProgressMonitor m) throws CoreException {
		if (m == null) {
			m = new NullProgressMonitor();
		}
		SubMonitor monitor = SubMonitor.convert(m, Messages.getString("ValgrindLaunchConfigurationDelegate.Profiling_Local_CCPP_Application"), 10); //$NON-NLS-1$
		// check for cancellation
		if (monitor.isCanceled()) {
			return;
		}

		this.config = config;
		this.launch	= launch;
		try {
			command = new ValgrindCommand(HistoryFile.getInstance().createOutputDir());
			monitor.worked(1);
			IPath exePath = verifyProgramPath(config);

			String[] arguments = getProgramArgumentsArray(config);
			
			// tool that was launched
			toolID = getTool(config);
			// ask tool extension for arguments
			dynamicDelegate = ValgrindLaunchPlugin.getDefault().getToolDelegate(toolID);
			String[] opts = getValgrindArgumentsArray(config);

			// set the default source locator if required
			setDefaultSourceLocator(launch, config);

			File wd = getWorkingDirectory(config);
			if (wd == null) {
				wd = new File(System.getProperty("user.home", ".")); //$NON-NLS-1$ //$NON-NLS-2$
			}
			
			ArrayList<String> cmdLine = new ArrayList<String>(1 + arguments.length);
			cmdLine.add(ValgrindCommand.VALGRIND_CMD);
			cmdLine.addAll(Arrays.asList(opts));
			cmdLine.add(exePath.toOSString());
			cmdLine.addAll(Arrays.asList(arguments));
			String[] commandArray = (String[]) cmdLine.toArray(new String[cmdLine.size()]);
			boolean usePty = config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_USE_TERMINAL, ICDTLaunchConfigurationConstants.USE_TERMINAL_DEFAULT);
			monitor.worked(3);

			// call Valgrind
			command.execute(commandArray, getEnvironment(config), wd, usePty);
			monitor.worked(3);
			process = DebugPlugin.newProcess(launch, command.getProcess(), renderProcessLabel(commandArray[0]));
			
			// create launch summary string to distinguish this launch
			launchStr = createLaunchStr();
			
			// create view
			ValgrindUIPlugin.getDefault().createView(launchStr, toolID);
			
			// pass off control to extender
			dynamicDelegate.launch(command, config, launch, monitor.newChild(3));
			
			// refresh view
			ValgrindUIPlugin.getDefault().refreshView();
			
			// save results of launch to persistent storage
			saveState();
		} catch (IOException e) {
			abort(Messages.getString("ValgrindLaunchConfigurationDelegate.Error_starting_process"), e, ICDTLaunchConfigurationConstants.ERR_INTERNAL_ERROR); //$NON-NLS-1$
		} finally {
			monitor.done();			
		}
	}

