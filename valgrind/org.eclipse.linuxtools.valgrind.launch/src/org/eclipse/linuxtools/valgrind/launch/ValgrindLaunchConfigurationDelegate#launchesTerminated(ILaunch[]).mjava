	public void launchesTerminated(ILaunch[] launches) {
		if (launch != null && Arrays.asList(launches).contains(launch) && process != null) {
			try {
				if (process.getExitValue() == 0) {
					// create launch summary string to distinguish this launch
					launchStr = createLaunchStr();

					// create view
					ValgrindUIPlugin.getDefault().createView(launchStr, toolID);

					// pass off control to extender
					dynamicDelegate.launch(command, config, launch, monitor.newChild(3));

					// refresh view
					ValgrindUIPlugin.getDefault().refreshView();

					// show view
					ValgrindUIPlugin.getDefault().showView();
					
					// save results of launch to persistent storage
					//			saveState(monitor.newChild(2));
				}
				else {
					final String errorMsg = readLogs();
					
					Display.getDefault().syncExec(new Runnable() {
						public void run() {
							IStatus subStatus = new Status(IStatus.ERROR, ValgrindLaunchPlugin.PLUGIN_ID, errorMsg);
							String msg = Messages.getString("ValgrindLaunchConfigurationDelegate.Valgrind_error_msg"); //$NON-NLS-1$
							IStatus status = new MultiStatus(ValgrindLaunchPlugin.PLUGIN_ID, ICDTLaunchConfigurationConstants.ERR_INTERNAL_ERROR, new IStatus[] { subStatus }, msg, null);
							
							ErrorDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), Messages.getString("ValgrindLaunchConfigurationDelegate.Valgrind_error_title"), null, status); //$NON-NLS-1$
						}						
					});				
				}
			} catch (CoreException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			} finally {
				DebugPlugin.getDefault().getLaunchManager().removeLaunchListener(this);
				monitor.done();
			}
		}
	}

