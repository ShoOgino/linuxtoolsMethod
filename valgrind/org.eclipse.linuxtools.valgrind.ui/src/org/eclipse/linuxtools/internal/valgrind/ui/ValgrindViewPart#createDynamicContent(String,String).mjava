    /**
     * Returns a refreshable view specific of a Valgrind tool.
     *
     * @param description     the content description
     * @param toolID          the Valgrind tool identifier
     * @return                the Valgrind tool view
     * @throws CoreException  the toolbar is disposed
     */
    public IValgrindToolView createDynamicContent(String description, String toolID) throws CoreException {
        setContentDescription(description);

        // remove tool specific toolbar controls
        IToolBarManager toolbar = getViewSite().getActionBars().getToolBarManager();
        ToolBar tb = ((ToolBarManager) toolbar).getControl();
        if (tb == null || tb.isDisposed()) {
            throw new CoreException(new Status(IStatus.ERROR, ValgrindUIPlugin.PLUGIN_ID, "Toolbar is disposed")); //$NON-NLS-1$
        }

        if (dynamicActions != null) {
            for (ActionContributionItem item : dynamicActions) {
                toolbar.remove(item);
            }
        }

        // remove old view controls
        if (dynamicView != null) {
            dynamicView.dispose();
        }

        // remove old messages
        if (messages != null){
            messagesViewer.getTreeViewer().setInput(null);
            messages = null;
        }

        for (Control child : dynamicViewHolder.getChildren()) {
            if (!child.isDisposed()) {
                child.dispose();
            }
        }

        if (toolID != null) {
            dynamicView = ValgrindUIPlugin.getDefault().getToolView(toolID);
            dynamicView.createPartControl(dynamicViewHolder);

            // create toolbar items
            IAction[] actions = dynamicView.getToolbarActions();
            if (actions != null) {
                dynamicActions = new ActionContributionItem[actions.length];
                for (int i = 0; i < actions.length; i++) {
                    dynamicActions[i] = new ActionContributionItem(actions[i]);
                    toolbar.appendToGroup(TOOLBAR_LOC_GROUP_ID, dynamicActions[i]);
                }
            }
        } else {
            dynamicView = null;
        }

        // remove old menu items
        IMenuManager menu = getViewSite().getActionBars().getMenuManager();
        menu.removeAll();
        // was content was created?
        hasDynamicContent = dynamicViewHolder.getChildren().length > 0;
        if (hasDynamicContent) {
            menu.add(showCoreAction);
            menu.add(showToolAction);
        }

        menu.update(true);
        toolbar.update(true);
        // Update to notify the workbench items have been changed
        getViewSite().getActionBars().updateActionBars();
        dynamicViewHolder.layout(true);

        return dynamicView;
    }

