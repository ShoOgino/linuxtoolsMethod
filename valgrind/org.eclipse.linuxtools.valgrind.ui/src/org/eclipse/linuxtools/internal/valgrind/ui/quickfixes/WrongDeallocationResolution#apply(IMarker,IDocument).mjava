	@Override
	public void apply(IMarker marker, IDocument document) {
		try {
			IASTNode astNode = getIASTNode(marker, document);
			if(astNode != null) {
				int nodeLength = astNode.getFileLocation().getNodeLength();
				int nodeOffset = astNode.getFileLocation().getNodeOffset();
				String content = document.get(nodeOffset, nodeLength);
				if(content.contains(DELETE)){
					String allocFunction = getAllocFunction(marker, document);
					if(allocFunction.contains(NEW)){
						content = document.get(nodeOffset, nodeLength).replace(DELETE, DELETE + "[]"); //$NON-NLS-1$
						document.replace(nodeOffset, nodeLength, content);
					} else {
						addParentheses(astNode, document);
						if(content.contains("[")){ //$NON-NLS-1$
							removeBrackets(astNode, document);
						}
						content = document.get(nodeOffset, nodeLength).replace(DELETE, FREE);
						document.replace(nodeOffset, nodeLength, content);
					}
				} else if(content.contains(FREE)){
					if(getAllocFunction(marker, document).contains("[")){ //$NON-NLS-1$
						content = content.concat("[]"); //$NON-NLS-1$
					}
					content = content.replace(FREE, DELETE);
					document.replace(nodeOffset, nodeLength, content);
				}

				IValgrindMessage message = getMessage(marker);
				removeMessage(message.getParent());
				ValgrindStackFrame nestedStackFrame = getStackBottom(getNestedStack(message.getParent()));
				int nestedLine = nestedStackFrame.getLine();
				String nestedFile = nestedStackFrame.getFile();
				removeMarker(nestedFile, nestedLine, marker.getType());
				marker.delete();
			}
		} catch (BadLocationException|CoreException e ){
			Status status = new Status(IStatus.ERROR, ValgrindUIPlugin.PLUGIN_ID, null, e);
			String title = Messages.getString("ValgrindMemcheckQuickFixes.Valgrind_error_title"); //$NON-NLS-1$
			String message = Messages.getString("ValgrindMemcheckQuickFixes.Error_applying_quickfix"); //$NON-NLS-1$
			showErrorMessage(title, message, status);
		}
	}

