	public void parse(CachegrindOutput output, File cgOut) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(cgOut));

		String line;
		CachegrindFile curFl = null;
		CachegrindFunction curFn = null;
		while ((line = br.readLine()) != null) {		
			if (line.startsWith(EVENTS + COLON)) {
				String[] tokens = line.split(SPACE);
				output.setEvents(Arrays.copyOfRange(tokens, 1, tokens.length));
			}
			else if (line.startsWith(CMD + COLON)) {
				output.setCommand(parseStrValue(line, COLON + SPACE));
			}
			else if (line.startsWith(DESC + COLON)) {
				CachegrindDescription description = parseDescription(line);
				output.addDescription(description);
			}
			else if (line.startsWith(FL + EQUALS)) {
				curFl = new CachegrindFile(output, parseStrValue(line, EQUALS));
				output.addFile(curFl);
			}
			else if (line.startsWith(FN + EQUALS)) {				
				if (curFl != null) {
					curFn = new CachegrindFunction(curFl, parseStrValue(line, EQUALS));
					curFl.addFunction(curFn);
				}
				else {
					fail(line);
				}
			}
			else if (line.startsWith(SUMMARY + COLON)) {
				String[] tokens = line.split(SPACE);
				long[] summary = parseData(line, Arrays.copyOfRange(tokens, 1, tokens.length));
				output.setSummary(summary);
			}
			else { // line data
				String[] tokens = line.split(SPACE);
				if (isNumber(tokens[0])) {
					int lineNo = Integer.parseInt(tokens[0]);
					long[] data = parseData(line, Arrays.copyOfRange(tokens, 1, tokens.length));
					if (curFn != null) {
						curFn.addLine(new CachegrindLine(curFn, lineNo, data));
					}
					else {
						fail(line);
					}
				}
				else {
					fail(line);
				}
			}
		}
	}

