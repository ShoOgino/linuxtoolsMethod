	/* (non-Javadoc)
	 * @see org.eclipse.jface.text.source.SourceViewerConfiguration#getHyperlinkDetectors(org.eclipse.jface.text.source.ISourceViewer)
	 */
	@Override
	public IHyperlinkDetector[] getHyperlinkDetectors(ISourceViewer sourceViewer) {
		if (sourceViewer == null) {
			return null;
		}
		Map<?, ?> targets = getHyperlinkDetectorTargets(sourceViewer);
		HyperlinkDetectorRegistry hlDetectorRegistry = EditorsUI.getHyperlinkDetectorRegistry();
		HyperlinkDetectorDescriptor[] hlDetectorDescriptor = hlDetectorRegistry.getHyperlinkDetectorDescriptors();
		List<IHyperlinkDetector> tempHDList = new ArrayList<>();

		for (Map.Entry<?, ?> entry : targets.entrySet()) {
			for (HyperlinkDetectorDescriptor hdd : hlDetectorDescriptor) {
				try {
					AbstractHyperlinkDetector ahld = (AbstractHyperlinkDetector) hdd.createHyperlinkDetectorImplementation();
					// filter using target id and not instance of URLHyperlinkDetector
					// so that an option to open url with unresolved macros won't show
					// however, allow URLHyperlinkWithMacroDetector
					if (hdd.getTargetId().equals(entry.getKey()) &&
							(!(ahld instanceof URLHyperlinkDetector) || ahld instanceof URLHyperlinkWithMacroDetector)) {
						ahld.setContext((IAdaptable)entry.getValue());
						tempHDList.add(ahld);
					}
				} catch (CoreException e) {
					SpecfileLog.logError(e);
				}
			}
		}

		if (!tempHDList.isEmpty()) {
			return tempHDList.toArray(new IHyperlinkDetector[tempHDList.size()]);
		} else {
			return null;
		}
	}

