	public Object execute(ExecutionEvent event) throws ExecutionException {
		final Shell shell =  HandlerUtil.getActiveShellChecked(event);
		final SpecfileParser specparser = new SpecfileParser();
		final IResource resource = RPMHandlerUtils.getResource(event);
		final RPMProject rpj = RPMHandlerUtils.getRPMProject(resource);
		final IFile workFile = (IFile) rpj.getSpecFile();
		final Specfile specfile = specparser.parse(workFile);

		// retrieve source(s) from specfile
		final List<SpecfileSource> sourceURLList = specfile != null ? (List<SpecfileSource>) specfile
				.getSources() : null;

		// go through each source, resolve the defines, and then download the file
		// currently stops immediately once an invalid source URL is encountered
		for (final SpecfileSource sourceurls : sourceURLList) {
			try {
				String rawURL = sourceurls.getFileName().toString();
				String resolvedURL = UiUtils.resolveDefines(specfile, rawURL.toString());
				URL url = null;
				try {
					url = new URL(resolvedURL);
				} catch(MalformedURLException e) {
					SpecfileLog.logError(Messages.DownloadSources_malformedURL + resolvedURL, e);
					RPMUtils.showErrorDialog(shell, "Error", //$NON-NLS-1$
							Messages.DownloadSources_malformedURL + resolvedURL);
					return null;
				}

				HttpURLConnection connection = (HttpURLConnection) url.openConnection();

				if (connection.getResponseCode() != HttpURLConnection.HTTP_NOT_FOUND) {
					// grab the name of the file from the URL
					int offset = url.toString().lastIndexOf("/"); //$NON-NLS-1$
					String filename = url.toString().substring(offset + 1);

					// create the path to the "to be downloaded" file
					IFile file = rpj.getConfiguration().getSourcesFolder().getFile(new Path(filename));

					Job downloadJob = new DownloadJob(file, connection);
					downloadJob.setUser(true);
					downloadJob.schedule();
				}
			} catch (IOException e) {
				SpecfileLog.logError(Messages.DownloadSources_cannotConnectToURL, e);
				RPMUtils.showErrorDialog(shell, "Error", //$NON-NLS-1$
						Messages.DownloadSources_cannotConnectToURL);
				return null;
			}
		}

		return null;
	}

