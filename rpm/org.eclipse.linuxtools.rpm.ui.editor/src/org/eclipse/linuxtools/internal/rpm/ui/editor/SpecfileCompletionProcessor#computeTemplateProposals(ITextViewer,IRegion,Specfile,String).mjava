	/**
	 * Compute the templates proposals, these proposals are contextual on sections.
	 * Return an array of template proposals for the given viewer, region, specfile,
	 * prefix.
	 *
	 * @param viewer   the viewer for which the context is created
	 * @param region   the region into <code>document</code> for which the context
	 *                 is created
	 * @param specfile the specfile element
	 * @param prefix   the prefix string
	 * @return a ICompletionProposal[]
	 */
	private List<? extends ICompletionProposal> computeTemplateProposals(ITextViewer viewer, IRegion region,
			Specfile specfile, String prefix) {
		TemplateContext context = createContext(viewer, region, specfile);
		List<TemplateProposal> matches = new ArrayList<>();
		if (context == null) {
			return matches;
		}
		String id = context.getContextType().getId();
		Template[] templates = Activator.getDefault().getTemplateStore().getTemplates(id);
		for (Template template : templates) {
			try {
				context.getContextType().validate(template.getPattern());
			} catch (TemplateException e) {
				continue;
			}
			int relevance = getRelevance(template, prefix);
			if (relevance > 0) {
				matches.add(new TemplateProposal(template, context, region,
						Activator.getDefault().getImage(TEMPLATE_ICON), relevance));
			}
		}
		Collections.sort(matches, (t1, t2) -> (t2.getRelevance() - t1.getRelevance()));
		return matches;
	}

