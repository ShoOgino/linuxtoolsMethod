	@Override
	public String mergeChangelog(String dateLine, String functionGuess,
			String defaultContent, IEditorPart changelog,
			String changeLogLocation, String fileLocation) {
		if (changelog instanceof SpecfileEditor) {
            SpecfileEditor specEditor = (SpecfileEditor) changelog;
            IDocument doc = specEditor.getDocumentProvider().getDocument(
                    specEditor.getEditorInput());
            String[] positionCategories = doc.getPositionCategories();
            String contentTypesPositionCategory = null;

            // there is some random number suffix to the category positions,
            // we need to find the one we want
            for (String positionCategory: positionCategories) {
                if (positionCategory.startsWith("__content_types_category")) {//$NON-NLS-1$
                    contentTypesPositionCategory = positionCategory;
                }
            }

            if (contentTypesPositionCategory != null) {
                try {
                    Position[] sectionPositions = doc
                            .getPositions(contentTypesPositionCategory);
                    ITypedRegion changelogPartition = null;
                    for (Position position: sectionPositions) {
                        int offset = position.getOffset();

                        ITypedRegion partition = doc.getPartition(offset);
                        if (partition.getType().equals(
                                SpecfilePartitionScanner.SPEC_CHANGELOG)) {
                            changelogPartition = partition;
                        }

                    }
                    // Temporary buffer for changelog text
                    StringBuilder buf = new StringBuilder();
                    String changelogText = EMPTY_STRING;
                    String[] changelogLines = new String[] {};
                    int offset = doc.getLength();
                    int length = 0;

                    // there was no changelog partition add it.
                    if (changelogPartition == null) {

                        // make sure there are at least 2 newlines before
                        // the changelog section
                        String endString = doc.get(doc.getLength() - 2, 2);
                        if (endString.charAt(0) != '\n') {
                            buf.append('\n');
                        }
                        if (endString.charAt(1) != '\n') {
                            buf.append('\n');
                        }

                        buf.append("%changelog\n"); //$NON-NLS-1$

                    // or get the old text and add the header
                    } else {
                        offset = changelogPartition.getOffset();
                        length = changelogPartition.getLength();
                        changelogText = doc.get(offset, length);

                        // get old changelog text
                        changelogLines = changelogText.split("\n"); //$NON-NLS-1$
                        // add the %changelog header
                        buf.append(changelogLines[0]).append('\n');
                    }

                    // now add the entry stub
                    buf.append(dateLine);
                    buf.append('\n');
                    buf.append("- \n"); //$NON-NLS-1$

                    // set the cursor at the end of the entry,
                    // count back 2 '\n's
                    int newCursorOffset = offset + buf.length() - 1;
                    for (int i = 1; i < changelogLines.length; i++) {
                        buf.append('\n').append(changelogLines[i]);
                    }

                    // always terminate the file with a new line
                    if (changelogLines.length > 0) {
                        buf.append('\n');
                    }

                    doc.replace(offset, length, buf.toString());

                    specEditor.selectAndReveal(newCursorOffset, 0);
                    specEditor.setFocus();
                } catch (BadPositionCategoryException e) {
        			SpecfileLog.logError(e);
                } catch (BadLocationException e) {
        			SpecfileLog.logError(e);
                }
            }
        }
        return EMPTY_STRING;
	}

