	@Override
	protected IStatus run(IProgressMonitor monitor) {
		String rpmListCmd = STORE.getString(PreferenceConstants.P_CURRENT_RPMTOOLS);
		String rpmListFilepath = STORE.getString(PreferenceConstants.P_RPM_LIST_FILEPATH);
		Path bkupFile = Paths.get(rpmListFilepath + ".bkup"); //$NON-NLS-1$
		try {
			monitor.beginTask(Messages.RpmPackageBuildProposalsJob_1, IProgressMonitor.UNKNOWN);
			if (Files.exists(Paths.get("/bin/sh"))) { //$NON-NLS-1$
				BufferedProcessInputStream in = Utils.runCommandToInputStream("/bin/sh", "-c", rpmListCmd); //$NON-NLS-1$ //$NON-NLS-2$
				// backup pkg list file
				Path rpmListFile = Paths.get(rpmListFilepath);
				if (Files.exists(rpmListFile)) {
					Files.copy(Paths.get(rpmListFilepath), bkupFile);
				}

				try (BufferedWriter out = Files.newBufferedWriter(rpmListFile);
						BufferedReader reader = new BufferedReader(new InputStreamReader(in))) {
					monitor.subTask(Messages.RpmPackageBuildProposalsJob_2 + rpmListCmd
							+ Messages.RpmPackageBuildProposalsJob_3);
					String line;
					while ((line = reader.readLine()) != null) {
						monitor.subTask(line);
						out.write(line + "\n"); //$NON-NLS-1$
						if (monitor.isCanceled()) {
							in.destroyProcess();
							in.close();
							out.close();
							// restore backup
							if (Files.exists(rpmListFile) && Files.exists(bkupFile)) {
								Files.copy(bkupFile, Paths.get(rpmListFilepath));
								Files.delete(bkupFile);
							}
							Activator.packagesList = new RpmPackageProposalsList();
							return Status.CANCEL_STATUS;
						}
					}
					in.close();
					out.close();
					Files.deleteIfExists(bkupFile);
					int processExitValue = 0;
					try {
						processExitValue = in.getExitValue();
					} catch (InterruptedException e) {
						return Status.CANCEL_STATUS;
					}
					if (processExitValue != 0) {
						SpecfileLog.log(IStatus.WARNING, processExitValue,
								NLS.bind(Messages.RpmPackageBuildProposalsJob_NonZeroReturn, processExitValue), null);
					}
				}
			}
		} catch (IOException e) {
			SpecfileLog.logError(e);
			return Status.CANCEL_STATUS;
		} finally {
			monitor.done();
		}
		// Update package list
		Activator.packagesList = new RpmPackageProposalsList();
		return Status.OK_STATUS;
	}

