	/**
	 * Compute RPM macro proposals, these proposals are usable in the whole
	 * document. Return an array of RPM macro proposals for the given viewer,
	 * region, prefix.
	 *
	 * @param viewer the viewer for which the context is created
	 * @param region the region into <code>document</code> for which the context is
	 *               created
	 * @param prefix the prefix string to find
	 * @return a ICompletionProposal[]
	 */
	private List<ICompletionProposal> computeRpmMacroProposals(IRegion region, Specfile specfile, String prefix) {
		Map<String, String> rpmMacroProposalsMap = Activator.getDefault().getRpmMacroList().getProposals(prefix);

		// grab defines and put them into the proposals map
		rpmMacroProposalsMap.putAll(getDefines(specfile, prefix));

		ArrayList<ICompletionProposal> proposals = new ArrayList<>();
		if (rpmMacroProposalsMap != null) {
			for (Map.Entry<String, String> entry : rpmMacroProposalsMap.entrySet()) {
				proposals.add(new SpecCompletionProposal(
						ISpecfileSpecialSymbols.MACRO_START_LONG + entry.getKey().substring(1)
								+ ISpecfileSpecialSymbols.MACRO_END_LONG,
						region.getOffset(), region.getLength(), entry.getKey().length() + 2,
						Activator.getDefault().getImage(MACRO_ICON), entry.getKey(), null, entry.getValue()));
			}
		}
		return proposals;
	}

