	/**
	 * Compute RPM package proposals, these proposals are usable only in the
	 * preambule section. Return an array of RPM macro proposals for the given
	 * viewer, region, specfile, prefix.
	 *
	 * @param viewer
	 *            the viewer for which the context is created
	 * @param region
	 *            the region into <code>document</code> for which the context is
	 *            created
	 * @param prefix
	 *            the prefix string
	 * @return a ICompletionProposal[]
	 */
	private List<ICompletionProposal> computeRpmPackageProposals(IRegion region, String prefix) {
		List<String[]> rpmPkgProposalsList = Activator.getDefault().getRpmPackageList().getProposals(prefix);
		ArrayList<ICompletionProposal> proposals = new ArrayList<>();
		if (rpmPkgProposalsList != null) {
			for (String[] item : rpmPkgProposalsList) {
				proposals.add(new CompletionProposal(item[0], region.getOffset(), region.getLength(), item[0].length(),
						Activator.getDefault().getImage(PACKAGE_ICON), item[0], null, item[1]));
			}
		}

		Collections.sort(proposals, (a, b) -> a.getDisplayString().compareToIgnoreCase(b.getDisplayString()));
		return proposals;
	}

