	private SpecfileElement parseSection(String lineText, Specfile specfile, int lineNumber) {
		List<String> tokens = Arrays.asList(lineText.split("\\s+"));
		SpecfileSection toReturn = null;
		boolean isSimpleSection = false;
		for (Iterator<String> iter = tokens.iterator(); iter.hasNext();) {
			String token = iter.next();

			// Sections
			// Simple Section Headers
			for (String simpleSection : simpleSections) {
				if (token.equals(simpleSection)) {
					toReturn = new SpecfileSection(token.substring(1), specfile);
					specfile.addSection(toReturn);
					isSimpleSection = true;
				}

			}

			// Complex Section Headers
			for (String complexSection : complexSections) {
				if (token.equals(complexSection)) {
					String name = token.substring(1);
					if (!name.equals("package")) {
						toReturn = new SpecfileSection(name, specfile);
						specfile.addComplexSection(toReturn);
					}
					while (iter.hasNext()) {
						String nextToken = iter.next();
						if (nextToken.equals("-n")) {
							if (!iter.hasNext()) {
								errorHandler
										.handleError(new SpecfileParseException(
												"No package name after -n in "
														+ name + " section.",
												lineNumber, 0, lineText
														.length(),
												IMarker.SEVERITY_ERROR));
								continue;
							}

							nextToken = iter.next();
							if (nextToken.startsWith("-")) {
								errorHandler
										.handleError(new SpecfileParseException(
												"Package name must not start with '-': "
														+ nextToken + ".",
												lineNumber, 0, lineText
														.length(),
												IMarker.SEVERITY_ERROR));
							}

						} else if (nextToken.equals("-p")) {
							// FIXME: rest of line is the actual section
							break;
						} else if (nextToken.equals("-f")) {
							break;
						}

						// this is a package
						if (toReturn == null) {
							toReturn = specfile.getPackage(nextToken);

							if (toReturn == null) {
								toReturn = new SpecfilePackage(nextToken,
										specfile);
								specfile.addPackage((SpecfilePackage) toReturn);
							}
							return toReturn;
						}

						// this is another section
						SpecfilePackage enclosingPackage = specfile
								.getPackage(nextToken);
						if (enclosingPackage == null) {
							enclosingPackage = new SpecfilePackage(nextToken,
									specfile);
							specfile.addPackage(enclosingPackage);
						}
						toReturn.setPackage(enclosingPackage);
						enclosingPackage.addSection(toReturn);
					}
				}
			}
		}

                // if this package is part of the top level package, add it to
				// it
                if (toReturn != null && toReturn.getPackage() == null){
                    SpecfilePackage topPackage = specfile.getPackage(specfile.getName());
                    if (topPackage == null){
                        topPackage = new SpecfilePackage(specfile.getName(), specfile);
                        specfile.addPackage(topPackage);
                    }
                    if (!isSimpleSection){
                    topPackage.addSection(toReturn);
                    }
                }
                
		return toReturn;
	}

