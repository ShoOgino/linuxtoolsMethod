	private SpecfileElement parseComplexDefinition(String lineText, Specfile specfile, int lineNumber, SourceType sourceType) {
		SpecfileSource toReturn = null;
		List<String> tokens = Arrays.asList(lineText.split("\\s+"));
		int number = -1;
		boolean firstToken = true;

		for (Iterator<String> iter = tokens.iterator(); iter.hasNext();) {
			String token = iter.next();
			if (token != null && token.length() > 0) {
				if (firstToken) {
					if (token.endsWith(":")) {
						token = token.substring(0, token.length() - 1);
					} else {
						// FIXME:  come up with a better error message here
						// FIXME:  what about descriptions that begin a line with the word "Source" or "Patch"?
						errorHandler
						.handleError(new SpecfileParseException(
								"If this is a Source or Patch directive, it must end with a colon.",
								lineNumber, 0, lineText.length(),
								IMarker.SEVERITY_WARNING));
						return null;
					}
					if (sourceType == SourceType.PATCH) {
						if (token.length() > 5) {
							number = Integer.parseInt(token.substring(5));
							if (!("patch" + number).equalsIgnoreCase(token)) {
								errorHandler
								.handleError(new SpecfileParseException(
										"Invalid patch directive.",
										lineNumber, 0, lineText.length(),
										IMarker.SEVERITY_ERROR));
								return null;
							}
						} else {
							number = 0;
						}
					} else {
						if (token.length() > 6) {
							number = Integer.parseInt(token.substring(6));
							if (!("source" + number).equalsIgnoreCase(token)) {
								errorHandler
								.handleError(new SpecfileParseException(
										"Invalid source directive.",
										lineNumber, 0, lineText.length(),
										IMarker.SEVERITY_ERROR));
								return null;
							}
						} else {
							number = 0;
						}
					}
					toReturn = new SpecfileSource(number, "");
					toReturn.setSourceType(sourceType);
					firstToken = false;
				} else {
					// toReturn should never be null but check just in case
					if (toReturn != null)
						toReturn.setFileName(token);
					if (iter.hasNext()) {
						errorHandler.handleError(new SpecfileParseException(
								"Filename cannot be multiple words.",
								lineNumber, 0, lineText.length(),
								IMarker.SEVERITY_ERROR));
					}
				}
			}
		}
		
		return toReturn;
	}

