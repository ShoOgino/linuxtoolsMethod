	/**
	 * Selects the tuples to display from the given list. Subclasses may
	 * replace.
	 * <p>
	 * The default behavior is to return the tuples whose positions most
	 * precisely match the <code>hoverRegion</code>.
	 * </p>
	 * 
	 * @param tuples the list of <code>Tuple</code>
	 * @param hoverRegion the region of interest
	 * @return the list of <code>Tuple</code>s to display
	 */
	protected List select(List tuples, IRegion hoverRegion) {
		if (tuples.isEmpty())
			return tuples;
		
		float max_relevance= Float.MIN_VALUE;
		List selected= new ArrayList();
		for (Iterator it= tuples.iterator(); it.hasNext();) {
			Tuple tuple= (Tuple) it.next();
			float relevance= computeRelevance(tuple.position, hoverRegion);
			if (relevance > max_relevance) {
				max_relevance= relevance;
				selected.clear();
				selected.add(tuple);
			} else if (relevance == max_relevance) {
				selected.add(tuple);
			}
		}
		
		return selected;
	}

