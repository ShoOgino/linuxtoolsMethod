	private SpecfileDefine parseDefine(String lineText, Specfile specfile,
			int lineNumber) {
		List<String> tokens = Arrays.asList(lineText.split(SPACE_REGEX));
		SpecfileDefine toReturn = null;
		for (Iterator<String> iter = tokens.iterator(); iter.hasNext();) {
			// Eat the actual "%define" or "%global" token
			iter.next();
			while (iter.hasNext()) {
				String defineName = iter.next();
				// FIXME: is this true? investigate in rpmbuild source
				// Definitions must being with a letter
				if (!Character.isLetter(defineName.charAt(0))
						&& (defineName.charAt(0) != '_')) {
					errorHandler.handleError(new SpecfileParseException(
							Messages.getString("SpecfileParser.6"), //$NON-NLS-1$
							lineNumber, 0, lineText.length(),
							IMarker.SEVERITY_ERROR));
					return null;
				} else {
					if (iter.hasNext()) {
						String defineStringValue = iter.next();
						// Defines that are more than one token
						if (iter.hasNext()) {
							defineStringValue = lineText.substring(lineText
									.indexOf(defineStringValue));
							// Eat up the rest of the tokens
							while (iter.hasNext())
								iter.next();
						}
						int defineIntValue = -1;
						try {
							defineIntValue = Integer
									.parseInt(defineStringValue);
						} catch (NumberFormatException e) {
							toReturn = new SpecfileDefine(defineName,
									defineStringValue, specfile, null);
						}
						if (toReturn == null)
							toReturn = new SpecfileDefine(defineName,
									defineIntValue, specfile, null);
					}
				}
			}
		}
		return toReturn;
	}

