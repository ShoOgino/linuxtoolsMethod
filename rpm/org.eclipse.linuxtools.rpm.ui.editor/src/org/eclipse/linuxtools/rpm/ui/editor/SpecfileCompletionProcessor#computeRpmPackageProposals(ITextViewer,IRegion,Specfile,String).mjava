	/**
	 * Compute RPM package proposals, these proposals are usable only in the preambule section.
	 * Return an array of RPM macro proposals for the given viewer, region, specfile, prefix.
	 * 
	 * @param viewer
	 *            the viewer for which the context is created
	 * @param region
	 *            the region into <code>document</code> for which the context
	 *            is created
	 * @param specfile
	 * 			  the specfile element
	 * @param prefix
	 * 			  the prefix string
	 * @return 
	 *            a ICompletionProposal[]
	 */
	private ICompletionProposal[] computeRpmPackageProposals(ITextViewer viewer,
			IRegion region, Specfile specfile, String prefix) {
		List rpmPkgProposalsList = Activator.getDefault().getRpmPackageList().getProposals(prefix);
		SpecfileElement[] elements = specfile.getSectionsElements();
		// Show rpm packages proposals only in the preamble section 
		if (elements.length == 0 || region.getOffset() < elements[0].getLineEndPosition()) {
			if (rpmPkgProposalsList == null)
				return new ICompletionProposal[0];
			ArrayList proposals = new ArrayList();
			String[] item;
			Iterator iterator = rpmPkgProposalsList.iterator();
			while (iterator.hasNext()) {
				item = (String[]) iterator.next();
				proposals.add(new CompletionProposal(item[0], 
								region.getOffset(), region.getLength(),
								item[0].length(), getImage(PACKAGE_ICON),
								item[0], null, item[1]));
			}
			return (ICompletionProposal[]) proposals.toArray(new ICompletionProposal[proposals.size()]);
		} else {
			return new ICompletionProposal[0];	
		}
	}

