	/**
	 * Retrieve the package list
	 * 
	 * @param monitor
	 *            to update
	 * @return a <code>IStatus</code>
	 */
	private IStatus retrievePackageList(IProgressMonitor monitor) {
		String rpmListCmd = Activator.getDefault().getPreferenceStore()
				.getString(PreferenceConstants.P_CURRENT_RPMTOOLS);
		String rpmListFilepath = Activator.getDefault().getPreferenceStore()
				.getString(PreferenceConstants.P_RPM_LIST_FILEPATH);
		File bkupFile = new File(rpmListFilepath + ".bkup"); //$NON-NLS-1$
		try {
			String[] cmd = new String[] { "/bin/sh", "-c", rpmListCmd }; //$NON-NLS-1$ //$NON-NLS-2$
			monitor.beginTask(Messages.RpmPackageBuildProposalsJob_1,
					IProgressMonitor.UNKNOWN);
			Process child = new ProcessBuilder(cmd).start();
			InputStream in = child.getInputStream();
			// backup pkg list file
			File rpmListFile = new File(rpmListFilepath);
			if (rpmListFile.exists())
				Utils.copyFile(new File(rpmListFilepath), bkupFile);
						
			BufferedWriter out = new BufferedWriter(new FileWriter(
					rpmListFile, false));
			BufferedReader reader = new BufferedReader(
					new InputStreamReader(in));
			monitor.subTask(Messages.RpmPackageBuildProposalsJob_2 + rpmListCmd
					+ Messages.RpmPackageBuildProposalsJob_3);
			String line;
			while ((line = reader.readLine()) != null) {
				monitor.subTask(line);
				out.write(line + "\n"); //$NON-NLS-1$
				if (monitor.isCanceled()) {
					in.close();
					out.close();
					// restore backup
					if (rpmListFile.exists() && bkupFile.exists()) {
						Utils.copyFile(bkupFile, rpmListFile);
						bkupFile.delete();
					}
					Activator.packagesList = new RpmPackageProposalsList();
					return Status.CANCEL_STATUS;
				}
			}
			in.close();
			out.close();
			bkupFile.delete();
		} catch (IOException e) {
			SpecfileLog.logError(e);
			return null;
		} finally {
			monitor.done();
		}
		// Update package list
		Activator.packagesList = new RpmPackageProposalsList();
		return Status.OK_STATUS;
	}

