	/**
	 * Compute RPM macro proposals, these proposals are usable in the whole document.
	 * Return an array of RPM macro proposals for the given viewer, region, prefix.
	 * 
	 * @param viewer
	 *            the viewer for which the context is created
	 * @param region
	 *            the region into <code>document</code> for which the context
	 *            is created
	 * @param prefix
	 * 			  the prefix string to find
	 * @return 
	 *            a ICompletionProposal[]
	 */
	private ICompletionProposal[] computeRpmMacroProposals(ITextViewer viewer,
			IRegion region, String prefix) {
		Map rpmMacroProposalsMap = Activator.getDefault().getRpmMacroList().getProposals(prefix);
		if (rpmMacroProposalsMap == null)
			return new ICompletionProposal[0];
		ArrayList proposals = new ArrayList();
		String key;
		Iterator iterator = rpmMacroProposalsMap.keySet().iterator();
		while (iterator.hasNext()) {
			key = (String) iterator.next();
			proposals.add(new CompletionProposal("%{" + key.substring(1) + "}", 
							region.getOffset(), region.getLength(),
							key.length() + 2, Activator.getDefault().getImage(MACRO_ICON),
							key, null, (String) rpmMacroProposalsMap.get(key)));
		}
		return (ICompletionProposal[]) proposals
				.toArray(new ICompletionProposal[proposals.size()]);
	}

