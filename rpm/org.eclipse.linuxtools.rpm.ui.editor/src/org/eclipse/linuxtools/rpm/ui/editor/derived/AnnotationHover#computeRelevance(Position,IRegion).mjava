	/**
	 * Computes the relevance of <code>position</code> with respect to the
	 * <code>hoverRegion</code>. The relevance is computed from two
	 * properties dependent on the <em>intersection</em> of
	 * <code>position</code> and <code>hoverRegion</code>:
	 * <ul>
	 * <li><strong>precision</strong> - the quotient of the
	 * <em>intersection</em> length and the <code>position</code> length</li>
	 * <li><strong>recall</strong> - the quotient of the <em>intersection</em>
	 * length and the <code>hoverRegion</code> length</li>
	 * </ul>
	 * <em>Precision</em> is considered more important than <em>recall</em>.
	 * 
	 * @param position the position
	 * @param hoverRegion the hoverRegion
	 * @return the relevance of <code>position</code> with respect to
	 *         <code>hoverRegion</code>
	 */
	private float computeRelevance(Position position, IRegion hoverRegion) {
		float intersectionLength= intersectionLength(position, hoverRegion);
		float positionLength= position.getLength();
		float sign= intersectionLength < 0 ? -1f : 1f;
		float precision= positionLength == 0 ? 1f * sign : intersectionLength / positionLength;
		float hoverRegionLength= hoverRegion.getLength();
		float recall= hoverRegionLength == 0 ? 1f * sign : intersectionLength / hoverRegionLength;
		
		float relevance= precision * 1000f + recall;
		return relevance;
	}

