	private SpecfileElement parseSimpleDefinition(String lineText,
			Specfile specfile, int lineNumber, boolean warnMultipleValues) {
		List<String> tokens = Arrays.asList(lineText.split(SPACE_REGEX));
		SpecfileTag toReturn = null;

		for (Iterator<String> iter = tokens.iterator(); iter.hasNext();) {
			String token = iter.next();

			if (token.length() <= 0) {
				break;
			}

			if (iter.hasNext()) {
				String possValue = iter.next();
				if (possValue.startsWith("%") && iter.hasNext()) { //$NON-NLS-1$
					possValue += ' ' + iter.next();
				}
				toReturn = new SpecfileTag(token.substring(0,
						token.length() - 1).toLowerCase(), possValue, specfile, null);
				if (iter.hasNext() && !warnMultipleValues) {
					errorHandler.handleError(new SpecfileParseException(
							token.substring(0, token.length() - 1)
									+ Messages.getString("SpecfileParser.13"), //$NON-NLS-1$
							lineNumber, 0, lineText.length(),
							IMarker.SEVERITY_ERROR));
					return null;
				}
			} else {
				errorHandler.handleError(new SpecfileParseException(token
						.substring(0, token.length() - 1)
						+ Messages.getString("SpecfileParser.14"), lineNumber, //$NON-NLS-1$
						0, lineText.length(), IMarker.SEVERITY_ERROR));
				toReturn = null;
			}
		}
		if ((toReturn != null) && (toReturn.getStringValue() != null)) {
			try {
				int intValue = Integer.parseInt(toReturn.getStringValue());
				toReturn.setValue(intValue);
			} catch (NumberFormatException e) {
				if (toReturn.getName().equalsIgnoreCase(RpmTags.EPOCH)) {
					errorHandler
							.handleError(new SpecfileParseException(
									Messages.getString("SpecfileParser.16"), lineNumber, //$NON-NLS-1$
									0, lineText.length(),
									IMarker.SEVERITY_ERROR));
					toReturn = null;
				}
			}
		}
		return toReturn;
	}

