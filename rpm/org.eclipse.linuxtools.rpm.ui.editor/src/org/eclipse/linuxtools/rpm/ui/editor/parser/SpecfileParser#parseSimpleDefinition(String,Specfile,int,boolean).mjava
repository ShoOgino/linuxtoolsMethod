	private SpecfileElement parseSimpleDefinition(String lineText, Specfile specfile, int lineNumber, boolean warnMultipleValues) {
		List<String> tokens = Arrays.asList(lineText.split("\\s+")); //$NON-NLS-1$
		SpecfileTag toReturn = null;
		
		for (Iterator<String> iter = tokens.iterator(); iter.hasNext();) {
			String token = iter.next();

			if (token.length() <= 0) {
				break;
			}
			
			if (iter.hasNext()) {
				String possValue = iter.next();
				if (possValue.startsWith("%") && iter.hasNext()){ //$NON-NLS-1$
					possValue += ' '+iter.next();
				}
				toReturn = new SpecfileTag(token.substring(0, token.length() - 1).toLowerCase(),
						possValue, specfile);
				if (iter.hasNext() && !warnMultipleValues) {
					errorHandler.handleError(new SpecfileParseException(
							token.substring(0, token.length() - 1) + " cannot have multiple values.",
							lineNumber, 0, lineText.length(),
							IMarker.SEVERITY_ERROR));
					return null;
				}
				// FIXME:  investigate whether we should keep this or not
//				} else {
//					errorHandler.handleError(new SpecfileParseException(
//							token.substring(0, token.length() - 1) + " should be an acronym.",
//							lineNumber, 0, lineText.length(),
//							IMarker.SEVERITY_WARNING));
//				}
			} else {
				errorHandler.handleError(new SpecfileParseException(
						token.substring(0, token.length() - 1) + " declaration without value.", lineNumber,
						0, lineText.length(), IMarker.SEVERITY_ERROR));
				toReturn = null;
			}
		}
		if ((toReturn != null) && (toReturn.getStringValue() != null)) {
			if (toReturn.getStringValue().indexOf("_") > 0) { //$NON-NLS-1$
				if (toReturn.getName().equalsIgnoreCase("release")) //$NON-NLS-1$
					errorHandler.handleError(new SpecfileParseException(
							"Release should not contain an underscore.", lineNumber,
							0, lineText.length(), IMarker.SEVERITY_WARNING));
			}
			try {
				int intValue = Integer.parseInt(toReturn.getStringValue());
				toReturn.setIntValue(intValue);
				toReturn.setStringValue(null);
				toReturn.setTagType(SpecfileTag.TagType.INT);
			} catch (NumberFormatException e) {
				if (toReturn.getName().equals("epoch")) { //$NON-NLS-1$
					errorHandler.handleError(new SpecfileParseException(
							"Epoch cannot have non-integer value.", lineNumber,
							0, lineText.length(), IMarker.SEVERITY_ERROR));
					toReturn = null;
				}
			}
		}
		return toReturn;
	}

