	/**
	 * Compute the templates proposals, these proposals are contextual on sections.
	 * Return an array of template proposals for the given viewer, region, specfile, prefix.
	 * 
	 * @param viewer
	 *            the viewer for which the context is created
	 * @param region
	 *            the region into <code>document</code> for which the context
	 *            is created
	 * @param specfile
	 * 			  the specfile element
	 * @param prefix
	 * 			  the prefix string
	 * @return 
	 *            a ICompletionProposal[]
	 */
	private ICompletionProposal[] computeTemplateProposals(ITextViewer viewer,
			IRegion region, Specfile specfile, String prefix) {
		TemplateContext context = createContext(viewer, region, specfile);
		if (context == null) {
			return new ICompletionProposal[0];
		}
		ITextSelection selection = (ITextSelection) viewer
				.getSelectionProvider().getSelection();
		context.setVariable("selection", selection.getText());
		String id = context.getContextType().getId();
		Template[] templates = Activator.getDefault().getTemplateStore()
				.getTemplates(id);
		List matches = new ArrayList();
		for (int i = 0; i < templates.length; i++) {
			Template template = templates[i];
			try {
				context.getContextType().validate(template.getPattern());
			} catch (TemplateException e) {
				continue;
			}
			int relevance = getRelevance(template, prefix);
			if (relevance > 0) {
				matches.add(new TemplateProposal(template, context, region,
						getImage(TEMPLATE_ICON), relevance));
			}
		}
		Collections.sort(matches, proposalComparator);
		return (ICompletionProposal[]) matches
				.toArray(new ICompletionProposal[matches.size()]);
	}

