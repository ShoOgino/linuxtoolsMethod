	/**
	 * Test if importing RPMs from external source successfully saves into
	 * the "content" folder.
	 *
	 * @throws CoreException
	 * @throws IOException
	 */
	@Test
	public void testImportRPM() throws CoreException, IOException {
		CreaterepoProject createrepoProject = new CreaterepoProject(project);

		// test for file
		URL rpmURL = FileLocator.find(FrameworkUtil
				.getBundle(CreaterepoProjectTest.class), new Path(TEST_RPM_LOC1), null);
		File rpmFile = new File(FileLocator.toFileURL(rpmURL).getPath());
		createrepoProject.importRPM(rpmFile);
		assertTrue(createrepoProject.getContentFolder() != null);
		assertTrue(createrepoProject.getContentFolder().exists());
		assertEquals(1, createrepoProject.getContentFolder().members().length);
		assertTrue(createrepoProject.getContentFolder().findMember(TEST_RPM1).exists());

		// test for duplicate file
		rpmURL = FileLocator.find(FrameworkUtil
				.getBundle(CreaterepoProjectTest.class), new Path(TEST_RPM_LOC1), null);
		rpmFile = new File(FileLocator.toFileURL(rpmURL).getPath());
		createrepoProject.importRPM(rpmFile);
		assertEquals(1, createrepoProject.getContentFolder().members().length);
		assertTrue(createrepoProject.getContentFolder().findMember(TEST_RPM1).exists());

		// test for new file
		rpmURL = FileLocator.find(FrameworkUtil
				.getBundle(CreaterepoProjectTest.class), new Path(TEST_RPM_LOC2), null);
		rpmFile = new File(FileLocator.toFileURL(rpmURL).getPath());
		createrepoProject.importRPM(rpmFile);
		assertEquals(2, createrepoProject.getContentFolder().members().length);
		assertTrue(createrepoProject.getContentFolder().findMember(TEST_RPM2).exists());
	}

