	/**
	 * 
	 * Operations for actually running rpmbuild binary
	 * 
	 * @param specFile
	 *            The specfile used by rpmbuild
	 * @param outStream
	 *            The stream to write the output to.
	 * @param buildParameter
	 *            rpmbuild parameters
	 * @return The return code of the build job.
	 * @throws CoreException
	 *             if the operation fails
	 * @since 0.4
	 */
	public IStatus build(IResource specFile, OutputStream outStream,
			String buildParameter) throws CoreException {
		List<String> command = new ArrayList<String>();
		IRemoteProxyManager rmtProxyMgr;
		IRemoteCommandLauncher rmtCmdLauncher = null;
		command.addAll(macroDefines);
		command.add(buildParameter);
		if (specFile.getLocation() == null) {
			command.remove(0);
			rmtProxyMgr = RemoteProxyManager.getInstance();
			try {
				rmtCmdLauncher = rmtProxyMgr.getLauncher(new URI(mainFolder));
			} catch (URISyntaxException e1) {
				throw new CoreException(new Status(IStatus.ERROR,
						IRPMConstants.RPM_CORE_ID, e1.getMessage(), e1));
			}
			command.add(specFile.getLocationURI().getPath());
			String empty[] = new String[0];
			Process pProxy = rmtCmdLauncher.execute(
					Path.fromOSString(rpmBuildCmd),
					command.toArray(new String[command.size()]), empty, null,
					new NullProgressMonitor());
			MessageConsole console = new MessageConsole("rpmbuild", null); //$NON-NLS-1$
			console.activate();
			ConsolePlugin.getDefault().getConsoleManager()
					.addConsoles(new IConsole[] { console });
			MessageConsoleStream stream = console.newMessageStream();

			if (pProxy != null) {
				BufferedReader error = new BufferedReader(
						new InputStreamReader(pProxy.getErrorStream()));
				String err;
				try {
					err = error.readLine();
					while (err != null) {
						stream.println(err);
						err = error.readLine();
					}
					error.close();
					BufferedReader reader = new BufferedReader(
							new InputStreamReader(pProxy.getInputStream()));
					String readLine = reader.readLine();
					while (readLine != null) {
						stream.println(readLine);
						readLine = reader.readLine();
					}
					reader.close();
				} catch (IOException e) {
					throw new CoreException(new Status(IStatus.ERROR,
							IRPMConstants.RPM_CORE_ID, e.getMessage(), e));
				}
			}
			return Status.OK_STATUS;

		} else {
			command.add(specFile.getLocation().toString());
			try {
				return Utils.runCommand(outStream,
						command.toArray(new String[command.size()]));
			} catch (IOException e) {
				throw new CoreException(new Status(IStatus.ERROR,
						IRPMConstants.RPM_CORE_ID, e.getMessage(), e));
			}
		}
	}

