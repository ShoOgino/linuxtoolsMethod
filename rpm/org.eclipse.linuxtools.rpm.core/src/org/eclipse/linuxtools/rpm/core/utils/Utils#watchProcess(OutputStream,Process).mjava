    /**
     * Watches the streams of the given running process. Note that the process can
     * be terminated at any time by interrupting the thread this method runs in.
     *
     * @param outStream
     *            The stream to write the output to.
     * @param child
     *            The process to watch the output of.
     * @return An IStatus indicating the result of the command.
     * @since 2.2
     */
    public static IStatus watchProcess(final OutputStream outStream, Process child) {
        final BufferedInputStream in = new BufferedInputStream(
                new SequenceInputStream(child.getInputStream(),
                        child.getErrorStream()));

        Thread readinJob = new Thread(() -> {
		    try {
		        int i;
		        while ((i = in.read()) != -1) {
		            outStream.write(i);
		        }
		        outStream.flush();
		        outStream.close();
		        in.close();
		    } catch (IOException e) {}
		    return;
		});
        readinJob.start();

        boolean canceled = false;
        try {
            // Catch interrupt attempts made before the wait
            if (Thread.currentThread().isInterrupted()) {
                throw new InterruptedException();
            }
            child.waitFor();
        } catch (InterruptedException e) {
            child.destroy();
            canceled = true;
        }

        while (readinJob.isAlive()) {
            try {
                readinJob.join();
            } catch (InterruptedException e) {}
        }

        if (canceled) {
            return Status.CANCEL_STATUS;
        }
        if (child.exitValue() != 0) {
            return new Status(
                    IStatus.ERROR,
                    FrameworkUtil.getBundle(Utils.class).getSymbolicName(),
                    NLS.bind(
                            Messages.Utils_NON_ZERO_RETURN_CODE, child.exitValue()), null);
        }
        return Status.OK_STATUS;
    }

