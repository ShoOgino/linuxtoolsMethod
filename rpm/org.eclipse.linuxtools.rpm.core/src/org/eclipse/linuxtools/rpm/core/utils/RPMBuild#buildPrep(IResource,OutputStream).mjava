	/**
	 * Prepares the sources for a given spec file.
	 * 
	 * @param specFile
	 *            the spec file
	 * @throws CoreException
	 *             if the operation fails
	 */
	/**
	 * Prepares the sources for a given spec file.
	 * 
	 * @param specFile the spec file
	 * @param outStream The stream to write the output to.
	 * @throws CoreException If the operation fails.
	 */
	public void buildPrep(IResource specFile, OutputStream outStream) throws CoreException {
		List<String> command = new ArrayList<String>();
		command.addAll(Arrays.asList(macroDefines));
		command.add("-bp"); //$NON-NLS-1$
		command.add(specFile.getLocation().toString());
		try {
			Utils.runCommand(outStream,
					command.toArray(new String[command.size()]));
		} catch (IOException e) {
			throw new CoreException(new Status(IStatus.ERROR, RPMCorePlugin.ID,
					e.getMessage(), e));
		}
	}

