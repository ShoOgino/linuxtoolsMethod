    /**
      * Method parseDefine accepts a token from the parser and
      * searches the ArrayList passed to it for the value of the
      * token name.  This is crude at this point since this does not
      * happen very often.
      * @param token is a string containing the name found after the
      *               "Version:" or "Release:" fields of a spec file and the
      *               begining character is a "%"
      * @param token_value ia an ArrayList containing the names and
      *               values found in the "%define" statements usually found
      *              at the top of the spec file
      * @return a string with the correct version or release number
      *               else throw a CoreException
      */
    private String parseDefine(String token, ArrayList<String> token_value) 
        throws CoreException {
          // See if there in anything in the ArrayList
          if (token_value.isEmpty()) {
              String throw_message = Messages.getString("RPMCore.No___%defines___were_found_in_the_spec_file_38"); //$NON-NLS-1$
              IStatus error = new Status(IStatus.ERROR, Messages.getString("RPMCore.Error_1"), 1, //$NON-NLS-1$
                                  throw_message, null);
              throw new CoreException(error);
          }
          // A token usually looks this: %{name}
          String token_name = token.substring(2,token.length()-1);
          int i = token_value.indexOf(token_name);
          return token_value.get(i+1);
    }

