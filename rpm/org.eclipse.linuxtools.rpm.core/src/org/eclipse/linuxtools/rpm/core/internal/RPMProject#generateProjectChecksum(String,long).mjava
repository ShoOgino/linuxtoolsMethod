	/**
	 * Generates the checksum for a given project path.
	 * @param project_path the absolute path of the project
	 * @param proj_checksum input 0
	 * @return
	 * @throws CoreException if the operation fails
	 */
	private long generateProjectChecksum(String project_path, long proj_checksum) 
	   throws CoreException {
		File dir = new File(project_path);

		if (dir.isDirectory()) {
			String[] children = dir.list();

			for (int i = 0; i < children.length; i++) {

				File temp = new File(project_path + IRPMConstants.FILE_SEP + children[i]);
				
				if (temp.isDirectory()) {
					  	IFolder folder = getProject().getFolder(new Path(children[i]));
						if(!folder.isDerived()) {
							proj_checksum = generateProjectChecksum(project_path
								+ IRPMConstants.FILE_SEP + children[i], proj_checksum);
						}
				} else {
					IFile file = getProject().getFile(new Path(children[i]));
					if(!file.isDerived() || file.getProjectRelativePath().equals(getSpecFile().getFile().getProjectRelativePath())) {
						proj_checksum += generateFileCheckSum(temp);
					}
					if (children[i].equals("Makefile") & !getProject().getFile("configure").exists()) { //$NON-NLS-1$ //$NON-//$NON-NLS-2$
						proj_checksum += generateFileCheckSum(temp);
					}
				}
			}
		}

		return proj_checksum;
	}

