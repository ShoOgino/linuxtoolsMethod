	/**
	 * @see org.eclipse.core.resources.IResourceVisitor#visit(org.eclipse.core.resources.IResource)
	 */
	@Override
	public boolean visit(IResource resource) throws CoreException {
		if (resource.getType() == IResource.FILE) {
			if (Activator.SPECFILE_EXTENSION
					.equals(resource.getFileExtension())) {
				firstWarningInResource = true;
				for (RpmlintItem item : rpmlintItems) {
					if (item.getFileName().equals(
							resource.getLocation().toOSString())) {
						IFile currentFile = ((IFile) resource);
						if (firstWarningInResource) {
							RpmlintParser.getInstance().deleteMarkers(resource);
							// remove internal marks on the current resource
							currentFile
									.deleteMarkers(
											SpecfileErrorHandler.SPECFILE_ERROR_MARKER_ID,
											false, IResource.DEPTH_ZERO);
							firstWarningInResource = false;
						}

						String specContent = fileToString(currentFile);
						int lineNumber;
						// FIXME: workaround the wrong line number with
						// configure-without-libdir-spec
						if (item.getId()
								.equals("configure-without-libdir-spec")) { //$NON-NLS-1$
							item.setLineNbr(-1);
							lineNumber = RpmlintParser.getInstance()
									.getRealLineNbr(specContent, "./configure"); //$NON-NLS-1$
							if (lineNumber == -1) {
								lineNumber = RpmlintParser.getInstance()
										.getRealLineNbr(specContent,
												"%configure"); //$NON-NLS-1$
							}
							item.setLineNbr(lineNumber);
						}

						lineNumber = item.getLineNbr();
						if (lineNumber == -1) {
							lineNumber = RpmlintParser.getInstance()
									.getRealLineNbr(specContent,
											item.getRefferedContent());
							if (lineNumber == -1) {
								lineNumber = 1;
							}
						}
						lineNumber -= 1;
						// end workaround

						// BTW we mark specfile with the internal marker.
						parser.setErrorHandler(getSpecfileErrorHandler(
								currentFile, specContent));
						parser.setTaskHandler(getSpecfileTaskHandler(
								currentFile, specContent));
						parser.parse(specContent);

						IDocument document = new Document(specContent);
						int charStart = getLineOffset(document, lineNumber);
						int charEnd = charStart
								+ getLineLength(document, lineNumber);
						RpmlintParser.getInstance().addMarker(currentFile,
								item.getId() + ": " //$NON-NLS-1$
										+ item.getMessage(), lineNumber,
								charStart, charEnd, item.getSeverity(),
								item.getId(), item.getRefferedContent());
					}
				}
			} else if (Activator.RPMFILE_EXTENSION.equals(resource
					.getFileExtension())) {
				firstWarningInResource = true;
				for (RpmlintItem item : rpmlintItems) {
					IFile currentFile = ((IFile) resource);
					if (firstWarningInResource) {
						RpmlintParser.getInstance().deleteMarkers(resource);
						// remove internal marks on the current resource
						currentFile.deleteMarkers(
								SpecfileErrorHandler.SPECFILE_ERROR_MARKER_ID,
								false, IResource.DEPTH_ZERO);
						firstWarningInResource = false;
					}

					RpmlintParser.getInstance().addMarker(currentFile,
							item.getId() + ": " //$NON-NLS-1$
									+ item.getMessage(), item.getSeverity(),
							item.getId(), item.getRefferedContent());
				}
			}
		}
		return true;
	}

