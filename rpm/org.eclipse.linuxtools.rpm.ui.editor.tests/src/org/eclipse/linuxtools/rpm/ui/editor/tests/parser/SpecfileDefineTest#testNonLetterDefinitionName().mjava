// This error is no more managed by our 'internal' parser. 
//	public void testNullDefinition() {
//		boolean fail = true;
//		for (IMarker marker : getFailureMarkers()) {
//			if ((marker.getAttribute(IMarker.CHAR_START, 0) == 70)
//					&& (marker.getAttribute(IMarker.CHAR_END, 0) == 83)) {
//				assertEquals(IMarker.SEVERITY_WARNING, marker.getAttribute(
//						IMarker.SEVERITY, -1));
//				assertEquals("No value name after define.", marker
//						.getAttribute(IMarker.MESSAGE, ""));
//				fail = false;
//			}
//		}
//		if (fail)
//			fail();
//	}
	@Test
	public void testNonLetterDefinitionName() {
		boolean fail = true;
		for (SpecfileTestFailure failure : getFailures()) {
			if ((failure.getPosition().getOffset() == 84)
					&& (failure.getPosition().getLength() == 11)) {
				assertEquals(SpecfileErrorHandler.ANNOTATION_ERROR, 
						failure.getAnnotation().getType());
				assertEquals(
						"Definition lvalue must begin with a letter or an underscore.",
						failure.getAnnotation().getText());
				fail = false;
			}
		}
		if (fail)
			fail();
		// try {
		// IMarker marker= testProject.getFailureMarkers()[1];
		// System.out.println("non-letter definition");
		// System.out.println(marker.getAttribute(IMarker.SEVERITY, -1));
		// System.out.println(marker.getAttribute(IMarker.MESSAGE, ""));
		// System.out.println(marker.getAttribute(IMarker.CHAR_START, 0));
		// System.out.println(marker.getAttribute(IMarker.CHAR_END, 0));
		// assertEquals(IMarker.SEVERITY_ERROR,
		// marker.getAttribute(IMarker.SEVERITY, -1));
		// assertEquals("Definition lvalue must begin with a letter or an underscore.",
		// marker.getAttribute(IMarker.MESSAGE, ""));
		// } catch (CoreException e) {
		// fail();
		// }
	}

