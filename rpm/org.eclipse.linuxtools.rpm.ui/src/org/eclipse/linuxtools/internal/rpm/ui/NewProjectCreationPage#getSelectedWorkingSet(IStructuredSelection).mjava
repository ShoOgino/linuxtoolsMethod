	/**
	 * Try our best to set the working sets field to something sensible based on the
	 * current selection.
	 */
	private IWorkingSet[] getSelectedWorkingSet(IStructuredSelection selection) {
		if (!(selection instanceof ITreeSelection)) {
			return EMPTY_WORKING_SET_ARRAY;
		}

		ITreeSelection treeSelection = (ITreeSelection) selection;
		if (treeSelection.isEmpty()) {
			return EMPTY_WORKING_SET_ARRAY;
		}

		List<?> elements= treeSelection.toList();
		if (elements.size() == 1) {
			Object element = elements.get(0);
			TreePath[] paths = treeSelection.getPathsFor(element);
			if (paths.length != 1 || paths[0].getSegmentCount() == 0) {
				return EMPTY_WORKING_SET_ARRAY;
			}

			Object candidate = paths[0].getSegment(0);
			if (!(candidate instanceof IWorkingSet)) {
				return EMPTY_WORKING_SET_ARRAY;
			}

			IWorkingSet workingSetCandidate = (IWorkingSet) candidate;
			if (!workingSetCandidate.isAggregateWorkingSet()) {
				return new IWorkingSet[] { workingSetCandidate };
			}

			return EMPTY_WORKING_SET_ARRAY;
		}

		ArrayList<IWorkingSet> result = new ArrayList<>();
		for (Object element : elements) {
			if (element instanceof IWorkingSet && !((IWorkingSet) element).isAggregateWorkingSet()) {
				result.add((IWorkingSet)element);
			}
		}

		if (!result.isEmpty()) {
			return result.toArray(new IWorkingSet[result.size()]);
		} else {
			return EMPTY_WORKING_SET_ARRAY;
		}
	}

