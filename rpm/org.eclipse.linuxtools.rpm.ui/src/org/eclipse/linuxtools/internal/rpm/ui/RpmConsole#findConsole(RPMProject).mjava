	/**
	 * Returns a reference to the console that is for the given {@link RPMProject}.
	 * If such a console does not yet exist, it will be created.
	 *
	 * @param rpmProject The project this console will be for. Must not be
	 *                   <code>null</code>.
	 * @return A console instance.
	 */
	public static RpmConsole findConsole(RPMProject rpmProject) {
		RpmConsole ret = null;
		for (IConsole cons : ConsolePlugin.getDefault().getConsoleManager().getConsoles()) {
			if (cons instanceof RpmConsole && ((RpmConsole) cons).rpmProject.getSpecFile().getProject().getName()
					.equals(rpmProject.getSpecFile().getProject().getName())) {
				ret = (RpmConsole) cons;
			}
		}
		// no existing console, create new one
		if (ret == null) {
			ret = new RpmConsole(rpmProject);
			ConsolePlugin.getDefault().getConsoleManager().addConsoles(new IConsole[] { ret });
		}
		return ret;
	}

