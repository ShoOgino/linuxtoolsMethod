	/**
	 * Method createProjectBox.
	 * @param parent - parent widget
	 *
	 * Create a list box and populate it with
	 * the list of current projects in the workspace
	 */
	private void createProjectBox(Composite parent) {
		// Creates a control that enumerates all the projects in the current 
		// Workspace and places them in a listbox. 
		IProject[] internalProjectList;
		String Proj_Enum;

		//Get the current workspace root.
		final IWorkspaceRoot workspaceRoot = ResourcesPlugin.getWorkspace()
															  .getRoot();

		//Create a group for the control and set up the layout. Even though it is a single control, 
		// we want to seperate it from the other widgets on the wizard dialog box
		Group group = new Group(parent, SWT.NONE);
		group.setLayout(new GridLayout());
		group.setText(Messages.getString("RPMPage.Select_a_project")); //$NON-NLS-1$
		group.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL |
				GridData.HORIZONTAL_ALIGN_FILL));

		// Creata a new SWT listbox. Only allow single selection of items	 
		// Set up the layout data
		projectList = new List(group, SWT.SINGLE | SWT.BORDER | SWT.V_SCROLL);
		projectList.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL |
				GridData.HORIZONTAL_ALIGN_FILL));
		projectList.setToolTipText(Messages.getString(
				"SRPMImportPage.toolTip_project_destination")); //$NON-NLS-1$

		// Set the height to 4 elements high
		GridData projectLayout = new GridData(GridData.GRAB_HORIZONTAL |
				GridData.HORIZONTAL_ALIGN_FILL);
		projectLayout.heightHint = projectList.getItemHeight() * 4;
		projectList.setLayoutData(projectLayout);

		// From the current Workspace root, get a list of all current projects
		// This should come back to us as an array of IProject.
		internalProjectList = workspaceRoot.getProjects();

		if (internalProjectList.length < 1) {
			projectList.add(Messages.getString(
					"RPMPage.No_RPM_projects_found")); //$NON-NLS-1$
			return;
		}

		// Find the first selected project in the workspace
		Iterator iter = selection.iterator();
		Object selectedObject= null;
		IProject selectedProject = null;
		boolean isSelection = false;
		if (iter.hasNext()) {
			selectedObject = iter.next();
			if (selectedObject instanceof IResource) {
				selectedProject = ((IResource) selectedObject).getProject();
				isSelection = true;
			}
		}

		// Stuff the listbox with the text names of the projects
		// Highlight the currently selected project in the workspace
		int selectedProjectIndex = 0;
		for (int a = 0; a < internalProjectList.length; a++) {
			try {
				if(internalProjectList[a].hasNature(RPMProjectNature.RPM_NATURE_ID)) {
					projectList.add(internalProjectList[a].getName());
					if (isSelection && internalProjectList[a].equals(selectedProject)) {
						selectedProjectIndex = a;
					}
				}
			} catch(CoreException e) {
				ExceptionHandler.handle(e, getShell(),
						Messages.getString("ErrorDialog.title"), e.getMessage());
			}
		}
		projectList.setSelection(selectedProjectIndex);
		try {
			rpmProject = RPMProjectFactory.getRPMProject(internalProjectList[selectedProjectIndex]);
		} catch(CoreException e) {
			ExceptionHandler.handle(e, getShell(),
					Messages.getString("ErrorDialog.title"), e.getMessage());
		}
		
		// Add a listener to the project box
		projectList.addListener(SWT.Selection,
			new Listener() {
				public void handleEvent(Event event) {
					// Reset the RPM project
					int i = projectList.getSelectionIndex();
					if(i != -1) {
						IProject project = workspaceRoot.getProject(projectList.getSelection()[0]);
						try {
							rpmProject = RPMProjectFactory.getRPMProject(project);
							if(rpmProject.isChanged()) {
								setPatchNeeded(true);
								patchNeedHintGrid.setVisible(true);
							} else {
								setPatchNeeded(false);
								patchNeedHintGrid.setVisible(false);
							}
						} catch(CoreException e) {
							ExceptionHandler.handle(e, getShell(),
									Messages.getString("ErrorDialog.title"), e.getMessage());
						}
					} else {
						rpmProject = null;
						setPatchNeeded(false);
						patchNeedHintGrid.setVisible(false);
					}
					setSpecFileField();
					setVersionReleaseFields();
				}
		});
		projectList.addListener(SWT.Modify, this);
	}

