		@Override
		public void run() {
			IOConsole myConsole = findConsole();
			IOConsoleOutputStream out = myConsole.newOutputStream();
			myConsole.clearConsole();
			myConsole.activate();
			int returnCode = 0;
			switch (exportType) {
			case ALL:
				try {
					monitor.setTaskName(Messages
							.getString("RPMExportOperation.Executing_RPM_Export")); //$NON-NLS-1$
					returnCode = rpmProject.buildAll(out);
				} catch (CoreException e) {
					result = new Status(IStatus.ERROR, RPMUIPlugin.ID,
							e.getMessage(), e);
				}
				break;

			case BINARY:
				monitor.setTaskName(Messages
						.getString("RPMExportOperation.Executing_RPM_Export")); //$NON-NLS-1$
				try {
					returnCode = rpmProject.buildBinaryRPM(out);
				} catch (CoreException e) {
					result = new Status(IStatus.ERROR, RPMUIPlugin.ID,
							e.getMessage(), e);
				}
				break;

			case SOURCE:
				monitor.setTaskName(Messages
						.getString("RPMExportOperation.Executing_SRPM_Export")); //$NON-NLS-1$
				try {
					returnCode = rpmProject.buildSourceRPM(out);
				} catch (CoreException e) {
					result = new Status(IStatus.ERROR, RPMUIPlugin.ID,
							e.getMessage(), e);
				}
				break;
			}
			if (returnCode != 0){
				result = new Status(
						IStatus.WARNING,
						RPMUIPlugin.ID,
						NLS.bind(
								Messages.getString("RPMExportOperation.BadExitCode"), returnCode), null); //$NON-NLS-1$
			}
		}

