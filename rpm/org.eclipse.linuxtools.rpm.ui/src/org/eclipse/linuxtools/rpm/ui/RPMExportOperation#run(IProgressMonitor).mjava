	@Override
	public IStatus run(IProgressMonitor monitor) {
		IStatus result = null;
		if (rpmProject.getSpecFile() == null) {
			return new Status(IStatus.ERROR, FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),
					Messages.getString("RPMExportOperation.No_Spec_File")); //$NON-NLS-1$
		}
		IOConsoleOutputStream out = RpmConsole.findConsole(rpmProject).linkJob(this);
		if (out == null) {
			return Status.CANCEL_STATUS;
		}
		switch (exportType) {
		case ALL:
			try {
				monitor.beginTask(Messages.getString("RPMExportOperation.Executing_All_Export"), //$NON-NLS-1$
						IProgressMonitor.UNKNOWN);
				result = rpmProject.buildAll(out);
			} catch (CoreException e) {
				result = new Status(IStatus.ERROR, FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),
						e.getMessage(), e);
			}
			break;

		case BINARY:
			monitor.beginTask(Messages.getString("RPMExportOperation.Executing_RPM_Export"), IProgressMonitor.UNKNOWN); //$NON-NLS-1$
			try {
				result = rpmProject.buildBinaryRPM(out);
			} catch (CoreException e) {
				result = new Status(IStatus.ERROR, FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),
						e.getMessage(), e);
			}
			break;

		case SOURCE:
			monitor.beginTask(Messages.getString("RPMExportOperation.Executing_SRPM_Export"), IProgressMonitor.UNKNOWN); //$NON-NLS-1$
			try {
				result = rpmProject.buildSourceRPM(out);
			} catch (CoreException e) {
				result = new Status(IStatus.ERROR, FrameworkUtil.getBundle(this.getClass()).getSymbolicName(),
						e.getMessage(), e);
			}
			break;
		}
		return result;
	}

