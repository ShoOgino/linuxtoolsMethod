    /**
     * Create a text field with a label.
     *
     * @param parent The parent of the text field and label.
     * @param labelName The name on the label.
     * @return The newly created text field.
     */
    protected Text createTextFieldWithLabel(Composite parent, String labelName) {
        // set up the area in which the label and text will reside
        Composite areaLabelText = new Composite(parent, SWT.NONE);
        GridData layoutData = new GridData();
        GridLayout gridlayout = new GridLayout(2, false);
        layoutData.horizontalAlignment = GridData.FILL;
        layoutData.verticalAlignment = GridData.CENTER;
        layoutData.horizontalSpan = 2;
        layoutData.grabExcessHorizontalSpace = true;
        areaLabelText.setLayoutData(layoutData);
        areaLabelText.setLayout(gridlayout);
        // create the label
        Label respositoryBaseURLLbl = new Label(areaLabelText, SWT.NONE);
        respositoryBaseURLLbl.setText(labelName);
        layoutData = new GridData();
        layoutData.widthHint = 100;
        layoutData.horizontalAlignment = GridData.BEGINNING;
        layoutData.verticalAlignment = GridData.CENTER;
        respositoryBaseURLLbl.setLayoutData(layoutData);
        // create the text field
        Text textField = new Text(areaLabelText, SWT.SINGLE);
        layoutData = new GridData();
        layoutData.horizontalIndent = 50;
        layoutData.grabExcessHorizontalSpace = true;
        layoutData.horizontalAlignment = GridData.FILL;
        layoutData.verticalAlignment = GridData.CENTER;
        // achieve flat look (don't put SWT.BORDER)
        textField.setData(FormToolkit.KEY_DRAW_BORDER, FormToolkit.TEXT_BORDER);
        textField.setLayoutData(layoutData);
        toolkit.paintBordersFor(areaLabelText);
        return textField;
    }

