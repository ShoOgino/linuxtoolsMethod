    /*
     * (non-Javadoc)
     * @see org.eclipse.linuxtools.internal.rpm.createrepo.preference.CreaterepoPropertyPage#addContents(org.eclipse.swt.widgets.Composite)
     */
    @Override
    protected Composite addContents(Composite parent) {
        composite = new Composite(parent, SWT.NONE);
        GridLayout layout = new GridLayout(2, false);
        GridData layoutData = new GridData();
        composite.setLayout(layout);

        // TODO: use BooleanFieldEditor and get it to layout properly
        //        with the link (lnWorkspaceSettings)
        btnProjectSettings = new Button(composite, SWT.CHECK);
        btnProjectSettings.addListener(SWT.Selection, new Listener() {
            @Override
            public void handleEvent(Event event) {
                toggleEnabled();
            }
        });
        layoutData = new GridData();
        layoutData.horizontalAlignment = GridData.BEGINNING;
        layoutData.horizontalAlignment = GridData.FILL;
        layoutData.grabExcessHorizontalSpace = true;
        btnProjectSettings.setText(Messages.CreaterepoGeneralPropertyPage_projectSettings);
        btnProjectSettings.setLayoutData(layoutData);
        btnProjectSettings.setSelection(Activator.getDefault().getPreferenceStore()
                .getBoolean(CreaterepoPreferenceConstants.PREF_GENERAL_ENABLED));
        btnProjectSettings.addSelectionListener(new SelectionAdapter() {
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionAdapter#widgetSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetSelected(SelectionEvent e) {
                checkState();
            }
        });

        lnWorkspaceSettings = new Link(composite, SWT.NONE);
        layoutData = new GridData();
        layoutData.horizontalAlignment = SWT.END;
        lnWorkspaceSettings.setLayoutData(layoutData);
        lnWorkspaceSettings.setText(NLS.bind(linkTags, Messages.CreaterepoGeneralPropertyPage_workspaceSettings));
        lnWorkspaceSettings.setFont(parent.getFont());
        lnWorkspaceSettings.addListener(SWT.Selection, new Listener() {
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.widgets.Listener#handleEvent(org.eclipse.swt.widgets.Event)
             */
            @Override
            public void handleEvent(Event event) {
                PreferenceDialog preferenceDialog = PreferencesUtil.createPreferenceDialogOn(getShell(),
                        CREATEREPO_PREFERENCE_ID, new String[] {CREATEREPO_PREFERENCE_ID}, null);
                preferenceDialog.open();
            }
        });

        // general group
        generalGroup = new Group(composite, SWT.SHADOW_ETCHED_IN);
        layout = new GridLayout(2, false);
        generalGroup.setLayout(layout);
        generalGroup.setText(Messages.CreaterepoPreferencePage_generalGroupLabel);
        GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).span(2,1).applyTo(generalGroup);

        // generate unique metadata filenames
        bfeIncludeChecksum = new BooleanFieldEditor(CreaterepoPreferenceConstants.PREF_UNIQUE_MD_NAME,
                Messages.CreaterepoPreferencePage_booleanChecksumName, generalGroup);
        bfeIncludeChecksum.fillIntoGrid(generalGroup, 2);
        bfeIncludeChecksum.setPreferenceStore(preferenceStore);
        bfeIncludeChecksum.setPropertyChangeListener(this);
        bfeIncludeChecksum.load();

        // generate sqlite databases
        bfeSQLDB = new BooleanFieldEditor(CreaterepoPreferenceConstants.PREF_GENERATE_DB,
                Messages.CreaterepoPreferencePage_booleanGenerateSQLDB, generalGroup);
        bfeSQLDB.fillIntoGrid(generalGroup, 2);
        bfeSQLDB.setPreferenceStore(preferenceStore);
        bfeSQLDB.setPropertyChangeListener(this);
        bfeSQLDB.load();

        // ignore symlinks for packages
        bfeIgnoreSymlinks = new BooleanFieldEditor(CreaterepoPreferenceConstants.PREF_IGNORE_SYMLINKS,
                Messages.CreaterepoPreferencePage_booleanIgnoreSymlinks, generalGroup);
        bfeIgnoreSymlinks.fillIntoGrid(generalGroup, 2);
        bfeIgnoreSymlinks.setPreferenceStore(preferenceStore);
        bfeIgnoreSymlinks.setPropertyChangeListener(this);
        bfeIgnoreSymlinks.load();

        // output files in pretty xml format
        bfePrettyXML = new BooleanFieldEditor(CreaterepoPreferenceConstants.PREF_PRETTY_XML,
                Messages.CreaterepoPreferencePage_booleanPrettyXML, generalGroup);
        bfePrettyXML.fillIntoGrid(generalGroup, 2);
        bfePrettyXML.setPreferenceStore(preferenceStore);
        bfePrettyXML.setPropertyChangeListener(this);
        bfePrettyXML.load();

        // number of workers
        ifeSpawns = new IntegerFieldEditor(CreaterepoPreferenceConstants.PREF_WORKERS,
                Messages.CreaterepoPreferencePage_numWorkers, generalGroup);
        ifeSpawns.fillIntoGrid(generalGroup, 2);
        // more than 128 is alot. limiting. (createrepo warning)
        ifeSpawns.setValidRange(0, 128);
        ifeSpawns.setPreferenceStore(preferenceStore);
        ifeSpawns.setPropertyChangeListener(this);
        ifeSpawns.load();
        updateGroupSpacing(generalGroup);

        // updates group
        updatesGroup = new Group(composite, SWT.SHADOW_ETCHED_IN);
        updatesGroup.setText(Messages.CreaterepoPreferencePage_updateGroupLabel);
        GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).span(2, 1).hint(10, SWT.DEFAULT).applyTo(updatesGroup);

        // don't generate repo metadata, if their timestamps are newer than its rpms
        bfeSameFilename = new BooleanFieldEditor(CreaterepoPreferenceConstants.PREF_CHECK_TS,
                Messages.CreaterepoPreferencePage_booleanCheckTS, updatesGroup);
        bfeSameFilename.fillIntoGrid(updatesGroup, 2);
        bfeSameFilename.setPreferenceStore(preferenceStore);
        bfeSameFilename.setPropertyChangeListener(this);
        bfeSameFilename.load();

        // note of caution
        lblCheckTs = new Label(updatesGroup, SWT.WRAP);
        lblCheckTs.setText(Messages.CreaterepoPreferencePage_checkTSNote);
        layoutData = new GridData();
        layoutData.widthHint = 130;
        layoutData.horizontalAlignment = SWT.FILL;
        layoutData.grabExcessHorizontalSpace = true;
        layoutData.horizontalIndent = 5;
        lblCheckTs.setLayoutData(layoutData);
        updateGroupSpacing(updatesGroup);

        // changelog group
        changelogGroup = new Group(composite, SWT.SHADOW_ETCHED_IN);
        changelogGroup.setText(Messages.CreaterepoPreferencePage_changelogGroupLabel);
        GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).grab(true, false).span(2, 1).hint(10, SWT.DEFAULT).applyTo(changelogGroup);

        // don't generate repo metadata, if their timestamps are newer than its rpms
        ifeChangelogLimit = new IntegerFieldEditor(CreaterepoPreferenceConstants.PREF_CHANGELOG_LIMIT,
                Messages.CreaterepoPreferencePage_numChangelogLimit, changelogGroup);
        ifeChangelogLimit.fillIntoGrid(changelogGroup, 2);
        ifeChangelogLimit.setValidRange(0, Integer.MAX_VALUE);
        ifeChangelogLimit.setPreferenceStore(preferenceStore);
        ifeChangelogLimit.setPropertyChangeListener(this);
        ifeChangelogLimit.load();
        updateGroupSpacing(changelogGroup);

        checksumsContainer = new Composite(composite, SWT.NONE);
        checksumsContainer.setLayout(new GridLayout());
        GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).indent(0, 20).grab(true, false).applyTo(checksumsContainer);
        // available checksums
        rgfeChecksums = new RadioGroupFieldEditor(CreaterepoPreferenceConstants.PREF_CHECKSUM,
                Messages.CreaterepoPreferencePage_checksumGroupLabel, 1, new String[][]{
                {ICreaterepoChecksums.SHA1, ICreaterepoChecksums.SHA1},
                {ICreaterepoChecksums.MD5, ICreaterepoChecksums.MD5},
                {ICreaterepoChecksums.SHA256, ICreaterepoChecksums.SHA256},
                {ICreaterepoChecksums.SHA512, ICreaterepoChecksums.SHA512}
        }, checksumsContainer, true);
        rgfeChecksums.setPreferenceStore(preferenceStore);
        rgfeChecksums.setPropertyChangeListener(this);
        rgfeChecksums.load();

        compressContainer = new Composite(composite, SWT.NONE);
        compressContainer.setLayout(new GridLayout());
        GridDataFactory.fillDefaults().align(SWT.FILL, SWT.CENTER).indent(0, 20).grab(true, false).applyTo(compressContainer);
        // available compression types
        rgfeCompressionTypes = new RadioGroupFieldEditor(CreaterepoPreferenceConstants.PREF_COMPRESSION_TYPE,
                Messages.CreaterepoPreferencePage_compressionGroupLabel, 1, new String[][]{
                {ICreaterepoCompressionTypes.COMPAT, ICreaterepoCompressionTypes.COMPAT},
                {ICreaterepoCompressionTypes.XZ, ICreaterepoCompressionTypes.XZ},
                {ICreaterepoCompressionTypes.GZ, ICreaterepoCompressionTypes.GZ},
                {ICreaterepoCompressionTypes.BZ2, ICreaterepoCompressionTypes.BZ2}
        }, compressContainer, true);
        rgfeCompressionTypes.setPreferenceStore(preferenceStore);
        rgfeCompressionTypes.setPropertyChangeListener(this);
        rgfeCompressionTypes.load();

        toggleEnabled();

        return composite;
    }

