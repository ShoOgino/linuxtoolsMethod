    @Override
    public Object execute(ExecutionEvent event) {
        final String executionType = event.getParameter("executionType"); //$NON-NLS-1$
        try {
            IWorkbench wb = PlatformUI.getWorkbench();
            IWorkbenchPage wbPage = wb.getActiveWorkbenchWindow().getActivePage();
            IEditorInput editorInput = wbPage.getActiveEditor().getEditorInput();
            IResource resource = ResourceUtil.getResource(editorInput);
            final CreaterepoProject project = new CreaterepoProject(resource.getProject());
            Job executeCreaterepo = new Job(Messages.Createrepo_jobName) {
                @Override
                protected IStatus run(IProgressMonitor monitor) {
                    try {
                        monitor.beginTask(Messages.CreaterepoProject_executeCreaterepo, IProgressMonitor.UNKNOWN);
                        MessageConsoleStream os = CreaterepoUtils.findConsole(Messages.CreaterepoProject_consoleName)
                                .newMessageStream();
                        if (executionType.equals("refresh")) { //$NON-NLS-1$
                            return project.update(os);
                        } else {
                            return project.createrepo(os);
                        }
                    } catch (CoreException e) {
                        Activator.logError(Messages.Createrepo_errorExecuting, e);
                    } finally {
                        monitor.done();
                    }
                    return null;
                }
            };
            executeCreaterepo.setUser(true);
            executeCreaterepo.schedule();
        } catch (CoreException e) {
            Activator.logError(Messages.CreaterepoProject_executeCreaterepo, e);
        }
        return null;
    }

