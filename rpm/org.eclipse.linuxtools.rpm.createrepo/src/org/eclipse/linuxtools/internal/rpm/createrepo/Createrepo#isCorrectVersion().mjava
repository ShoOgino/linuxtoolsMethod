    /**
     * Grab the version of the system's createrepo command and if it
     * is >= 0.9.8 and also has a yum version >= 3.2.23, then program
     * can continue on executing.
     *
     * 0.9.8 = latest development release
     *         requires: yum version >= 3.2.23
     *
     * @return True if version is supported, false otherwise.
     * @throws CoreException Occurs when failure to get version number.
     */
    public static IStatus isCorrectVersion() throws CoreException {
        final String CREATEREPO_VALID_VERSION = "0.9.8"; //$NON-NLS-1$
        final String YUM_VALID_VERSION = "3.2.23"; //$NON-NLS-1$
        String createrepoVersion = ICreaterepoConstants.EMPTY_STRING;
        String yumVersion = ICreaterepoConstants.EMPTY_STRING;
        try {
            String repoOutput = Utils.runCommandToString(ICreaterepoConstants.CREATEREPO_COMMAND, "--version").trim(); //$NON-NLS-1$
            // createrepo --version output is like:
            // createrepo x.x.x
            String[] createrepoTemp = repoOutput.split(" "); //$NON-NLS-1$
            if (createrepoTemp.length > 1) {
                createrepoVersion = createrepoTemp[1];
            }
            boolean createrepoValid = isGreaterOrEqual(createrepoVersion.split("\\."), CREATEREPO_VALID_VERSION.split("\\.")); //$NON-NLS-1$ //$NON-NLS-2$
            // exit return an error early if the version does not meet the requirements
            if (!createrepoValid) {
                return new Status(
                        IStatus.ERROR,
                        FrameworkUtil.getBundle(CreaterepoProject.class).getSymbolicName(),
                        NLS.bind(Messages.Createrepo_errorWrongVersionCreaterepo, new String[] {
                                CREATEREPO_VALID_VERSION, createrepoVersion}),
                                null);
            }
            String yumOutput = Utils.runCommandToString("yum", "--version").trim(); //$NON-NLS-1$ //$NON-NLS-2$
            // yum --version output is like:
            // x.x.x
            //        blah...
            //        blah...
            String[] yumTemp = yumOutput.split("\n"); //$NON-NLS-1$
            if (yumTemp.length > 0) {
                yumVersion = yumTemp[0];
            }
            boolean yumValid = isGreaterOrEqual(yumVersion.split("\\."), YUM_VALID_VERSION.split("\\.")); //$NON-NLS-1$ //$NON-NLS-2$
            if (yumValid) {
                // return an OK status only if yum is valid version
                return Status.OK_STATUS;
            } else {
                // return an error status otherwise stating the versions in the message
                return new Status(
                        IStatus.ERROR,
                        FrameworkUtil.getBundle(CreaterepoProject.class).getSymbolicName(),
                        NLS.bind(Messages.Createrepo_errorWrongVersionYum, new String[] {
                                YUM_VALID_VERSION, yumVersion}), null);
            }
        } catch (IOException e) {
            IStatus status = new Status(
                    IStatus.CANCEL,
                    FrameworkUtil.getBundle(CreaterepoProject.class).getSymbolicName(),
                    Messages.Createrepo_errorCancelled, e);
            throw new CoreException(status);
        } catch (ArrayIndexOutOfBoundsException e) {
            IStatus status = new Status(
                    IStatus.ERROR,
                    FrameworkUtil.getBundle(CreaterepoProject.class).getSymbolicName(),
                    NLS.bind(Messages.Createrepo_errorPasingVersion, new String[] {createrepoVersion, yumVersion}), e);
            throw new CoreException(status);
        }
    }

