	/**
	 * Create a createrepo project that contains an empty content folder and
	 * a quickly initialized .repo file with the mandatory options.
	 *
	 * @param monitor The progress monitor.
	 */
	protected void createProject(IProgressMonitor monitor) {
		try {
			String fileName = pageTwo.getRepositoryID().concat("."+ICreaterepoConstants. //$NON-NLS-1$
					REPO_FILE_EXTENSION);
			// create the project
			project = CreaterepoProjectCreator.create(pageOne.getProjectName(),
					pageOne.getLocationPath(), fileName, monitor);
			// get a handle on the content folder
			IFolder folder = project
					.getFolder(ICreaterepoConstants.CONTENT_FOLDER);
			if (!folder.exists()) {
				folder.create(false, true, monitor);
			}
			// get a handle on the .repo file
			final IFile file = project.getFile(fileName);
			final String repoFileContents = initializeRepoContents(pageTwo.getRepositoryID(),
					pageTwo.getRepositoryName(), pageTwo.getRepositoryURL());
			InputStream stream = new ByteArrayInputStream(repoFileContents.getBytes());
			if (file.exists()) {
				file.setContents(stream, true, true, monitor);
			} else {
				file.create(stream, true, monitor);
			}
			monitor.worked(1);
			monitor.setTaskName(Messages.CreaterepoWizard_openFileOnCreation);
			getShell().getDisplay().asyncExec(new Runnable() {
				@Override
				public void run() {
					IWorkbenchPage page = PlatformUI.getWorkbench()
							.getActiveWorkbenchWindow().getActivePage();
					try {
						IDE.openEditor(page, file, true);
					} catch (PartInitException e) {
						Activator.logError(
								Messages.CreaterepoWizard_errorOpeningNewlyCreatedFile, e);
					}
				}
			});
			monitor.worked(1);
		} catch (CoreException e) {
			Activator.logError(Messages.CreaterepoWizard_errorCreatingProject, e);
		}
	}

