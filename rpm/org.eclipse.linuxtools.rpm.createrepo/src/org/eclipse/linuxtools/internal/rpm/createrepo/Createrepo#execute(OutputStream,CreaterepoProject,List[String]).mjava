	/**
	 * Execute a createrepo command with custom arguments. The target directory
	 * will always be the current project's content folder and will automatically be
	 * added before execution. A blank list will result in the default createrepo execution.
	 *
	 * @param os Direct execution stream to this.
	 * @param project The project.
	 * @param commands A list of command switches to execute with the createrepo command.
	 * @return The status of the execution.
	 * @throws CoreException Occurs when error trying to execute the command.
	 */
	public IStatus execute(final OutputStream os, CreaterepoProject project, List<String> commands) throws CoreException {
		IStatus available = checkIfAvailable(os);
		if (!available.isOK()) {
			return available;
		}
		commandSwitches.addAll(commands);
		commandSwitches.add(project.getContentFolder().getLocation().toOSString());
		/* Display what the execution looks like */
		String commandString = ICreaterepoConstants.EMPTY_STRING;
		for (String arg : commandSwitches) {
			commandString = commandString.concat(arg + " "); //$NON-NLS-1$
		}
		commandString = commandString.concat("\n"); //$NON-NLS-1$
		try {
			os.write(commandString.getBytes());
			return Utils.runCommand(os, project.getProject(), commandSwitches.toArray(new String[commandSwitches.size()]));
		} catch (IOException e) {
			IStatus status = new Status(
					IStatus.ERROR,
					FrameworkUtil.getBundle(CreaterepoProject.class).getSymbolicName(),
					NLS.bind(Messages.Createrepo_errorExecuting, commandString), null);
			throw new CoreException(status);
		}
	}

