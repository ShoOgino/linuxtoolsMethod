	public Specfile parse(IDocument specfileDocument) {

		LineNumberReader reader = new LineNumberReader(new StringReader(
				specfileDocument.get()));
		String line = "";
		int lineStartPosition = 0;
		Specfile specfile = new Specfile();
		specfile.setDocument(specfileDocument);
		try {
			while ((line = reader.readLine()) != null) {
				// IDocument.getLine(#) is 0-indexed whereas
				// reader.getLineNumber appears to be 1-indexed
				SpecfileElement element = parseLine(line, specfile, reader
						.getLineNumber() - 1);
				if (element != null) {
					element.setLineNumber(reader.getLineNumber() - 1);
					element.setLineStartPosition(lineStartPosition);
					element.setLineEndPosition(lineStartPosition
							+ line.length());
					if ((element.getClass() == SpecfileTag.class)
							&& ((SpecfileTag) element).getName()
									.equals("epoch")) {
						// Epoch
						specfile.setEpoch(((SpecfileTag) element).getIntValue());
                                                specfile.addDefine(new SpecfileDefine("epoch", specfile
                                                        .getEpoch(), specfile));
					} else if ((element.getClass() == SpecfileTag.class)
							&& ((SpecfileTag) element).getName().equals("name")) {
						// Name
						specfile.setName(((SpecfileTag) element)
								.getStringValue());
						specfile.addDefine(new SpecfileDefine("name", specfile
								.getName(), specfile));
					} else if ((element.getClass() == SpecfileTag.class)
							&& ((SpecfileTag) element).getName().equals(
									"version")) {
						// Version
						specfile.setVersion(((SpecfileTag) element)
								.getStringValue());
						specfile.addDefine(new SpecfileDefine("version", specfile
								.getVersion(), specfile));
					} else if ((element.getClass() == SpecfileTag.class)
							&& ((SpecfileTag) element).getName().equals(
									"release")) {
						// Release
						specfile.setRelease(((SpecfileTag) element)
								.getStringValue());
						specfile.addDefine(new SpecfileDefine("release", specfile
								.getRelease(), specfile));
					} else if ((element.getClass() == SpecfileTag.class)
							&& ((SpecfileTag) element).getName().equals(
									"license")) {
						// License
						specfile.setLicense(((SpecfileTag) element)
								.getStringValue());
					} else if ((element.getClass() == SpecfilePatchMacro.class)) {
						SpecfilePatchMacro thisPatchMacro = (SpecfilePatchMacro) element;
						if (thisPatchMacro != null) {
							thisPatchMacro.setSpecfile(specfile);
						}
						SpecfileSource thisPatch = specfile.getPatch(thisPatchMacro.getPatchNumber());
						if (thisPatch != null) {
							thisPatch.addLineUsed(reader.getLineNumber() - 1);
							thisPatch.setSpecfile(specfile);
						}
					} else if ((element.getClass() == SpecfileDefine.class)) {
						specfile.addDefine((SpecfileDefine) element);
					} else if ((element.getClass() == SpecfileSource.class)) {
                                                SpecfileSource source = (SpecfileSource)element;
                                                
						source.setLineNumber(reader.getLineNumber() - 1);
						if (source.getSourceType() == SpecfileSource.SOURCE){
							specfile.addSource(source);
                                                }else{
							specfile.addPatch(source);
                                                }
					}
				}
				// The +1 is for the line delimiter. FIXME: will we end up off
				// by one on the last line?
				lineStartPosition += line.length() + 1;
			}
		} catch (IOException e) {
			// FIXME
			e.printStackTrace();
		}
		return specfile;
	}

