	/**
	 * Simple test for ChangeLog formatting.
	 * 
	 * @throws Exception
	 */
	@SuppressWarnings({ "unchecked" })
	@Test
	public void canPrepareChangeLogFromSVNHistory() throws Exception {
		// select ChangeLog file
		String teamProviderString = "[changelog/trunk/" + PROJECT_NAME + "]";
		SWTBotTreeItem projectItem = ProjectExplorer.expandProject(projectExplorerViewTree, PROJECT_NAME, teamProviderString);
		long oldTimeout = SWTBotPreferences.TIMEOUT;
		SWTBotPreferences.TIMEOUT = 5000;
		bot.waitUntil(new ProjectExplorerTreeItemAppearsCondition(projectExplorerViewTree, PROJECT_NAME, teamProviderString, "ChangeLog"));
		SWTBotPreferences.TIMEOUT = oldTimeout;
		SWTBotTreeItem changeLogItem = ProjectExplorer.getProjectItem(projectItem, "ChangeLog");
		changeLogItem.doubleClick(); // should open ChangeLog file
		
		oldTimeout = SWTBotPreferences.TIMEOUT;
		SWTBotPreferences.TIMEOUT = 3 * 5000;
		// Wait for ChangeLog editor to open
		Matcher<?> editorMatcher = Matchers.allOf(
				IsInstanceOf.instanceOf(IEditorReference.class),
				withPartName("ChangeLog")
				);
		bot.waitUntil(Conditions.waitForEditor((Matcher<IEditorReference>) editorMatcher));		
		SWTBotEditor swtBoteditor = bot.activeEditor();
		assertEquals("ChangeLog", swtBoteditor.getTitle());
		
		SWTBotEclipseEditor swtBotEclipseEditor = swtBoteditor.toTextEditor();
		
		// Add two extra lines after the first date line
		swtBotEclipseEditor.insertText(1, 0, "\n\n");
		// Should have 3 empty lines between date-line and first file entry
		swtBotEclipseEditor.selectRange(1, 0, 3);
		String threeLines = swtBotEclipseEditor.getSelection();
		assertEquals("\n\n\n", threeLines);
		
		// format: ESC CTRL+F
		swtBotEclipseEditor.pressShortcut(Keystrokes.ESC);
		swtBotEclipseEditor.pressShortcut(Keystrokes.CTRL, KeyStroke.getInstance("F"));
		swtBoteditor.save();
		String secondLine = swtBotEclipseEditor.getTextOnLine(1);
		String thirdLine = swtBotEclipseEditor.getTextOnLine(2);
		assertEquals("", secondLine);
		assertTrue(!"".equals(thirdLine));
	}

