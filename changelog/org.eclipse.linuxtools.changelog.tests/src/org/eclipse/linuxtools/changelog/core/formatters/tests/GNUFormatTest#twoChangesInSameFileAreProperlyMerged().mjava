	/**
	 * Test merge of two separate changes to an existing file within the same changelog entry.
	 * I.e. test for
	 * 
	 *    * path/to/file (method1): First change.
	 *    (method2): Another change in same file but different function/method.
	 */
	@Test
	public void twoChangesInSameFileAreProperlyMerged() throws Exception {
		// set date/author line
		String authorName = "Test Author";
		String email = "test@example.com";
		final String dateLine = gnuFormatter.formatDateLine(authorName, email);
	
		// full absolute path to ChangeLog file (relative to project root)
		String changelogPath = "/" + project.getTestProject().getName() + "/path/to";
		final String changelogFilePath = changelogPath + "/ChangeLog";
		
		// entry file path (need overlap with changelogPath)
		String fileEntryRelPath = "eclipse/example/test/NewCoffeeMaker.java";
		final String entryFilePath = changelogPath + "/" + fileEntryRelPath;
	
		final String firstMethodName = "main";
		final String firstChangeComment = "Fix args parsing.";
		// Setup proper pre-existing content
		String content = dateLine + NEW_LINE + NEW_LINE + TAB + FILE_ENTRY_START_MARKER +
						 fileEntryRelPath + SPACE + FUNCTION_START_MARKER + 
						 firstMethodName + FUNCTION_END_MARKER + FILE_ENTRY_END_MARKER +
						 firstChangeComment + NEW_LINE;
		
		assertNull(project.getTestProject().findMember(new Path("/path/to/ChangeLog")));
		
		// add a ChangeLog file to our test project
		InputStream newFileInputStream = new ByteArrayInputStream(
				content.getBytes());
		IFile changelogFile = project.addFileToProject( "/path/to", "ChangeLog",
				newFileInputStream);
		
		assertNotNull(project.getTestProject().findMember(new Path("/path/to/ChangeLog")));
		
		// Open a document and get the IEditorPart
		changelogEditorPart = EditorHelper.openEditor(changelogFile);
		// make sure changelog editor content is right before merging
		assertEquals(content, getContent(changelogEditorPart));
		
		final String secondMethodName = "toString";
		
		// Do the merge with the existing content
		gnuFormatter.mergeChangelog(dateLine, secondMethodName,
				"" /* no default content */, changelogEditorPart,
				changelogFilePath, entryFilePath);
	 
		final String actualMergeResult = getContent(changelogEditorPart);		
		
		final String expectedResult = dateLine + NEW_LINE + NEW_LINE + TAB + FILE_ENTRY_START_MARKER +
		 							  fileEntryRelPath + SPACE + FUNCTION_START_MARKER + 
		 							  firstMethodName + FUNCTION_END_MARKER + FILE_ENTRY_END_MARKER +
		 							  firstChangeComment + NEW_LINE + TAB + FUNCTION_START_MARKER +
		 							  secondMethodName + FUNCTION_END_MARKER + FILE_ENTRY_END_MARKER +
		 							  NEW_LINE;
		
		assertEquals(expectedResult, actualMergeResult);
	}

