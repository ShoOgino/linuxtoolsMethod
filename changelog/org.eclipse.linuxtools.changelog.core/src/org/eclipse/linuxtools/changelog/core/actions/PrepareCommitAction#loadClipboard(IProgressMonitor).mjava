	private void loadClipboard(IProgressMonitor monitor) {
		
		IEditorPart currentEditor;
		
		try {
			currentEditor = getWorkbench().getActiveWorkbenchWindow()
					.getActivePage().getActiveEditor();
		} catch (Exception e) {
			// no editor is active now so do nothing
			
			return;
		}
		
		if (currentEditor == null)
			return;
			
		
		
	//	System.out.println(currentEditor.getTitle());
		String diffResult = "";
		IEditorInput input = currentEditor.getEditorInput();
		ResourceMapping mapping = getResourceMapping(input);
		IProject project = null;
		IResource[] resources = new IResource[1];

		if (mapping != null) {
			project = mapping.getProjects()[0];
			resources[0] = (IResource)mapping.getModelObject();
		} else if (input instanceof IFileEditorInput) {
			IFileEditorInput f = (IFileEditorInput)input;
			project = f.getFile().getProject();
			resources[0] = f.getFile();
		} else {
			return; // can't get what we need
		}
		
		RepositoryProvider r = RepositoryProvider.getProvider(project);
		if (r == null) {
			return; //There is no repository provider for this project, i.e it's not shared.
		}
		SyncInfoSet set = new SyncInfoSet();
		Subscriber s = r.getSubscriber();
		s.collectOutOfSync(resources, IResource.DEPTH_ZERO, set, monitor);
		SyncInfo[] infos = set.getSyncInfos();

		if (infos.length == 1) {
			int kind = SyncInfo.getChange(infos[0].getKind());
			if (kind == SyncInfo.CHANGE) {
				try {
					IDiff d = s.getDiff(infos[0].getLocal());
					if (d instanceof IThreeWayDiff
							&& ((IThreeWayDiff)d).getDirection() == IThreeWayDiff.OUTGOING) {
						IThreeWayDiff diff = (IThreeWayDiff)d;
						monitor.beginTask(null, 100);
						IResourceDiff localDiff = (IResourceDiff)diff.getLocalChange();
						IFile file = (IFile)localDiff.getResource();
						monitor.subTask(Messages.getString("ChangeLog.MergingDiffs")); // $NON-NLS-1$
						String osEncoding = file.getCharset();
						IFileRevision ancestorState = localDiff.getBeforeState();
						IStorage ancestorStorage;
						if (ancestorState != null)
							ancestorStorage = ancestorState.getStorage(monitor);
						else 
							ancestorStorage = null;

						try {
							LineComparator left = new LineComparator(ancestorStorage.getContents(), osEncoding);
							LineComparator right = new LineComparator(file.getContents(), osEncoding);
							for (RangeDifference tmp: RangeDifferencer.findDifferences(left, right)) {
								if (tmp.kind() == RangeDifference.CHANGE) {
									LineNumberReader l = new LineNumberReader(new InputStreamReader(file.getContents()));
									int rightLength = tmp.rightLength() > 0 ? tmp.rightLength() : tmp.rightLength() + 1;
									String line0 = null;
									String preDiffResult = "";
									for (int i = 0; i < tmp.rightStart(); ++i) {
										// We have equivalence at the start.  This could be due to a new entry with the
										// same date stamp as the subsequent entry.  In this case, we want the diff to
										// have the date stamp at the top so it forms a complete entry.  So, we cache
										// those equivalent lines for later usage if needed.
										try {
											String line = l.readLine();
											if (line0 == null)
												line0 = line;
											preDiffResult += line + "\n"; 
										} catch (IOException e) {
											break;
										}
									}
									for (int i = 0; i < rightLength; ++i) {
										try {
											String line = l.readLine();
											// If the last line of the diff matches the first line of the old file and
											// there was equivalence at the start of the ChangeLog, then we want to put
											// the equivalent section at top so as to give the best chance of forming
											// a ChangeLog entry that can be used as a commit comment.
											if (i == rightLength - tmp.rightStart()) {
												if (tmp.rightStart() != 0 && line.equals(line0)) {
													diffResult = preDiffResult += diffResult;
													i = rightLength; // stop loop
												}
												else
													diffResult += line + "\n";
											} else 
												diffResult += line + "\n"; // $NON-NLS-1$
										} catch (IOException e) {
											// do nothing
										}
									}
								}
							}
						} catch (UnsupportedEncodingException e) {
							// do nothing for now
						}
						monitor.done();
					}
				} catch (CoreException e) {
					// do nothing
				}
			}
		}
		
		if (!diffResult.equals(""))
			populateClipboardBuffer(diffResult);
	}

