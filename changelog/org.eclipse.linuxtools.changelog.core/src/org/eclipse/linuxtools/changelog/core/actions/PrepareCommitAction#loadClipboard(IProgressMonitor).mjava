	private void loadClipboard(IProgressMonitor monitor) {
		
		IEditorPart currentEditor;
		
		try {
			currentEditor = getWorkbench().getActiveWorkbenchWindow()
					.getActivePage().getActiveEditor();
		} catch (Exception e) {
			// no editor is active now so do nothing
			
			return;
		}
		
		if (currentEditor == null)
			return;
			
		
		
	//	System.out.println(currentEditor.getTitle());
		String diffResult = "";
		IEditorInput input = currentEditor.getEditorInput();
		ResourceMapping mapping = getResourceMapping(input);
		IProject project = null;
		IResource[] resources = new IResource[1];

		if (mapping != null) {
			project = mapping.getProjects()[0];
			resources[0] = (IResource)mapping.getModelObject();
		} else if (input instanceof IFileEditorInput) {
			IFileEditorInput f = (IFileEditorInput)input;
			project = f.getFile().getProject();
			resources[0] = f.getFile();
		} else {
			return; // can't get what we need
		}
		
		RepositoryProvider r = RepositoryProvider.getProvider(project);
		SyncInfoSet set = new SyncInfoSet();
		Subscriber s = r.getSubscriber();
		s.collectOutOfSync(resources, IResource.DEPTH_ZERO, set, monitor);
		SyncInfo[] infos = set.getSyncInfos();

		if (infos.length == 1) {
			int kind = SyncInfo.getChange(infos[0].getKind());
			if (kind == SyncInfo.CHANGE) {
				try {
					IDiff d = s.getDiff(infos[0].getLocal());
					if (d instanceof IThreeWayDiff
							&& ((IThreeWayDiff)d).getDirection() == IThreeWayDiff.OUTGOING) {
						IThreeWayDiff diff = (IThreeWayDiff)d;
						monitor.beginTask(null, 100);
						IResourceDiff localDiff = (IResourceDiff)diff.getLocalChange();
						IFile file = (IFile)localDiff.getResource();
						monitor.subTask(Messages.getString("ChangeLog.MergingDiffs")); // $NON-NLS-1$
						String osEncoding = file.getCharset();
						IFileRevision ancestorState = localDiff.getBeforeState();
						IStorage ancestorStorage;
						if (ancestorState != null)
							ancestorStorage = ancestorState.getStorage(monitor);
						else 
							ancestorStorage = null;

						RangeDifference[] rd = null;

						try {
							LineComparator left = new LineComparator(ancestorStorage.getContents(), osEncoding);
							LineComparator right = new LineComparator(file.getContents(), osEncoding);
							rd = RangeDifferencer.findDifferences(left, right);
							for (int j = 0; j < rd.length; ++j) {
								RangeDifference tmp = rd[j];
								if (tmp.kind() == RangeDifference.CHANGE) {
									LineNumberReader l = new LineNumberReader(new InputStreamReader(file.getContents()));
									int rightLength = tmp.rightLength() > 0 ? tmp.rightLength() : tmp.rightLength() + 1;
									for (int i = 0; i < tmp.rightStart(); ++i) {
										try {
											l.readLine(); 
										} catch (IOException e) {
											break;
										}
									}
									for (int i = 0; i < rightLength; ++i) {
										try {
											diffResult += l.readLine() + "\n"; // $NON-NLS-1$
										} catch (IOException e) {
											// do nothing
										}
									}
								}
							}
						} catch (UnsupportedEncodingException e) {
							// do nothing for now
						}
						monitor.done();
					}
				} catch (CoreException e) {
					// do nothing
				}
			}
		}
		
		if (!diffResult.equals(""))
			populateClipboardBuffer(diffResult);
	}

