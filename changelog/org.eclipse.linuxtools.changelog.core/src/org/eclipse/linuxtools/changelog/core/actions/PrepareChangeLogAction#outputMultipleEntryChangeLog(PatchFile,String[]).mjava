	public void outputMultipleEntryChangeLog(PatchFile pf, String[] functionGuess) {

		String defaultContent = null;
		
		if (pf.isNewfile())
			defaultContent = Messages.getString("ChangeLog.NewFile"); // $NON-NLS-1$
		else if (pf.isRemovedFile())
			defaultContent = Messages.getString("ChangeLog.RemovedFile"); // $NON-NLS-1$

		IPath entryPath = pf.getPath();
		String entryFileName = entryPath.toOSString();
		
		ChangeLogWriter clw = new ChangeLogWriter();

		// load settings from extensions + user pref.
		loadPreferences();

		// get file path from target file
		clw.setEntryFilePath(entryPath.toOSString());
		
		if (defaultContent != null)
			clw.setDefaultContent(defaultContent);

		// err check. do nothing if no file is being open/edited
		if (clw.getEntryFilePath() == "") {
			return;
		}

		// Check if formatter is internal or inline..if inline, use the
		// current active editor part, otherwise, we must find the external
		// ChangeLog file.
		IEditorPart changelog = null;
	
		// Before accessing the getFormatterConfigElement, the getFormatContibutor
		// method must be called to initialize.
		extensionManager.getFormatterContributor(clw.getEntryFilePath(), 
				pref_Formatter);
		IConfigurationElement formatterConfigElement = extensionManager
        .getFormatterConfigElement();
		
		if (formatterConfigElement.getAttribute("inFile").toLowerCase().equals( //$NON-NLS-1$
		    "true")) { //$NON-NLS-1$
			try {
				changelog = openEditor((IFile)pf.getResource());
				clw.setFormatter(extensionManager.getFormatterContributor(
						clw.getEntryFilePath(), pref_Formatter));
			} catch (Exception e) {
				// do nothing changelog will be null
			}
		} else {
			// external changelog
			// get formatter
			clw.setFormatter(extensionManager.getFormatterContributor(
					entryFileName, pref_Formatter));

			if (pf.isRemovedFile())
				changelog = getChangelogForRemovePath(entryPath);
			else
				changelog = getChangelog(entryFileName);

			// If there isn't a ChangeLog, we will not create one here.
			// This prevents the situation whereby a project has an inline
			// ChangeLog formatter and some other files have been modified
			// as well (e.g. an rpm project).  In that case, we don't want
			// to create a separate ChangeLog for the end-user.
			if (changelog == null)
				return;
		}
		// select changelog
		clw.setChangelog(changelog);
		
		// write to changelog
		IFormatterChangeLogContrib formatter = clw.getFormatter();
		clw.setDateLine(formatter.formatDateLine(pref_AuthorName,
				pref_AuthorEmail));

		clw.setChangelogLocation(getDocumentLocation(clw.getChangelog(), true));

		// print multiple changelog entries with different
		// function guess names.  We default to an empty guessed name
		// if we have zero function guess names.
		int numFuncs = 0;
		clw.setGuessedFName(""); // $NON-NLS-1$
		if (functionGuess.length > 0) {
			for (String guess : functionGuess) {
				if (!guess.trim().equals("")) { // $NON-NLS-1$
					++numFuncs;
					clw.setGuessedFName(guess);
					clw.writeChangeLog();
				}
			}
		}
		// Default an empty entry if we did not have any none-empty
		// function guesses.
		if (numFuncs == 0) {
			clw.writeChangeLog();
		}

	}

