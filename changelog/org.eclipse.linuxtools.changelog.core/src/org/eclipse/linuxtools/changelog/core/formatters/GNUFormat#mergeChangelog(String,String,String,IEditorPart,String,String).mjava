	public String mergeChangelog(String dateLine, String functionGuess,String defaultContent,
			IEditorPart changelog, String changeLogLocation, String fileLocation) {
		
		String fileDetail = formatFileDetail(changeLogLocation, fileLocation);
		IDocument changelog_doc = getDocument(changelog);
		String function = formatFunction(functionGuess);
		boolean multipleEntrySuccess = false;
		String functionSpacer=" ";
		if (function.equals(": "))
			functionSpacer="";
		if (changelog_doc.getLength() > 0) {
			
			int offset_start = findChangeLogEntry(changelog_doc, dateLine);
			int offset_end = dateLine.length();
			boolean foundFunction = false;
			
			if (offset_start != -1) {
				int nextChangeEntry = findChangeLogPattern(changelog_doc,
						offset_start + dateLine.length());
				int functLogEntry = offset_start + dateLine.length();
				
				while (functLogEntry < nextChangeEntry) {
					int line_length = 0;
					String entry = "";
					try {
						line_length = changelog_doc
						.getLineOfOffset(functLogEntry);
						entry = changelog_doc.get(functLogEntry, changelog_doc
								.getLineLength(line_length));
					} catch (BadLocationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					if (entry.lastIndexOf(fileDetail) > 0) {
						foundFunction = true;
						int nextFunctLoc = functLogEntry + fileDetail.length()
						+ 2;
						String nextFunc = "";
						try {
							nextFunc = changelog_doc.get(nextFunctLoc,
									nextChangeEntry - nextFunctLoc);
						} catch (BadLocationException e1) {
							// TODO Auto-generated catch block
							e1.printStackTrace();
						}
						int foundFunc = nextFunc.indexOf("* ");
						if (foundFunc > 0) {
							foundFunc--;
							try {
								while (changelog_doc.get(
										nextFunctLoc + foundFunc, 1).equals(
										"\t")
										|| changelog_doc.get(
												nextFunctLoc + foundFunc, 1)
												.equals("\n"))
									foundFunc--;
							} catch (BadLocationException e2) {
								// TODO Auto-generated catch block
								e2.printStackTrace();
							}
							functLogEntry = nextFunctLoc + foundFunc + 1;
							break;
						}
						
					}
					try {
						functLogEntry += changelog_doc
						.getLineLength(line_length);
					} catch (BadLocationException e1) {
						// TODO Auto-generated catch block
						e1.printStackTrace();
					}
				}
				if (functLogEntry >= nextChangeEntry) {
					functLogEntry = nextChangeEntry - 1;
					try {
						while (changelog_doc.get(functLogEntry, 1).equals("\n"))
							functLogEntry--;
					} catch (BadLocationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					functLogEntry++;
				}
				
				if (offset_start != -1) {
					if (foundFunction) {
						try {
							if (!function.equals(": "))
								changelog_doc.replace(functLogEntry, 0, "\n" + TAB
										+ function+" ");
							else
								changelog_doc.replace(functLogEntry, 0, "\n" + TAB
										);
						} catch (BadLocationException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						ITextEditor edit = (ITextEditor) changelog;
						if (!function.equals(": "))
							edit.selectAndReveal(functLogEntry + function.length()
									+ 3, 0);
						else
							edit.selectAndReveal(functLogEntry + function.length()
									, 0);
						multipleEntrySuccess = true;
					} else {
						try {
							changelog_doc.replace(offset_end, 0, TAB
									+ "* " + fileDetail + functionSpacer+function+functionSpacer + defaultContent + "\n"); //$NON-NLS-1$
						} catch (BadLocationException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
						
						ITextEditor edit = (ITextEditor) changelog;
						edit.selectAndReveal(offset_end + fileDetail.length()
								+ function.length() +functionSpacer.length()*2 + 3 + defaultContent.length(), 0);
						multipleEntrySuccess = true;
					}
					
				}
			}
		}
		
		if (!multipleEntrySuccess) {
			try {
				if (changelog_doc.getLength() > 0)
					changelog_doc.replace(0, 0, "\n\n"); //$NON-NLS-1$
				changelog_doc.replace(0, 0, dateLine + TAB + "* " + fileDetail
						+ functionSpacer+function+functionSpacer);
				
				ITextEditor edit = (ITextEditor) changelog;
				edit.selectAndReveal(dateLine.length() + fileDetail.length()
						+ function.length() + functionSpacer.length()*2 + 3, 0);
			} catch (BadLocationException e) {
				e.printStackTrace();
				
			}
			
		}
		
		return "";
		
	}

