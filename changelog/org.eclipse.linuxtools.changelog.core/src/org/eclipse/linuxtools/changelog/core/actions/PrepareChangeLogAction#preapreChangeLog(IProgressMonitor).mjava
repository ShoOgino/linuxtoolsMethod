	private void preapreChangeLog(IProgressMonitor monitor) {

		// getParserContributions();
		String diffResult = null;
		String projectPath = null;

		Object element = selected.getFirstElement();

		ResourceMapping[] mappings = getResourceMappings(selected.toArray());

		IResource resource = (IResource) element;

		projectPath = resource.getProject().getFullPath().toOSString();

		try {

			StringDiffOperation sdo = new StringDiffOperation(getWorkbench()
					.getActiveWorkbenchWindow().getPartService()
					.getActivePart(), mappings,
					false, true,
					ResourcesPlugin.getWorkspace().getRoot().getFullPath());

			sdo.execute(monitor);

			diffResult = sdo.getResult();
		}catch (Exception e) {

			e.printStackTrace();
			return;
		}

		if (diffResult == null) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, "Changelog", IStatus.ERROR,
							"Could not get diff", new Exception(
									"No diff result from CVS")));
			return;
		}
		if (projectPath == null) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, "Changelog", IStatus.ERROR,
							"Could not get project path", new Exception(
									"Couldn't get project path")));
			return;
		}

		if (diffResult.equals(StringDiffOperation.EMPTY_DIFF)) {
			MessageDialog.openInformation(getWorkbench()
					.getActiveWorkbenchWindow().getShell(),
					"Prepare ChangeLog - ChangeLog", "No changes found.");
			return;
		}
		// parse the patch and get only info we need
		// filename, which line has changed.(range)

		
		monitor.subTask("Parsing diff result");
		PatchFile[] patchFileInfoList = parseStandardPatch(diffResult,
				projectPath, monitor);
		monitor.worked(250);
		// now, find out modified functions/classes.
		// try to use the the extension point. so it can be extended easily

		if (patchFileInfoList == null) {
			// nothing to parse
			return;
		}

		// for all files in patch file info list, get function guesses of each
		// file.
		monitor.subTask("Writing ChangeLog");
		int unitwork = 250 / patchFileInfoList.length;
		for (int pfIndex = 0; pfIndex < patchFileInfoList.length; pfIndex++) {
			// for each file

			PatchFile pf = patchFileInfoList[pfIndex];

			// System.out.println(pf.getPath().toOSString());
			String[] funcGuessList = guessFunctionNames(pf);
			
			String defaultContent = null;
			
			if (pf.isNewfile())
				defaultContent = "New File.";
			
			outputMultipleEntryChangeLog(pf.getPath().toOSString(), defaultContent,
					funcGuessList);

			/*
			 * // print info for debug
			 * System.out.println(pf.getPath().toOSString()); for (int i = 0; i <
			 * funcGuessList.length; i++) {
			 * System.out.println(funcGuessList[i]); }
			 * System.out.println("---------------------");
			 */
			monitor.worked(unitwork);
		}
	}

