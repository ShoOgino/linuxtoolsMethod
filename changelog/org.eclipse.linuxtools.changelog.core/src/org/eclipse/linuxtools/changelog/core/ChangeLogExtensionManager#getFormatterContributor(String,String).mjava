	/**
	 * Fetches formatterName formatter from extension, but if there exists a inline
	 * formatter for entryFileName, then it uses that inline formatter.
	 */
	public IFormatterChangeLogContrib getFormatterContributor(String entryFilePath, String formatterName) {
		
		
		// extract just file name;
		String fileName;
	
		int lastDir = entryFilePath.lastIndexOf('/');
		if ((lastDir >= 0) && (lastDir +1 <= entryFilePath.length()))
			fileName = entryFilePath.substring(lastDir + 1, entryFilePath.length());
		else
			fileName = entryFilePath;
		
		// We don't yet know which formatter to use
		formatterConfigElementToUse = null;

		// IFile file = null;

		if (formatterExtensions != null) {
			IConfigurationElement[] elements = formatterExtensions
					.getConfigurationElements();

			// cache the in-file formatters on the first run
			if (cachedInFileFormateters == null) {
				List<IConfigurationElement> inFileFormatters = new LinkedList<IConfigurationElement>();
				for (int i = 0; i < elements.length; i++) {
					IConfigurationElement formatterConfigElement = elements[i];
					if (formatterConfigElement.getName().equals("formatter") // $NON-NLS-1$
							&& formatterConfigElement.getAttribute("inFile") // $NON-NLS-1$
									.toLowerCase().equals("true")) { // $NON-NLS-1$
						inFileFormatters.add(elements[i]);
					}
				}
				cachedInFileFormateters = inFileFormatters
						.toArray(new IConfigurationElement[] {});
			}

			// check if there is an in-file changelog formatter for the
			// currently
			// edited file
			for (int i = 0; i < cachedInFileFormateters.length; i++) {
				IConfigurationElement formatterConfigElement = cachedInFileFormateters[i];

				IConfigurationElement[] patternElementTmp = formatterConfigElement
						.getChildren();

				// error check
				if (patternElementTmp == null)
					continue;
				IConfigurationElement patternElement = patternElementTmp[0];

				if (patternElement.getAttribute("pattern") == null) { // $NON-NLS-1$
					ChangelogPlugin
							.getDefault()
							.getLog()
							.log(
									new Status(
											IStatus.ERROR,
											ChangelogPlugin.PLUGIN_ID,
											IStatus.ERROR,
											Messages.getString("ChangeLog.ErrNonPattern"), // $NON-NLS-1$
											new Exception(Messages.getString("ChangeLog.ErrNonPattern")))); // $NON-NLS-1$
				} else {
					String filePattern = patternElement.getAttribute("pattern"); // $NON-NLS-1$

					try {
						Pattern pattern = Pattern.compile(filePattern);
						Matcher fileMatcher = pattern.matcher(fileName);

						// if the filename of the current editor matches the
						// file
						// pattern then we're done
						if (fileMatcher.matches()) {
							formatterConfigElementToUse = formatterConfigElement;
							break;
						}
					} catch (PatternSyntaxException e) {
						ChangelogPlugin.getDefault().getLog().log(
								new Status(IStatus.ERROR, ChangelogPlugin.PLUGIN_ID,
										IStatus.ERROR, e.getMessage(), e));
					}
				}

			}

			// if we haven't found an in-file formatter we try to get the user's
			// prefered formatter
			if (formatterConfigElementToUse == null) {

				// we cache the user's preferred formatter on the first run, and
				// whenever it changes
				if (cachedPrefFormatter == null
						|| !cachedPrefFormatter.getAttribute("name").equals( // $NON-NLS-1$
								formatterName)) {

					for (int i = 0; i < elements.length; i++) {
						IConfigurationElement formatterConfigElement = elements[i];
						if (formatterConfigElement.getName()
								.equals("formatter") && formatterConfigElement.getAttribute("inFile").toLowerCase().equals("false")) { //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
							if (formatterConfigElement.getAttribute("name") // $NON-NLS-1$
									.equals(formatterName))
								cachedPrefFormatter = formatterConfigElement;
							break;

						}
					}
				}

				formatterConfigElementToUse = cachedPrefFormatter;

				if (formatterConfigElementToUse == null) {
					ChangelogPlugin
							.getDefault()
							.getLog()
							.log(
									new Status(
											IStatus.ERROR,
											ChangelogPlugin.PLUGIN_ID,
											IStatus.ERROR,
											Messages.getString("ChangeLog.ErrRetrieveFormatter"), // $NON-NLS-1$
											new Exception(Messages.getString("ChangeLog.ErrRetrieveFormatter")))); // $NON-NLS-1$

					return null;
				}

			}
		}

		
		
		try {
			return (IFormatterChangeLogContrib) formatterConfigElementToUse
					.createExecutableExtension("class"); // $NON-NLS-1$

		} catch (CoreException e) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, ChangelogPlugin.PLUGIN_ID, IStatus.ERROR, e
							.getMessage(), e));
			e.printStackTrace();
		}
		
		
		return null;
	}

