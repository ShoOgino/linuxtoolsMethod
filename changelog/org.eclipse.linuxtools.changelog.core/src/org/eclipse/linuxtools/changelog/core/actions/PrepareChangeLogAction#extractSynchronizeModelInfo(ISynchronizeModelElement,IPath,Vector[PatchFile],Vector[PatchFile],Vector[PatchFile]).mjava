	private void extractSynchronizeModelInfo (ISynchronizeModelElement d, IPath path, Vector<PatchFile> newList, Vector<PatchFile> removeList, Vector<PatchFile> changeList) {
		// Recursively traverse the tree for children and sort leaf elements into their respective change kind sets.
		// Don't add entries for ChangeLog files though.
		if (d.hasChildren()) {
			IPath newPath = path.append(d.getName());
			for (IDiffElement element: d.getChildren()) {
				if (element instanceof ISynchronizeModelElement)
					extractSynchronizeModelInfo((ISynchronizeModelElement)element, newPath, newList, removeList, changeList);
				else if (!(d.getName().equals("ChangeLog"))) { // $NON-NLS-1$
					IPath finalPath = path.append(d.getName());
					PatchFile p = new PatchFile(finalPath);
					int kind = d.getKind() & Differencer.CHANGE_TYPE_MASK;
					if (kind == Differencer.CHANGE) {
						changeList.add(p);
						// Save the resource so we can later figure out what lines changed
						p.setResource(d.getResource());
					}
					else if (kind == Differencer.ADDITION) {
						p.setNewfile(true);
						newList.add(p);
					}
					else if (kind == Differencer.DELETION) {
						p.setRemovedFile(true);
						removeList.add(p);
					}
				}
			}
		} else if (!(d.getName().equals("ChangeLog"))) { // $NON-NLS-1$
			IPath finalPath = path.append(d.getName());
			PatchFile p = new PatchFile(finalPath);
			int kind = d.getKind() & Differencer.CHANGE_TYPE_MASK;
			if (kind == Differencer.CHANGE) {
				changeList.add(p);
				// Save the resource so we can later figure out what lines changed
				p.setResource(d.getResource());
			}
			else if (kind == Differencer.ADDITION) {
				p.setNewfile(true);
				newList.add(p);
			}
			else if (kind == Differencer.DELETION) {
				p.setRemovedFile(true);
				removeList.add(p);
			}
		}
	}

