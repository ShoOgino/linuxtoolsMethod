	/**
	 * Guesses the function effected/modified by the patch from local file(newer
	 * file).
	 * 
	 * @param patchFileInfo
	 *            patch file
	 * @return array of unique function names
	 */
	private String[] guessFunctionNames(PatchFile patchFileInfo) {

		
		// if this file is new file or removed file, do not guess function files
		// TODO: create an option to include function names on 
		// new files or not
		if (patchFileInfo.isNewfile() || patchFileInfo.isRemovedFile()) {
			return new String[]{""};
		}
		
		String[] fnames = new String[0];
		String editorName = ""; // $NON-NLS-1$

		try {
			IEditorDescriptor ed = org.eclipse.ui.ide.IDE
					.getEditorDescriptor(patchFileInfo.getPath().toOSString());
			editorName = ed.getId().substring(ed.getId().lastIndexOf(".") + 1); // $NON-NLS-1$
		} catch (PartInitException e1) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, ChangelogPlugin.PLUGIN_ID, IStatus.ERROR,
							e1.getMessage(), e1));
			return new String[0];
		}

		// check if the file type is supported

		// get editor input for target file
		IPath path = getWorkspaceRoot().getLocation().append(patchFileInfo.getPath());
		IFileStore fileStore = EFS.getLocalFileSystem().getStore(path);
		IFile workspaceFile = getWorkspaceFile(fileStore);
		IURIEditorInput fei = null;
		if (workspaceFile != null)
			fei =  new FileEditorInput(workspaceFile);
		fei = new FileStoreEditorInput(fileStore);
		
		SourceEditorInput sei = new SourceEditorInput(patchFileInfo.getStorage());

		MyDocumentProvider mdp = new MyDocumentProvider();
		MyStorageDocumentProvider msdp = new MyStorageDocumentProvider();

		try {
			// get document for target file (one for local file, one for repository storage)
			IDocument doc = mdp.createDocument(fei);
			IDocument olddoc = msdp.createDocument(sei);

			HashMap<String, String> functionNamesMap = new HashMap<String, String>();
			ArrayList<String> nameList = new ArrayList<String>();

			// for all the ranges
			for (PatchRangeElement tpre: patchFileInfo.getRanges()) {

				for (int j = tpre.ffromLine; j <= tpre.ftoLine; j++) {

					String functionGuess = "";
					// add func that determines type of file.
					// right now it assumes it's java file.
					if (tpre.isLocalChange()) {
						if ((j < 0) || (j > doc.getNumberOfLines() - 1))
							continue; // ignore out of bound lines
						functionGuess = parseCurrentFunctionAtOffset(
								editorName, fei, doc.getLineOffset(j));
					} else {
						if ((j < 0) || (j > olddoc.getNumberOfLines() - 1))
							continue; // ignore out of bound lines
						functionGuess = parseCurrentFunctionAtOffset(
								editorName, sei, olddoc.getLineOffset(j));
					}

					// putting it in hashmap will eliminate duplicate
					// guesses.  We use a list to keep track of ordering which
					// is helpful when trying to document a large set of changes.
					if (functionNamesMap.get(functionGuess) == null)
						nameList.add(functionGuess);
					functionNamesMap.put(functionGuess, functionGuess);
				}
			}

			// dump all unique func. guesses in the order found
			fnames = new String[nameList.size()];
			fnames = nameList.toArray(fnames);
		
		} catch (CoreException e) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, ChangelogPlugin.PLUGIN_ID, IStatus.ERROR,
							e.getMessage(), e));
		} catch (BadLocationException e) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, ChangelogPlugin.PLUGIN_ID, IStatus.ERROR,
							e.getMessage(), e));
		} catch (Exception e) {
			ChangelogPlugin.getDefault().getLog().log(
					new Status(IStatus.ERROR, ChangelogPlugin.PLUGIN_ID, IStatus.ERROR,
							e.getMessage(), e));
		}
		return fnames;
	}

