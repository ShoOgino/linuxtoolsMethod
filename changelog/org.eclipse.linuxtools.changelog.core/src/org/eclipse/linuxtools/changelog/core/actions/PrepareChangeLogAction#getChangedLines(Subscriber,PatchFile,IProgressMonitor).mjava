	private void getChangedLines(Subscriber s, PatchFile p, IProgressMonitor monitor) {
		try {
			// For an outgoing changed resource, find out which lines
			// differ from the local file and its previous local version
			// (i.e. we don't want to force a diff with the repository).
			IDiff d = s.getDiff(p.getResource());
			if (d instanceof IThreeWayDiff
					&& ((IThreeWayDiff)d).getDirection() == IThreeWayDiff.OUTGOING) {
				IThreeWayDiff diff = (IThreeWayDiff)d;
				monitor.beginTask(null, 100);
				IResourceDiff localDiff = (IResourceDiff)diff.getLocalChange();
				IFile file = (IFile)localDiff.getResource();
				monitor.subTask(Messages.getString("ChangeLog.MergingDiffs")); // $NON-NLS-1$
				String osEncoding = file.getCharset();
				IFileRevision ancestorState = localDiff.getBeforeState();
				IStorage ancestorStorage;
				if (ancestorState != null)
					ancestorStorage = ancestorState.getStorage(monitor);
				else 
					ancestorStorage = null;

				RangeDifference[] rd = null;
				try {
					// We compare using a standard differencer to get ranges
					// of changes.  We modify them to be document-based (i.e.
					// first line is line 1) and store them for later parsing.
					LineComparator left = new LineComparator(ancestorStorage.getContents(), osEncoding);
					LineComparator right = new LineComparator(file.getContents(), osEncoding);
					rd = RangeDifferencer.findDifferences(left, right);
					for (int j = 0; j < rd.length; ++j) {
						RangeDifference tmp = rd[j];
						if (tmp.kind() == RangeDifference.CHANGE) {
							int rightLength = tmp.rightLength() > 0 ? tmp.rightLength() : tmp.rightLength() + 1;
							p.addLineRange(tmp.rightStart() + 1, tmp.rightStart() + rightLength);
						}
					}
				} catch (UnsupportedEncodingException e) {
					// do nothing for now
				}
				monitor.done();

			}
		} catch (CoreException e) {
			// Do nothing if error occurs
		}
	}

