    /**
     * Should be able to save changes to ChangeLog file in clipboard.
     * Tests CTRL + ALT + V functionality.
     *
     * @throws Exception
     */
    @Test
    @Ignore
    public void canPrepareChangeLogAndSaveChangesInChangeLogFileToClipboard() throws Exception {
        // Find manifest file
        IResource manifest = project.findMember(new Path("/META-INF/MANIFEST.MF"));
        assertNotNull(manifest);
        // delete it
        manifest.delete(true, null);
        project.refreshLocal(IResource.DEPTH_INFINITE, null);

        // select ChangeLog file
        String teamProviderString = "[changelog/trunk/" + PROJECT_NAME + "]";
        SWTBotTreeItem projectItem = ProjectExplorer.expandProject(projectExplorerViewTree, PROJECT_NAME, teamProviderString);
        long oldTimeout = SWTBotPreferences.TIMEOUT;
        SWTBotPreferences.TIMEOUT = 5000;
        bot.waitUntil(new ProjectExplorerTreeItemAppearsCondition(projectExplorerViewTree, PROJECT_NAME, teamProviderString, "ChangeLog"));
        SWTBotPreferences.TIMEOUT = oldTimeout;
        SWTBotTreeItem changeLogItem = ProjectExplorer.getProjectItem(projectItem, "ChangeLog");
        changeLogItem.select();
        // CTRL + ALT + P
        bot.activeShell().pressShortcut(Keystrokes.CTRL, Keystrokes.ALT, KeyStroke.getInstance("P"));

        oldTimeout = SWTBotPreferences.TIMEOUT;
        SWTBotPreferences.TIMEOUT = 3 * 5000;
        // Wait for ChangeLog editor to open
        Matcher<IEditorReference> editorMatcher = allOf(
                IsInstanceOf.instanceOf(IEditorReference.class),
                withPartName("ChangeLog")
                );
        bot.waitUntil(Conditions.waitForEditor(editorMatcher));
        SWTBotEditor swtBoteditor = bot.activeEditor();
        swtBoteditor.save(); // save to avoid "save changes"-pop-up
        assertEquals("ChangeLog", swtBoteditor.getTitle());
        SWTBotEclipseEditor eclipseEditor = swtBoteditor.toTextEditor();
        // make sure expected entry has been added.
        assertTrue(matchHead(eclipseEditor.getText(), "\t* META-INF/MANIFEST.MF:", 3));
        eclipseEditor.selectLine(0); // select first line
        final String expectedFirstLineContent = eclipseEditor.getSelection();

        // save changes to clipboard: CTRL + ALT + V
        eclipseEditor.pressShortcut(Keystrokes.CTRL, Keystrokes.ALT, KeyStroke.getInstance("V"));

        // create and open a new file for pasting
        String pasteFile = "newFile";
        IFile newFile = project.getFile(new Path(pasteFile));
        newFile.create(new ByteArrayInputStream("".getBytes()) /* empty content */, false, null);
        project.refreshLocal(IResource.DEPTH_INFINITE, null);

        assertNotNull(project.findMember(new Path(pasteFile)));

        ProjectExplorer.expandProject(projectExplorerViewTree, PROJECT_NAME,
                teamProviderString).expandNode(pasteFile).select().doubleClick();
        //bot.activeShell().pressShortcut(Keystrokes.F3); // open file
        editorMatcher = allOf(
                IsInstanceOf.instanceOf(IEditorReference.class),
                withPartName(pasteFile)
                );
        bot.waitUntil(Conditions.waitForEditor(editorMatcher));
        SWTBotPreferences.TIMEOUT = oldTimeout;
        swtBoteditor = bot.activeEditor();
        assertEquals(pasteFile, swtBoteditor.getTitle());
        eclipseEditor = swtBoteditor.toTextEditor();

        // go to beginning of editor
        eclipseEditor.selectRange(0, 0, 0);
        // paste
        eclipseEditor.pressShortcut(Keystrokes.CTRL, KeyStroke.getInstance("V"));
        swtBoteditor.save();
        // make sure proper content was pasted
        assertTrue(matchHead(eclipseEditor.getText(), "\t* META-INF/MANIFEST.MF:", 3));
        eclipseEditor.selectLine(0); // select first line
        final String actualFirstLineContent = eclipseEditor.getSelection();
        assertEquals(expectedFirstLineContent, actualFirstLineContent);
    }

