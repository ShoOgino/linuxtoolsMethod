	/**
	 * @see IParserChangeLogContrib#parseCurrentFunction(IEditorInput, int)
	 */
	public String parseCurrentFunction(IEditorInput input, int offset)
			throws CoreException {
		IWorkingCopyManager manager = CUIPlugin.getDefault()
				.getWorkingCopyManager();
		manager.connect(input);

		IWorkingCopy workingCopy = manager.getWorkingCopy(input);
		ICElement method = workingCopy.getElementAtOffset(offset);

		manager.disconnect(input);

		// no element selected
		if (method == null)
			return "";

		String currentElementName = "";

		if ((currentElementName = method.getElementName()) == null) {
			// element doesn't have a name
			return "";
		}

		int elementType = method.getElementType();

		switch (elementType) {
		case ICElement.C_FIELD:
		case ICElement.C_METHOD:
		case ICElement.C_FUNCTION:
			break;
		case ICElement.C_MODEL:
			return "";

		default:
			ICElement tmpMethodType;
			if (((tmpMethodType = method.getAncestor(ICElement.C_FUNCTION)) == null)
					&& ((tmpMethodType = method.getAncestor(ICElement.C_METHOD)) == null)
					&& ((tmpMethodType = method.getAncestor(ICElement.C_CLASS)) == null)) {
				return "";
			} else {
				// cursor is inside a class, but not method
				method = tmpMethodType;
				currentElementName = method.getElementName();
			}

		}

		// now append all ancestor class names to string

		ICElement tmpParent = method.getParent();

		while (tmpParent != null) {
			ICElement tmpParentClass = tmpParent.getAncestor(ICElement.C_CLASS);
			if (tmpParentClass != null) {
				String tmpParentClassName = tmpParentClass.getElementName();
				if (tmpParentClassName == null)
					return currentElementName;
				currentElementName = tmpParentClassName + "."
						+ currentElementName;
			} else
				return currentElementName;
			tmpParent = tmpParentClass.getParent();

		}
		return currentElementName;
	}

