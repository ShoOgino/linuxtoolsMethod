	@Test
	public void testFormSearchURL() throws Exception {
		TestData testData = new TestData();
		TestUtils.initSpaces(requestProvider, testData);
		requestProvider.addGetRequest("/namedspaces/user", testData.spaces);
		OSIORestClient client = connector.getClient(repository, requestProvider);
		AbstractTaskDataHandler taskDataHandler = connector.getTaskDataHandler();
		TaskAttributeMapper mapper = taskDataHandler.getAttributeMapper(repository);
		TaskData taskData1 = new TaskData(mapper, repository.getConnectorKind(), repository.getRepositoryUrl(), "");
		assertTrue(taskDataHandler.initializeTaskData(repository, taskData1, null, null));
		taskData1.getRoot().createAttribute(OSIORestTaskSchema.getDefault().SPACE_ID.getKey()).addValue("SPACE-0001");
		taskData1.getRoot().createAttribute(OSIORestTaskSchema.getDefault().WORKITEM_TYPE.getKey()).addValue("bug");
		TaskData taskData2 = new TaskData(mapper, repository.getConnectorKind(), repository.getRepositoryUrl(), "");
		assertTrue(taskDataHandler.initializeTaskData(repository, taskData2, null, null));
		taskData2.getRoot().createAttribute(OSIORestTaskSchema.getDefault().SPACE_ID.getKey()).addValue("SPACE-0002");
		taskData2.getRoot().createAttribute(OSIORestTaskSchema.getDefault().WORKITEM_TYPE.getKey()).addValue("bug");
		List<TaskData>taskList = new ArrayList<>();
		taskList.add(taskData1);
		taskList.add(taskData2);
		String query = "filter[expression]={\"$AND\":[{\"$OR\":[{\"space\":\"SPACE-0001\"},{\"space\":\"SPACE-0002\"}]},{\"$OR\":[{\"workitemtype\":\"WORKITEMTYPE-0001\"}]}]}";
		String transformedQuery = URLQueryEncoder.transform(query);
        requestProvider.addGetRequest("/search?" + transformedQuery, taskList);
		RepositoryLocation location = client.getClient().getLocation();
		location.setProperty(IOSIORestConstants.REPOSITORY_AUTH_ID, "user");
		location.setProperty(IOSIORestConstants.REPOSITORY_AUTH_TOKEN, "xxxxxxTokenxxxxxx");
		location.setUrl("https://api.openshift.io/api");
		OSIORestConfiguration configuration = client.getConfiguration(repository, new NullOperationMonitor());
		Map<String, Space> spaces = configuration.getSpaces();
		TestTaskDataCollector collector = new TestTaskDataCollector();
		RepositoryQuery repoQuery = new RepositoryQuery("https://api.openshift.io/api/query?space=mywork&space=mywork2&baseType=bug");
		IStatus status = client.performQuery(repository, repoQuery, collector, new NullOperationMonitor());
		assertTrue(status.isOK());
		List<TaskData> dataList = collector.getTaskData();
		assertTrue(dataList != null);
		assertEquals(dataList.size(), 2);
		assertEquals(dataList.get(0), taskData1);
		assertEquals(dataList.get(1), taskData2);
	}

