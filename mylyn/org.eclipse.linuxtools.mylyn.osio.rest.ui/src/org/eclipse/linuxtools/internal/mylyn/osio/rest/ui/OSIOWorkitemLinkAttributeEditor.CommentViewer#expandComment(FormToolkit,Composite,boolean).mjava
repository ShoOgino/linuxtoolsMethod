		private void expandComment(FormToolkit toolkit, Composite composite, boolean expanded) {
			buttonComposite.setVisible(expanded);
			if (expanded && composite.getData(KEY_EDITOR) == null) {
				commentViewer = toolkit.createComposite(composite);
				commentViewer.setLayout(new GridLayout(2, false));
				commentViewer.setLayoutData(new GridData(GridData.VERTICAL_ALIGN_BEGINNING));

				//Create user image viewer
				boolean showAvatar = Boolean.parseBoolean(getModel().getTaskRepository()
						.getProperty(TaskEditorExtensions.REPOSITORY_PROPERTY_AVATAR_SUPPORT));
				if (showAvatar) {
					String commentAuthor = getTaskData().getAttributeMapper().mapToRepositoryKey(commentAttribute,
							TaskAttribute.COMMENT_AUTHOR);
					TaskAttribute userImageAttribute = commentAttribute.getAttribute(commentAuthor);

					if (userImageAttribute != null) {
						userImageComposite = toolkit.createComposite(commentViewer);
						userImageComposite.setLayout(new GridLayout(1, false));
						GridDataFactory.swtDefaults().align(SWT.LEFT, SWT.BEGINNING).applyTo(userImageComposite);
						toolkit.paintBordersFor(userImageComposite);

						UserAttributeEditor userImage = new UserAttributeEditor(getModel(), userImageAttribute, 30);
						userImage.createControl(userImageComposite, toolkit);

						userImage.refresh();
					}
				}

				//Create comment text viewer
				TaskAttribute textAttribute = getTaskData().getAttributeMapper()
						.getAssoctiatedAttribute(taskComment.getTaskAttribute());
				commentTextEditor = createAttributeEditor(textAttribute);
				if (commentTextEditor != null) {
					commentTextEditor.setDecorationEnabled(false);
					commentTextEditor.createControl(commentViewer, toolkit);
					GridData commentGridData = new GridData(GridData.FILL_HORIZONTAL);
					commentGridData.verticalAlignment = GridData.BEGINNING;
					commentTextEditor.getControl().setLayoutData(commentGridData);

					commentTextEditor.getControl().addMouseListener(new MouseAdapter() {
						@Override
						public void mouseDown(MouseEvent e) {
							getTaskEditorPage().selectionChanged(taskComment);
						}
					});
					composite.setData(KEY_EDITOR, commentTextEditor);

					getTaskEditorPage().getAttributeEditorToolkit().adapt(commentTextEditor);
					reflow();
				}
			} else if (!expanded && composite.getData(KEY_EDITOR) != null) {
				// dispose viewer
				commentTextEditor.getControl().setMenu(null);
				commentTextEditor.getControl().dispose();
				if (userImageComposite != null) {
					userImageComposite.setMenu(null);
					userImageComposite.dispose();
				}
				if (commentViewer != null) {
					commentViewer.setMenu(null);
					commentViewer.dispose();
				}
				composite.setData(KEY_EDITOR, null);
				reflow();
			}
			if (!suppressSelectionChanged) {
				getTaskEditorPage().selectionChanged(taskComment);
			}
		}

