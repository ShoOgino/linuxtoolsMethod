	@Override
	protected AttributeEditorFactory createAttributeEditorFactory() {
		AttributeEditorFactory factory = new AttributeEditorFactory(getModel(), getTaskRepository(), getEditorSite()) {

			@Override
			public AbstractAttributeEditor createEditor(String type, TaskAttribute taskAttribute) {
				AbstractAttributeEditor editor;
				if (IOSIORestConstants.EDITOR_TYPE_ASSIGNEES.equals(type)) {
					editor = new OSIOAssigneeAttributeEditor(getModel(), taskAttribute);
				} else if (IOSIORestConstants.EDITOR_TYPE_LABELS.equals(type)) {
					editor = new OSIOLabelAttributeEditor(getModel(), taskAttribute);
				} else if (IOSIORestConstants.EDITOR_TYPE_LINKS.equals(type)) {
					editor = new OSIOLinksAttributeEditor(getModel(), taskAttribute);
				} else if (IOSIORestConstants.EDITOR_TYPE_ADD_LINKS.equals(type)) {
					editor = new OSIOAddLinksAttributeEditor(getModel(), getConnector(), taskAttribute);
				} else if (IOSIORestConstants.EDITOR_TYPE_ADD_LABELS.equals(type)) {
					editor = new OSIOLabelsAttributeEditor(getModel(), taskAttribute);
				} else if (IOSIORestConstants.EDITOR_TYPE_KEYWORD.equals(type)) {
					editor = new OSIOKeywordAttributeEditor(getModel(), taskAttribute);
				} else {
					editor = super.createEditor(type, taskAttribute);
				}
				if (editor != null
						&& OSIORestTaskSchema.getDefault().ADD_ASSIGNEE.getKey().equals(taskAttribute.getId())) {
					editor.setLayoutHint(new LayoutHint(RowSpan.SINGLE, ColumnSpan.SINGLE));
				}
				if (editor != null
						&& OSIORestTaskSchema.getDefault().ADD_LABEL.getKey().equals(taskAttribute.getId())) {
					editor.setLayoutHint(new LayoutHint(RowSpan.SINGLE, ColumnSpan.SINGLE));
				}
				if (editor != null
						&& OSIORestTaskSchema.getDefault().ADD_LINK.getKey().equals(taskAttribute.getId())) {
					editor.setLayoutHint(new LayoutHint(RowSpan.SINGLE, ColumnSpan.SINGLE));
				}

				return editor;
			}
		};
		return factory;
	}

