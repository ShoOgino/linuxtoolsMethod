	public RepositoryResponse postTaskData(TaskData taskData, Set<TaskAttribute> oldAttributes,
			TaskRepository repository, IOperationMonitor monitor) throws OSIORestException {
		Space space = null;
		if (taskData.isNew()) {
			TaskAttribute spaceAttribute = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().SPACE.getKey());
			Map<String, Space> spaces = getCachedSpaces(new NullOperationMonitor());
			space = spaces.get(spaceAttribute.getValue());
			String id = null;
			try {
				id = new OSIORestPostNewTask(client, taskData, space, connector, repository).run(monitor);
			} catch (CoreException e1) {
				throw new OSIORestException(e1);
			}
			return new RepositoryResponse(ResponseKind.TASK_CREATED, id);
		} else {
			TaskAttribute spaceIdAttribute = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().SPACE_ID.getKey());
			String spaceId = spaceIdAttribute.getValue();
			OSIORestConfiguration config;
			try {
				config = connector.getRepositoryConfiguration(repository);
				space = getSpaceById(spaceId, repository);
			} catch (CoreException e1) {
				throw new OSIORestException(e1);
			}

			TaskAttribute newComment = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().NEW_COMMENT.getKey());
			if (newComment != null) {
				String value = newComment.getValue();
				if (value != null && !value.isEmpty()) {
					new OSIORestPostNewCommentTask(client, taskData, oldAttributes).run(monitor);
					newComment.setValue("");
				}
			}

			TaskAttribute removeLinks = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().REMOVE_LINKS.getKey());
			if (removeLinks != null) {
				List<String> links = removeLinks.getValues();
				TaskAttributeMetaData metadata = removeLinks.getMetaData();
				TaskAttribute widAttr = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().UUID.getKey());
				String wid = widAttr.getValue();
				for (String link : links) {
					try {
						String id = metadata.getValue(link);
						new OSIORestDeleteLink(client, wid, id).run(monitor);
					} catch (Exception e) {
						StatusHandler.log(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
								NLS.bind("Unexpected error during deletion of work item link: <{0}>", //$NON-NLS-1$
										link),
								e));
					}
				}
			}
			
			TaskAttribute addLink = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().ADD_LINK.getKey());
			TaskAttributeMetaData metadata = addLink.getMetaData();
			String linkid = metadata.getValue("linkid"); //$NON-NLS-1$
			String sourceid = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().UUID.getKey()).getValue();
			String targetid = metadata.getValue("targetWid"); //$NON-NLS-1$
			String direction = metadata.getValue("direction"); //$NON-NLS-1$
			boolean isForward = true;
			if (direction != null && !direction.isEmpty()) {
				isForward = direction.equals("forward"); //$NON-NLS-1$
			}
			if (linkid != null && targetid != null) {
				new OSIORestPostNewLink(client, linkid, sourceid, targetid, isForward).run(monitor);
			}
			
			new OSIORestPatchUpdateTask(client, taskData, oldAttributes, space).run(monitor);
			return new RepositoryResponse(ResponseKind.TASK_UPDATED, taskData.getTaskId());
		}
	}

