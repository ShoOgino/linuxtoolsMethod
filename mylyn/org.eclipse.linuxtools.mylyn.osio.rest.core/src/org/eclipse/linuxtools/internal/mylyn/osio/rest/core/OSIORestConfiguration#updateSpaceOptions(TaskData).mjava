	public boolean updateSpaceOptions(@NonNull TaskData taskData) {
		if (taskData == null) {
			return false;
		}
		TaskAttribute attributeSpace = taskData.getRoot().getMappedAttribute(SCHEMA.SPACE.getKey());
		if (attributeSpace == null) {
			return false;
		}
		if (!attributeSpace.getValue().isEmpty()) {
			Space actualSpace = getSpaceWithName(attributeSpace.getValue());

			TaskAttribute attributeWorkItemType = taskData.getRoot().getMappedAttribute(SCHEMA.WORKITEM_TYPE.getKey());
			if (attributeWorkItemType != null) {
				setAttributeOptionsForSpace(attributeWorkItemType, actualSpace);
			}
			TaskAttribute attributeArea = taskData.getRoot().getMappedAttribute(SCHEMA.AREA.getKey());
			if (attributeArea != null) {
				setAttributeOptionsForSpace(attributeArea, actualSpace);
			}
			TaskAttribute attributeIteration = taskData.getRoot().getMappedAttribute(SCHEMA.ITERATION.getKey());
			if (attributeIteration != null) {
				setAttributeOptionsForSpace(attributeIteration, actualSpace);
			}
			TaskAttribute attributeAssignees = taskData.getRoot().getMappedAttribute(SCHEMA.ASSIGNEES.getKey());
			if (attributeAssignees != null) {
				setAttributeOptionsForSpace(attributeAssignees, actualSpace);
			}
			TaskAttribute attributeState = taskData.getRoot().getMappedAttribute(SCHEMA.STATUS.getKey());
			if (attributeState != null) {
				setAttributeOptionsForSpace(attributeState, actualSpace);
			}	
		} else {
			SortedSet<String> workItemTypes = new TreeSet<>();
			SortedSet<String> areas = new TreeSet<>();
			SortedSet<String> iterations = new TreeSet<>();
			SortedSet<String> users = new TreeSet<>();
			Set<String> states = new LinkedHashSet<>();
			for (Space space : getSpaces().values()) {
				attributeSpace.putOption(space.getName(), space.getName());
				if (space.getWorkItemTypes() != null) {
					// assume first workItemType is representative of all with regards to states
					if (!space.getWorkItemTypes().isEmpty()) {
						WorkItemTypeData data = space.getWorkItemTypes().values().iterator().next();
						WorkItemTypeAttributes attributes = data.getWorkItemTypeAttributes();
						Map<String, WorkItemTypeField> fields = attributes.getFields();
						WorkItemTypeField state = fields.get("system.state"); //$NON-NLS-1$
						WorkItemTypeFieldType stateType = state.getType();
						String[] values = stateType.getValues();
						if (values != null) {
							for (String value : values) {
								states.add(value);
							}
						}
					}
					for (Entry<String, WorkItemTypeData> entry : space.getWorkItemTypes().entrySet()) {
						workItemTypes.add(entry.getKey());
						WorkItemTypeData data = entry.getValue();
					}
				}
				if (space.getAreas() != null) {
					for (String entry : space.getAreas().keySet()) {
						areas.add(entry);
					}
				}
				if (space.getIterations() != null) {
					for (String entry : space.getIterations().keySet()) {
						iterations.add(entry);
					}
				}
				if (space.getUsers() != null) {
					for (String entry : space.getUsers().keySet()) {
						users.add(entry);
					}
				}
			}
			TaskAttribute attributeWorkItemType = taskData.getRoot().getMappedAttribute(SCHEMA.WORKITEM_TYPE.getKey());
			if (attributeWorkItemType != null) {
				setAllAttributeOptions(attributeWorkItemType, workItemTypes);
			}
			TaskAttribute attributeState = taskData.getRoot().getMappedAttribute(SCHEMA.STATUS.getKey());
			if (attributeState != null) {
				setAllAttributeOptions(attributeState, states);
			}

		}
		return true;
	}

