	public Map<String, String> getSpaceLinkTypes(String spaceId, TaskRepository taskRepository) {
		Space s = null;
		OSIORestConfiguration config;
		Map<String, String> linkMap = new LinkedHashMap<>();
		try {
			config = connector.getRepositoryConfiguration(taskRepository);
		} catch (CoreException e1) {
			StatusHandler.log(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
					NLS.bind("Unexpected error during retrieval of configuration for Task Repository {0}", //$NON-NLS-1$
							taskRepository.getRepositoryUrl()),
					e1));

			return linkMap;
		}

		try {
			Map<String, Space> spaces = getCachedSpaces(new NullOperationMonitor());
			if (spaces != null) {
				for (Space space : spaces.values()) {
					if (space.getId().equals(spaceId)) {
						s = space;
						break;
					}
				}
				if (s == null && (spaces = config.getExternalSpaces()) != null) {
					for (Space space : spaces.values()) {
						if (space.getId().equals(spaceId)) {
							s = space;
							break;
						}
					}
				}
				if (s != null) {
					Map<String, WorkItemLinkTypeData> linkTypes = s.getWorkItemLinkTypes();
					for (WorkItemLinkTypeData linkType : linkTypes.values()) {
						linkMap.put(linkType.getAttributes().getForwardName(), linkType.getId());
						linkMap.put(linkType.getAttributes().getReverseName(), linkType.getId());
					}
				}
			}
		} catch (OSIORestException e) {
			StatusHandler.log(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
					NLS.bind("Unexpected error during retrieval of work item link types for space {0}", //$NON-NLS-1$
							spaceId),
					e));
		}
		return linkMap;
	}

