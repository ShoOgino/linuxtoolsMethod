		@SuppressWarnings("deprecation")
		@Override
		public TaskAttribute deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
				throws JsonParseException {
			TaskAttribute response = taskData.getRoot()
					.getAttribute(OSIORestTaskSchema.getDefault().LINKS.getKey());
			response.clearValues();
			for (JsonElement entry : json.getAsJsonObject().get("data") //$NON-NLS-1$
					.getAsJsonArray()) {
				JsonObject entryObject = (JsonObject) entry.getAsJsonObject();
				String id = entryObject.get("id").getAsString(); //$NON-NLS-1$
				JsonObject relationships = (JsonObject) entryObject.get("relationships").getAsJsonObject();  //$NON-NLS-1$
				JsonObject source = (JsonObject) relationships.get("source").getAsJsonObject(); //$NON-NLS-1$
				JsonObject sourceData = source.get("data").getAsJsonObject();
				String sourceId = sourceData.get("id").getAsString(); //$NON-NLS-1$
				JsonObject target = (JsonObject) relationships.get("target").getAsJsonObject(); //$NON-NLS-1$
				JsonObject targetData = target.get("data").getAsJsonObject();
				String targetId = targetData.get("id").getAsString(); //$NON-NLS-1$
				JsonObject linkType = (JsonObject) relationships.get("link_type"); //$NON-NLS-1$
				JsonObject linkTypeData = linkType.get("data").getAsJsonObject();
				String linkTypeId = linkTypeData.get("id").getAsString();
				String link = ""; //$NON-NLS-1$
				String otherId = targetId;
				if (sourceId.equals(wid)) {
					link = space.getWorkItemLinkTypes().get(linkTypeId).getAttributes().getForwardName();
				} else {
					link = space.getWorkItemLinkTypes().get(linkTypeId).getAttributes().getReverseName();
					otherId = sourceId;
				}
				WorkItem workitem = null;
				try {
					workitem = new OSIORestGetWorkItem(client, otherId).run(new NullOperationMonitor());
				} catch (OSIORestException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				} //$NON-NLS-1$
				String otherWorkItem = OSIORestMessages.getString("UnknownName.msg"); //$NON-NLS-1$
				boolean haveOtherWorkItemName = false;
				if (workitem != null) {
					String spaceId = workitem.getSpaceId();
					Map<String, Space> spaces = config.getSpaces();
					if (spaces != null) {
						for (Space s : spaces.values()) {
							if (s.getId().equals(spaceId)) {
								User owner = null;
								try {
									owner = osioClient.getOwnedByLink(new NullOperationMonitor(), s);
								} catch (OSIORestException e1) {
									com.google.common.base.Throwables.propagate(
											new CoreException(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
													"Can not get owner of Space (" + spaceId + ")"))); //$NON-NLS-1$ //$NON-NLS-2$
								}				
								
								int number = Integer.parseInt(workitem.getNumber());
								otherWorkItem = owner.getName() + "/" + s.getName() + "#" + number; //$NON-NLS-1$ //$NON-NLS-2$
								haveOtherWorkItemName = true;
							    break;
							}
						}
					}
					if (!haveOtherWorkItemName) {
						Map<String, Space> externalSpaces = config.getExternalSpaces();
						Space s = externalSpaces.get(spaceId);
						if (s != null) {
							User owner = null;
							try {
								owner = osioClient.getOwnedByLink(new NullOperationMonitor(), s);
							} catch (OSIORestException e1) {
								com.google.common.base.Throwables.propagate(
										new CoreException(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
												"Can not get owner of Space (" + spaceId + ")"))); //$NON-NLS-1$ //$NON-NLS-2$
							}				

							int number = Integer.parseInt(workitem.getNumber());
							otherWorkItem = owner.getName() + "/" + s.getName() + "#" + number; //$NON-NLS-1$ //$NON-NLS-2$
						}

					}
 				}
				link += " " + workitem.getTitle() + " [" //$NON-NLS-1$ //$NON-NLS-2$ 
						+ otherWorkItem + "]"; //$NON-NLS-1$
				response.addValue(link);
				TaskAttributeMetaData metadata = response.getMetaData();
				metadata.putValue(link, id);
			}
			return response;
		}

