	public void getTaskData(Set<String> taskIds, TaskRepository taskRepository, TaskDataCollector collector,
			IOperationMonitor monitor) throws OSIORestException {
		OSIORestConfiguration config;
		try {
			config = connector.getRepositoryConfiguration(taskRepository);
		} catch (CoreException e1) {
			throw new OSIORestException(e1);
		}

		for (String taskId : taskIds) {
			if (taskId.isEmpty()) {
				continue;
			}
			String user = userName;
			String[] tokens = taskId.split("#"); //$NON-NLS-1$
			String spaceName = tokens[0];
			// check for workitem in space not owned by this user
			// in which case it is prefixed by username
			String[] spaceTokens = spaceName.split("/"); //$NON-NLS-1$
			if (spaceTokens.length > 1) {
				spaceName = spaceTokens[1];
				user = spaceTokens[0];
			}
			String wiNumber = tokens[1];
			try {
				// We need to translate from the space's workitem number to the real id
				// The easiest way is to use a namedspaces request that we know will give
				// us a "ResourceMovedPermanently" error which will contain the URL of the
				// real location of the workitem which contains the workitem uuid.
				user = URLQueryEncoder.transform(user);
				String query = "/namedspaces/" + user + "/" + spaceName + "/workitems/" + wiNumber; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				String wid = ""; //$NON-NLS-1$
				try {
				    wid = restRequestProvider.getWID(monitor, client, query, taskRepository);
				} catch (OSIORestResourceMovedPermanentlyException e) {
					Header h = e.getHeader();
					HeaderElement[] elements = h.getElements();
					for (HeaderElement element : elements) {
						if ("Location".equals(element.getName())) { //$NON-NLS-1$
							int index = element.getValue().indexOf("workitem/"); //$NON-NLS-1$
							wid = element.getValue().substring(index + 9);
						}
					}
				}
				String workitemquery = "/workitems/" + wid; //$NON-NLS-1$
				TaskData taskData = restRequestProvider.getSingleTaskData(monitor, client, connector, workitemquery, taskRepository);
				Space space = null;
				String spaceId = taskData.getRoot().getAttribute(OSIORestTaskSchema.getDefault().SPACE_ID.getKey()).getValue();
				space = getSpaceById(spaceId, taskRepository);
				
				restRequestProvider.getTaskComments(monitor, client, space, taskData);
				restRequestProvider.getTaskCreator(monitor, client, taskData);
				restRequestProvider.getTaskLabels(monitor, client, space, taskData);
				restRequestProvider.getTaskLinks(monitor, client, this, space, taskData, config);
				setTaskAssignees(taskData);
				config.updateSpaceOptions(taskData);
				config.addValidOperations(taskData);
				collector.accept(taskData);
			} catch (RuntimeException | CoreException e) {
				// if the Throwable was wrapped in a RuntimeException in
				// OSIORestGetTaskData.JSonTaskDataDeserializer.deserialize()
				// we now remove the wrapper and throw an OSIORestException	
				e.printStackTrace();
				Throwable cause = e.getCause();
				if (cause instanceof CoreException) {
					throw new OSIORestException(cause);
				}
			}
		}

	}

