	public void getTaskData(Set<String> taskIds, TaskRepository taskRepository, TaskDataCollector collector,
			IOperationMonitor monitor) throws OSIORestException {
		OSIORestConfiguration config;
		try {
			config = connector.getRepositoryConfiguration(taskRepository);
		} catch (CoreException e1) {
			throw new OSIORestException(e1);
		}

		for (String taskId : taskIds) {
			if (taskId.isEmpty()) {
				continue;
			}
			String[] tokens = taskId.split("#"); //$NON-NLS-1$
			String spaceName = tokens[0];
			String wiNumber = tokens[1];
			try {
				// We need to translate from the space's workitem number to the real id
				// The easiest way is to use a namedspaces request that we know will give
				// us a "ResourceMovedPermanently" error which will contain the URL of the
				// real location of the workitem which contains the workitem uuid.
				String query = "/namedspaces/" + userName + "/" + spaceName + "/workitems/" + wiNumber; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				String wid = ""; //$NON-NLS-1$
				try {
				    wid = new OSIORestGetWID(client, query, taskRepository).run(monitor);
				} catch (OSIORestResourceMovedPermanentlyException e) {
					Header h = e.getHeader();
					HeaderElement[] elements = h.getElements();
					for (HeaderElement element : elements) {
						if ("Location".equals(element.getName())) { //$NON-NLS-1$
							int index = element.getValue().indexOf("workitem/"); //$NON-NLS-1$
							wid = element.getValue().substring(index + 9);
						}
					}
				}
				String workitemquery = "/workitems/" + wid; //$NON-NLS-1$
				TaskData taskData = new OSIORestGetSingleTaskData(client, connector, workitemquery, taskRepository)
						.run(monitor);
				Map<String, Space> spaces = getCachedSpaces(monitor);
				new OSIORestGetTaskComments(getClient(), spaces.get(spaceName),taskData).run(monitor);
				new OSIORestGetTaskCreator(getClient(), taskData).run(monitor);
				new OSIORestGetTaskLinks(getClient(), spaces.get(spaceName), taskData).run(monitor);
				setTaskAssignees(taskData);
				config.updateSpaceOptions(taskData);
				config.addValidOperations(taskData);
				collector.accept(taskData);
			} catch (RuntimeException | CoreException e) {
				// if the Throwable was warped in a RuntimeException in
				// OSIORestGetTaskData.JSonTaskDataDeserializer.deserialize()
				// we now remove the warper and throw a  OSIORestException
				Throwable cause = e.getCause();
				if (cause instanceof CoreException) {
					throw new OSIORestException(cause);
				}
			}
		}

	}

