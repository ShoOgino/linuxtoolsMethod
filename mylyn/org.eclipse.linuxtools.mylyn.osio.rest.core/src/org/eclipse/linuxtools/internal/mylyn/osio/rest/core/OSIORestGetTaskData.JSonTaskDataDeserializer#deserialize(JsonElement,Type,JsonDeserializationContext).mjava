		@Override
		public ArrayList<TaskData> deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)
				throws JsonParseException {
			ArrayList<TaskData> response = new ArrayList<TaskData>();
			OSIORestTaskDataHandler dataHandler = (OSIORestTaskDataHandler) connector.getTaskDataHandler();
			TaskAttributeMapper mapper = dataHandler.getAttributeMapper(taskRepository);
			if (json.getAsJsonObject().get("data") == null) { //$NON-NLS-1$
				return response;
			}
			for (JsonElement workitem : json.getAsJsonObject().get("data").getAsJsonArray()) { //$NON-NLS-1$
				JsonObject workitemdata = workitem.getAsJsonObject();
				JsonObject attributes = workitemdata.get("attributes").getAsJsonObject(); //$NON-NLS-1$
				JsonObject relationships = workitemdata.get("relationships").getAsJsonObject(); //$NON-NLS-1$
				JsonObject space = relationships.get("space").getAsJsonObject(); //$NON-NLS-1$
				JsonObject spaceData = space.get("data").getAsJsonObject(); //$NON-NLS-1$
				String spaceId = spaceData.get("id").getAsString(); //$NON-NLS-1$
				Map<String, Space> spaces = taskConfiguration.getSpaces();
				Space actualSpace = null;
				for (Space entry : spaces.values()) {
					if (entry.getId().equals(spaceId)) {
						actualSpace = entry;
						break;
					}
				}
				String spaceName = actualSpace.getName();
				int number = attributes.get("system.number").getAsInt(); //$NON-NLS-1$
				String taskId = spaceName + "#" + number; //$NON-NLS-1$
				TaskData taskData = null;
				taskData = new TaskData(mapper, connector.getConnectorKind(), taskRepository.getRepositoryUrl(),
						taskId);
				try {
					dataHandler.initializeTaskData(taskRepository, taskData, null, null);
				} catch (CoreException e) {
					com.google.common.base.Throwables.propagate(e);
				}
				response.add(taskData);
				TaskAttribute idAttribute = taskData.getRoot().getAttribute(taskSchema.ID.getKey());
				idAttribute.setValue(taskId);
				TaskAttribute uuidAttribute = taskData.getRoot().getAttribute(taskSchema.UUID.getKey());
				String uuid = workitemdata.get("id").getAsString(); //$NON-NLS-1$
				uuidAttribute.setValue(uuid);
				TaskAttribute spaceAttribute = taskData.getRoot().getAttribute(taskSchema.SPACE.getKey());
				spaceAttribute.setValue(spaceName);
				// handle fields in the attributes section
				for (Entry<String, JsonElement> entry : attributes.entrySet()) {
					String attributeId = OSIORestTaskSchema.getAttributeNameFromFieldName(entry.getKey());
					if (entry.getKey().equals("system.updated_at")) { //$NON-NLS-1$
						TaskAttribute attribute = taskData.getRoot()
								.getAttribute(taskSchema.DATE_MODIFICATION.getKey());
						JsonElement value = entry.getValue();
						if (attribute != null) {
							try {
								SimpleDateFormat iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'", //$NON-NLS-1$
										Locale.US);
								iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC")); //$NON-NLS-1$
								Date tempDate = iso8601Format.parse(value.getAsString());
								attribute.setValue(Long.toString(tempDate.getTime()));
								continue;
							} catch (ParseException e) {
								com.google.common.base.Throwables.propagate(
										new CoreException(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
												"Can not parse Date (" + value.getAsString() + ")"))); //$NON-NLS-1$ //$NON-NLS-2$
							}
						}
					} else if (entry.getKey().equals("system.created_at")) { //$NON-NLS-1$
						TaskAttribute attribute = taskData.getRoot()
								.getAttribute(taskSchema.DATE_CREATION.getKey());
						JsonElement value = entry.getValue();
						if (attribute != null) {
							try {
								SimpleDateFormat iso8601Format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSSSS'Z'", //$NON-NLS-1$
										Locale.US);
								iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC")); //$NON-NLS-1$
								Date tempDate = iso8601Format.parse(value.getAsString());
								attribute.setValue(Long.toString(tempDate.getTime()));
								continue;
							} catch (ParseException e) {
								com.google.common.base.Throwables.propagate(
										new CoreException(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
												"Can not parse Date (" + value.getAsString() + ")"))); //$NON-NLS-1$ //$NON-NLS-2$
							}
						}
					} 

					TaskAttribute attribute = taskData.getRoot().getAttribute(attributeId);
					if (attribute != null) {
						JsonElement value = entry.getValue();
						if (!value.isJsonNull()) {
							if (value.isJsonArray()) {
								JsonArray valueArray = value.getAsJsonArray();
								attribute.clearValues();
								for (JsonElement jsonElement : valueArray) {
									attribute.addValue(jsonElement.getAsString());
								}
							} else {
								attribute.setValue(entry.getValue().getAsString());
							}
						}
					}
				}
				// handle fields in the relationships section
				for (Entry<String, JsonElement> entry : relationships.entrySet()) {
					String attributeId = OSIORestTaskSchema.getAttributeNameFromFieldName(entry.getKey());
					if (attributeId.equals("space") //$NON-NLS-1$
							|| attributeId.equals("assignees") //$NON-NLS-1$
							|| attributeId.equals("creator") //$NON-NLS-1$
						    || attributeId.equals("children")) { //$NON-NLS-1$
						continue;
					}
					TaskAttribute attribute = taskData.getRoot().getAttribute(attributeId);
					if (attribute != null) {
						JsonObject entryObject = entry.getValue().getAsJsonObject();
						if (entryObject.has("data")) { //$NON-NLS-1$
							JsonObject entryData = entryObject.get("data").getAsJsonObject(); //$NON-NLS-1$
							String entryId = entryData.get("id").getAsString(); //$NON-NLS-1$
							Map<String, IdNamed> itemMap = actualSpace.getMapFor(entry.getKey());
							if (itemMap != null) {
								for (Entry<String, IdNamed> itemEntry : itemMap.entrySet()) {
									if (itemEntry.getValue().getId().equals(entryId)) {
										attribute.setValue(itemEntry.getKey());
										break;
									}
								}
							}
						}
					}
				}
				
				// add assignee id (will resolve later)
				TaskAttribute assigneeIDs = taskData.getRoot().getAttribute(taskSchema.ASSIGNEE_IDS.getKey());
				JsonObject assigneeObject = relationships.get("assignees").getAsJsonObject(); //$NON-NLS-1$
				if (assigneeObject.get("data") != null) { //$NON-NLS-1$
					JsonArray assigneeArray = assigneeObject.get("data").getAsJsonArray(); //$NON-NLS-1$
					for (JsonElement entry : assigneeArray) {
						JsonObject entryObject = entry.getAsJsonObject();
						String id = entryObject.get("id").getAsString(); //$NON-NLS-1$
						assigneeIDs.addValue(id);
					}
				}
				
				// add creator id (will resolve later)
				TaskAttribute creatorID = taskData.getRoot().getAttribute(taskSchema.CREATOR_ID.getKey());
				JsonObject creatorObject = relationships.get("creator").getAsJsonObject(); //$NON-NLS-1$
				JsonObject creatorData = creatorObject.get("data").getAsJsonObject(); //$NON-NLS-1$
				creatorID.setValue(creatorData.get("id").getAsString()); //$NON-NLS-1$
				
				// add workitem url
				TaskAttribute workitemURL = taskData.getRoot().getAttribute(taskSchema.TASK_URL.getKey());
				JsonObject linksObject = workitemdata.get("links").getAsJsonObject(); //$NON-NLS-1$
				String workitemself = linksObject.get("self").getAsString(); //$NON-NLS-1$
				workitemURL.setValue(workitemself);
				
				OSIORestConfiguration config;
				try {
					config = connector.getRepositoryConfiguration(taskRepository);
					if (config != null) {
						config.addValidOperations(taskData);
					}
				} catch (CoreException e) {
					com.google.common.base.Throwables.propagate(e);
				}
			}
			return response;
		}

