	public IStatus performQuery(TaskRepository taskRepository, final IRepositoryQuery query,
			final TaskDataCollector resultCollector, IOperationMonitor monitor) throws OSIORestException {
		String queryUrl = query.getUrl();
		int index = queryUrl.indexOf("?"); //$NON-NLS-1$
		if (index > 0) {
			String queryParams = queryUrl.substring(index + 1);
			if (!queryParams.startsWith("filter")) { //$NON-NLS-1$
				queryUrl = formSearchUrl(queryUrl);
			}
		}
		String queryUrlSuffix = connector.getURLSuffix(queryUrl);
		try {
			List<TaskData> taskDataArray = new OSIORestGetTaskData(client, connector, queryUrlSuffix, taskRepository)
					.run(monitor);
			for (final TaskData taskData : taskDataArray) {
				taskData.setPartial(true);
				SafeRunner.run(new ISafeRunnable() {

					@Override
					public void run() throws Exception {
						resultCollector.accept(taskData);
					}

					@Override
					public void handleException(Throwable exception) {
						StatusHandler.log(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
								NLS.bind("Unexpected error during result collection. TaskID {0} in repository {1}", //$NON-NLS-1$
										taskData.getTaskId(), taskData.getRepositoryUrl()),
								exception));
					}
				});
			}
		} catch (CoreException e) {
			StatusHandler.log(new Status(IStatus.ERROR, OSIORestCore.ID_PLUGIN,
					NLS.bind("Unexpected error during result collection in repository {0}", //$NON-NLS-1$
							taskRepository.getRepositoryUrl()),
					e));
		}

		return Status.OK_STATUS;
	}

