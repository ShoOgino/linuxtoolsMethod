	public void testParserMultiEvent() {
		TreeParent invisibleRoot = buildModel(
				"resources/multievent-data/perf.data",
				"resources/multievent-data/perf.data.txt",
				"resources/multievent-data/perf.data.err.log");

		assertEquals(invisibleRoot.getChildren().length, 5);

		String cur = null;

		for (TreeParent event : invisibleRoot.getChildren()) {

			cur = event.getName();

			// Assert specific properties extracted by the parser.
			if ("cpu-clock".equals(cur)) {
				assertTrue(event.hasChildren());
				assertEquals(event.getChildren().length, 1);

				TreeParent cmd = event.getChildren()[0];
				assertEquals(cmd.getChildren().length, 1);

				String[] cmdLabels = { "hellotest" };
				checkCommadLabels(cmdLabels, cmd);
			} else if ("task-clock".equals(cur)) {
				assertTrue(event.hasChildren());
				assertEquals(event.getChildren().length, 1);

				TreeParent cmd = event.getChildren()[0];
				assertEquals(cmd.getChildren().length, 1);

				String[] cmdLabels = { "hellotest" };
				checkCommadLabels(cmdLabels, cmd);
			} else if ("page-faults".equals(cur)) {
				assertTrue(event.hasChildren());
				assertEquals(event.getChildren().length, 1);

				TreeParent cmd = event.getChildren()[0];
				assertEquals(cmd.getChildren().length, 3);

				String[] cmdLabels = { "ld-2.14.90.so", "[kernel.kallsyms]",
						"libc-2.14.90.so" };
				checkCommadLabels(cmdLabels, cmd);
			} else if ("minor-faults".equals(cur)) {
				assertTrue(event.hasChildren());
				assertEquals(event.getChildren().length, 1);

				TreeParent cmd = event.getChildren()[0];
				assertEquals(cmd.getChildren().length, 3);

				String[] cmdLabels = { "ld-2.14.90.so", "[kernel.kallsyms]",
						"libc-2.14.90.so" };
				checkCommadLabels(cmdLabels, cmd);
			} else if ("major-faults".equals(cur)) {
				assertTrue(!event.hasChildren());
			}

		}
	}

