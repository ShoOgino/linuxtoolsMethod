	@Test
	public void testOptionsTab() throws CoreException {
		ILaunchConfigurationWorkingCopy wc = config.getWorkingCopy();
		TestOptionsTab tab = new TestOptionsTab();
		tab.createControl(new Shell());
		assertNotNull(tab.getImage());
		assertNotNull(tab.getName());

		//default config
		tab.setDefaults(wc);
		tab.initializeFrom(config);
		assertTrue(tab.isValid(config));

		Button rrCheck = tab.getChkRecordRealtime();
		rrCheck.setSelection(true);
		rrCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Record_Realtime, false));
		rrCheck.setSelection(false);
		rrCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Record_Realtime, true));

		Button rvCheck = tab.getChkRecordVerbose();
		rvCheck.setSelection(true);
		rvCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Record_Verbose, false));
		rvCheck.setSelection(false);
		rvCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Record_Verbose, true));

		Button slcCheck = tab.getChkSourceLineNumbers();
		slcCheck.setSelection(true);
		slcCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_SourceLineNumbers, false));
		slcCheck.setSelection(false);
		slcCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_SourceLineNumbers, true));

		Button kslcCheck = tab.getChkKernelSourceLineNumbers();
		kslcCheck.setSelection(true);
		kslcCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Kernel_SourceLineNumbers, false));
		kslcCheck.setSelection(false);
		kslcCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Kernel_SourceLineNumbers, true));

		Version version = PerfCore.getPerfVersion(config);
		Button meCheck = tab.getChkMultiplexEvents();
		if (meCheck.isEnabled()) {
			assertTrue (version != null && new Version(2, 6, 35).compareTo(version) > 0);

			meCheck.setSelection(true);
			meCheck.notifyListeners(SWT.Selection, null);
			performApply(tab, wc);
			assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Multiplex, false));
			meCheck.setSelection(false);
			meCheck.notifyListeners(SWT.Selection, null);
			performApply(tab, wc);
			assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Multiplex, true));
		} else {
			assertTrue (version == null || new Version(2, 6, 35).compareTo(version) < 0);
		}

		Button msCheck = tab.getChkModuleSymbols();
		msCheck.setSelection(true);
		msCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_ModuleSymbols, false));
		msCheck.setSelection(false);
		msCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_ModuleSymbols, true));

		Button husCheck = tab.getChkHideUnresolvedSymbols();
		husCheck.setSelection(true);
		husCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_HideUnresolvedSymbols, false));
		husCheck.setSelection(false);
		husCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_HideUnresolvedSymbols, true));

		rrCheck.setSelection(true);
		rrCheck.notifyListeners(SWT.Selection, null);
		rvCheck.setSelection(true);
		rvCheck.notifyListeners(SWT.Selection, null);
		slcCheck.setSelection(true);
		slcCheck.notifyListeners(SWT.Selection, null);
		kslcCheck.setSelection(true);
		kslcCheck.notifyListeners(SWT.Selection, null);
		meCheck.setSelection(true);
		meCheck.notifyListeners(SWT.Selection, null);
		msCheck.setSelection(true);
		msCheck.notifyListeners(SWT.Selection, null);
		husCheck.setSelection(true);
		husCheck.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		tab.initializeFrom(config);
		assertTrue(rrCheck.getSelection());
		assertTrue(rvCheck.getSelection());
		assertTrue(slcCheck.getSelection());
		assertTrue(kslcCheck.getSelection());
		assertTrue(meCheck.getSelection());
		assertTrue(msCheck.getSelection());
		assertTrue(husCheck.getSelection());

		Text klocText = tab.getTxtKernelLocation();
		klocText.setText("doesntexist"); //$NON-NLS-1$
		klocText.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertFalse(tab.isValid(config));

		klocText.setText(""); //$NON-NLS-1$
		klocText.notifyListeners(SWT.Selection, null);
		performApply(tab, wc);
		assertTrue(tab.isValid(config));
	}

