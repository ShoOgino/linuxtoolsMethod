	public void testOptionsTab() throws CoreException {
		TestOptionsTab tab = new TestOptionsTab();
		tab.createControl(new Shell());
		assertNotNull(tab.getImage());
		assertNotNull(tab.getName());
		
		//default config
		tab.setDefaults(config.getWorkingCopy());
		tab.initializeFrom(config);
		assertTrue(tab.isValid(config));
		
		Button rrCheck = tab.get_chkRecord_Realtime();
		rrCheck.setSelection(true);
		rrCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Record_Realtime, false));
		rrCheck.setSelection(false);
		rrCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Record_Realtime, true));
		
		Button rvCheck = tab.get_chkRecord_Verbose();
		rvCheck.setSelection(true);
		rvCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Record_Verbose, false));
		rvCheck.setSelection(false);
		rvCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Record_Verbose, true));
		
		Button slcCheck = tab.get_chkSourceLineNumbers();
		slcCheck.setSelection(true);
		slcCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_SourceLineNumbers, false));
		slcCheck.setSelection(false);
		slcCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_SourceLineNumbers, true));
		
		Button kslcCheck = tab.get_chkKernel_SourceLineNumbers();
		kslcCheck.setSelection(true);
		kslcCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Kernel_SourceLineNumbers, false));
		kslcCheck.setSelection(false);
		kslcCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Kernel_SourceLineNumbers, true));
		
		Button meCheck = tab.get_chkMultiplexEvents();
		meCheck.setSelection(true);
		meCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_Multiplex, false));
		meCheck.setSelection(false);
		meCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_Multiplex, true));
		
		Button msCheck = tab.get_chkModuleSymbols();
		msCheck.setSelection(true);
		msCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_ModuleSymbols, false));
		msCheck.setSelection(false);
		msCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_ModuleSymbols, true));
		
		Button husCheck = tab.get_chkHideUnresolvedSymbols();
		husCheck.setSelection(true);
		husCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(true, config.getAttribute(PerfPlugin.ATTR_HideUnresolvedSymbols, false));
		husCheck.setSelection(false);
		husCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertEquals(false, config.getAttribute(PerfPlugin.ATTR_HideUnresolvedSymbols, true));
		
		rrCheck.setSelection(true);
		rrCheck.notifyListeners(SWT.Selection, null);
		rvCheck.setSelection(true);
		rvCheck.notifyListeners(SWT.Selection, null);
		slcCheck.setSelection(true);
		slcCheck.notifyListeners(SWT.Selection, null);
		kslcCheck.setSelection(true);
		kslcCheck.notifyListeners(SWT.Selection, null);
		meCheck.setSelection(true);
		meCheck.notifyListeners(SWT.Selection, null);
		msCheck.setSelection(true);
		msCheck.notifyListeners(SWT.Selection, null);
		husCheck.setSelection(true);
		husCheck.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		tab.initializeFrom(config);
		assertTrue(rrCheck.getSelection());
		assertTrue(rvCheck.getSelection());
		assertTrue(slcCheck.getSelection());
		assertTrue(kslcCheck.getSelection());
		assertTrue(meCheck.getSelection());
		assertTrue(msCheck.getSelection());
		assertTrue(husCheck.getSelection());
		
		Text klocText = tab.get_txtKernel_Location();
		klocText.setText("doesntexist"); //$NON-NLS-1$
		klocText.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertFalse(tab.isValid(config));

		klocText.setText(""); //$NON-NLS-1$
		klocText.notifyListeners(SWT.Selection, null);
		tab.performApply(config.getWorkingCopy());
		assertTrue(tab.isValid(config));
	}

