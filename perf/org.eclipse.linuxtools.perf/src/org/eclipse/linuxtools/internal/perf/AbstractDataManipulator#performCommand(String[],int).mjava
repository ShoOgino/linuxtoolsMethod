    public void performCommand(String[] cmd, int fd) {
        BufferedReader buffData = null;
        BufferedReader buffTemp = null;
        URI pathWorkDirURI = null;
        try {

            Process proc = null;
            RemoteConnection exeRC = null;
            try {
                pathWorkDirURI = new URI(pathWorkDir.toOSString());
                exeRC = new RemoteConnection(pathWorkDirURI);
            } catch (RemoteConnectionException e) {
                MessageDialog.openError(Display.getCurrent().getActiveShell(), Messages.MsgProxyError, Messages.MsgProxyError);
            } catch (URISyntaxException e) {
                MessageDialog.openError(Display.getCurrent().getActiveShell(), Messages.MsgProxyError, Messages.MsgProxyError);
            }
            IFileStore workDirStore = exeRC.getRmtFileProxy().getResource(pathWorkDirURI.getPath());
            proc = RuntimeProcessFactory.getFactory().exec(cmd, null, workDirStore, project);
            StringBuffer data = new StringBuffer();
            StringBuffer temp = new StringBuffer();

            switch (fd) {
            case 2:
                buffData = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
                buffTemp = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                readStream(buffTemp, temp);
                readStream(buffData, data);
                break;
            case 1:
                // fall through to default case
            default:
                buffData = new BufferedReader(new InputStreamReader(proc.getInputStream()));
                buffTemp = new BufferedReader(new InputStreamReader(proc.getErrorStream()));
                readStream(buffData, data);
                readStream(buffTemp, temp);
                break;
            }
            joinAll();
            text = data.toString();
        } catch (IOException|InterruptedException e) {
            text = ""; //$NON-NLS-1$
        }finally {
            try {
                if (buffData != null) {
                    buffData.close();
                }
                if (buffTemp != null) {
                    buffTemp.close();
                }
            } catch (IOException e) {
                // continue
            }
        }
    }

