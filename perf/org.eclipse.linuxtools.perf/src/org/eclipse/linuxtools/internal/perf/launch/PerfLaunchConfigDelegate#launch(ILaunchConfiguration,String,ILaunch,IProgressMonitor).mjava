	@Override
	public void launch(ILaunchConfiguration config, String mode,
			ILaunch launch, IProgressMonitor monitor) throws CoreException {
		// check if Perf exists in $PATH
		if (! PerfCore.checkPerfInPath()) {
			IStatus status = new Status(IStatus.ERROR, PerfPlugin.PLUGIN_ID, "Error: Perf was not found on PATH"); //$NON-NLS-1$
			throw new CoreException(status);
		}

		//Find the binary path
		IPath exePath = CDebugUtils.verifyProgramPath( config );

		// Build the commandline string to run perf recording the given project
		// Program args from launch config.
		String arguments[] = getProgramArgumentsArray(config);

		if (config.getAttribute(PerfPlugin.ATTR_ShowStat,
				PerfPlugin.ATTR_ShowStat_default)) {

			int runCount = config.getAttribute(PerfPlugin.ATTR_StatRunCount,
					PerfPlugin.ATTR_StatRunCount_default);
			StringBuffer args = new StringBuffer();
			for (String arg : arguments) {
				args.append(arg);
				args.append(" "); //$NON-NLS-1$
			}
			String title = renderProcessLabel("Performance counter stats for "
							+ exePath.toOSString()
							+ " " + args.toString() //$NON-NLS-1$
							+ " (" + runCount + " runs)" ); //$NON-NLS-1$ /$NON-NLS-2$

			StatData sd = null;
			Object[] configEvents = config.getAttribute(PerfPlugin.ATTR_SelectedEvents, PerfPlugin.ATTR_SelectedEvents_default).toArray();
			String[] statEvents  = new String[0];

			if(!config.getAttribute(PerfPlugin.ATTR_DefaultEvent, PerfPlugin.ATTR_DefaultEvent_default)){
				// gather selected events
				statEvents = configEvents == null ? statEvents : Arrays.asList(configEvents).toArray(new String[]{});
			}

			sd = new StatData(title, exePath.toOSString(), arguments, runCount, statEvents);
			sd.parse();
			PerfPlugin.getDefault().setStatData(sd);
			StatView.refreshView();
		} else {
			//Get working directory
			File wd = getWorkingDirectory( config );
			if ( wd == null ) {
				wd = new File( System.getProperty( "user.home", "." ) ); //$NON-NLS-1$ //$NON-NLS-2$
			}

			ArrayList<String> command = new ArrayList<String>();
			// Get the base commandline string (with flags/options based on config)
			command.addAll(Arrays.asList(PerfCore.getRecordString(config)));
			// Add the path to the executable
			command.add(exePath.toOSString());
			command.addAll(Arrays.asList( arguments));
			String[] commandArray = command.toArray(new String[] {});
			boolean usePty = config.getAttribute(ICDTLaunchConfigurationConstants.ATTR_USE_TERMINAL, ICDTLaunchConfigurationConstants.USE_TERMINAL_DEFAULT);

			Process process;
			try {
				//Spawn the process
				process = execute( commandArray, getEnvironment( config ), wd, usePty );
				createNewProcess( launch, process, commandArray[0] ); //Spawn IProcess using Debug plugin (CDT)

				//Wait for recording to complete.
				process.waitFor();
				PrintStream print = null;
				if (config.getAttribute(IDebugUIConstants.ATTR_CAPTURE_IN_CONSOLE, true)) {
					//Get the console to output to.
					//This may not be the best way to accomplish this but it shall do for now.
					ConsolePlugin plugin = ConsolePlugin.getDefault();
					IConsoleManager conMan = plugin.getConsoleManager();
					IConsole[] existing = conMan.getConsoles();
					IOConsole binaryOutCons = null;

					// Find the console
					for(IConsole x : existing) {
						if (x.getName().contains(renderProcessLabel(commandArray[0]))) {
							binaryOutCons = (IOConsole)x;
						}
					}
					// If can't be found get the most recent opened, this should probably never happen.
					if ((binaryOutCons == null) && (existing.length != 0)) {
						if (existing[existing.length - 1] instanceof IOConsole)
							binaryOutCons = (IOConsole)existing[existing.length - 1];
					}

					//Get the printstream via the outputstream.
					//Get ouput stream
					OutputStream outputTo;
					if (binaryOutCons != null) {
						outputTo = binaryOutCons.newOutputStream();
						print = new PrintStream(outputTo);

						for (int i = 0; i < commandArray.length; i++) {
							print.print(commandArray[i] + " ");
						}

						// Print Message
						print.println();
						print.println("Analysing recorded perf.data, please wait...");
						// Possibly should pass this (the console reference) on to
						// PerfCore.Report if theres anything we ever want to spit
						// out to user.
					}
				}

				//(Only for testing this line..) PerfCore.Report(config, null, null, null, "/home/thavidu/dev/eclipse-oprof2-workspace/org.eclipse.linuxtools.internal.perf.tests/resources/perf.data");
				IPath workingDir = Path.fromOSString(wd.toURI().getPath());
				PerfCore.Report(config, getEnvironment(config), workingDir, monitor, null, print);
				PerfCore.RefreshView(renderProcessLabel(exePath.toOSString()));

				if (config.getAttribute(PerfPlugin.ATTR_ShowSourceDisassembly,
						PerfPlugin.ATTR_ShowSourceDisassembly_default)) {
					String title = renderProcessLabel(workingDir + "perf.data"); //$NON-NLS-1$
					SourceDisassemblyData sdData = new SourceDisassemblyData(title, workingDir);
					sdData.parse();
					PerfPlugin.getDefault().setSourceDisassemblyData(sdData);
					SourceDisassemblyView.refreshView();
				}

			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

