	private void createEventTabs(Composite top, ILaunchConfiguration config){
		//Maybe not the best place to load the event list but we'll see.
		Map<String,List<String>> events = PerfCore.getEventList(config);

		// the special counters should be last
		ArrayList<String> tmpTabNames = new ArrayList<>(events.keySet());
		final List<String> SPECIAL_EVENTS = Arrays.asList(new String[] {
				PerfPlugin.STRINGS_HWBREAKPOINTS,
				PerfPlugin.STRINGS_RAWHWEvents });
		tmpTabNames.removeAll(SPECIAL_EVENTS);
		tmpTabNames.addAll(SPECIAL_EVENTS);

		String [] tabNames = tmpTabNames.toArray(new String [0]);
		eventTabItems = new TabItem[tabNames.length];
		eventTable = new Table[tabNames.length];

		tabFolder = new TabFolder(top, SWT.NONE);
		tabFolder.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

		// Initialize each tab.
		for (int i = 0; i < tabNames.length; i++) {

			eventTabItems[i] = new TabItem(tabFolder, SWT.NONE);
			eventTabItems[i].setText(tabNames[i]);

			// These are for the two special tabs for custom events.
			if (tabNames[i].equals(PerfPlugin.STRINGS_HWBREAKPOINTS)
					|| tabNames[i].equals(PerfPlugin.STRINGS_RAWHWEvents)) {

				// Composite to contain it all
				Composite c = new Composite(tabFolder, SWT.NONE);
				c.setLayout(new GridLayout(2, false));

				// A list to check off existing custom events (or show the new ones added)
				Table table = new Table(c, SWT.CHECK | SWT.MULTI);
				eventTable[i] = table;
				table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
				table.addSelectionListener(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent se) {
						updateLaunchConfigurationDialog();
					}
				});

				// Right side to enter new events and delete old ones
				Composite right = new Composite(c, SWT.NONE);
				right.setLayout(new GridLayout(2,false));
				right.setLayoutData(new GridData(SWT.RIGHT, SWT.FILL, false, true));

				// for adding
				Label l = new Label(right, SWT.NONE);
				l.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,2,1));
				Text t = new Text(right, SWT.SINGLE | SWT.BORDER);
				t.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false));
				if (tabNames[i].equals(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
					bpTabIndex = i;
					bpText = t;
					l.setText("Please enter the hardware breakpoint in the form mem:<addr>[:access].");
				}
				if (tabNames[i].equals(PerfPlugin.STRINGS_RAWHWEvents)) {
					rawTabIndex = i;
					rawText = t;
					l.setText("Please enter the raw register encoding in the form rNNN.");
				}

				Button b = new Button(right, SWT.PUSH);
				b.setText("Add");
				b.setLayoutData(new GridData(SWT.RIGHT, SWT.TOP, false, false));
				b.addSelectionListener(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent se) {
						int i = tabFolder.getSelectionIndex();
						if (rawTabIndex == i) {
							new TableItem(eventTable[i], SWT.NONE).setText(rawText.getText());
						} else if(bpTabIndex == i) {
							new TableItem(eventTable[i], SWT.NONE).setText(bpText.getText());
						}
						updateLaunchConfigurationDialog();
					}
				});
				l = new Label(right, SWT.NONE);
				l.setForeground(new Color(right.getDisplay(), 100,100,100));
				if (tabNames[i].equals(PerfPlugin.STRINGS_HWBREAKPOINTS)) {
					l.setText("For example, .........");
				}
				if (tabNames[i].equals(PerfPlugin.STRINGS_RAWHWEvents)) {
					l.setText("For example, r1a8");
				}
				l.setLayoutData(new GridData(SWT.FILL, SWT.TOP, true, false,2,1));

				// spacer label.
				l = new Label(right, SWT.NONE);
				l.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true,2,1));

				// for removing
				b = new Button(right, SWT.PUSH);
				b.setText("Remove Selected Events");
				b.setLayoutData(new GridData(SWT.FILL, SWT.BOTTOM, true, false,2,1));
				b.addSelectionListener(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent se) {
						eventTable[tabFolder.getSelectionIndex()].remove(eventTable[tabFolder.getSelectionIndex()].getSelectionIndices());
						updateLaunchConfigurationDialog();
					}
				});
				l = new Label(right, SWT.NONE);
				l.setForeground(new Color(right.getDisplay(), 100,100,100));
				l.setText("Note: Select by highlighting, not by checking.");
				l.setLayoutData(new GridData(SWT.FILL, SWT.BOTTOM, true, false,2,1));

				eventTabItems[i].setControl(c);

			} else {
				// This loads all the events 'perf list' gives into their respective tabs.
				Table table = new Table(tabFolder, SWT.CHECK);
				eventTable[i] = table;

				List<String> eventList = events.get(tabNames[i]);
				for (String event : eventList) {
					TableItem item = new TableItem(table, SWT.NONE);
					item.setText(event);
				}

				table.addSelectionListener(new SelectionAdapter() {
					@Override
					public void widgetSelected(SelectionEvent se) {
						updateLaunchConfigurationDialog();
					}
				});

				eventTabItems[i].setControl(table);
			}
		}
	}

