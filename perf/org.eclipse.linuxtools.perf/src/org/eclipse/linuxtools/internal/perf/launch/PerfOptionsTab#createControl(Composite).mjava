	@Override
	public void createControl(Composite parent) {
		scrollTop = new ScrolledComposite(parent, SWT.H_SCROLL | SWT.V_SCROLL);
		scrollTop.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
		scrollTop.setExpandVertical(true);
		scrollTop.setExpandHorizontal(true);

		setControl(scrollTop);

		top = new Composite(scrollTop, SWT.NONE);
		top.setLayout(new GridLayout());

		createVerticalSpacer(top, 1);
		GridData data;

		// Kernel Selection
		Composite kernelComp = new Composite(top, SWT.NONE);
		GridLayout parallelLayout = new GridLayout(2, false);
		data = new GridData(GridData.FILL_HORIZONTAL);
		parallelLayout.marginHeight = 0;
		parallelLayout.marginWidth = 0;
		kernelComp.setLayout(parallelLayout);
		kernelComp.setLayoutData(data);

		Label kernelLabel = new Label(kernelComp, SWT.NONE);
		kernelLabel.setText(PerfPlugin.STRINGS_Kernel_Location);
		data = new GridData();
		data.horizontalSpan = 2;
		kernelLabel.setLayoutData(data);

		txtKernelLocation = new Text(kernelComp, SWT.SINGLE | SWT.BORDER);
		data = new GridData(GridData.FILL_HORIZONTAL);
		txtKernelLocation.setLayoutData(data);
		txtKernelLocation.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent mev) {
				handleKernelImageFileTextModify(txtKernelLocation);
			}
		});

		Button button = createPushButton(kernelComp, "Browse", null);
		final Shell shell = top.getShell();
		button.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent sev) {
				showFileDialog(shell);
			}
		});

		createVerticalSpacer(top, 1);

		// Create checkbox options container
		Composite chkBoxComp = new Composite(top, SWT.NONE);
		GridLayout chkBoxLayout = new GridLayout();
		chkBoxLayout.marginHeight = 0;
		chkBoxLayout.marginWidth = 0;
		chkBoxComp.setLayout(chkBoxLayout);

		chkRecordVerbose = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_Record_Verbose);
		chkModuleSymbols = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_ModuleSymbols);
		chkHideUnresolvedSymbols = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_HideUnresolvedSymbols);
		chkSourceLineNumbers = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_SourceLineNumbers);
		chkShowSourceDisassembly = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_ShowSourceDisassembly);

		Composite showStatComp = new Composite(top, SWT.NONE);
		showStatComp.setLayout(parallelLayout);

		chkShowStat = createCheckButtonHelper(showStatComp, PerfPlugin.STRINGS_ShowStat);
		chkShowStat.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent se) {
				handleShowStatSelection();
			}
		});
		statRunCount = new Spinner(showStatComp, SWT.BORDER);
		statRunCount.setEnabled(false);
		statRunCount.setMinimum(1);
		statRunCount.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				updateLaunchConfigurationDialog();
			}
		});

		chkSourceLineNumbers.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent se) {
				if ((chkKernelSourceLineNumbers != null) && (!chkSourceLineNumbers.getSelection())) {
					chkKernelSourceLineNumbers.setEnabled(false);
				} else {
					chkKernelSourceLineNumbers.setEnabled(true);
				}
			}
		});
		chkKernelSourceLineNumbers = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_Kernel_SourceLineNumbers);
		chkRecordRealtime = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_Record_Realtime);
		chkMultiplexEvents = createCheckButtonHelper(chkBoxComp, PerfPlugin.STRINGS_Multiplex);

		scrollTop.setContent(top);
		recomputeSize();
		updateLaunchConfigurationDialog();
	}

