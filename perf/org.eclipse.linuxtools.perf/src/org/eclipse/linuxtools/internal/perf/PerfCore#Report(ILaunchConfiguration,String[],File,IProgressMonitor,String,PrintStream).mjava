	// Runs assuming perf.data has already been recorded, environ and workingDir can be set to null to use default
	//perfDataLoc is optional - it is used to provide a pre-existing data file instead of something recorded from
	//whatever project is being profiled. It is only used for junit tests atm.
    public static void Report(ILaunchConfiguration config, String[] environ, File workingDir, IProgressMonitor monitor, String perfDataLoc, PrintStream print) {
		TreeParent invisibleRoot = PerfPlugin.getDefault().getModelRoot(); 
		if (invisibleRoot == null) {
			invisibleRoot = new TreeParent("");
			PerfPlugin.getDefault().setModelRoot(invisibleRoot);
		} else {
			invisibleRoot.clear();
		}
		
		boolean OldPerfVersion = false;
		if (getPerfVersion(environ, workingDir).contains("perf version 0.0.2.PERF")) {
			OldPerfVersion = true;
			if (print != null) { print.println("WARNING: You are running an older version of Perf, please update if you can. The plugin may produce unpredictable results."); }
		}
		
		
		BufferedReader input = null;
		BufferedReader error = null;
		String line = null;
		Process p = null;
		String items[];
		float percent;
		
		if (monitor != null && monitor.isCanceled()) { RefreshView(); return; }
		
		try {
			if (workingDir == null) {
				p = Runtime.getRuntime().exec(getReportString(config, perfDataLoc));				
			} else {
				String perfDefaultDataLoc = workingDir + "/" + PerfPlugin.PERF_DEFAULT_DATA;
				p = Runtime.getRuntime().exec(getReportString(config, perfDefaultDataLoc));
			}			
			//p.waitFor();
			input = new BufferedReader(new InputStreamReader(p.getInputStream()));
			error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
			//spitting error stream moved to end of while loop, due to commenting of p.waitFor()
		} catch( IOException e ) {
			e.printStackTrace();
		/*} catch (InterruptedException e) {
			e.printStackTrace();*/
		}
		
		if (monitor != null && monitor.isCanceled()) { RefreshView(); return; }
		
		line = null;
		double samples;
		String comm,dso,symbol;
		boolean kernelFlag;
		PMEvent currentEvent = null;
		PMCommand currentCommand = null;
		PMDso currentDso = null;
		PMFile currentFile = null;
		PMSymbol currentSym = null;
        try {
			while (( line = input.readLine()) != null){
				if (monitor != null && monitor.isCanceled()) { RefreshView(); return; }
				//System.out.println("Reading line: " + line);
				if ((line.startsWith("#"))) {
					//if (PerfPlugin.DEBUG_ON) System.out.println("Reading line: " + line);
					// # is comment line, but if we're in multi-event mode then we need to scan for event name.
					if (line.contains("Events:")) {
						String[] tmp = line.trim().split(" ");
						currentEvent = new PMEvent(tmp[tmp.length - 1]);
						//if (PerfPlugin.DEBUG_ON) System.out.println("Event is " + tmp[tmp.length - 1]);
						invisibleRoot.addChild(currentEvent);
						currentCommand = null;
						currentDso = null;
					} else if (line.contains("Samples:")) { //"samples" was used instead of events in an older version, some incompatibilities may arise.
						if (print != null) { print.println("WARNING: You are running an older version of Perf, please update if you can. The plugin may produce unpredictable results."); }
						invisibleRoot.addChild(new PMEvent("WARNING: You are running an older version of Perf, the plugin may produce unpredictable results."));
					}
				} else {
					items = line.trim().split(""+(char)1); // using custom field separator. for default whitespace use " +"
					if (items.length != 5) { if (!line.trim().equals("")) { System.err.println("Err INVALID: " + line + "//length:" + items.length); }; continue; }
					percent = Float.parseFloat(items[0]); //percent column
					samples = Double.parseDouble(items[1].trim()); //samples column
					comm = items[2].trim(); //command column
					dso = items[3].trim(); //dso column
					symbol = items[4].trim(); //symbol column 
					kernelFlag = (""+symbol.charAt(1)).equals("k");			
					
					//if (PerfPlugin.DEBUG_ON) System.out.println(percent + "//" + samples + "//" + comm + "//" + dso + "//" + kernelFlag + "//" + symbol);
					if ((currentCommand == null) || (!currentCommand.getName().equals(comm))) {
						currentCommand = (PMCommand) currentEvent.getChild(comm);
						if(currentCommand == null) {
							currentCommand = new PMCommand(comm);
							currentEvent.addChild(currentCommand);
						}
					}
					if ((currentDso == null) || (!currentDso.getName().equals(dso))) {
						currentDso = (PMDso) currentCommand.getChild(dso);
						if (currentDso == null) {
							currentDso = new PMDso(dso,kernelFlag);
							currentCommand.addChild(currentDso);
						}
					}
					currentFile = currentDso.getFile(PerfPlugin.STRINGS_UnfiledSymbols); // Store in unfiled for now, will re-organize during perf-annotate if the source code is available. hehe pun intended -unfiled literally ;)
					currentSym = new PMSymbol(symbol, samples, percent);
					currentFile.addChild(currentSym);
				}
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		spitStream(error,"Perf Report STDERR", print);

		boolean SourceLineNumbers = PerfPlugin.ATTR_SourceLineNumbers_default;
		boolean Kernel_SourceLineNumbers = PerfPlugin.ATTR_Kernel_SourceLineNumbers_default;
		try {
			//Check if the user has selected the option to skip the following block, or part of it.
			SourceLineNumbers = config.getAttribute(PerfPlugin.ATTR_SourceLineNumbers, PerfPlugin.ATTR_SourceLineNumbers_default);
			Kernel_SourceLineNumbers = config.getAttribute(PerfPlugin.ATTR_Kernel_SourceLineNumbers, PerfPlugin.ATTR_Kernel_SourceLineNumbers_default);
			//if (!SourceLineNumbers && PerfPlugin.DEBUG_ON) System.out.println("Skipping source lines");
			//if (!Kernel_SourceLineNumbers && PerfPlugin.DEBUG_ON) System.out.println("Skipping kernel source lines");
		} catch (CoreException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		
		if (monitor != null && monitor.isCanceled()) { RefreshView(); return; }
		
		boolean hasProfileData = invisibleRoot.getChildren().length != 0;
		
		if (SourceLineNumbers) {
			for (TreeParent ev : invisibleRoot.getChildren()) {
				if (!(ev instanceof PMEvent)) continue;
				currentEvent = (PMEvent)ev;
				for (TreeParent c : currentEvent.getChildren()) {
					if (!(c instanceof PMCommand)) continue;
					currentCommand = (PMCommand)c;
					for (TreeParent d : currentCommand.getChildren()) {
						if (!(d instanceof PMDso)) continue;					
						currentDso = (PMDso)d;
						if ((!Kernel_SourceLineNumbers) && currentDso.isKernelDso()) continue;
						for (TreeParent s : currentDso.getFile(PerfPlugin.STRINGS_UnfiledSymbols).getChildren()) {
							if (!(s instanceof PMSymbol)) continue;
							
							if (monitor != null && monitor.isCanceled()) { RefreshView(); return; }
							
							currentSym = (PMSymbol)s;
							try {
								String[] annotateCmd;
								if (workingDir == null) {
									annotateCmd = getAnnotateString(config, currentDso.getName(), currentSym.getName().substring(4), perfDataLoc, OldPerfVersion);
								} else {
									String perfDefaultDataLoc = workingDir + "/" + PerfPlugin.PERF_DEFAULT_DATA;
									annotateCmd = getAnnotateString(config, currentDso.getName(), currentSym.getName().substring(4), perfDefaultDataLoc, OldPerfVersion);
								}
								p = Runtime.getRuntime().exec(annotateCmd);
								//p.waitFor(); // actually, readLine() in the while later automatically 'waits' when theres nothing left to read but not terminated yet but if we wait in rare occurances perf never exits as the buffer fills up apparently
								input = new BufferedReader(new InputStreamReader(p.getInputStream()));
								error = new BufferedReader(new InputStreamReader(p.getErrorStream()));
								//spitStream(input,"Perf Annotate INPUT");
								//spitStream(error,"Perf Annotate STDERR"); Leaving this on, with waitFor commented out hangs because the input buffer is never read so its still waiting for it to free up. Moved to end.
								
								
							} catch( IOException e ) {
								e.printStackTrace();
							/*} catch (InterruptedException e) {
								e.printStackTrace();*/
							}
							
							if (monitor != null && monitor.isCanceled()) { RefreshView(); return; }
							
							boolean grabBlock = false;
							boolean blockStarted = false;
							String dsoName,lineRef;
					        try {
								while (( line = input.readLine()) != null){
									if (line.startsWith("Sorted summary for file")) {
										grabBlock = true;
										dsoName = line.replace("Sorted summary for file ","");
										blockStarted = false;
										//if (PerfPlugin.DEBUG_ON) System.out.println("Grabbing " + dsoName);
										if ((workingDir != null) && (dsoName.startsWith("./"))) {
											if (workingDir.getAbsolutePath().endsWith("/")) {
												dsoName = workingDir.getAbsolutePath() + dsoName.substring(2); // path already ends with '/', so trim './' 
											} else {
												dsoName = workingDir.getAbsolutePath() + dsoName.substring(1); // path doesn't have '/', so trim just the '.'
											}
										}
										currentDso.setPath(dsoName);
									} else if (line.startsWith("---")) {
										if (blockStarted) {
											blockStarted = false;
											grabBlock = false;
										} else {
											blockStarted = true;
										}
									} else if (grabBlock && blockStarted) {
										//process the line.
										items = line.trim().split(" +");
										if (items.length != 2) { if (!line.trim().equals("")) { System.err.println("Err INVALID: " + line); }; continue; }
										percent = Float.parseFloat(items[0]);
										lineRef = items[1];
										items = lineRef.split(":");
										if (currentDso == null) { 
											//if (PerfPlugin.DEBUG_ON) System.err.println("Parsed line ref without being in valid block, shouldn't happen.");
											break; 
										} else {
											currentSym.addPercent(Integer.parseInt(items[1]), percent);
											if (currentSym.getParent().getName().equals(PerfPlugin.STRINGS_UnfiledSymbols)) {
												//Symbol currently in unfiled symbols (from Perf Report), move it into it proper area.
												currentSym.getParent().removeChild(currentSym);
												currentDso.getFile(items[0]).addChild(currentSym);
											} else if (!((PMFile)currentSym.getParent()).getPath().equals(items[0])) {
												//if (PerfPlugin.DEBUG_ON) System.err.println("Multiple paths found for this symbol.");
												currentSym.markConflict();
												currentSym.getParent().removeChild(currentSym);
												currentDso.getFile(PerfPlugin.STRINGS_MultipleFilesForSymbol).addChild(currentSym);
											}
										}
										//if (PerfPlugin.DEBUG_ON) System.out.println("pc: " + percent + " lr:" + lineRef);									
									}
								}
							} catch (IOException e) {
								e.printStackTrace();
							}				
						}
						if (currentDso.getFile(PerfPlugin.STRINGS_UnfiledSymbols).getChildren().length == 0) {
							currentDso.removeChild(currentDso.getFile(PerfPlugin.STRINGS_UnfiledSymbols));
						}
						spitStream(error,"Perf Annotate STDERR", print);
					}
				}
			}
		}

		if (print != null) {
			if (hasProfileData) {
				print.println("Profile data loaded into Perf Profile View.");
			} else {
				print.println("No profile data generated to be displayed.");
			}
		}
		RefreshView();
    }

