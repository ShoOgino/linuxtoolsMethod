	public String getTransformedType(String className) {
		int index = className.indexOf('<');
		if (index > 0) {
			TypedefInfo e = this;
			// Search the children list in case the given class name
			// matches a specific template case.
			ArrayList<TypedefInfo> children = getChildren();
			for (int x = 0; x < children.size(); ++x) {
				TypedefInfo child = children.get(x);
				if (className.matches(child.getTypedefName())) {
					e = child;
					break;
				}
			}
			String[] templates = e.getTemplates();
			String transformedName = e.transformedType;
			// Check if there are any template arguments to replace.  If not,
			// we can just return the transformed type we have.
			if (templates.length <= 0)
				return transformedName;
			String[] args = getTemplateArgs(className);
			String[] templateArgs = getTemplateArgs(e.getTypedefName());
			int j = 0;
			// For every argument that doesn't match up, it must be a template
			// parameter so we'll replace the template parameter name with the
			// supplied parameter.  We have to query the template parameter list
			// for the names to replace because for partial specific templates
			// those names will have been replaced with regex sequences designed to
			// help us identify when the specific template has matched.  For example,
			// <char, _Tp> will be stored as <char,[a-zA-Z0-9_]*> and if we have
			// <char,char> we will replace _Tp with char in the transformed type.
			for (int i = 0; i < args.length; ++i) {
				if (!args[i].equals(templateArgs[i])) {
					transformedName = transformedName.replaceAll(templates[j], args[i]);
					++j;
				}
			}
			return transformedName;
		} else {
			// There is no template specified.
			return transformedType;
		}
	}

