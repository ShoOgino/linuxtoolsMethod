	/**
	 * Get the library hover info for this library
	 * 
	 * @return the library hover info for this library
	 */
	public LibHoverInfo getHoverInfo() {
		// We lazily get the hover info for this library since it is possible
		// the user will never access or ultimately need it if another library
		// supplies the information first.
		if (!haveReadHoverInfo) {
			URI acDoc;
			try {
				acDoc = new URI(location);
				IPath p = URIUtil.toPath(acDoc);
				InputStream docStream = null;
				if (p == null) {
					URL url = acDoc.toURL();
					docStream = url.openStream();
				} else {
					try {
						// Try to open the file as local to this plug-in.
						docStream = FileLocator.openStream(LibhoverPlugin.getDefault().getBundle(), p, false);
					} catch (IOException e) {
						// File is not local to plug-in, try file system.
						docStream = new FileInputStream(p.toFile());
					}
				}
				ObjectInputStream input = new ObjectInputStream(docStream);
				hoverInfo = (LibHoverInfo)input.readObject();
				haveReadHoverInfo = true;
				input.close();
				docStream.close();
			} catch (URISyntaxException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (MalformedURLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		return hoverInfo;
	}

