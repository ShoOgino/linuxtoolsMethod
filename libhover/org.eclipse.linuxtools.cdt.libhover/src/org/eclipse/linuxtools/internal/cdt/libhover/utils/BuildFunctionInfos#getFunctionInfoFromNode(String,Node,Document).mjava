	private FunctionInfo getFunctionInfoFromNode(String name, Node functionNode, Document document) {
        FunctionInfo f = new FunctionInfo(name);
        NamedNodeMap functionNodeMap = functionNode.getAttributes();
        Node functionNodeReturntypeNode = functionNodeMap.item(0);
        String functionNodeRtName = functionNodeReturntypeNode.getNodeName();

        if (functionNodeRtName.equals("returntype")) { //$NON-NLS-1$

            // return type

            String functionNodeRtValue = functionNodeReturntypeNode.getNodeValue();
            f.setReturnType(functionNodeRtValue);
        }		// returntype

        NodeList kids = functionNode.getChildNodes();
        for (int fnk = 0; fnk < kids.getLength(); fnk++) {
        	Node kid = kids.item(fnk);
            String kidName = kid.getNodeName();
            if (kidName.equals("prototype")) { //$NON-NLS-1$

                // prototype

                String prototype = null;

                NodeList parms = kid.getChildNodes();
                for (int fnp = 0; fnp < parms.getLength(); fnp++) {
                    Node parm = parms.item(fnp);
                    String parmName =  parm.getNodeName();
                    if (parmName.equals("parameter")) { //$NON-NLS-1$
                        NamedNodeMap parmMap = parm.getAttributes();
                        Node parmNode = parmMap.item(0);
                        String parameter = parmNode.getNodeValue();
                        prototype = (null == prototype) ? parameter : prototype
                                + ", " + parameter; //$NON-NLS-1$
                    }
                }
                f.setPrototype(prototype);
            }	// prototype

            else if (kidName.equals("headers")) { //$NON-NLS-1$

                // headers

                NodeList headers = kid.getChildNodes();
                for (int fnh = 0; fnh < headers.getLength(); fnh++) {
                    Node header = headers.item(fnh);
                    String headerName =  header.getNodeName();
                    if (headerName.equals("header")) { //$NON-NLS-1$
                        NamedNodeMap headerMap = header.getAttributes();
                        Node headerNode = headerMap.item(0);
                        f.addHeader(headerNode.getNodeValue());
                    }
                }
            }	// headers


            else if (kidName.equals("groupsynopsis")) { //$NON-NLS-1$

            	// group synopsis

            	NamedNodeMap attr = kid.getAttributes();
            	Node idnode = attr.getNamedItem("id"); //$NON-NLS-1$
            	String id = idnode.getNodeValue();
				if (id != null) {
        			Element elem2 = document.getElementById(id);
        			if (null != elem2) {
        				NodeList synopsisNode = elem2.getElementsByTagName("synopsis"); //$NON-NLS-1$
        				if (null != synopsisNode && synopsisNode.getLength() > 0) {
        					Node synopsis = synopsisNode.item(0);
        					Node textNode = synopsis.getLastChild();
        					f.setDescription(textNode.getNodeValue());
        				}
        			}
				}
            } else if (kidName.equals("synopsis")) { //$NON-NLS-1$
                // synopsis
                Node textNode = kid.getLastChild();
                f.setDescription(textNode.getNodeValue());
            }
        }
        return f;
	}

