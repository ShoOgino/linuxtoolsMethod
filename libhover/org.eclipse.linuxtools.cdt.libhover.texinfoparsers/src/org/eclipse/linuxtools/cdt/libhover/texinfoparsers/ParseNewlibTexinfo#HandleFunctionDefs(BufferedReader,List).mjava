	private static void HandleFunctionDefs(BufferedReader is, List FDefs) throws IOException {
		FunctionDef fd;
		String il = null;
		boolean preRead = false;

		while (preRead || (il = is.readLine()) != null) {
			preRead = false;
			if (il.startsWith("@end example"))
				return;

			Matcher m = DeftypefunPattern.matcher(il);
			Matcher m2 = DeftypefunPattern2.matcher(il);
			Matcher m3 = DeftypefunPattern3.matcher(il);
			Matcher mm = IncludePattern.matcher(il);

			if (mm.matches()) {
				if (!IncludeList.contains(mm.group(1)))
					IncludeList.add(mm.group(1));
			}
			else if (m.matches()) {
				fd = FindFunctionDef(m.group(FunctionNameIndex), FDefs);
				if (fd != null)
					BuildFunctionDef(m, fd);
				else
					System.out.println("Missing findex for " + m.group(FunctionNameIndex));
			}
			else if (m2.matches()) {
				fd = FindFunctionDef(m2.group(FunctionName2Index), FDefs);
				if (fd != null)
					BuildFunctionDef2(m2, fd);
				else
					System.out.println("Missing findex for " + m2.group(FunctionName2Index));
			}
			else if (m3.matches()) {
				fd = FindFunctionDef(m3.group(FunctionNameIndex), FDefs);
				if (fd != null)
					BuildFunctionDef(m3, fd);
				else
					System.out.println("Missing findex for " + m3.group(FunctionName2Index));
			}
			else if (il.trim().length() > 0) {
				il = il.trim();
				while (il.endsWith(",")) {  // assume prototype extends more than one line
					preRead = true;
					String il2 = is.readLine().trim();
					if (il2 != null && il2.startsWith("@")) { // something wrong, just look at new line fetched
						il = il2;
						continue;
					}
					il = il + il2; // concatenate
				}
			}
		}
	}

