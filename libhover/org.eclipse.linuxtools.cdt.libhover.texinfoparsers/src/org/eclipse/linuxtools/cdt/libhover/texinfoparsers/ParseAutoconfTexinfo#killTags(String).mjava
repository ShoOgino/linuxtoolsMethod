    private static String killTags(String tt) {
        Matcher mm;
        String ss = "";

        while (ss != tt) {
            mm = XrefPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("");
        }

        ss = "";
        while (ss != tt) {
            mm = IndexPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("");
        }

        ss = "";
        while (ss != tt) {
            mm = IndexPattern2.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("");
        }

        ss = "";
        while (ss != tt) {
            mm = NoIndentPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("");
        }

        ss = "";
        while (ss != tt) {
            mm = VarPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<VAR>$1</VAR>");
        }

        ss = "";
        while (ss != tt) {
            mm = DotsPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<small>...</small>");
        }

        ss = "";
        while (ss != tt) {
            mm = CommandPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<CODE>$1</CODE>");
        }

        ss = "";
        while (ss != tt) {
            mm = CodePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<CODE>$1</CODE>");
        }

        ss = "";
        while (ss != tt) {
            mm = KbdPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<KBD>$1</KBD>");
        }

        ss = "";
        while (ss != tt) {
            mm = EmphPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<EM>$1</EM>");
        }

        ss = "";
        while (ss != tt) {
            mm = FilePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<TT>$1</TT>");
        }


        ss = "";
        while (ss != tt) {
            mm = VerbatimPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<CODE>");
        }

        ss = "";
        while (ss != tt) {
            mm = EndVerbatimPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("</CODE>");
        }

        ss = "";
        while (ss != tt) {
            mm = SampPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<samp>$1</samp>");
        }

        ss = "";
        while (ss != tt) {
            mm = OptionPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<samp>$1</samp>");
        }

        ss = "";
        while (ss != tt) {
            mm = ExamplePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<TABLE><tr><td>&nbsp;</td><td class=example><pre>");
        }

        ss = "";
        while (ss != tt) {
            mm = EndExamplePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("</pre></td></tr></table>");
        }

        ss = "";
        while (ss != tt) {
            mm = EnumeratePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<OL>");
        }

        ss = "";
        while (ss != tt) {
            mm = EndEnumeratePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("</OL>");
        }

        ss = "";
        while (ss != tt) {
            mm = TableSampItemPattern.matcher(tt);
            ss = tt;
            if (mm.matches()) {
                System.out.println("group 1 is " + mm.group(1));
                System.out.println("group 2 is " + mm.group(2));
                System.out.println("group 3 is " + mm.group(3));
            }
            tt = mm.replaceAll("$1<DT>'<SAMP>$2</SAMP>'\n<DD>$3");
        }

        ss = "";
        while (ss != tt) {
            mm = TableAsisItemPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("$1<DT>$2\n<DD>$3");
        }

        ss = "";
        while (ss != tt) {
            mm = TableSampPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<DL>\n");
        }

        ss = "";
        while (ss != tt) {
            mm = TableAsisPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<DL>\n");
        }

        ss = "";
        while (ss != tt) {
            mm = EndTablePattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("</DL>");
        }

        //FIXME: if there ever is a @itemize @bullet within a
        //       @itemize @minus or vice-versa, the following
        //       logic will get it wrong.
        ss = "";
        while (ss != tt) {
            mm = ItemizeMinusPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<UL>$1</UL>");
        }

        ss = "";
        while (ss != tt) {
            mm = ItemizeBulletPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<OL>$1</OL>");
        }

        ss = "";
        while (ss != tt) {
            mm = ItemPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("<LI>");
        }

        ss = "";
        while (ss != tt) {
            mm = TagPattern.matcher(tt);
            ss = tt;
            tt = mm.replaceAll("$1");
        }

        mm = AmpersandPattern.matcher(tt);
        tt = mm.replaceAll("&amp;");

        mm = LeftAnglePattern.matcher(tt);
        tt = mm.replaceAll("&lt;");

        mm = RightAnglePattern.matcher(tt);
        tt = mm.replaceAll("&gt;");

        // Clean up the eol markers we used to mark end of line for items
        mm = EOLPattern.matcher(tt);
        tt = mm.replaceAll("");

        return tt;
    }

