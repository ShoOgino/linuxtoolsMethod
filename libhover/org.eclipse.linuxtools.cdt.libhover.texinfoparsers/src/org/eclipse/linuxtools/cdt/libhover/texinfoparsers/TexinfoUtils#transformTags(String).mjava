	public static String transformTags(String tt) {
		Matcher mm;
		String ss = "";
		int endtableIndex = Integer.MAX_VALUE;

		ss = "";
		while (ss != tt) {
			mm = BracketRefPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = XrefPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}

		ss = "";
		while (ss != tt) {
			mm = CommentPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<eol>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = PxrefPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}

		ss = "";
		while (ss != tt) {
			mm = DeftypevrPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = StrongPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<h3>$1</h3>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndDeftypevr.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = IndexPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = IndexPattern2.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = NoIndentPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = GroupPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndGroupPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = QuotationPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndQuotation.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = InfinityPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("infinity");
		}

		ss = "";
		while (ss != tt) {
			mm = DeftpPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<h4>$1 - $2</h4>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndDeftpPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = RefillPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = VarPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<VAR>$1</VAR>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = DotsPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<small>...</small>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = CommandPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<CODE>$1</CODE>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = CodePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<CODE>$1</CODE>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = KbdPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<KBD>$1</KBD>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EmphPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<EM>$1</EM>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = FilePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<TT>$1</TT>");
		}
		
		
		ss = "";
		while (ss != tt) {
			mm = VerbatimPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<CODE>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndVerbatimPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</CODE>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = SampPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<samp>$1</samp>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = OptionPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<samp>$1</samp>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = ExampleItem.matcher(tt);
			ss = tt;
			// We want to add a break at the end of each example line to preserve
			// formatting when Eclipse processes the xml (e.g. C code lines).
			tt = mm.replaceAll("$1$2<br>$4");
		}

		ss = "";
		while (ss != tt) {
			mm = ExamplePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<TABLE><tr><td>&nbsp;</td><td class=example><pre>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndExamplePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</pre></td></tr></table>");
		}

		ss = "";
		while (ss != tt) {
			mm = SmallExampleItem.matcher(tt);
			ss = tt;
			// We want to add a break at the end of each example line to preserve
			// formatting when Eclipse processes the xml (e.g. C code lines).
			tt = mm.replaceAll("$1$2<br>$4");
		}
		
		ss = "";
		while (ss != tt) {
			mm = SmallExamplePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<pre>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndSmallExamplePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</pre>");
		}

		ss = "";
		while (ss != tt) {
			mm = EnumeratePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<OL>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndEnumeratePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</OL>");
		}

//		ss = "";
//		while (ss != tt) {
//			mm = InfoOnlyPattern.matcher(tt);
//			ss = tt;
//			tt = mm.replaceAll("");
//		}
		
		ss = "";
		while (ss != tt) {
			mm = TexOnlyPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = TexPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = IgnorePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = NotTexPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndNotTexPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}

		// We will treat ifinfo the same as ifnottex which we pass through.
		ss = "";
		while (ss != tt) {
			mm = IfInfoPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndIfInfoPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}

		ss = "";
		endtableIndex = Integer.MAX_VALUE;
		while (ss != tt) {
			mm = TableSampItemPattern.matcher(tt);
			ss = tt;
			if (mm.find()) {
				if (mm.start(4) > endtableIndex) {
					// We try and find the last @[table samp] marker we can find with an @item before @[end table].
					// The end marker has moved forward to make the match which means we have exhausted all @item markers
					// from the last @[table samp] and @[end table] we were using prior to this iteration of the loop.  
					// If we change the table markers now, we avoid the prior table from
					// matching any @item marker that sits between tables.
					Matcher mm2 = TableSampMatchPattern.matcher(tt);
					tt = mm2.replaceFirst("<DL>\n$2\n</DL>");
					mm2 = TableSampMatchPattern.matcher(tt);
					if (mm2.find())
						endtableIndex = mm2.start(3);
				}
				else {
					tt = mm.replaceFirst("$1<DT><SAMP>$2</SAMP>\n<DD>$3$4");
					endtableIndex = mm.end(1) + 10 + mm.group(2).length() + 12 + mm.group(3).length();
				}
			}
		}

		//FIXME: This parser assumes that a table does not have an @itemize element
		//       inside it.  It allows the opposite to be true (i.e. a table inside
		//       an @itemize element.
		
		ss = "";
		endtableIndex = Integer.MAX_VALUE;
		while (ss != tt) {
			mm = TableAsisItemPattern.matcher(tt);
			ss = tt;
			if (mm.find()) {
				if (mm.start(4) > endtableIndex) {
					// We try and find the last @[table asis] marker we can find with an @item before @[end table].
					// The end marker has moved forward to make the match which means we have exhausted all @item markers
					// from the last @[table asis] and @[end table] we were using prior to this iteration of the loop.  
					// If we change the table markers now, we avoid the prior table from
					// matching any @item marker that sits between tables.
					Matcher mm2 = TableAsisMatchPattern.matcher(tt);
					tt = mm2.replaceFirst("<DL>\n$2\n</DL>");
					mm2 = TableAsisMatchPattern.matcher(tt);
					if (mm2.find())
						endtableIndex = mm2.start(3);
				}
				else {
					tt = mm.replaceFirst("$1<DT>$2\n<DD>$3$4");
					endtableIndex = mm.end(1) + 10 + mm.group(2).length() + 12 + mm.group(3).length();
				}
			}
		}

		ss = "";
		endtableIndex = Integer.MAX_VALUE;
		while (ss != tt) {
			mm = TableCodeItemPattern.matcher(tt);
			ss = tt;
			if (mm.find()) {
				if (mm.start(4) > endtableIndex) {
					// We try and find the last @[table code] marker we can find with an @item before @[end table].
					// The end marker has moved forward to make the match which means we have exhausted all @item markers
					// from the last @[table code] and @[end table] we were using prior to this iteration of the loop.  
					// If we change the table markers now, we avoid the prior table from
					// matching any @item marker that sits between tables.
					Matcher mm2 = TableCodeMatchPattern.matcher(tt);
					tt = mm2.replaceFirst("<DL>\n$2\n</DL>");
					mm2 = TableCodeMatchPattern.matcher(tt);
					if (mm2.find())
						endtableIndex = mm2.start(3);
				}
				else {
					tt = mm.replaceFirst("$1<DT><CODE>$2</CODE>\n<DD>$3$4");
					endtableIndex = mm.end(1) + 10 + mm.group(2).length() + 12 + mm.group(3).length();
				}
			}
		}

		ss = "";
		endtableIndex = Integer.MAX_VALUE;
		while (ss != tt) {
			mm = TableVarItemPattern.matcher(tt);
			ss = tt;
			if (mm.find()) {
				if (mm.start(4) > endtableIndex) {
					// We try and find the last @[table var] marker we can find with an @item before @[end table].
					// The end marker has moved forward to make the match which means we have exhausted all @item markers
					// from the last @[table var] and @[end table] we were using prior to this iteration of the loop.  
					// If we change the table markers now, we avoid the prior table from
					// matching any @item marker that sits between tables.
					Matcher mm2 = TableVarMatchPattern.matcher(tt);
					tt = mm2.replaceFirst("<DL>\n$2\n</DL>");
					mm2 = TableVarMatchPattern.matcher(tt);
					if (mm2.find())
						endtableIndex = mm2.start(3);
				}
				else {
					tt = mm.replaceFirst("$1<DT><VAR>$2</VAR>\n<DD>$3$4");
					endtableIndex = mm.end(1) + 10 + mm.group(2).length() + 12 + mm.group(3).length();
				}
			}
		}

		ss = "";
		while (ss != tt) {
			mm = VtableCodeItemPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("$1<DT><CODE>$2</CODE>\n<DD>$3");
		}

		ss = "";
		while (ss != tt) {
			mm = MultitableItemPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("$1<DT><pre>$2</pre>\n<DD><br>$3");
		}

		ss = "";
		while (ss != tt) {
			mm = TableSampPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<DL>\n");
		}

		ss = "";
		while (ss != tt) {
			mm = TableAsisPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<DL>\n");
		}

		ss = "";
		while (ss != tt) {
			mm = TableVarPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<DL>\n");
		}

		ss = "";
		while (ss != tt) {
			mm = TableCodePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<DL>\n");
		}
		
		ss = "";
		while (ss != tt) {
			mm = VtableCodePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<DL>\n");
		}

		ss = "";
		while (ss != tt) {
			mm = MultitablePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<DL>\n<DT>");
		}

		ss = "";
		while (ss != tt) {
			mm = EndTablePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</DL>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndVtablePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</DL>");
		}
		
		ss = "";
		while (ss != tt) {
			mm = EndMultitablePattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("</DL>");
		}
		
		//FIXME: if there ever is a @itemize @bullet within a
		//       @itemize @minus or vice-versa, the following
		//       logic will get it wrong.
		ss = "";
		while (ss != tt) {
			mm = ItemizeMinusPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<UL>$1</UL>");
		}

		ss = "";
		while (ss != tt) {
			mm = ItemizeBulletPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<OL>$1</OL>");
		}

		ss = "";
		while (ss != tt) {
			mm = ItemPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("<LI>");
		}

		ss = "";
		while (ss != tt) {
			mm = TagPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("$1");
		}
		
		ss = "";
		while (ss != tt) {
			mm = TagCharPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("$1");
		}
		
		ss = "";
		while (ss != tt) {
			mm = StrandedPeriod.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("$1. ");
		}

		ss = "";
		while (ss != tt) {
			mm = LeftOverPeriod.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		ss = "";
		while (ss != tt) {
			mm = TabPattern.matcher(tt);
			ss = tt;
			tt = mm.replaceAll("");
		}
		
		mm = AmpersandPattern.matcher(tt);
		tt = mm.replaceAll("&amp;");

		mm = LeftAnglePattern.matcher(tt);
		tt = mm.replaceAll("&lt;");

		mm = RightAnglePattern.matcher(tt);
		tt = mm.replaceAll("&gt;");	

		// Put back all the eol markers
		mm = EOLPattern.matcher(tt);
		tt = mm.replaceAll("<eol>");
		
		return tt;
	}

