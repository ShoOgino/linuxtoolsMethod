		public void parse(String fileName, IProgressMonitor monitor) {
			try {
				Path path = new Path(fileName);
				File f = new File(fileName);
				FileInputStream stream = new FileInputStream(f);
				DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
				factory.setValidating(false);
				DocumentBuilder builder = factory.newDocumentBuilder();
				builder.setEntityResolver(new EntityResolver()
		        {
		            public InputSource resolveEntity(String publicId, String systemId)
		                throws SAXException, IOException
		            {
		                return new InputSource(new StringReader("")); //$NON-NLS-1$
		            }
		        });
				Document doc = builder.parse(stream);
				NodeList bookNodes = doc.getElementsByTagName("book"); //$NON-NLS-1$
				for (int x = 0; x < bookNodes.getLength(); ++x) {
					Node n = bookNodes.item(x);
					NamedNodeMap m = n.getAttributes();
					Node language = m.getNamedItem("language"); //$NON-NLS-1$
					if (language != null && !language.getNodeValue().equals("c"))
						return;
				}
				NodeList nl = doc.getElementsByTagName("function"); // $NON-NLS-1$
				for (int i = 0; i < nl.getLength(); ++i) {
					if (monitor.isCanceled())
						return;
					Node n = nl.item(i);
					NamedNodeMap m = n.getAttributes();
					Node name = m.getNamedItem("name"); // $NON-NLS-1$
					Node link = m.getNamedItem("link"); // $NON-NLS-1$
					if (link != null) {
						String linkValue = link.getNodeValue();
						String[] linkParts = linkValue.split("#"); //$NON-NLS-1$
						if (linkParts.length == 2) {
							try {
								String nameString = name.getNodeValue();
								nameString = nameString.replaceAll("\\(.*\\);+", "").trim(); //$NON-NLS-1$ //$NON-NLS-2$
								if (nameString.contains("::") || nameString.startsWith("enum ") //$NON-NLS-1$ //$NON-NLS-2$
										|| nameString.contains("\"")) //$NON-NLS-1$
									continue;
								Reader reader = new FileReader(path.removeLastSegments(1).toOSString()
										+ "/" + linkParts[0]); //$NON-NLS-1$
								Parser callback = new Parser(linkParts[1], nameString);
								new ParserDelegator().parse(reader, callback, true);
								FunctionInfo finfo = callback.getFunctionInfo();
								if (finfo != null) {
									if (debug)
										System.out.println(callback.toString());
									libhover.functions.put(callback.getFuncName(), callback.getFunctionInfo());
								}
							} catch (FileNotFoundException e1) {
								// ignore
							}
						}
					}
				}
			} catch (FileNotFoundException e1) {
				// ignore
			} catch (ParserConfigurationException e) {
				e.printStackTrace();
			} catch (SAXException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

