        @Override
        public void startElement(QName name, XMLAttributes a, Augmentations aug) {
            // look for a tag that matches one of the functions we are trying to find
            if ("A".equals(name.rawname)) { //$NON-NLS-1$
                String fname = a.getValue("name"); //$NON-NLS-1$
                String mapName = funcs.get(fname);
                if (mapName != null) {
                    // We have found one of the functions we are looking for.
                    // Register the name for later and allow function parsing to begin.
                    funcName = mapName.trim();
                    if (funcName.endsWith("()")) { //$NON-NLS-1$
                        // Remove () at end of function name and remove all space chars which might be
                        // non-breaking space chars which unfortunately do not get caught by the trim() method.
                        funcName = this.funcName.replaceAll("\\(\\)", "").replaceAll("\\p{javaSpaceChar}",""); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
                    }
                    begin = true;
                    funcs.remove(fname); // take name off our list to do
                    divCounter = refsect2 ? 1 : 0;
                    refsect2 = false;
                }
            }
            if (begin) {
                if ("DIV".equals(name.rawname)) { //$NON-NLS-1$
                    ++divCounter;
                }
                if (!descStart) {
                    if ("SPAN".equals(name.rawname)) { //$NON-NLS-1$
                        String type = a.getValue("class"); //$NON-NLS-1$
                        if (returnValue == null && type != null &&
                                type.equals("returnvalue")) { //$NON-NLS-1$
                            returnType = true;
                        }
                    } else if ("PRE".equals(name.rawname)) { //$NON-NLS-1$
                        String type = a.getValue("class"); //$NON-NLS-1$
                        if (type != null && type.equals("programlisting")) { //$NON-NLS-1$
                            returnType = true;
                        }
                    }
                }
                if (protoStart) {
                    if ("P".equals(name.rawname)) { //$NON-NLS-1$
                        protoStart = false;
                        descStart = true;
                        description.append("<p>"); //$NON-NLS-1$
                    }
                } else if (descStart) {
                    if ("P".equals(name.rawname)) { //$NON-NLS-1$
                        description.append("<p>"); //$NON-NLS-1$
                    } else if ("TABLE".equals(name.rawname)) { //$NON-NLS-1$
                        description.append("<dl>"); //$NON-NLS-1$
                    } else if ("TR".equals(name.rawname)) { //$NON-NLS-1$
                        rowItemCount = 0;
                    } else if ("TD".equals(name.rawname)) { //$NON-NLS-1$
                        String type = a.getValue("class"); //$NON-NLS-1$
                        if (type != null && type.equals("listing_lines")) { //$NON-NLS-1$
                            rowIgnore = true;
                        } else {
                            rowIgnore = false;
                            if (rowItemCount++ == 0) {
                                rowTag = "<dt>"; //$NON-NLS-1$
                            } else {
                                rowTag = "<dd>"; //$NON-NLS-1$
                            }
                            description.append(rowTag);
                        }
                    } else if ("H4".equals(name.rawname)) { //$NON-NLS-1$
                        description.append("<br><br>"); //$NON-NLS-1$
                    }
                }
            } else {
                if ("DIV".equals(name.rawname)) { //$NON-NLS-1$
                    String className = a.getValue("class"); //$NON-NLS-1$
                    if ("refsect2".equals(className)) { //$NON-NLS-1$
                        refsect2 = true;
                    } else {
                        refsect2 = false;
                    }
                }
            }
        }

