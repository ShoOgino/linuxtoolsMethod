		public LibHoverInfo parse(IProgressMonitor monitor) {
			try {
				IFileSystem fs = EFS.getLocalFileSystem();
				IPath dirPath = new Path(dirName);
				IFileStore htmlDir = fs.getStore(dirPath);
				IFileStore[] files = htmlDir.childStores(EFS.NONE, null);
				monitor.beginTask(LibHoverMessages.getString(PARSING_MSG), files.length);
				Arrays.sort(files, new Comparator<IFileStore>() {
					@Override
					public int compare(IFileStore arg0, IFileStore arg1) {
						return (arg0.getName().compareToIgnoreCase(arg1.getName()));
					}
				});
   				for (int i = 0; i < files.length; ++i) {
					IFileStore file = files[i];
					String name = file.fetchInfo().getName();
					if (monitor.isCanceled())
						return null;
					monitor.setTaskName(LibHoverMessages.getFormattedString(PARSING_FMT_MSG, 
							new String[]{name}));
					File f = new File(dirPath.append(name).append(name + ".devhelp2").toOSString());
					if (f.exists())
						parse(dirPath.append(name).append(name + ".devhelp2").toOSString(), //$NON-NLS-1$ 
								monitor);
					else
						parse(dirPath.append(name).append(name + ".devhelp").toOSString(), //$NON-NLS-1$ 
								monitor);
					monitor.worked(1);
   				}
			} catch (CoreException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return libhover;
		}

