		@Override
		protected IStatus run(IProgressMonitor monitor) {
			runMonitor = monitor;
			if (monitor.isCanceled())
				return Status.CANCEL_STATUS;
			IPreferenceStore ps = DevHelpPlugin.getDefault()
					.getPreferenceStore();
			ParseDevHelp.DevHelpParser p = new ParseDevHelp.DevHelpParser(
					ps.getString(PreferenceConstants.DEVHELP_DIRECTORY));
			LibHoverInfo hover = p.parse(monitor);
			if (monitor.isCanceled())
				return Status.CANCEL_STATUS;
			// Update the devhelp library info if it is on library list
			Collection<LibHoverLibrary> libs = LibHover.getLibraries();
			for (LibHoverLibrary l : libs) {
				if (monitor.isCanceled())
					return Status.CANCEL_STATUS;
				if (l.getName().equals("devhelp")) { //$NON-NLS-1$
					l.setHoverinfo(hover);
					break;
				}
			}
			try {
				if (monitor.isCanceled())
					return Status.CANCEL_STATUS;
				// Now, output the LibHoverInfo for caching later
				IPath location = LibhoverPlugin.getDefault()
						.getStateLocation().append("C"); //$NON-NLS-1$
				File ldir = new File(location.toOSString());
				ldir.mkdir();
				location = location.append("devhelp.libhover"); //$NON-NLS-1$
				try (FileOutputStream f = new FileOutputStream(
						location.toOSString());
						ObjectOutputStream out = new ObjectOutputStream(f)) {
					out.writeObject(hover);
				}
				monitor.done();
			} catch (NullPointerException e) {
				monitor.done();
				return Status.CANCEL_STATUS;
			} catch (IOException e) {
				monitor.done();
				return new Status(IStatus.ERROR, DevHelpPlugin.PLUGIN_ID,
						e.getLocalizedMessage(), e);
			}

			return Status.OK_STATUS;
		}

