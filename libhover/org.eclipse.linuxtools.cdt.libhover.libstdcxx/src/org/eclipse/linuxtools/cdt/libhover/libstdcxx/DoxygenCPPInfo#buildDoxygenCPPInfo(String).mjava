	public void buildDoxygenCPPInfo(String fileName) {
		try {
			// Create a hash table of all the class nodes mapped by class name.  Trim any template info
			// for the class name key value.
			NodeList nl = getDocument().getElementsByTagName("compounddef");  //$NON-NLS-1$
			for (int i = 0; i < nl.getLength(); ++i) {
				Node n = nl.item(i);
				NamedNodeMap attrs = n.getAttributes();
				Node kind = attrs.getNamedItem("kind");  //$NON-NLS-1$
				Node id = attrs.getNamedItem("id");  //$NON-NLS-1$
				Node prot = attrs.getNamedItem("prot");  //$NON-NLS-1$
				// We are only interested in cataloging public classes.
				if (id != null && prot != null && prot.getNodeValue().equals("public")  //$NON-NLS-1$
						&& kind != null && kind.getNodeValue().equals("class")) {  //$NON-NLS-1$
					NodeList nl2 = n.getChildNodes();
					ClassInfo d = null;
					String hashName = null;
					for (int j = 0; j < nl2.getLength(); ++j) {
						Node n2 = nl2.item(j);
						String name2 = n2.getNodeName();
						if (name2.equals("compoundname")) {  //$NON-NLS-1$
							String text = n2.getTextContent();
							if (text != null && !text.equals("")) { //$NON-NLS-1$
								String className = text;
								text = text.replaceAll("<\\s*", "<");   //$NON-NLS-1$ //$NON-NLS-2$
								text = text.replaceAll("\\s*>", ">");   //$NON-NLS-1$ //$NON-NLS-2$
								int index = text.indexOf('<');
								hashName = text;
								if (index > 0)
									hashName = text.substring(0, index);
								d = new ClassInfo(className, id.getNodeValue(), n);
								classesById.put(id.getNodeValue(), d);
								ClassInfo e = cppInfo.classes.get(hashName);
								if (e != null) { /* We are dealing with a partial specific template...add it to list  */
									if (!d.areTemplateParmsFilled())
										d.setTemplateParms(getTemplateParms(n));
									String[] templateParms = d.getTemplateParms();
									// For each template parameter, replace with a generic regex so later we can compare
									// and identify a match (e.g. A<_a, _b> and A<char, _b> are defined and we have an instance
									// of A<char, int>.  We want to to match with A<char, _b> and replace all occurrences of "_b"
									// with "int".  For speed, we assume that the template parameter is not a subset of any
									// other variable (e.g. if _A is used, there is no __A or _AB).  If this proves untrue in
									// any instance, more refinement of the initial value to replace will be required.
									for (int k = 0; k < templateParms.length; ++k) {
										text = text.replaceAll(templateParms[k], "[a-zA-Z0-9_: *]+");  //$NON-NLS-1$
									}
									d.setClassName(text);
									e.addTemplate(d);
								}
								else
									cppInfo.classes.put(hashName, d);
							}
						} else if (name2.equals("templateparamlist")) { //$NON-NLS-1$
							ArrayList<String> templates = new ArrayList<>();
							NodeList params = n2.getChildNodes();
							int paramsLength = params.getLength();
							for (int j2 = 0; j2 < paramsLength; ++j2) {
								Node n3 = params.item(j2);
								if (n3.getNodeName().equals("param")) { //$NON-NLS-1$
									NodeList types = n3.getChildNodes();
									int typesLength = types.getLength();
									for (int j3 = 0; j3 < typesLength; ++j3) {
										Node n4 = types.item(j3);
										if (n4.getNodeName().equals("declname")) { //$NON-NLS-1$
											templates.add(getElementText(n4));
										}
									}
								}
							}
							String[] templateNames = new String[templates.size()];
							d.setTemplateParms(templates.toArray(templateNames));
						} else if (name2.equals("includes")) {  //$NON-NLS-1$
							String include = getElementText(n2);
							if (d != null)
								d.setInclude(include);
						} else if (name2.equals("basecompoundref")) {  //$NON-NLS-1$
							// We have a base class.  If public, add it to the list of nodes to look at in case we don't find the member
							// in the current class definition.
							NamedNodeMap m = n2.getAttributes();
							if (m != null) {
								Node refid = m.getNamedItem("refid");  //$NON-NLS-1$
								Node prot2 = m.getNamedItem("prot");  //$NON-NLS-1$
								if (prot2 != null && prot2.getNodeValue().equals("public")) {  //$NON-NLS-1$
									ClassInfo baseClass = null;
									if (refid != null) {
										// If we have been given the id of the base class, fetch it directly
										baseClass = classesById.get(refid.getNodeValue());
									} else {
										// We probably have a template that needs resolution
										String baseClassName = n2.getTextContent();
//										System.out.println("base class name is " + baseClassName);
										baseClass = getClassInfo(baseClassName);
									}
									if (d != null && baseClass != null)
										d.addBaseClass(baseClass);
								}
							}
						} else if (name2.equals("sectiondef")) {  //$NON-NLS-1$
							// We are only interested in public member functions which are in their own section.
							NamedNodeMap m = n2.getAttributes();
							if (m != null) {
								Node kind2 = m.getNamedItem("kind");  //$NON-NLS-1$
								if (kind2 != null && kind2.getNodeValue().equals("public-func")) {  //$NON-NLS-1$
									NodeList pubfuncs = n2.getChildNodes();
									int pubfuncLength = pubfuncs.getLength();
									for (int j1 = 0; j1 < pubfuncLength; ++j1) {
										Node n3 = pubfuncs.item(j1);
										// Add all public member functions to the list of members
										if (n3.getNodeName().equals("memberdef")) {  //$NON-NLS-1$
											NamedNodeMap m3 = n3.getAttributes();
											if (m3 != null) {
												Node m3Kind = m3.getNamedItem("kind");  //$NON-NLS-1$
												if (m3Kind != null && m3Kind.getNodeValue().equals("function")) {  //$NON-NLS-1$
													String name = null;
													String type = null;
													String args = null;
													String desc = null;
													ArrayList<String> parms = new ArrayList<>();
													NodeList nl4 = n3.getChildNodes();
													int memberLength = nl4.getLength();
													for (int k = 0; k < memberLength; ++k) {
														Node n4 = nl4.item(k);
														String n4Name = n4.getNodeName();
														if (n4Name.equals("type")) {  //$NON-NLS-1$
															NodeList nl5 = n4.getChildNodes();
															type = new String("");  //$NON-NLS-1$
															for (int x = 0; x < nl5.getLength(); ++x) {
																Node n5 = nl5.item(x);
																if (n5.getNodeType() == Node.TEXT_NODE)
																	type += n5.getNodeValue();
																else if (n5.getNodeName().equals("ref")) {  //$NON-NLS-1$
																	NamedNodeMap n5m = n5.getAttributes();
																	Node n5id = n5m.getNamedItem("refid"); //$NON-NLS-1$
																	if (n5id != null) {
																		String refid = n5id.getNodeValue();
																		ClassInfo refClass = classesById.get(refid);
																		if (refClass != null)
																			type += refClass.getClassName();
																	}
																}
															}
														} else if (n4Name.equals("name")) {  //$NON-NLS-1$
															name = n4.getTextContent();
														} else if (n4Name.equals("argsstring")) {  //$NON-NLS-1$
															args = getElementText(n4);
														} else if (n4Name.equals("param")) {  //$NON-NLS-1$
															NodeList nl5 = n4.getChildNodes();
															for (int x = 0; x < nl5.getLength(); ++x) {
																Node n5 = nl5.item(x);
																if (n5.getNodeName().equals("type")) {  //$NON-NLS-1$
																	parms.add(getElementText(n5));
																}
															}
														} else if (n4Name.equals("briefdescription")) {  //$NON-NLS-1$
															NodeList nl5 = n4.getChildNodes();
															for (int x = 0; x < nl5.getLength(); ++x) {
																Node n5 = nl5.item(x);
																if (n5.getNodeName().equals("para")) {  //$NON-NLS-1$
																	if (desc == null)
																		desc = new String(""); //$NON-NLS-1$
																	desc += "<p>" + getElementText(n5) + "</p>";   //$NON-NLS-1$ //$NON-NLS-2$
																}
															}
														} else if (n4Name.equals("detaileddescription")) {  //$NON-NLS-1$
															NodeList nl5 = n4.getChildNodes();
															for (int x = 0; x < nl5.getLength(); ++x) {
																Node n5 = nl5.item(x);
																if (n5.getNodeName().equals("para")) {  //$NON-NLS-1$
																	if (desc == null)
																		desc = new String("");  //$NON-NLS-1$
																	NodeList nl6 = n5.getChildNodes();
																	Node n6 = nl6.item(0);
																	if (n6.getNodeType() == Node.TEXT_NODE)
																		desc += "<p>" + getElementText(n5) + "</p>";   //$NON-NLS-1$ //$NON-NLS-2$
																	else {
																		for (int x2 = 0; x2 < nl6.getLength(); ++x2) {
																			n6 = nl6.item(x2);
																			if (n6.getNodeName().equals("parameterlist")) {  //$NON-NLS-1$
																				desc += getParameters(n6);
																			} else if (n6.getNodeName().equals("simplesect")) {  //$NON-NLS-1$
																				desc += getReturn(n6);
																			}
																		}
																	}
																}
															}
														} else if (n4Name.equals("location")) { //$NON-NLS-1$
															// Location is after all descriptions so we can now add the member
															if (name != null) {
																MemberInfo member = new MemberInfo(name);
																member.setReturnType(type);
																member.setPrototype(args);
																member.setDescription(desc);
																String[] argNames = new String[parms.size()];
																member.setParamTypes(parms.toArray(argNames));
																d.addMember(member);
															}
															break;
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
			// Create a hash table of all the typedefs.  Keep any template info.
			nl = getDocument().getElementsByTagName("memberdef");  //$NON-NLS-1$
			for (int i = 0; i < nl.getLength(); ++i) {
				Node n = nl.item(i);
				NamedNodeMap attrs = n.getAttributes();
				if (attrs != null) {
					Node kind = attrs.getNamedItem("kind");  //$NON-NLS-1$
					Node prot = attrs.getNamedItem("prot");  //$NON-NLS-1$
					if (kind != null && kind.getNodeValue().equals("typedef")  //$NON-NLS-1$
							&& prot != null && prot.getNodeValue().equals("public")) {  //$NON-NLS-1$
						NodeList list = n.getChildNodes();
						for (int x = 0; x < list.getLength(); ++x) {
							Node n2 = list.item(x);
							if (n2.getNodeName().equals("definition")) {  //$NON-NLS-1$
								String def = n2.getTextContent();
								if (def != null && !def.equals("")) { //$NON-NLS-1$
									def = def.replaceAll("<\\s*", "<");   //$NON-NLS-1$ //$NON-NLS-2$
									def = def.replaceAll("\\s*>", ">");   //$NON-NLS-1$ //$NON-NLS-2$
									String[] types = getTypedefTypes(def);
									TypedefInfo d = new TypedefInfo(types[1], types[0]);
									String hashName = d.getTypedefName();
									int index = hashName.indexOf('<');
									if (index > 0) {
										String className = hashName.substring(0, index);
										hashName = hashName.replaceAll("<.*>", "<>");   //$NON-NLS-1$ //$NON-NLS-2$
										ClassInfo e = cppInfo.classes.get(className);
										if (e == null)
											break;
										ArrayList<ClassInfo> children = e.getChildren();
										if (children != null && children.size() > 0) {
											for (int y = 0; y < children.size(); ++y) {
												ClassInfo child = children.get(y);
												String childName = child.getClassName().replaceAll("\\*", "\\\\*"); //$NON-NLS-1$ //$NON-NLS-2$
												childName = childName.replace("[]", "\\[\\]"); //$NON-NLS-1$ //$NON-NLS-2$
												if (types[1].matches(childName.concat("::.*"))) { //$NON-NLS-1$
													e = child;
													break;
												}
											}
										}
										String[] templates = e.getTemplateParms();
										d.copyTemplates(templates);

										TypedefInfo f = cppInfo.typedefs.get(hashName);
										if (f != null) {
											String typedefName = d.getTypedefName();
											for (int z = 0; z < templates.length; ++z) {
												typedefName = typedefName.replaceAll(templates[z], "[a-zA-Z0-9_: ]+"); //$NON-NLS-1$
											}
											d.setTypedefName(typedefName);
											f.addTypedef(d);
										}
										else
											cppInfo.typedefs.put(hashName, d);
										break;
									} else {
										// Otherwise we have a non-template typedef name.  Just add it to the list.
										cppInfo.typedefs.put(hashName, d);
										break;
									}
								}
							}
						}
					}
				}
			}
			// Now, output the LibHoverInfo for caching later
			FileOutputStream f = new FileOutputStream(fileName);
			ObjectOutputStream out = new ObjectOutputStream(f);
			out.writeObject(cppInfo);
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

