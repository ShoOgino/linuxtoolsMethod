	/**
	 * Creates CDT project in a specific path in workspace adding specified configurations and opens it.
	 *
	 * @param projectName - project name.
	 * @param pathInWorkspace - path relative to workspace root.
	 * @param configurationIds - array of configuration IDs.
	 * @return - new {@link IProject}.
	 * @throws CoreException - if the project can't be created.
	 * @throws OperationCanceledException...
	 */
	public static IProject createCDTProject(String projectName, String pathInWorkspace, String[] configurationIds) throws OperationCanceledException, CoreException {
		CCorePlugin cdtCorePlugin = CCorePlugin.getDefault();
		IWorkspace workspace = ResourcesPlugin.getWorkspace();
		IWorkspaceRoot root = workspace.getRoot();

		IProject project = root.getProject(projectName);
		IndexerPreferences.set(project, IndexerPreferences.KEY_INDEXER_ID, IPDOMManager.ID_NO_INDEXER);
		resourcesCreated.add(project);

		IProjectDescription prjDescription = workspace.newProjectDescription(projectName);
		if(pathInWorkspace != null) {
			IPath absoluteLocation = root.getLocation().append(pathInWorkspace);
			prjDescription.setLocation(absoluteLocation);
		}

		if (configurationIds != null && configurationIds.length > 0) {
			ICProjectDescriptionManager prjDescManager = cdtCorePlugin.getProjectDescriptionManager();

			project.create(NULL_MONITOR);
			project.open(NULL_MONITOR);

			ICProjectDescription icPrjDescription = prjDescManager.createProjectDescription(project, false);
			ICConfigurationDescription baseConfiguration = cdtCorePlugin.getPreferenceConfiguration(TestCfgDataProvider.PROVIDER_ID);

			for (String cfgId : configurationIds) {
				icPrjDescription.createConfiguration(cfgId, cfgId + " Name", baseConfiguration);
			}
			prjDescManager.setProjectDescription(project, icPrjDescription);
		}
		project = cdtCorePlugin.createCDTProject(prjDescription, project, NULL_MONITOR);
		waitForProjectRefreshToFinish();
		Assert.assertNotNull(project);

		project.open(null);
		Assert.assertTrue(project.isOpen());

		return project;
	}

