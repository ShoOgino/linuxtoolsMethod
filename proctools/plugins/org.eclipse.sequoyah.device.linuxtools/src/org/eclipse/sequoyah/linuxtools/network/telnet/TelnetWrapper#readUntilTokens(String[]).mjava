	/**
	 * @param tokenArray
	 * @return
	 * @throws IOException
	 */
	private String readUntilTokens(final String []tokenArray) throws IOException {
		String matchedString = null;
		boolean tokenFound = false;
		StringBuffer readData = new StringBuffer();
		
		HashMap<String,Integer> hashMap = new HashMap<String,Integer>();
	
		for (int i = 0; i < tokenArray.length; i++) {
			hashMap.put(tokenArray[i], new Integer(0));
		}
		
		for (int i = 0; i < this.maxResponseDataLength; i++) {

			int aux = inStream.read();

			char ch = 0;
			if (aux == 0 || aux == 1) {
				continue;
			} else {
				ch = (char) aux;
			}
			readData.append(ch);
			
			// if (ch != 1 && ch != 0)
			//	 logger.info(ch);

			for (int j = 0; j < tokenArray.length; j++) {
				String token = tokenArray[j];
				Integer rank = hashMap.get(token);
				if (ch == token.charAt(rank)) {
					rank ++;
					if (rank >= token.length()) {
						// MATCHED
						readData.setLength(readData.length() - token.length());
						matchedString = token;
						tokenFound = true;
					}
				} else {
					rank = 0;
				}
				hashMap.put(token, rank);
			}
			if (tokenFound) {
				break;
			}
		}
		this.lastResponse = readData;
		return matchedString;
	}

