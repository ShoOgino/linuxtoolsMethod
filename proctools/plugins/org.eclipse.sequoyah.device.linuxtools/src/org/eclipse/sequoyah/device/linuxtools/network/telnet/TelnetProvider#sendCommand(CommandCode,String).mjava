	/**
	 * This method will be executed in a separated thread and will produce
	 * an event to be sent to the registered listeners. 
	 */
	/* (non-Javadoc)
	 * @see org.eclipse.tml.linuxmemorymapviewer.network.IConnectionProvider#sendCommand(java.lang.String)
	 */
	public void sendCommand(CommandCode cmd, String cmdStr) throws IOException {
		
		if (CommandCode.FETCH_FILE != cmd) {
			return;
		}

		final String commandAux = CMD_FETCH_PREFIX + cmdStr + "\n"; //$NON-NLS-1$
		
		final TelnetWrapper connectionWrapperAux = connectionWrapper;

		/*TODO: Enhance this. It would be great if all these executed-in-other threads
				were located under a synchronized block */ 
		sendCommandThread = new Thread() {
			public void run() {
				try {
					connectionWrapperAux.setResponseLength(2048);
					if (null != connectionWrapperAux.sendCommand(commandAux)) {
						StringBuffer result = connectionWrapperAux.getLastResponde();
						TelnetProvider.this.notifyListeners(
								EventCode.EVT_PROVIDER_SENDCOMMAND_FINISHED, result);
					} else {
						logger.info("##### NULL ######");
					}
				} catch (IOException ie) {
					TelnetProvider.this.notifyListeners(
							EventCode.EVT_PROVIDER_SENDCOMMAND_ERROR, null);					
				}
				
			}
		};
		sendCommandThread.start();
	}

