	/**
	 * @param data
	 * @return
	 */
	private Object[][] parseStat(StringBuffer data) {
		logger.debug(MSG_GOT_RESULT + "\n" + data.toString());

		int requiredColumns = 0;
		
		Scanner s1 = new Scanner(data.toString());
		ArrayList<String[]> list = new ArrayList<String[]>();
		
		while (s1.hasNextLine()) {
			String[] entry = new String[MAX_COLUMNS];;
			
			Scanner s2 = new Scanner(s1.nextLine());
			s2.findInLine(PARSE_PATTERN_1);
			
			try {

				MatchResult result = s2.match();
				entry[0] = result.group(1).trim();
		    
				String aux = result.group(2);
				
		    	Scanner s3 = new Scanner(aux);
		    	entry[1] = s3.findInLine(PARSE_PATTERN_2).trim();
		    	
		    	s3.match();
		    	int i = 2;
		    	
		    	while (s3.hasNext() && i < MAX_COLUMNS) {
		    		entry[i] = s3.next().trim();

		    		if (i > requiredColumns) {
			    		requiredColumns = i;
			    	}
			    	i++;
		    	}
				s3.close();
			    if (null != entry) {
			    	list.add(entry);
			    }
			} catch (IllegalStateException ise) {
			}
		    s2.close();
		}
	    s1.close();
	    
	    String[][] dataAux = new String[list.size()][requiredColumns + 1];
	    for (int j = 0; j < dataAux.length; j++) {
		    for (int i = 0; i < dataAux[0].length; i++) {
		    	dataAux[j][i] = list.get(j)[i];
		    }
	    }
	    String[][] dataStrippedAux = stripFirstColumn(dataAux);
	    Object[][] result = calculateTimes(dataStrippedAux);
	    copyData(dataAux, result);
		return dataAux;
	}

