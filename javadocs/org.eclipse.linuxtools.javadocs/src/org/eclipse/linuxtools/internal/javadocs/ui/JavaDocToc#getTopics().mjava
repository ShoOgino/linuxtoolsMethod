    @Override
    public ITopic[] getTopics() {
        try {
        	// Finds the path to the javadoc directory from the preference
        	// store, and gets all children directories.

            ArrayList<ITopic> topics = new ArrayList<>();
            IPreferenceStore ps = JavaDocPlugin.getDefault()
                    .getPreferenceStore();
            IPath javadocLocation = new Path(
                    ps.getString(PreferenceConstants.JAVADOCS_DIRECTORY));
            IFileSystem fs = EFS.getLocalFileSystem();
            IFileStore htmlDir = fs.getStore(javadocLocation);
            IFileStore[] files = htmlDir.childStores(EFS.NONE, null);
            Arrays.sort(files, new Comparator<IFileStore>() {

                @Override
                public int compare(IFileStore arg0, IFileStore arg1) {
                    return (arg0.getName().compareToIgnoreCase(arg1.getName()));
                }

            });

            // Loops through all children directories within the javadoc
            // directory and generates topics for them.
            for (IFileStore file: files) {
                String name = file.fetchInfo().getName();
                if (fs.getStore(
                        javadocLocation.append(name)) //$NON-NLS-1$
                        .fetchInfo().exists() && fs.getStore(
                                javadocLocation.append(name + "/index.html")) //$NON-NLS-1$
                                .fetchInfo().exists() ) {
                    ITopic topic = new JavaDocTopic(name);
                    topics.add(topic);


                }
            }

            // Returns an array of the generated topics
            ITopic[] retval = new ITopic[topics.size()];
            return topics.toArray(retval);

        }

        catch (CoreException e) {

        }

        // If no child directories exist, the root "Javadoc documents" help
        // resource will not be displayed in the help system until there are
    	// child directories present.
        return null;
    }

