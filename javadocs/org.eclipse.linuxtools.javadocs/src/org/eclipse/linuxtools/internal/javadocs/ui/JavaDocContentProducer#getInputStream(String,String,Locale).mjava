	/**
	 * Returns an input stream for the requested file. This method will be
	 * called by the Eclipse help system to serve up content to the internal
	 * web server, which will then be displayed in the help browser.
	 *
	 * @param  pluginID  the plugin ID as set in the manifest
	 * @param  href      the link to the file generated by the help system
	 * @param  locale    the locale of the file requested (as set in
	 * 					 JavaDocTocProvider)
	 * @return           the input stream to the file requested
	 */
    @Override
    public InputStream getInputStream(String pluginID, String href,
            Locale locale) {

    	// Eclipse help system adds parameters to the href but this breaks our
    	// path creation so we just strip them.
        if (href.contains("?")) { //$NON-NLS-1$
            href = href.substring(0, href.indexOf('?'));
        }

        // Eclipse help system appends additional plugin ID, so we strip this
        // as well.
        String pathToFile = href.replace("org.eclipse.linuxtools.javadocs", ""); //$NON-NLS-1$ //$NON-NLS-2$

        // Get path from preferences store, attempt to open input stream to the
        // file being requested.
        IPreferenceStore ps = JavaDocPlugin.getDefault().getPreferenceStore();
        IPath javadocLocation = new Path(ps.getString(PreferenceConstants.
        		JAVADOCS_DIRECTORY)).append(pathToFile);
        IFileSystem fs = EFS.getLocalFileSystem();
        IFileStore localLocation = fs.getStore(javadocLocation);
        InputStream stream = null;

        if (!localLocation.fetchInfo().exists()) {

            return null;
        }

        try {
            stream = localLocation.openInputStream(EFS.NONE, new
            		NullProgressMonitor());
        }

        catch (CoreException e) {
            ILog eLog = JavaDocPlugin.getDefault().getLog();
            eLog.log(e.getStatus());
        }

        return stream;
    }

