	public static SWTWorkbenchBot init(String PROJECT_NAME, String PROJECT_TYPE)
			throws Exception {
		SWTWorkbenchBot bot = new SWTWorkbenchBot();
		bot.captureScreenshot(PROJECT_NAME + ".beforeClass.1.jpg");
		try {
			bot.viewByTitle("Welcome").close();
			// hide Subclipse Usage stats popup if present/installed
			bot.shell("Subclipse Usage").activate();
			bot.button("Cancel").click();
		} catch (WidgetNotFoundException e) {
			// ignore
		}

		bot.perspectiveByLabel("C/C++").activate();
		for (SWTBotShell sh : bot.shells()) {
			if (sh.getText().startsWith("C/C++")) {
				sh.activate();
				bot.waitUntil(Conditions.shellIsActive(sh.getText()));
				mainShell = sh;
				break;
			}
		}

		bot.captureScreenshot(PROJECT_NAME + ".beforeClass.2.jpg");
		// Turn off automatic building by default
		SWTBotMenu windowsMenu = bot.menu("Window");
		windowsMenu.menu("Preferences").click();
		SWTBotShell shell = bot.shell("Preferences");
		shell.activate();
		bot.text().setText("Workspace");
		bot.waitUntil(new NodeAvailableAndSelect(bot.tree(), "General", "Workspace"));
		SWTBotCheckBox buildAuto = bot.checkBox("Build automatically");
		if (buildAuto != null && buildAuto.isChecked()) {
			buildAuto.click();
		}
		bot.waitUntil(new UnCheckTest(buildAuto));
		bot.button("Apply").click();
		bot.button("OK").click();
		bot.waitUntil(Conditions.shellCloses(shell));


		// define & repopulate project explorer
		projectExplorer = bot.viewByTitle(PROJECT_EXPLORER);
		GcovTest.createProject(bot, PROJECT_NAME, PROJECT_TYPE);
		GcovTest.populateProject(bot, PROJECT_NAME);
		GcovTest.compileProject(bot, PROJECT_NAME);
		return bot;
	}

