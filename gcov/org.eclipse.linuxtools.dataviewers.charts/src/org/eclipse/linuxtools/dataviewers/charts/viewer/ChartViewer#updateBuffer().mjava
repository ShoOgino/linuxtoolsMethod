	/**
	 * Generate and render the chart model,the chart image is stored in a
	 * buffer. The buffer will be updated only when the chart model is changed.
	 */
	private void updateBuffer( )
	{
		if ( bIsPainting )
		{
			return;
		}
		Throwable paintError = null;

		Rectangle re = preview.getClientArea( );
		final Rectangle adjustedRe = new Rectangle( 0, 0, re.width, re.height );

		if ( adjustedRe.width - 2 * X_OFFSET <= 0
				|| adjustedRe.height - 2 * Y_OFFSET <= 0 )
		{
			if ( buffer != null && !buffer.isDisposed( ) )
			{
				buffer.dispose( );
				buffer = null;
			}
			return;
		}

		if ( cm == null )
		{
			buffer = null;
		}
		else
		{
			bIsPainting = true;
			Image oldBuffer = null;
			if ( buffer == null )
			{
				buffer = new Image( Display.getDefault( ), adjustedRe );
			}
			else
			{
				Rectangle ore = buffer.getBounds( );

				oldBuffer = buffer;

				if ( !adjustedRe.equals( ore ) )
				{
					buffer = new Image( Display.getDefault( ), adjustedRe );
				}
			}

			GC gc = new GC( buffer );

			// fill default background as white.
			gc.setForeground( Display.getDefault( )
					.getSystemColor( SWT.COLOR_WHITE ) );
			gc.fillRectangle( buffer.getBounds( ) );

			bo = BoundsImpl.create( X_OFFSET,
					Y_OFFSET,
					adjustedRe.width - 2 * X_OFFSET,
					adjustedRe.height - 2 * Y_OFFSET );


			try
			{
				deviceRenderer.setProperty( IDeviceRenderer.GRAPHICS_CONTEXT,gc );
				
				bo.scale( 72d / deviceRenderer.getDisplayServer( )
						.getDpiResolution( ) ); // CONVERT  TO POINTS

				// GENERATE AND RENDER THE CHART
				final Generator gr = Generator.instance( );
				
				gcs = gr.build(deviceRenderer.getDisplayServer( ), cm, bo, null, null, null);
				gcs.getRunTimeContext().setActionRenderer( new ChartActionRenderer());
				deviceRenderer.setProperty(IDeviceRenderer.UPDATE_NOTIFIER,
						new ChartUpdateNotifier(preview,cm, gcs.getChartModel()));
				gr.render(deviceRenderer, gcs);
			}
			catch ( Exception ex )
			{
				paintError = ex;
			}

			if ( paintError != null )
			{
				buffer = oldBuffer;
			}
			if ( oldBuffer != null && oldBuffer != buffer )
			{
				oldBuffer.dispose( );
			}
			bIsPainting = false;
		}

	}

