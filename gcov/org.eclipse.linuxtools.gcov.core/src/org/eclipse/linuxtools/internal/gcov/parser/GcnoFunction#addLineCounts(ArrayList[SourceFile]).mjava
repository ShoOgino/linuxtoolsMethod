    public void addLineCounts(ArrayList<SourceFile> srcs) {
		Set<Line> linesToCalculate = new HashSet<>();
        for (int i = 0; i != numBlocks; i++) {
            Block blk = functionBlocks.get(i);
            SourceFile fileSrc = null;

            long[] enc = blk.getEncoding();
            for (int j = 0, k = 0; j != blk.getLineNum(); j++, k++) {
                if (enc[k] == 0) {
                    int srcn = (int) enc[++k];
                    for (SourceFile sf : srcs) {
                        if (sf.getIndex() == srcn) {
                            fileSrc = sf;
                            break;
                        }
                    }
                    j++;
                } else if ((fileSrc != null) && enc[k] < fileSrc.getLines().size()) {
                    Line line = fileSrc.getLines().get((int) enc[k]);
                    if (!line.exists()) {
                        cvrge.incLinesInstrumented();
                    }
                    if ((line.getCount() == 0) && (blk.getCount() != 0)) {
                        cvrge.incLinesExecuted();
                    }
                    line.setExists(true);
					if (line.getBlocks().size() > 1) {
						// we can't count on the blk count to be accurate (multiple blocks have same
						// line
						linesToCalculate.add(line);
						line.setCount(1); // to avoid counting it twice in execution total
					} else {
						line.setCount(line.getCount() + blk.getCount());
					}
                }
            }
        }
		for (Line line : linesToCalculate) {
			long count = 0;
			for (Block b : line.getBlocks()) {
				for (Arc arc : b.getEntryArcs()) {
					if (!line.hasBlock(arc.getSrcBlock())) {
						count += arc.getCount();
					}
				}
			}
			line.setCount(count);
		}
    }

