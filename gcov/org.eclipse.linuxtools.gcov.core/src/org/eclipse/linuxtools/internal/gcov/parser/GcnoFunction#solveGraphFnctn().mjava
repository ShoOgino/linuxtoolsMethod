    public void solveGraphFnctn() {
        ArrayList<Block> fnctnBlcks = this.functionBlocks;
        ArrayList<Block> validBlocks = new ArrayList<>();
        ArrayList<Block> invalidBlocks = new ArrayList<>();

        // Function should contain at least one block
        if (fnctnBlcks.size() >= 2) {
            if (fnctnBlcks.get(0).getNumPreds() == 0) {
                fnctnBlcks.get(0).setNumPreds(50000);
            }
            if (fnctnBlcks.get(fnctnBlcks.size() - 1).getNumSuccs() == 0) {
                fnctnBlcks.get(fnctnBlcks.size() - 1).setNumSuccs(50000);
            }
        }

        for (Block b: fnctnBlcks) {
            b.setInvalidChain(true);
            invalidBlocks.add(b);
        }

        while (!validBlocks.isEmpty() || !invalidBlocks.isEmpty()) {

            if (!invalidBlocks.isEmpty()) {
                for (int i = invalidBlocks.size() - 1; i >= 0; i--) {
                    Block invb = invalidBlocks.get(i);
                    long total = 0;
                    invalidBlocks.remove(i);
                    invb.setInvalidChain(false);

                    if (invb.getNumPreds() != 0 && invb.getNumSuccs() != 0)
                    	continue;

                    if (invb.getNumSuccs() == 0) {
                        ArrayList<Arc> extArcs = invb.getExitArcs();
                        for (Arc arc : extArcs) {
                            total += arc.getCount();
                        }
                    }
                    // On Windows, we can end up with both numpreds and numsuccs 0 for
                    // a closing brace of a function so we need to check the entry arcs
                    // as well if we don't have a total > 0.
                    if (invb.getNumPreds() == 0 && total == 0) {
                        ArrayList<Arc> entrArcs = invb.getEntryArcs();
                        for (Arc arc : entrArcs) {
                            total += arc.getCount();
                        }
                    }

                    invb.setCount(total);
                    invb.setCountValid(true);
                    invb.setValidChain(true);
                    validBlocks.add(invb);
                }
            }
            while (!validBlocks.isEmpty()) {
                int last = validBlocks.size() - 1;
                Block vb = validBlocks.get(last);
                Arc invarc = null;
                int total = 0;
                validBlocks.remove(last);

                vb.setValidChain(false);

                if (vb.getNumSuccs() == 1) {
                    Block blcksdst;
                    total = (int) vb.getCount();

                    for (Arc extAr : vb.getExitArcs()) {
                        total -= extAr.getCount();
                        if (extAr.isCountValid() == false) {
                            invarc = extAr;
                        }
                    }
                    blcksdst = invarc.getDstnatnBlock();
                    invarc.setCountValid(true);
                    invarc.setCount(total);
                    vb.decNumSuccs();
                    blcksdst.decNumPreds();

                    if (blcksdst.isCountValid()) {
                        if (blcksdst.getNumPreds() == 1 && !blcksdst.isValidChain()) {
                            blcksdst.setValidChain(true);
                            validBlocks.add(blcksdst);
                        }
                    } else {
                        if (blcksdst.getNumPreds() == 0 && !blcksdst.isInvalidChain()) {
                            blcksdst.setInvalidChain(true);
                            invalidBlocks.add(blcksdst);
                        }
                    }
                }

                if (vb.getNumPreds() == 1) {
                    Block blcksrc;
                    total = (int) vb.getCount();
                    invarc = null;

                    for (Arc entrAr : vb.getEntryArcs()) {
						total -= entrAr.getCount(); /* total can end up negative here ?? */
                        if (!entrAr.isCountValid()) {
                            invarc = entrAr;
                        }
                    }

                    blcksrc = invarc.getSrcBlock();
                    invarc.setCountValid(true);
					invarc.setCount(total); /* temporary kludge */
                    vb.decNumPreds();
                    blcksrc.decNumSuccs();

                    if (blcksrc.isCountValid()) {
                        if (blcksrc.getNumSuccs() == 1 && !blcksrc.isInvalidChain()) {
                            blcksrc.setValidChain(true);
                            validBlocks.add(blcksrc);
                        }
                    } else if (blcksrc.getNumSuccs() == 0 && !blcksrc.isInvalidChain()) {
                        blcksrc.setInvalidChain(true);
                        invalidBlocks.add(blcksrc);
                    }
                }
            }
        }
    }

