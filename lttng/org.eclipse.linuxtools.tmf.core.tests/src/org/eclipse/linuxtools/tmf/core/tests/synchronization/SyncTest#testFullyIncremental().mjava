    /**
     * Testing fully incremental algorithm with communication between the two
     * traces
     */
    @Test
    public void testFullyIncremental() {

        SynchronizationAlgorithm syncAlgo = new SyncAlgorithmFullyIncremental();

        syncAlgo.init(fTraces);

        assertEquals(SyncQuality.ABSENT, syncAlgo.getSynchronizationQuality(t1, t2));
        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t2, new TmfTimestamp(1)),
                        new TmfSyncEventStub(t1, new TmfTimestamp(1))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 1 beta 0 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.INCOMPLETE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t1, new TmfTimestamp(1)),
                        new TmfSyncEventStub(t2, new TmfTimestamp(3))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 1 beta 0 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.INCOMPLETE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t2, new TmfTimestamp(2)),
                        new TmfSyncEventStub(t1, new TmfTimestamp(3))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 1 beta 0.5 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.APPROXIMATE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t1, new TmfTimestamp(3)),
                        new TmfSyncEventStub(t2, new TmfTimestamp(5))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 0.75 beta 1.25 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.ACCURATE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t1, new TmfTimestamp(4)),
                        new TmfSyncEventStub(t2, new TmfTimestamp(8))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 0.75 beta 1.25 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.ACCURATE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t2, new TmfTimestamp(4)),
                        new TmfSyncEventStub(t1, new TmfTimestamp(5))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 1.125 beta 0.875 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.ACCURATE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t2, new TmfTimestamp(4)),
                        new TmfSyncEventStub(t1, new TmfTimestamp(6))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 1.125 beta 0.875 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.ACCURATE, syncAlgo.getSynchronizationQuality(t1, t2));

        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t1, new TmfTimestamp(6)),
                        new TmfSyncEventStub(t2, new TmfTimestamp(7))
                ));
        assertEquals("SyncAlgorithmFullyIncremental [Between t1 and t2 [ alpha 0.725 beta 1.275 ]]", syncAlgo.toString());
        assertEquals(SyncQuality.ACCURATE, syncAlgo.getSynchronizationQuality(t1, t2));

        ITmfTimestampTransform tt2 = syncAlgo.getTimestampTransform(t2);
        ITmfTimestampTransform tt1 = syncAlgo.getTimestampTransform(t1);

        assertEquals(syncAlgo.getTimestampTransform("t1"), tt1);
        assertEquals(TmfTimestampTransform.IDENTITY, tt1);
        assertEquals(syncAlgo.getTimestampTransform("t2"), tt2);

        /* Make the two hulls intersect */
        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t1, new TmfTimestamp(7)),
                        new TmfSyncEventStub(t2, new TmfTimestamp(4))
                ));
        syncAlgo.addMatch(
                new TmfEventDependency(new TmfSyncEventStub(t2, new TmfTimestamp(7)),
                        new TmfSyncEventStub(t1, new TmfTimestamp(3))
                ));
        assertEquals(SyncQuality.FAIL, syncAlgo.getSynchronizationQuality(t1, t2));
    }

