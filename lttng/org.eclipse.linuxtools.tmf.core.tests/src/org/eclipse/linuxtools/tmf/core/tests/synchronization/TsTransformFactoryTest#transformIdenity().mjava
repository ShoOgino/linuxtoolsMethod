    /**
     * Test with identity
     */
    @Test
    public void transformIdenity() {
        final ITmfTimestampTransform identity = TimestampTransformFactory.create(0);
        final ITmfTimestampTransform innefficientIdentity = new TmfConstantTransform();
        final ITmfTimestampTransform compositeInnefficientIdentity = identity.composeWith(innefficientIdentity);
        final ITmfTimestampTransform compositeInnefficientIdentity2 = innefficientIdentity.composeWith(innefficientIdentity);
        final ITmfTimestampTransform compositeInnefficientIdentity3 = innefficientIdentity.composeWith(identity);
        assertEquals(t0, identity.transform(t0));
        assertEquals(tn0, identity.transform(tn0));
        assertEquals(t100, identity.transform(t100));
        assertEquals(t1e2, identity.transform(t100));
        assertEquals(t1e2, identity.transform(t1e2));
        assertEquals(t1e3, identity.transform(t1e3));
        assertEquals(tn100, identity.transform(tn100));
        assertEquals(t0, innefficientIdentity.transform(t0)); // bad practice
        assertEquals(t0, compositeInnefficientIdentity.transform(t0)); // bad
                                                                       // practice
        assertEquals(t0, compositeInnefficientIdentity2.transform(t0)); // bad
                                                                        // practice
        assertEquals(t0, compositeInnefficientIdentity3.transform(t0)); // bad
                                                                        // practice
    }

