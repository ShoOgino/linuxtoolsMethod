    /**
     * Test method for
     * {@link org.eclipse.linuxtools.internal.tmf.core.request.TmfRequestExecutor#execute(java.lang.Runnable)}
     */
    @Test
    public void testExecute() {
        MyProvider provider = new MyProvider();
        MyRequest request1 = new MyRequest(ExecutionType.BACKGROUND, Integer.MAX_VALUE / 5);
        MyThread thread1 = new MyThread(provider, request1);
        MyRequest request2 = new MyRequest(ExecutionType.FOREGROUND, Integer.MAX_VALUE / 10);
        MyThread thread2 = new MyThread(provider, request2);
        MyRequest request3 = new MyRequest(ExecutionType.FOREGROUND, Integer.MAX_VALUE / 10);
        MyThread thread3 = new MyThread(provider, request3);

        // Start thread1
        fExecutor.execute(thread1);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        assertTrue("isRunning", thread1.isRunning());

        // Start higher priority thread2
        fExecutor.execute(thread2);
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
        }
        assertFalse("isRunning", thread1.isRunning());
        assertTrue("isRunning", thread2.isRunning());

        // Wait for end of thread2
        try {
            synchronized (monitor) {
                monitor.wait();
                Thread.sleep(1000);
            }
        } catch (InterruptedException e) {
        }
        assertTrue("isCompleted", thread2.isCompleted());
        assertTrue("isRunning", thread1.isRunning());

        // Start higher priority thread3
        fExecutor.execute(thread3);
        try {
            Thread.sleep(500);
        } catch (InterruptedException e) {
        }
        assertFalse("isRunning", thread1.isRunning());
        assertTrue("isRunning", thread3.isRunning());

        // Wait for end of thread3
        try {
            synchronized (monitor) {
                monitor.wait();
                Thread.sleep(500);
            }
        } catch (InterruptedException e) {
        }
        assertTrue("isCompleted", thread3.isCompleted());
        assertTrue("isRunning", thread1.isRunning());

        // Wait for thread1 completion
        try {
            synchronized (monitor) {
                monitor.wait();
            }
        } catch (InterruptedException e) {
        }
        assertTrue("isCompleted", thread1.isCompleted());
    }

