    /**
     * Test suite for the
     * {@link TmfAnalysisRequirementHelper#getRequirementValuesMap(Iterable, ValuePriorityLevel)}
     * method
     */
    @Test
    public void testGetRequirementValuesMapWithLevel() {
        Set<IAnalysisRequirementProvider> providers = new HashSet<>();
        providers.add(fTestModuleHelper2);
        providers.add(fTestModuleHelper);

        /* There should be 3 optional requirements types */
        Map<String, Set<String>> valuesByType = TmfAnalysisRequirementHelper.getRequirementValuesMap(providers, ValuePriorityLevel.OPTIONAL);
        assertTrue(!valuesByType.isEmpty());
        assertEquals(3, valuesByType.size());

        Set<String> values = valuesByType.get(fRequirementFactory.getRequirementType1());
        assertTrue(values.isEmpty());

        values = valuesByType.get(fRequirementFactory.getRequirementType2());
        assertEquals(2, values.size());
        assertTrue(values.contains(fRequirementFactory.getRequirementValue2()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue4()));

        values = valuesByType.get(fRequirementFactory.getRequirementType3());
        assertTrue(values.isEmpty());

        /* And 3 types with mandatory requirements */
        valuesByType = TmfAnalysisRequirementHelper.getRequirementValuesMap(providers, ValuePriorityLevel.MANDATORY);
        assertTrue(!valuesByType.isEmpty());
        assertEquals(3, valuesByType.size());

        values = valuesByType.get(fRequirementFactory.getRequirementType1());
        assertEquals(4, values.size());
        assertTrue(values.contains(fRequirementFactory.getRequirementValue1()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue2()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue3()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue5()));

        values = valuesByType.get(fRequirementFactory.getRequirementType2());
        assertEquals(3, values.size());
        assertTrue(values.contains(fRequirementFactory.getRequirementValue1()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue3()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue5()));

        values = valuesByType.get(fRequirementFactory.getRequirementType3());
        assertEquals(3, values.size());
        assertTrue(values.contains(fRequirementFactory.getRequirementValue3()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue4()));
        assertTrue(values.contains(fRequirementFactory.getRequirementValue5()));
    }

