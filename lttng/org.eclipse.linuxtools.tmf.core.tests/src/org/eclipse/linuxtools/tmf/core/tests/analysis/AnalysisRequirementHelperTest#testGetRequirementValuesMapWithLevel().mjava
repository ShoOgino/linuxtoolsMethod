    /**
     * Test suite for the
     * {@link TmfAnalysisRequirementHelper#getRequirementValuesMap(Iterable, ValuePriorityLevel)}
     * method
     */
    @Test
    public void testGetRequirementValuesMapWithLevel() {
        Set<IAnalysisRequirementProvider> providers = new HashSet<>();
        providers.add(fTestModuleHelper2);
        providers.add(fTestModuleHelper);

        /* There should be 3 optional requirements types */
        Multimap<String, String> valuesByType = TmfAnalysisRequirementHelper.getRequirementValuesMap(providers, ValuePriorityLevel.OPTIONAL);
        assertTrue(!valuesByType.isEmpty());
        assertEquals(1, valuesByType.keySet().size());

        Collection<String> values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_1);
        assertTrue(values.isEmpty());

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_2);
        assertEquals(2, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_2));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_4));

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_3);
        assertTrue(values.isEmpty());

        /* And 3 types with mandatory requirements */
        valuesByType = TmfAnalysisRequirementHelper.getRequirementValuesMap(providers, ValuePriorityLevel.MANDATORY);
        assertTrue(!valuesByType.isEmpty());
        assertEquals(3, valuesByType.keySet().size());

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_1);
        assertEquals(4, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_1));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_2));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_3));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_5));

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_2);
        assertEquals(3, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_1));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_3));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_5));

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_3);
        assertEquals(3, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_3));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_4));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_5));
    }

