    /**
     * Test suite for the
     * {@link TmfAnalysisRequirementHelper#getRequirementValuesMap(Iterable)}
     * method
     */
    @Test
    public void testGetRequirementValuesMap() {
        Set<IAnalysisRequirementProvider> providers = new HashSet<>();
        providers.add(fTestModuleHelper2);
        providers.add(fTestModuleHelper);

        Multimap<String, String> valuesByType = TmfAnalysisRequirementHelper.getRequirementValuesMap(providers);
        assertFalse(valuesByType.isEmpty());

        /* There should be 3 types */
        assertEquals(3, valuesByType.keySet().size());

        Collection<String> values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_1);
        assertEquals(4, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_1));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_2));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_3));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_5));

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_2);
        assertEquals(5, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_1));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_2));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_3));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_4));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_5));

        values = valuesByType.get(AnalysisRequirementFactory.REQUIREMENT_TYPE_3);
        assertEquals(3, values.size());
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_3));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_4));
        assertTrue(values.contains(AnalysisRequirementFactory.REQUIREMENT_VALUE_5));
    }

