    @Test
    public void testGrowingIndex() {
        ITmfTrace[] testTraces = new TmfTraceStub[2];
        try {
            URL location = FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(), new Path(DIRECTORY + File.separator + TEST_STREAM1), null);
            File test = new File(FileLocator.toFileURL(location).toURI());
            final TmfTraceStub trace1 = new TmfTraceStub(test.getPath(), 0, false, null, null);
            testTraces[0] = trace1;
            location = FileLocator.find(TmfCoreTestPlugin.getDefault().getBundle(), new Path(DIRECTORY + File.separator + TEST_STREAM2), null);
            test = new File(FileLocator.toFileURL(location).toURI());
            final TmfTraceStub trace2 = new TmfTraceStub(test.getPath(), 0, false, null, null);
            testTraces[1] = trace2;
        } catch (final TmfTraceException e) {
            e.printStackTrace();
        } catch (final URISyntaxException e) {
            e.printStackTrace();
        } catch (final IOException e) {
            e.printStackTrace();
        }

        TmfExperimentStub experiment = new TmfExperimentStub(EXPERIMENT, testTraces, BLOCK_SIZE);
        int pageSize = experiment.getCacheSize();

        // Build the first half of the index
        TmfTimeRange range = new TmfTimeRange(new TmfTimestamp(1, -3), new TmfTimestamp(NB_EVENTS / 2 - 1, -3));
        experiment.getIndexer().buildIndex(0, range, true);

        // Validate that each checkpoint points to the right event
        List<ITmfCheckpoint> checkpoints = experiment.getIndexer().getCheckpoints();
        assertTrue("Checkpoints exist",  checkpoints != null);
        assertEquals("Checkpoints size", NB_EVENTS / BLOCK_SIZE / 2, checkpoints.size());

        // Build the second half of the index
        experiment.getIndexer().buildIndex(NB_EVENTS / 2, TmfTimeRange.ETERNITY, true);

        // Validate that each checkpoint points to the right event
        assertEquals("Checkpoints size", NB_EVENTS / BLOCK_SIZE, checkpoints.size());
        for (int i = 0; i < checkpoints.size(); i++) {
            ITmfCheckpoint checkpoint = checkpoints.get(i);
            ITmfLocation location = checkpoint.getLocation();
            ITmfContext context = experiment.seekEvent(location);
            ITmfEvent event = experiment.parseEvent(context);
            assertTrue(context.getRank() == i * pageSize);
            assertTrue((checkpoint.getTimestamp().compareTo(event.getTimestamp(), false) == 0));
            assertEquals("Checkpoint value", i * pageSize + 1, checkpoint.getTimestamp().getValue());
        }

        /* Clean up (since we didn't use the class-specific fixtures) */
        experiment.dispose();
        for (ITmfTrace trace : testTraces) {
            trace.dispose();
        }
    }

