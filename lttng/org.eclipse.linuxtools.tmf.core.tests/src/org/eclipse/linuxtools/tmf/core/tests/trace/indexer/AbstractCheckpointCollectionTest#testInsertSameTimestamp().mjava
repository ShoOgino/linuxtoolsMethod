    /**
     * Test many checkpoint insertions using the same timestamp. Make sure they
     * can be found after re-opening the file
     */
    @Test
    public void testInsertSameTimestamp() {
        for (int i = 0; i < CHECKPOINTS_INSERT_NUM; i++) {
            TmfCheckpoint checkpoint = new TmfCheckpoint(new TmfTimestamp(12345), new TmfLongLocation(123456L + i), i);
            fCheckpointCollection.insert(checkpoint);
        }

        fCheckpointCollection.setIndexComplete();
        if (isPersistableCollection()) {
            fCheckpointCollection.dispose();
        }

        boolean random = true;
        ArrayList<Integer> list = new ArrayList<>();
        for (int i = 0; i < CHECKPOINTS_INSERT_NUM; i++) {
            if (random) {
                Random rand = new Random();
                list.add(rand.nextInt(CHECKPOINTS_INSERT_NUM));
            } else {
                list.add(i);
            }
        }

        if (isPersistableCollection()) {
            fCheckpointCollection = createCollection();
        }

        for (int i = 0; i < CHECKPOINTS_INSERT_NUM; i++) {
            Integer randomCheckpoint = list.get(i);
            TmfCheckpoint checkpoint = new TmfCheckpoint(new TmfTimestamp(12345), new TmfLongLocation(123456L + randomCheckpoint), 0);
            long found = fCheckpointCollection.binarySearch(checkpoint);
            assertEquals(randomCheckpoint.intValue(), found);
        }
    }

