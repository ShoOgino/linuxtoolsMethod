    public void testIterateOverEventsMixed() {
        final Vector<ITmfEvent> requestedEvents1 = new Vector<ITmfEvent>();
        final Vector<ITmfEvent> requestedEvents2 = new Vector<ITmfEvent>();
        final int nbRequestedEvents = 100;

        final ITmfEventProvider[] providers = TmfProviderManager.getProviders(TmfEvent.class, TmfTraceStub.class);
        final ITmfTrace trace = (ITmfTrace) providers[0];

        final Iterator<ITmfEvent> it1 = trace.iterator();
        final Iterator<ITmfEvent> it2 = trace.iterator();

        int nbEventsToRead = nbRequestedEvents;
        while (it1.hasNext() && nbEventsToRead-- > 0) {
            requestedEvents1.add(it1.next());
            if (nbEventsToRead % 2 == 0) {
                requestedEvents2.add(it2.next());
            }
        }

        // Intermediate validation
        assertEquals("nbEvents", nbRequestedEvents, requestedEvents1.size());
        assertEquals("nbEvents", nbRequestedEvents / 2, requestedEvents2.size());

        // Finish the job
        nbEventsToRead = nbRequestedEvents / 2;
        while (it2.hasNext() && nbEventsToRead-- > 0) {
            requestedEvents2.add(it2.next());
        }

        // Final validation
        assertEquals("nbEvents", nbRequestedEvents, requestedEvents1.size());
        assertEquals("nbEvents", nbRequestedEvents, requestedEvents2.size());
        for (int i = 0; i < nbRequestedEvents; i++) {
            assertEquals("Distinct events", i + 1, requestedEvents1.get(i).getTimestamp().getValue());
            assertEquals("Distinct events", i + 1, requestedEvents2.get(i).getTimestamp().getValue());
        }
    }

