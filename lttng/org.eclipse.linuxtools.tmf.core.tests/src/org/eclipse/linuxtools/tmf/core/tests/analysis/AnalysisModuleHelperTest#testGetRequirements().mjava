    /**
     * Test for the
     * {@link TmfAnalysisModuleHelperConfigElement#getAnalysisRequirements}
     * method
     */
    @Test
    public void testGetRequirements() {
        Iterable<TmfAnalysisRequirement> requirements = fReqModule.getAnalysisRequirements();
        assertNotNull(requirements);

        Map<String, TmfAnalysisRequirement> rMap = new HashMap<>();

        for (TmfAnalysisRequirement req : requirements) {
            assertFalse(rMap.containsKey(req.getType()));
            rMap.put(req.getType(), req);
        }
        assertEquals(2, rMap.size());

        /* Test if all types and values have been obtained */
        TmfAnalysisRequirement req = rMap.get(TestRequirementAnalysis.EVENT_TYPE);
        assertNotNull(req);

        Set<String> values = req.getValues();
        assertEquals(3, values.size());
        assertTrue(values.contains(TestRequirementAnalysis.EXIT_SYSCALL));
        assertTrue(values.contains(TestRequirementAnalysis.SCHED_SWITCH));
        assertTrue(values.contains(TestRequirementAnalysis.SCHED_WAKEUP));

        req = rMap.get(TestRequirementAnalysis.FIELD_TYPE);
        assertNotNull(req);

        values = req.getValues();
        assertEquals(2, values.size());
        assertTrue(values.contains(TestRequirementAnalysis.PID));
        assertTrue(values.contains(TestRequirementAnalysis.TID));
    }

