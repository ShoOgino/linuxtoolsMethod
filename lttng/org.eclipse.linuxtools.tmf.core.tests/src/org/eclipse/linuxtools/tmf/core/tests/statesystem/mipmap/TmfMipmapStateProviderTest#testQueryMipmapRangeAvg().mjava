    /**
     * Test a query range to the state system to get the average value in the
     * range
     *
     * Make sure the state system has data.
     *
     */
    @Test
    public void testQueryMipmapRangeAvg() {
        assertNotNull(ssq);
        try {
            double avg;
            int quark = ssq.getQuarkAbsolute(TEST_ATTRIBUTE_NAME);

            avg = TmfStateSystemOperations.queryRangeAverage(ssq, 0, START_TIME, quark);
            assertEquals((double) (START_TIME - INTERVAL) / INTERVAL, avg, DELTA);

            avg = TmfStateSystemOperations.queryRangeAverage(ssq, START_TIME, START_TIME, quark);
            assertEquals((double) START_TIME / INTERVAL, avg, DELTA);

            avg = TmfStateSystemOperations.queryRangeAverage(ssq, START_TIME, END_TIME / 2, quark);
            assertEquals((double) (START_TIME + (END_TIME / 2 - INTERVAL)) / 2 / INTERVAL, avg, DELTA);

            avg = TmfStateSystemOperations.queryRangeAverage(ssq, 0, END_TIME, quark);
            assertEquals((double) (END_TIME - INTERVAL) / 2 / INTERVAL, avg, DELTA);

            avg = TmfStateSystemOperations.queryRangeAverage(ssq, END_TIME / 2, END_TIME, quark);
            assertEquals((double) (END_TIME / 2 + (END_TIME - INTERVAL)) / 2 / INTERVAL, avg, DELTA);

            avg = TmfStateSystemOperations.queryRangeAverage(ssq, START_TIME - INTERVAL / 2, END_TIME / 2 + INTERVAL / 2, quark);
            assertEquals((double) (START_TIME + (END_TIME / 2 - INTERVAL)) / 2 / INTERVAL, avg, DELTA);

        } catch (AttributeNotFoundException e) {
            fail(e.getMessage());
        } catch (TimeRangeException e) {
            fail(e.getMessage());
        } catch (StateValueTypeException e) {
            fail(e.getMessage());
        }
    }

