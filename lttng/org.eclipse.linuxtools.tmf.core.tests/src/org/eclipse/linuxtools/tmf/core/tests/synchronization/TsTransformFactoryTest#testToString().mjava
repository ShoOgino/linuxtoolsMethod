    /**
     * Test toStrings
     */
    @Test
    public void testToString() {
        final String expectedLinear = "TmfTimestampLinear [ slope = 314.0, offset = 0.0 ]";
        final String expectedLinearBigDec = "TmfTimestampLinear [ slope = 314, offset = 0 ]";
        final String expectedOffset = "TmfConstantTransform [ offset = 314 ]";
        final String expectedIdentity = "TmfTimestampTransform [ IDENTITY ]";
        final String expectedOffset100 = "TmfConstantTransform [ offset = 100 ]";
        assertEquals(expectedLinear, TimestampTransformFactory.createLinear(314, 0).toString());
        assertEquals(expectedLinearBigDec, TimestampTransformFactory.createLinear(BigDecimal.valueOf(314), BigDecimal.ZERO).toString());
        assertEquals(expectedOffset, TimestampTransformFactory.createLinear(1, 314).toString());
        assertEquals(expectedOffset, TimestampTransformFactory.createWithOffset(314).toString());
        assertEquals(expectedOffset, TimestampTransformFactory.createWithOffset(14).composeWith(TimestampTransformFactory.createWithOffset(300)).toString());
        assertEquals(expectedIdentity, TimestampTransformFactory.createWithOffset(314).composeWith(TimestampTransformFactory.createWithOffset(-314)).toString());
        assertEquals(expectedIdentity, TimestampTransformFactory.createWithOffset(0).toString());
        assertEquals(expectedIdentity, identity1.toString());
        assertEquals(expectedOffset100, offset1.toString());
        assertEquals(expectedOffset100, offset2.toString());
        assertEquals(expectedOffset100, offset3.toString());
        assertEquals(expectedOffset100, offset4.toString());
    }

