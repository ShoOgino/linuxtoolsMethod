    /**
     * Test toStrings
     */
    @Test
    public void testToString() {
        final String expectedLinear = "TmfTimestampLinear [ alpha = 314.0, beta = 0.0 ]";
        final String expectedLinearBigDec = "TmfTimestampLinear [ alpha = 314, beta = 0 ]";
        final String expectedOffset = "TmfConstantTransform [ offset = 314 ]";
        final String expectedIdentity = "TmfTimestampTransform [ IDENTITY ]";
        final String expectedOffset100 = "TmfConstantTransform [ offset = 100 ]";
        assertEquals(expectedLinear, TimestampTransformFactory.create(314, 0).toString());
        assertEquals(expectedLinearBigDec, TimestampTransformFactory.create(BigDecimal.valueOf(314), BigDecimal.ZERO).toString());
        assertEquals(expectedOffset, TimestampTransformFactory.create(1, 314).toString());
        assertEquals(expectedOffset, TimestampTransformFactory.create(314).toString());
        assertEquals(expectedOffset, TimestampTransformFactory.create(14).composeWith(TimestampTransformFactory.create(300)).toString());
        assertEquals(expectedIdentity, TimestampTransformFactory.create(314).composeWith(TimestampTransformFactory.create(-314)).toString());
        assertEquals(expectedIdentity, TimestampTransformFactory.create(0).toString());
        assertEquals(expectedIdentity, identity1.toString());
        assertEquals(expectedOffset100, offset1.toString());
        assertEquals(expectedOffset100, offset2.toString());
        assertEquals(expectedOffset100, offset3.toString());
        assertEquals(expectedOffset100, offset4.toString());
    }

