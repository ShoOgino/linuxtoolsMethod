    /**
     * Test a full query to the state system at the startTime
     *
     * Make sure the state system has data.
     *
     * Hint: the value read should always be more or less(t / 1000)
     *
     */
    @Test
    public void testQueryValuesOnStart() {
        assertNotNull(ssq);
        try {
            int quark;

            List<ITmfStateInterval> intervals = ssq.queryFullState(START_TIME);

            int baseQuark = ssq.getQuarkAbsolute(TEST_ATTRIBUTE_NAME);
            assertEquals(START_TIME / INTERVAL, intervals.get(baseQuark).getStateValue().unboxLong());

            int maxMipmapQuark = ssq.getQuarkRelative(baseQuark, AbstractTmfMipmapStateProvider.MAX_STRING);
            assertEquals("max nblevels", NB_LEVELS, intervals.get(maxMipmapQuark).getStateValue().unboxInt());
            quark = ssq.getQuarkRelative(maxMipmapQuark, String.valueOf(1));
            assertEquals("max value @ level 1", (long) Math.pow(RESOLUTION, 1), intervals.get(quark).getStateValue().unboxLong());
            quark = ssq.getQuarkRelative(maxMipmapQuark, String.valueOf(2));
            assertEquals("max value @ level 2", (long) Math.pow(RESOLUTION, 2), intervals.get(quark).getStateValue().unboxLong());
            quark = ssq.getQuarkRelative(maxMipmapQuark, String.valueOf(3));
            assertEquals("max value @ level 3", (long) Math.pow(RESOLUTION, 3), intervals.get(quark).getStateValue().unboxLong());
            quark = ssq.getQuarkRelative(maxMipmapQuark, String.valueOf(4));
            assertEquals("max value @ level 4", (long) Math.pow(RESOLUTION, 4), intervals.get(quark).getStateValue().unboxLong());

            int minMipmapQuark = ssq.getQuarkRelative(baseQuark, AbstractTmfMipmapStateProvider.MIN_STRING);
            assertEquals("min nblevels", NB_LEVELS, intervals.get(minMipmapQuark).getStateValue().unboxInt());
            quark = ssq.getQuarkRelative(minMipmapQuark, String.valueOf(1));
            assertEquals("min value @ level 1", START_TIME / INTERVAL, intervals.get(quark).getStateValue().unboxLong());
            quark = ssq.getQuarkRelative(minMipmapQuark, String.valueOf(2));
            assertEquals("min value @ level 2", START_TIME / INTERVAL, intervals.get(quark).getStateValue().unboxLong());
            quark = ssq.getQuarkRelative(minMipmapQuark, String.valueOf(3));
            assertEquals("min value @ level 3", START_TIME / INTERVAL, intervals.get(quark).getStateValue().unboxLong());
            quark = ssq.getQuarkRelative(minMipmapQuark, String.valueOf(4));
            assertEquals("min value @ level 4", START_TIME / INTERVAL, intervals.get(quark).getStateValue().unboxLong());

            int avgMipmapQuark = ssq.getQuarkRelative(baseQuark, AbstractTmfMipmapStateProvider.AVG_STRING);
            assertEquals("avg nblevels", NB_LEVELS, intervals.get(avgMipmapQuark).getStateValue().unboxInt());
            quark = ssq.getQuarkRelative(avgMipmapQuark, String.valueOf(1));
            assertEquals("avg value @ level 1", 0.5 + Math.pow(RESOLUTION, 1) / 2, intervals.get(quark).getStateValue().unboxDouble(), DELTA);
            quark = ssq.getQuarkRelative(avgMipmapQuark, String.valueOf(2));
            assertEquals("avg value @ level 2", 0.5 + Math.pow(RESOLUTION, 2) / 2, intervals.get(quark).getStateValue().unboxDouble(), DELTA);
            quark = ssq.getQuarkRelative(avgMipmapQuark, String.valueOf(3));
            assertEquals("avg value @ level 3", 0.5 + Math.pow(RESOLUTION, 3) / 2, intervals.get(quark).getStateValue().unboxDouble(), DELTA);
            quark = ssq.getQuarkRelative(avgMipmapQuark, String.valueOf(4));
            assertEquals("avg value @ level 4", 0.5 + Math.pow(RESOLUTION, 4) / 2, intervals.get(quark).getStateValue().unboxDouble(), DELTA);

        } catch (TimeRangeException e) {
            fail(e.getMessage());
        } catch (StateSystemDisposedException e) {
            fail(e.getMessage());
        } catch (AttributeNotFoundException e) {
            fail(e.getMessage());
        } catch (StateValueTypeException e) {
            fail(e.getMessage());
        }
        assertTrue(true);
    }

