    /**
     * Test a single query to the state system for an average
     *
     * Make sure the state system has data.
     *
     * Hint: the value read should always be more or less(t / 1000)
     *
     */
    @Test
    public void testQueryMipAvg() {
        assertNotNull(ssq);
        try {
            List<ITmfStateInterval> intervals = ssq.queryFullState(TEST_TIMESTAMP);
            int mipmapQuark = ssq.getQuarkAbsolute(TEST_ATTRIBUTE_NAME, AbstractTmfMipmapStateProvider.AVG_STRING);

            assertEquals("avg nblevels", NB_LEVELS, intervals.get(mipmapQuark).getStateValue().unboxInt());
            for (int level = 1; level < NB_LEVELS; level++) {
                long width = (long) Math.pow(RESOLUTION, level);
                int levelQuark = ssq.getQuarkRelative(mipmapQuark, String.valueOf(level));
                ITmfStateInterval interval = intervals.get(levelQuark);
                double valueDouble = interval.getStateValue().unboxDouble();
                assertEquals("avg value @ level " + level, 0.5 + (width / 2) + (((TEST_TIMESTAMP - START_TIME) / INTERVAL) / width) * width, valueDouble, DELTA);
                assertEquals("avg start time @ level " + level, START_TIME + (((TEST_TIMESTAMP - START_TIME) / INTERVAL) / width) * width * INTERVAL, interval.getStartTime());
                assertEquals("avg end time @ level " + level, START_TIME + (INTERVAL * width) + (((TEST_TIMESTAMP - START_TIME) / INTERVAL) / width) * width * INTERVAL, interval.getEndTime() + 1);
            }

        } catch (TimeRangeException e) {
            fail(e.getMessage());
        } catch (StateSystemDisposedException e) {
            fail(e.getMessage());
        } catch (AttributeNotFoundException e) {
            fail(e.getMessage());
        } catch (StateValueTypeException e) {
            fail(e.getMessage());
        }
        assertTrue(true);
    }

