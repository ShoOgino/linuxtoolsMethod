    public void testConcurrentOperations() {
        final LTTngTrace testStream = prepareStreamToTest();
        ITmfEvent event1 = null;
        ITmfEvent event2 = null;
        ITmfContext context1;
        ITmfContext context2;

        // Test concurrent interference (seek) after a seek
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (parseEvent) after a seek
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event2 = testStream.parseEvent(context2);
        assertTrue("event is null after parseEvent()", event2 != null);
        assertEquals("event has wrong timestamp", timestampToSeekLast, event2.getTimestamp().getValue());
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (getNext) after a seek
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event2 = testStream.getNext(context2);
        assertTrue("event is null after getNext()", event2 != null);
        assertEquals("event has wrong timestamp", timestampToSeekLast, event2.getTimestamp().getValue());
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (seek) after a parseEvent
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event1 = testStream.parseEvent(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (parseEvent) after a parseEvent
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event1 = testStream.parseEvent(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());
        event2 = testStream.parseEvent(context2);
        assertTrue("event is null after parseEvent()", event2 != null);
        assertEquals("event has wrong timestamp", timestampToSeekLast, event2.getTimestamp().getValue());
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (getNext) after a parseEvent
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event1 = testStream.parseEvent(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());
        event2 = testStream.getNext(context2);
        assertTrue("event is null after getNext()", event2 != null);
        assertEquals("event has wrong timestamp", timestampToSeekLast, event2.getTimestamp().getValue());
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (seek) after a getNext
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", nextEventTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (parseEvent) after a getNext
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());
        event2 = testStream.parseEvent(context2);
        assertTrue("event is null after parseEvent()", event2 != null);
        assertEquals("event has wrong timestamp", timestampToSeekLast, event2.getTimestamp().getValue());
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", nextEventTimestamp, event1.getTimestamp().getValue());

        // Test concurrent interference (getNext) after a getNext
        context2 = testStream.seekEvent(new LttngLocation(timestampToSeekLast));
        context1 = testStream.seekEvent(new LttngLocation(seekTimestamp));
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", seekTimestamp, event1.getTimestamp().getValue());
        event2 = testStream.getNext(context2);
        assertTrue("event is null after getNext()", event2 != null);
        assertEquals("event has wrong timestamp", timestampToSeekLast, event2.getTimestamp().getValue());
        event1 = testStream.getNext(context1);
        assertTrue("event is null after getNext()", event1 != null);
        assertEquals("event has wrong timestamp", nextEventTimestamp, event1.getTimestamp().getValue());
    }

