    public void testEventDisplacementByTracefile() {

        JniEvent testEvent = null;
        JniTrace testTrace = prepareTraceToTest();

        // Read first event for the metadata (which is also the first event in the trace)
        testEvent = testTrace.readNextEvent(testTrace
                        .requestTracefileByName(firstEventTracefilename));
        assertNotSame("readNextEvent() returned null", null, testEvent);
        assertEquals("readNextEvent() timestamp is incoherent", firstEventTimestamp, testEvent
                        .getEventTime().getTime());

        // If we read the next event again for this tracefile, we should get the SECOND event
        testEvent = testTrace.readNextEvent(testTrace
                        .requestTracefileByName(firstEventTracefilename));
        assertNotSame("readNextEvent() on second read returned null", null, testEvent);
        assertEquals("readNextEvent() timestamp on second read  is incoherent",
                        secondEventTimestamp, testEvent.getEventTime().getTime());

        // Reading the "global" event should take care of the change
        // So if we read the next event, we should get the THIRD event
        testEvent = testTrace.readNextEvent();
        assertNotSame("readNextEvent() to read global event returned null", null, testEvent);
        assertEquals("readNextEvent() timestamp to read global event is incoherent",
                        thirdEventTimestamp, testEvent.getEventTime().getTime());

        // Now read the next event for another type of tracefile
        testEvent = testTrace.readNextEvent(testTrace
                        .requestTracefileByName(eventTracefilenameAfterMetadata));
        assertNotSame("readNextEvent() returned null", null, testEvent);
        assertEquals("readNextEvent() timestamp is incoherent", eventTimestampAfterMetadata,
                        testEvent.getEventTime().getTime());

        // Seek back to the beginning
        testTrace.seekToTime(new JniTime(firstEventTimestamp),
                        testTrace.requestTracefileByName(firstEventTracefilename));
        // Read the first event
        testEvent = testTrace.readNextEvent(testTrace
                        .requestTracefileByName(firstEventTracefilename));
        assertNotSame("readNextEvent() after seekToTime returned null", null, testEvent);
        assertEquals("readNextEvent() after seekToTime timestamp is incoherent",
                        firstEventTimestamp, testEvent.getEventTime().getTime());

        // Seek and Read the first event for the metadata (again the first event in the trace)
        testEvent = testTrace.seekAndRead(new JniTime(firstEventTimestamp),
                        testTrace.requestTracefileByName(firstEventTracefilename));
        assertNotSame("seekAndRead() returned null", null, testEvent);
        assertEquals("seekAndRead() timestamp is incoherent", firstEventTimestamp, testEvent
                        .getEventTime().getTime());

        // Seek the whole trace to the infinity
        testTrace.seekToTime(new JniTime(Long.MAX_VALUE));
        // Seek and Read the next event in the trace
        testEvent = testTrace.seekAndRead(new JniTime(timestampToSeekTest1),
                        testTrace.requestTracefileByName(eventTracefilenameAfterSeekTest1));
        assertNotSame("seekAndRead() returned null", null, testEvent);
        assertEquals("seekAndRead() timestamp is incoherent", timestampToSeekTest1, testEvent
                        .getEventTime().getTime());
        // Read next event... only the same type should be here as other are exhausted
        testEvent = testTrace.readNextEvent();
        assertNotSame("readNextEvent() after seekToTime returned null", null, testEvent);
        assertEquals("readNextEvent() name after seekToTime is incoherent",
                        eventNameAfterSeekTest1, testEvent.getParentTracefile().getTracefileName());

    }

