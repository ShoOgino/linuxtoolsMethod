//	protected void push_state(Long cpu, StateStrings.ExecutionMode execMode,
//			String submode, TmfTimestamp eventTime, LttngTraceState traceSt) {
//
//		LttngProcessState process = traceSt.getRunning_process().get(cpu);
//		LttngExecutionState exe_state = new LttngExecutionState();
//		exe_state.setExec_mode(execMode);
//		exe_state.setExec_submode(submode);
//		exe_state.setEntry_Time(eventTime);
//		exe_state.setChage_Time(eventTime);
//		exe_state.setCum_cpu_time(0L);
//		exe_state.setProc_status(process.getState().getProc_status());
//		process.setState(exe_state);
//
//		Stack<LttngExecutionState> exe_state_stack = process
//				.getExecution_stack();
//		exe_state_stack.push(exe_state);
//	}
//
//	protected void pop_state(Long cpu, StateStrings.ExecutionMode execMode,
//			LttngTraceState traceSt, TmfTimestamp eventTime) {
//
//		LttngProcessState process = traceSt.getRunning_process().get(cpu);
//
//		if (!process.getState().getExec_mode().equals(execMode)) {
//			// Different execution mode
//			TraceDebug.debug("Different Execution Mode type \n\tTime:"
//					+ eventTime.toString() + "\n\tprocess state has: \n\t"
//					+ process.getState().getExec_mode().toString()
//					+ "\n\twhen pop_int is:\n\t" + execMode.toString());
//			return;
//		}
//
//		Stack<LttngExecutionState> exe_state_stack = process
//				.getExecution_stack();
//
//		if (exe_state_stack.size() <= 1) {
//			TraceDebug
//					.debug("Removing last item from execution stack is not allowed");
//		}
//
//		exe_state_stack.pop();
//		process.setState(exe_state_stack.peek());
//		process.getState().setChage_Time(eventTime);
//	}
//
//	protected void irq_push_mode(LttngIRQState irqst, IRQMode state) {
//		irqst.getMode_stack().push(state);
//	}
//
//	protected void irq_set_base_mode(LttngIRQState irqst, IRQMode state) {
//		Stack<IRQMode> irqModeStack = irqst.getMode_stack();
//		irqModeStack.clear();
//		irqModeStack.push(state);
//	}
//
//	protected void irq_pop_mode(LttngIRQState irqst) {
//		Stack<IRQMode> irq_stack = irqst.getMode_stack();
//		if (irq_stack.size() <= 1)
//			irq_set_base_mode(irqst, IRQMode.LTTV_IRQ_UNKNOWN);
//		else
//			irq_stack.pop();
//	}
//
//	protected void cpu_push_mode(LTTngCPUState cpust, StateStrings.CpuMode state) {
//		// The initialization (init) creates a LttngCPUState instance per
//		// available cpu in the system
//		Stack<CpuMode> cpuStack = cpust.getMode_stack();
//		cpuStack.push(state);
//	}
//
//	protected void cpu_pop_mode(LTTngCPUState cpust) {
//		if (cpust.getMode_stack().size() <= 1)
//			cpu_set_base_mode(cpust, StateStrings.CpuMode.LTTV_CPU_UNKNOWN);
//		else
//			cpust.getMode_stack().pop();
//	}
//
//	/* clears the stack and sets the state passed as argument */
//	protected void cpu_set_base_mode(LTTngCPUState cpust,
//			StateStrings.CpuMode state) {
//		Stack<CpuMode> cpuStack = cpust.getMode_stack();
//		cpuStack.clear();
//		cpuStack.push(state);
//	}
//
//	protected void bdev_pop_mode(LttngBdevState bdevst) {
//		Stack<BdevMode> bdevModeStack = bdevst.getMode_stack();
//		if (bdevModeStack.size() <= 1) {
//			bdev_set_base_mode(bdevModeStack, BdevMode.LTTV_BDEV_UNKNOWN);
//		} else {
//			bdevModeStack.pop();
//		}
//
//	}
//
//	protected void bdev_set_base_mode(Stack<BdevMode> bdevModeStack,
//			BdevMode state) {
//		bdevModeStack.clear();
//		bdevModeStack.push(state);
//	}
//
//	/**
//	 * Push a new received function pointer to the user_stack
//	 * 
//	 * @param traceSt
//	 * @param funcptr
//	 * @param cpu
//	 */
//	protected void push_function(LttngTraceState traceSt, Long funcptr, Long cpu) {
//		// Get the related process
//		LttngProcessState process = traceSt.getRunning_process().get(cpu);
//
//		// get the user_stack
//		Stack<Long> user_stack = process.getUser_stack();
//
//		// update stack
//		user_stack.push(funcptr);
//
//		// update the pointer to the current function on the corresponding
//		// process
//		process.setCurrent_function(funcptr);
//	}
//
//	protected void pop_function(LttngTraceState traceSt, LttngEvent trcEvent,
//			Long funcptr) {
//		Long cpu = trcEvent.getCpuId();
//		// LttvTraceState *ts = (LttvTraceState*)tfs->parent.t_context;
//		// LttvProcessState *process = ts->running_process[cpu];
//		LttngProcessState process = traceSt.getRunning_process().get(cpu);
//		Long curr_function = process.getCurrent_function();
//		if (curr_function != null && curr_function != funcptr) {
//			TraceDebug.debug("Different functions: " + funcptr + " current: "
//					+ curr_function + " time stamp: "
//					+ trcEvent.getTimestamp().toString());
//
//			// g_info("Different functions (%lu.%09lu): ignore it\n",
//			// tfs->parent.timestamp.tv_sec, tfs->parent.timestamp.tv_nsec);
//			// g_info("process state has %" PRIu64 " when pop_function is %"
//			// PRIu64
//			// "\n",
//			// process->current_function, funcptr);
//			// g_info("{ %u, %u, %s, %s, %s }\n",
//			// process->pid,
//			// process->ppid,
//			// g_quark_to_string(process->name),
//			// g_quark_to_string(process->brand),
//			// g_quark_to_string(process->state->s));
//			return;
//		}
//
//		Stack<Long> user_stack = process.getUser_stack();
//		if (user_stack.size() == 0) {
//			TraceDebug
//					.debug("Trying to pop last function in stack. Ignored.  Time Stamp: "
//							+ trcEvent.getTimestamp());
//			return;
//		}
//		user_stack.pop();
//		process.setCurrent_function(user_stack.peek());
//	}
//
//	// ========================================================================
//	// General methods
//	// =======================================================================
//	/**
//	 * protected method used when only one Field is expected with Type "Long" if
//	 * the number of fields is greater, the first field is returned and a
//	 * tracing message is sent Null is returned if the value could not be
//	 * extracted.
//	 * 
//	 * @param trcEvent
//	 * @param traceSt
//	 * @param expectedNumFields
//	 * @return
//	 */
//	protected Long getDField(LttngEvent trcEvent, LttngTraceState traceSt,
//			Fields expectedField) {
//		Long fieldVal = null;
//		TmfEventField[] fields = trcEvent.getContent().getFields();
//		String[] fieldLabels = trcEvent.getContent().getFormat().getLabels();
//
//		// Only one field expected
//		if (fields.length != 1 || fieldLabels.length != 1) {
//			StringBuilder sb = new StringBuilder(
//					"Unexpected number of fields received: " + fields.length
//							+ " for Event: " + trcEvent.getMarkerName() + "\n\t\tFields: ");
//
//			for (TmfEventField field : fields) {
//				sb.append(((LttngEventField)field).getName() + " ");				
//			}
//
//			TraceDebug.debug(sb.toString());
//			if (fields.length == 0) {
//				return null;
//			}
//		}
//
//		LttngEventField field = (LttngEventField) fields[0];
//		String fieldname = field.getName();
//		String expectedFieldName = expectedField.getInName();
//		if (fieldname.equals(expectedFieldName)) {
//			Object fieldObj = field.getValue();
//			if (fieldObj instanceof Long) {
//				// Expected value found
//				fieldVal = (Long) field.getValue();
//			} else {
//				if (TraceDebug.isDEBUG()) {
//					TraceDebug
//							.debug("Unexpected field Type. Expected: Long, Received: "
//									+ fieldObj.getClass().getSimpleName());
//				}
//				return null;
//			}
//		} else {
//			TraceDebug.debug("Unexpected field received: " + fieldname
//					+ " Expected: " + expectedFieldName);
//			return null;
//		}
//
//		return fieldVal;
//	}
//
	/**
	 * protected method used when a Field is requested among several available
	 * fields and the expected type is Long
	 * 
	 * @param trcEvent
	 * @param traceSt
	 * @param expectedNumFields
	 * @return
	 */
	protected Long getAFieldLong(LttngEvent trcEvent, LttngTraceState traceSt,
			Fields expectedField) {
		Long fieldVal = null;
		TmfEventField[] fields = trcEvent.getContent().getFields();

		// At least one field expected
		if (fields.length == 0) {
			TraceDebug.debug("Unexpected number of fields received: "
					+ fields.length);
			return null;
		}

		LttngEventField field;
		String fieldname;
		String expectedFieldName = expectedField.getInName();
		for (int i = 0; i < fields.length; i++) {
			field = (LttngEventField) fields[i];
			fieldname = field.getName();
			if (fieldname.equals(expectedFieldName)) {
				Object fieldObj = field.getValue();
				if (fieldObj instanceof Long) {
					// Expected value found
					fieldVal = (Long) field.getValue();
					// if (expectedField == Fields.LTT_FIELD_TYPE) {
					// TraceDebug.debug("Field Type value is: " + fieldVal);
					// }
					break;
				} else {
					if (TraceDebug.isDEBUG()) {
						TraceDebug
								.debug("Unexpected field Type. Expected: Long, Received: "
										+ fieldObj.getClass().getSimpleName());
					}
					return null;
				}
			}
		}

		if (fieldVal == null) {
			if (TraceDebug.isDEBUG()) {
				sendNoFieldFoundMsg(fields, expectedFieldName);
			}
		}
		return fieldVal;
	}

