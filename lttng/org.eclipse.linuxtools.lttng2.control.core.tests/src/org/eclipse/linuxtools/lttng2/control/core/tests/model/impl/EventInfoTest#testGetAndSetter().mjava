    /**
     *  Getter/Setter tests
     */
    @Test
    public void testGetAndSetter() {
        EventInfo fixture = new EventInfo("event");

        fixture.setEventType(TraceEventType.TRACEPOINT);
        TraceEventType result = fixture.getEventType();

        // setEventType(TraceEventType type)
        assertNotNull(result);
        assertEquals("tracepoint", result.getInName());
        assertEquals("TRACEPOINT", result.name());
        assertEquals("TRACEPOINT", result.toString());
        assertEquals(0, result.ordinal());

        fixture.setEventType(TraceEventType.UNKNOWN);
        result = fixture.getEventType();
        assertEquals("unknown", result.getInName());
        assertEquals("UNKNOWN", result.name());
        assertEquals("UNKNOWN", result.toString());
        assertEquals(4, result.ordinal());

        // setEventType(String typeName)
        String typeName = "";
        fixture.setEventType(typeName);
        result = fixture.getEventType();

        assertEquals("unknown", result.getInName());
        assertEquals("UNKNOWN", result.name());
        assertEquals("UNKNOWN", result.toString());
        assertEquals(4, result.ordinal());

        typeName = "unknown";

        fixture.setEventType(typeName);
        result = fixture.getEventType();

        assertEquals("unknown", result.getInName());
        assertEquals("UNKNOWN", result.name());
        assertEquals("UNKNOWN", result.toString());
        assertEquals(4, result.ordinal());

        // setState(String stateName)
        fixture.setState("disabled");
        TraceEnablement state = fixture.getState();
        assertEquals("disabled", state.getInName());
        assertEquals("DISABLED", state.name());
        assertEquals("DISABLED", state.toString());
        assertEquals(0, state.ordinal());

        fixture.setState("bla");
        state = fixture.getState();
        assertEquals("disabled", state.getInName());
        assertEquals("DISABLED", state.name());
        assertEquals("DISABLED", state.toString());
        assertEquals(0, state.ordinal());

        fixture.setState("enabled");
        state = fixture.getState();
        assertEquals("enabled", state.getInName());
        assertEquals("ENABLED", state.name());
        assertEquals("ENABLED", state.toString());
        assertEquals(1, state.ordinal());

        // setState(TraceEnablement state)
        fixture.setState(TraceEnablement.DISABLED);
        state = fixture.getState();
        assertEquals("disabled", state.getInName());
        assertEquals("DISABLED", state.name());
        assertEquals("DISABLED", state.toString());
        assertEquals(0, state.ordinal());

        fixture.setState(TraceEnablement.ENABLED);
        state = fixture.getState();
        assertEquals("enabled", state.getInName());
        assertEquals("ENABLED", state.name());
        assertEquals("ENABLED", state.toString());
        assertEquals(1, state.ordinal());

        // setLogLevelType(String name)
        fixture.setLogLevelType("==");
        assertEquals("LOGLEVEL_ONLY", fixture.getLogLevelType().name());
        assertEquals("==", fixture.getLogLevelType().getShortName());

        fixture.setLogLevelType("<=");
        assertEquals("LOGLEVEL", fixture.getLogLevelType().name());
        assertEquals("<=", fixture.getLogLevelType().getShortName());

        fixture.setLogLevelType("");
        assertEquals("LOGLEVEL_ALL", fixture.getLogLevelType().name());
        assertEquals("", fixture.getLogLevelType().getShortName());

        fixture.setLogLevelType(LogLevelType.LOGLEVEL_ONLY);
        assertEquals("LOGLEVEL_ONLY", fixture.getLogLevelType().name());
        assertEquals("==", fixture.getLogLevelType().getShortName());

        fixture.setLogLevelType(LogLevelType.LOGLEVEL);
        assertEquals("LOGLEVEL", fixture.getLogLevelType().name());
        assertEquals("<=", fixture.getLogLevelType().getShortName());

        fixture.setLogLevelType(LogLevelType.LOGLEVEL_ALL);
        assertEquals("LOGLEVEL_ALL", fixture.getLogLevelType().name());
        assertEquals("", fixture.getLogLevelType().getShortName());

        fixture.setLogLevelType(LogLevelType.LOGLEVEL_NONE);
        assertEquals("LOGLEVEL_NONE", fixture.getLogLevelType().name());
        assertEquals("", fixture.getLogLevelType().getShortName());

        // setLogLevelType(String name)
        // machine interface
        fixture.setLogLevelType("SINGLE");
        assertEquals("LOGLEVEL_ONLY", fixture.getLogLevelType().name());
        assertEquals("SINGLE", fixture.getLogLevelType().getMiName());

        fixture.setLogLevelType("RANGE");
        assertEquals("LOGLEVEL", fixture.getLogLevelType().name());
        assertEquals("RANGE", fixture.getLogLevelType().getMiName());

        fixture.setLogLevelType("ALL");
        assertEquals("LOGLEVEL_ALL", fixture.getLogLevelType().name());
        assertEquals("ALL", fixture.getLogLevelType().getMiName());

        fixture.setLogLevelType("UNKNOWN");
        assertEquals("LOGLEVEL_NONE", fixture.getLogLevelType().name());
        assertEquals("UNKNOWN", fixture.getLogLevelType().getMiName());

    }

