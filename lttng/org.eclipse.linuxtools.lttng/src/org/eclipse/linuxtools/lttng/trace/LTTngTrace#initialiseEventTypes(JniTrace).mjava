	/*
	 * Fill out the HashMap with "Type" (Tracefile/Marker)
	 * 
	 * This should be called at construction once the trace is open
	 */
	private void initialiseEventTypes(JniTrace trace) {
		// Work variables
		LttngEventType tmpType = null;
		String[] markerFieldsLabels = null;

		String newTracefileKey = null;
		Integer newMarkerKey = null;

		JniTracefile newTracefile = null;
		JniMarker newMarker = null;

		// First, obtain an iterator on TRACEFILES of owned by the TRACE
		Iterator<String> tracefileItr = trace.getTracefilesMap().keySet()
				.iterator();

		while (tracefileItr.hasNext()) {
			newTracefileKey = tracefileItr.next();
			newTracefile = trace.getTracefilesMap().get(newTracefileKey);

			// From the TRACEFILE read, obtain its MARKER
			Iterator<Integer> markerItr = newTracefile.getTracefileMarkersMap()
					.keySet().iterator();
			while (markerItr.hasNext()) {
				newMarkerKey = markerItr.next();
				newMarker = newTracefile.getTracefileMarkersMap().get(
						newMarkerKey);

				// From the MARKER we can obtain the MARKERFIELDS keys (i.e.
				// labels)
				markerFieldsLabels = newMarker
						.getMarkerFieldsHashMap()
						.keySet()
						.toArray(
								new String[newMarker.getMarkerFieldsHashMap()
										.size()]);
 
				tmpType = new LttngEventType(newTracefile.getTracefileName(),
						newTracefile.getCpuNumber(), newMarker.getName(), 
						newMarkerKey.intValue(), markerFieldsLabels);

				// Add the type to the map/vector
				addEventTypeToMap(tmpType);
			}
		}
	}

