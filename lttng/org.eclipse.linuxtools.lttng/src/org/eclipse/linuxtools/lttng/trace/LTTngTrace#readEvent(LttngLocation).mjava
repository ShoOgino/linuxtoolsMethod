    /*
     * Read the next event from the JNI and convert it as Lttng Event<p>
     * 
     * @param location 	Current LttngLocation that to be updated with the event timestamp
     * 
     * @return The LttngEvent we read of null if no event are available
     * 
     * @see org.eclipse.linuxtools.lttng.event.LttngLocation
     * @see org.eclipse.linuxtools.org.eclipse.linuxtools.lttng.jni.JniTrace
     */
    private synchronized LttngEvent readEvent(LttngLocation location) {
    	LttngEvent 	returnedEvent = null;
    	JniEvent tmpEvent = null;
    	
    	// Read the next event from JNI. THIS WILL INVALIDATE THE CURRENT LTTNG EVENT.
    	tmpEvent = currentJniTrace.readNextEvent();
		
		if ( tmpEvent != null ) {
			// *** NOTE
			// Convert will update the currentLttngEvent
            returnedEvent = convertJniEventToTmf(tmpEvent);
            
            location.setOperationTime( (LttngTimestamp)returnedEvent.getTimestamp() );
        }
		// *** NOTE
		// If the read failed (likely the last event in the trace), set the LastReadTime to the JNI time
		// That way, even if we try to read again, we will step over the bogus seek and read
		else {
			location.setOperationTime(  getEndTime().getValue() + 1 );
		}
		
		return returnedEvent;
    }

