    /**
     * Method to convert a JniEvent into a LttngEvent
     * 
     * @param   jniEvent        The JniEvent to convert into LttngEvent
     * @param   isParsingNeeded A boolean value telling if the event should be parsed or not.
     * 
     * @return  The converted LttngEvent
     * 
     * @see org.eclipse.linuxtools.org.eclipse.linuxtools.lttng.jni.JniEvent
     * @see org.eclipse.linuxtools.lttng.event.LttngEvent
     */
    public LttngEvent convertJniEventToTmf(JniEvent jniEvent, boolean isParsingNeeded) {
        // *** HACK *** 
        // To save time here, we only set value instead of allocating new object
        // This give an HUGE performance improvement
        // all allocation done in the LttngTrace constructor
        
        eventTimestamp.setValue(jniEvent.getEventTime().getTime());
        eventSource.setSourceId(jniEvent.requestEventSource());
        
        eventType = traceTypes.get( EventTypeKey.getEventTypeKey(jniEvent) );
        
        eventReference.setValue(jniEvent.getParentTracefile().getTracefilePath());
        eventReference.setTracepath(this.getName());
        
//        eventContent.setEvent(currentLttngEvent);
//        eventContent.setType(eventType);
        eventContent.emptyContent();
        
//        currentLttngEvent.setContent(eventContent);
        currentLttngEvent.setType(eventType);
        // Save the jni reference
        currentLttngEvent.updateJniEventReference(jniEvent);
        
        // Parse now if was asked
        // Warning : THIS IS SLOW
        if (isParsingNeeded == true ) {
            eventContent.getFields();
        }
        
        return currentLttngEvent;
    }

