    /**
     * Method tp convert a JniEvent into a LttngEvent
     * 
     * @param   jniEvent        The JniEvent to convert
     * @param   isParsingNeeded A boolean value telling if the event should be parsed or not.
     * @return  LttngEvent   The converted event
     * @see org.eclipse.linuxtools.lttng.jni.JniEvent
     */
    public LttngEvent convertJniEventToTmf(JniEvent jniEvent, boolean parsingIsNeeded) {
        LttngEventFormat eventFormat = new LttngEventFormat();
        String content = "";
        LttngEventField[] fields = null;

        if (parsingIsNeeded) {
            fields = eventFormat.parse(jniEvent.parseAllFields());
            for (int y = 0; y < fields.length; y++) {
                content += fields[y].toString() + " ";
            }
        }
        
        LttngEvent event = new LttngEvent(
        		new LttngTimestamp(jniEvent.getEventTime().getTime()),
                new LttngEventSource(jniEvent.requestEventSource() ), 
                new LttngEventType(jniEvent.getParentTracefile().getTracefileName(),
                                   jniEvent.getParentTracefile().getCpuNumber(),
                                   jniEvent.requestEventMarker().getName(),
                                   eventFormat),
                new LttngEventContent(eventFormat, content, fields), 
                new LttngEventReference(jniEvent.getParentTracefile().getTracefilePath(), this.getName()),
                jniEvent);
        
        return event;
    }

