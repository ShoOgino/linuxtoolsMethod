    @Override
    public LTTngTrace clone() {
    	LTTngTrace clone = null;
    	try {
    		clone = (LTTngTrace) super.clone();
       		try {
				clone.currentJniTrace = JniTraceFactory.getJniTrace(getPath(), SHOW_LTT_DEBUG_DEFAULT);
			} catch (JniException e) {
				e.printStackTrace();
			}
            
            // Export all the event types from the JNI side 
			clone.traceTypes      = new HashMap<String, LttngEventType>();
			clone.traceTypeNames  = new Vector<String>();
			clone.initialiseEventTypes(clone.currentJniTrace);
            
            // Verify that all those "default constructor" are safe to use
			clone.eventTimestamp  = new LttngTimestamp();
			clone.eventSource     = new LttngEventSource();
			clone.eventType       = new LttngEventType();
			clone.eventContent    = new LttngEventContent(clone.currentLttngEvent);
			clone.eventReference  = new LttngEventReference(this.getName());
            
            // Create the skeleton event
			clone.currentLttngEvent = new LttngEvent(this, clone.eventTimestamp, clone.eventSource, clone.eventType, clone.eventContent, clone.eventReference, null);
            
            // Create a new current location
			clone.previousLocation = new LttngLocation();
            
            // Set the currentEvent to the eventContent
			clone.eventContent.setEvent(clone.currentLttngEvent);
            
           	// Set the start time of the trace
           	setTimeRange(new TmfTimeRange(
           			new LttngTimestamp(clone.currentJniTrace.getStartTime().getTime()), 
           			new LttngTimestamp(clone.currentJniTrace.getEndTime().getTime())
                    ));
    	}
    	catch (CloneNotSupportedException e) {
    	}

    	return clone;
    }

