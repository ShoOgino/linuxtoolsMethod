	private ITmfEventRequest<LttngEvent> buildCheckPoints(TmfExperiment<LttngEvent> experiment) {
		// validate
		if (experiment == null) {
			TraceDebug.debug("Received expriment is null");
			return null;
		}
		
		LTTngTreeNode experimentNode = getChildByName(experiment.getName());
		if (experimentNode == null) {
			TraceDebug.debug("Expriment Node " + experiment.getName() + " does not exist");
			return null;
		}
		
		// get the trace manager nodes associated to the experiment
		LTTngTreeNode[] traceNodes = experimentNode.getChildren();
		synchronized (ftraceToManagerMap) {
			ftraceToManagerMap.clear();
		}
		
		for (LTTngTreeNode traceStateManagerNode : traceNodes) {
			IStateTraceManager traceManager;
			try {
				traceManager = (IStateTraceManager) traceStateManagerNode;
			} catch (ClassCastException e) {
				System.out.println(e.getStackTrace().toString());
				return null;
			}
		
			// Clear all previously created check points as preparation to
			// re-build
			traceManager.clearCheckPoints();
		
			// build the trace to manager mapping for event dispatching
			synchronized (ftraceToManagerMap) {
				ftraceToManagerMap.put(traceManager.getTrace(), traceManager);
			}
		}
		
		// if no trace mapping
		if (ftraceToManagerMap.size() < 1) {
			TraceDebug.debug("No traces associated to experiment " + experiment.getName());
			return null;
		}
		
		// Prepare event data request to build state model
		ITmfEventRequest<LttngEvent> request = new TmfEventRequest<LttngEvent>(
				LttngEvent.class, TmfTimeRange.Eternity,
				TmfDataRequest.ALL_DATA, 1) {
		
			Long nbEvents = 0L;
		
			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleData()
			 */
			@Override
			public void handleData() {
				TmfEvent[] events = getData();
				if (events.length > 0) {
					nbEvents++;
		
					LttngEvent event = (LttngEvent) events[0];
					ITmfTrace trace = event.getParentTrace();
					IStateTraceManager traceManager = ftraceToManagerMap
							.get(trace);
					if (traceManager != null) {
						// obtain synthetic event
						LttngSyntheticEvent synEvent = updateSynEvent(event,
								traceManager);
						// update state system, and save check points as needed
						traceManager.handleEvent(synEvent, nbEvents);
					} else {
						TraceDebug
								.debug("StateTraceManager not found for trace"
										+ trace.getName());
					}
				}
			}
		
			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleFailure()
			 */
			public void handleFailure() {
				printCompletedMessage();
			}
			
			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleCancel()
			 */
			public void handleCancel() {
				printCompletedMessage();
			}
		
			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleSuccess()
			 */
			public void handleSuccess() {
				printCompletedMessage();
			}
		
			/**
			 * @param header
			 */
			private void printCompletedMessage() {
				// super.handleCompleted();
				if (TraceDebug.isDEBUG()) {
					TraceDebug.debug("Trace check point building completed, number of events handled: " + nbEvents
							+ "\n\t\t");
					for (IStateTraceManager traceMgr : ftraceToManagerMap.values()) {
						TraceDebug.debug(traceMgr.toString() + "\n\t\t");
					}
				}
			}
		};
		
		// Execute event data request
		experiment.sendRequest(request);
		if (fwaitForCompletion) {
			try {
				request.waitForCompletion();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		
		return request;
		}

