	private ITmfEventRequest<LttngEvent> buildCheckPoints(TmfExperiment<LttngEvent> experiment) {
		// validate
		if (experiment == null) {
			TraceDebug.debug("Received expriment is null"); //$NON-NLS-1$
			return null;
		}
		
		LTTngTreeNode experimentNode = getChildByName(experiment.getName());
		if (experimentNode == null) {
			TraceDebug.debug("Expriment Node " + experiment.getName() + " does not exist"); //$NON-NLS-1$ //$NON-NLS-2$
			return null;
		}
		
		// get the trace manager nodes associated to the experiment
		LTTngTreeNode[] traceNodes = experimentNode.getChildren();
		synchronized (this) {
			ftraceToManagerMap.clear();
		}

		ITmfTrace trace;
		for (LTTngTreeNode traceStateManagerNode : traceNodes) {
			IStateTraceManager traceManager;
			try {
				traceManager = (IStateTraceManager) traceStateManagerNode;
			} catch (ClassCastException e) {
				System.out.println(e.getStackTrace().toString());
				return null;
			}
		
			// Clear all previously created check points as preparation to
			// re-build
			traceManager.clearCheckPoints();
		
			// build the trace to manager mapping for event dispatching
			trace = traceManager.getTrace();
			synchronized (this) {
				ftraceToManagerMap.put(trace, new StateTraceHelper(traceManager));
			}
		}

		// if no trace mapping
		if (ftraceToManagerMap.size() < 1) {
			TraceDebug.debug("No traces associated to experiment " + experiment.getName()); //$NON-NLS-1$
			return null;
		}
		
		// Prepare event data request to build state model
		ITmfEventRequest<LttngEvent> request = new TmfEventRequest<LttngEvent>(
				LttngEvent.class, TmfTimeRange.Eternity,
				TmfDataRequest.ALL_DATA, 1, ITmfDataRequest.ExecutionType.BACKGROUND) {
		
			long nbEventsHandled = 0;
			
			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleData()
			 */
			@Override
			public void handleData(LttngEvent event) {
				super.handleData(event);
				if (event != null) {
//					Tracer.trace("Chk: " + event.getTimestamp());
					nbEventsHandled++;
					ITmfTrace trace = event.getParentTrace();

					StateTraceHelper helper = ftraceToManagerMap.get(trace);

					if (helper != null) {
						helper.incrementNumberRead();

						// obtain synthetic event
						LttngSyntheticEvent synEvent = updateSynEvent(event, helper.getTraceModel());

						// update state system, and save check points as needed
						helper.getStateManager().handleEvent(synEvent, helper.getNumberRead());
					} else {
						TraceDebug.debug("StateTraceManager not found for trace" //$NON-NLS-1$
								+ trace.getName());
					}
				}
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleFailure()
			 */
			@Override
			public void handleFailure() {
				printCompletedMessage();
				super.handleFailure();
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleCancel()
			 */
			@Override
			public void handleCancel() {
				printCompletedMessage();
				super.handleCancel();
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.tmf.request.TmfDataRequest#handleSuccess()
			 */
			@Override
			public void handleSuccess() {
				printCompletedMessage();
				super.handleSuccess();
			}

			/**
			 * @param header
			 */
			private void printCompletedMessage() {
				if (TraceDebug.isDEBUG()) {
					TraceDebug.debug("Trace check point building completed, number of events handled: " + nbEventsHandled + "\n\t\t"); //$NON-NLS-1$ //$NON-NLS-2$
					for (StateTraceHelper helper : ftraceToManagerMap.values()) {
						TraceDebug.debug(helper.getStateManager().toString() + "\n\t\t"); //$NON-NLS-1$
					}
				}
			}
		};

		// Execute event data request
		experiment.sendRequest(request);

		if (fwaitForCompletion) {
			try {
				request.waitForCompletion();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

		return request;
	}

