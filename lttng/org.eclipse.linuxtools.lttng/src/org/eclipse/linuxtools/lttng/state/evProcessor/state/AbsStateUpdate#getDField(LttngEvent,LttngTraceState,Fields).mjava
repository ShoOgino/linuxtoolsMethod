	// ========================================================================
	// General methods
	// =======================================================================
	/**
	 * protected method used when only one Field is expected with Type "Long" if
	 * the number of fields is greater, the first field is returned and a
	 * tracing message is sent Null is returned if the value could not be
	 * extracted.
	 * 
	 * @param trcEvent
	 * @param traceSt
	 * @param expectedNumFields
	 * @return
	 */
	protected Long getDField(LttngEvent trcEvent, LttngTraceState traceSt,
			Fields expectedField) {
		Long fieldVal = null;
		TmfEventField[] fields = trcEvent.getContent().getFields();
		String[] fieldLabels = trcEvent.getContent().getFormat().getLabels();

		// Only one field expected
		if (fields.length != 1 || fieldLabels.length != 1) {
			StringBuilder sb = new StringBuilder(
					"Unexpected number of fields received: " + fields.length
							+ " for Event: " + trcEvent.getMarkerName() + "\n\t\tFields: ");

			for (TmfEventField field : fields) {
				sb.append(((LttngEventField)field).getName() + " ");				
			}

			TraceDebug.debug(sb.toString());
			if (fields.length == 0) {
				return null;
			}
		}

		LttngEventField field = (LttngEventField) fields[0];
		String fieldname = field.getName();
		String expectedFieldName = expectedField.getInName();
		if (fieldname.equals(expectedFieldName)) {
			Object fieldObj = field.getValue();
			if (fieldObj instanceof Long) {
				// Expected value found
				fieldVal = (Long) field.getValue();
			} else {
				if (TraceDebug.isDEBUG()) {
					TraceDebug
							.debug("Unexpected field Type. Expected: Long, Received: "
									+ fieldObj.getClass().getSimpleName());
				}
				return null;
			}
		} else {
			TraceDebug.debug("Unexpected field received: " + fieldname
					+ " Expected: " + expectedFieldName);
			return null;
		}

		return fieldVal;
	}

