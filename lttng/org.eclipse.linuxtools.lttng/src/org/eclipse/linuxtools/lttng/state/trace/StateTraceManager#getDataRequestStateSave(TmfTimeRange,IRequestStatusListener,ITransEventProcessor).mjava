	private ILttngSyntEventRequest getDataRequestStateSave(TmfTimeRange timeWindow,
			IRequestStatusListener requestListener,
			final ITransEventProcessor processor) {

		// Create the new request and override the handlePartialResult function
		ILttngSyntEventRequest request = new StateTraceManagerRequest(timeWindow,
				DEFAULT_OFFSET, TmfDataRequest.ALL_DATA, DEFAULT_CHUNK,
				requestListener, getExperimentTimeWindow(), processor) {

			@Override
			public void handleCompleted() {
				if (isCancelled() || isFailed()) {
					// No notification to end request handlers
				} else {
					// Indicates that trace selection has successfully completed
					// i.e. check points have been already build if the number
					// of events exceeded the interval
					setTraceSelectCount(getTraceSelectCount() + 1);
				}

				super.handleCompleted();

				if (TraceDebug.isDEBUG()) {
					StringBuilder sb = new StringBuilder(
							"Check Point build Request completed"
									+ "\n\tEventCount: "
									+ fprocessor.getStateUpdateCount()
									+ "\tEvents for a different trace state received: "
									+ fprocessor.getFilteredOutEventCount()
									+ "\n\t"
									+ "Total number of processes in the State provider: "
									+ fStateModel.getProcesses().length);

					TmfTimeRange logTimes = fTrace.getTimeRange();
					sb.append("\n\tTrace time interval for trace "
							+ fTrace.getName()
							+ "\n\t"
							+ new LttngTimestamp(logTimes.getStartTime()));
					sb.append(" - " + new LttngTimestamp(logTimes.getEndTime()));
					sb.append("\n\tRequested Time: "
							+ getRange().getStartTime().toString() + " - "
							+ getRange().getEndTime().toString());
					sb.append("\n\tCheckPoints available at: ");
					for (TmfCheckpoint cpoint : timestampCheckpointsList) {
						sb.append("\n\t" + "Location: " + cpoint.getLocation()
								+ " - " + cpoint.getTimestamp());
					}

					TraceDebug.debug(sb.toString());
				}
			}

			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.lttng.request.LttngEventRequest#saveCheckPoint
			 * (java.lang.Long, org.eclipse.linuxtools.tmf.event.TmfTimestamp)
			 */
			public void saveCheckPoint(Long count, TmfTimestamp time) {
				saveCheckPointIfNeeded(count, time);
			}

		};

		return request;
	}

