	private StateDataRequest getDataRequestStateSave(TmfTimeRange timeWindow,
			IStateDataRequestListener requestListener) {

		final TmfEvent[] evt = new TmfEvent[1];

		// ***TODO***
		// The override of handlePartialResult is similar to the one in
		// getDataRequestByPosition()
		// ***

		// Create the new request and override the handlePartialResult function
		StateDataRequest request = new StateDataRequest(timeWindow,
				DEFAULT_OFFSET, TmfDataRequest.ALL_EVENTS, DEFAULT_CHUNK,
				requestListener, this) {

			@Override
			public void handleData() {
				TmfEvent[] result = getData();

				evt[0] = (result.length > 0) ? result[0] : null;
				// Dispatch information for Event processing
				stateIn.processEvent(evt[0]);

				// Call the function that will save a checkpoint if needed at
				// that point
				// Note : We call this function before incrementing eventCount
				// to avoid skipping the "0th" event
				if (evt[0] != null) {
					saveCheckPointIfNeeded(getNumOfEvents(), evt[0]
							.getTimestamp());
				}

				// increment internal and external counters
				setNumOfEvents(getNumOfEvents() + 1);
				eventCount++;
			}

			@Override
			public void handleCompleted() {
				if (isCancelled() || isFailed()) {
					// No notification to end request handlers
				} else {
					// notify the associated end request handlers
					requestCompleted();
				}

				// notify listeners
				notifyCompletion();
				TraceDebug.debug("number of events processed on file opening"
						+ getNumOfEvents());
			}
		};

		return request;
	}

