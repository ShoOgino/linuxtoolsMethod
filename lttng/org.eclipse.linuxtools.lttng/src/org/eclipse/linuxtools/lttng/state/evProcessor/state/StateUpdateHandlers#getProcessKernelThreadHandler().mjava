	/**
	 * <p>
	 * Handles: LTT_EVENT_KTHREAD_CREATE
	 * </p>
	 * <p>
	 * Fields: LTT_FIELD_PID
	 * </p>
	 * 
	 * @return
	 */
	final ILttngEventProcessor getProcessKernelThreadHandler() {
		AbsStateUpdate handler = new AbsStateUpdate() {

			// @Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {
				/*
				 * We stamp a newly created process as kernel_thread. The thread
				 * should not be running yet.
				 */

				LttngExecutionState exState;
				Long pid;
				LttngProcessState process;

				/* PID */
				pid = getAFieldLong(trcEvent, traceSt, Fields.LTT_FIELD_PID);
				// s->parent.target_pid = pid;

				process = lttv_state_find_process_or_create(traceSt, ANY_CPU,
						pid, new TmfTimestamp());

				if (!process.getState().getProc_status().equals(
						ProcessStatus.LTTV_STATE_DEAD)) {
					// Leave only the first element in the stack with execution
					// mode to
					// syscall
					exState = process.getFirstElementFromExecutionStack();
					exState.setExec_mode(ExecutionMode.LTTV_STATE_SYSCALL);
					process.clearExecutionStack();
					process.pushToExecutionStack(exState);
				}

				process.setType(ProcessType.LTTV_STATE_KERNEL_THREAD);

				return false;

			}
		};
		return handler;
	}

