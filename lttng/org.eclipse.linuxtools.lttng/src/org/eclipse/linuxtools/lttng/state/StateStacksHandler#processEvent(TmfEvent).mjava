	protected void processEvent(TmfEvent tmfEvent) /* throws LttngStateException */{
		if (tmfEvent == null) {
			return;
		}

		if (!(tmfEvent instanceof LttngEvent)) {
			TraceDebug
					.debug("The event received is not an instance of LttngEvent and can not be processed");
		}

		LttngEvent trcEvent = (LttngEvent) tmfEvent;
//		LttngEventField[] fields = ((LttngEventContent)trcEvent.getContent()).getFields();

		if (trcEvent != null) {
			String inEventName = trcEvent.getMarkerName();
			// String inChannel = trcEvent.getChannelName();
			// TraceDebug.debug("Event: " + inEventName);

			// Check if the received event is a transition state event
			// TODO: Remove temporarily to allow other events to go to the
			// statistics view.
			// Needs restructuring.
			// Events eventStruct = StateStrings.getInstance()
			// .getStateTransEventMap().get(inEventName);
			// if (eventStruct != null) {
			// String expectedChannel = eventStruct.getParent().getInName();
			// check that received channel is the expected channel in the
			// structure
			// if (inChannel.equals(expectedChannel)) {
			// Notify the before Handlers
			Set<AbsEventProcessorFactory> handlerRegister = EventProcessorProxy
					.getInstance().getProcessingFactories();

			// Notify the state BEFORE update handlers
			for (Iterator<AbsEventProcessorFactory> iterator = handlerRegister
					.iterator(); iterator.hasNext();) {
				AbsEventProcessorFactory handlerRegistry = (AbsEventProcessorFactory) iterator
						.next();
				IEventProcessing handler = handlerRegistry
						.getBeforeProcessor(inEventName);
				if (handler != null) {
					// process State Update
					handler.process(trcEvent, traceStateModel);
				}

			}

			// Notify the STATE UPDATE handlers
			// Only one state update expected
			for (Iterator<AbsEventProcessorFactory> iterator = handlerRegister
					.iterator(); iterator.hasNext();) {
				AbsEventProcessorFactory handlerRegistry = (AbsEventProcessorFactory) iterator
						.next();
				IEventProcessing handler = handlerRegistry
						.getStateUpdaterProcessor(inEventName);
				if (handler != null) {
					// process State Update
					handler.process(trcEvent, traceStateModel);
				}

			}

			// Notify the AFTER update handlers
			for (Iterator<AbsEventProcessorFactory> iterator = handlerRegister
					.iterator(); iterator.hasNext();) {
				AbsEventProcessorFactory handlerRegistry = (AbsEventProcessorFactory) iterator
						.next();
				IEventProcessing handler = handlerRegistry
						.getAfterProcessor(inEventName);
				if (handler != null) {
					// process State Update
					handler.process(trcEvent, traceStateModel);
				}
			}

			// } else {
			// StringBuilder sb = new StringBuilder(
			// "Unexpected channel received for: " + inEventName
			// + ", channel rec: " + inChannel
			// + " chanel expected: " + expectedChannel);
			// TraceDebug.debug(sb.toString());
			// }
			// }
		}
	}

