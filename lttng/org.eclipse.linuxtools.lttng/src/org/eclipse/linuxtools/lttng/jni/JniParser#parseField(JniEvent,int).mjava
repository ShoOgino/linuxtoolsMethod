    /**
     * Method to parse a single field identified by its id.<p>
     * 
     * All parsing will be done on C side as we need LTT functions.
     * 
     * @param   eventToParse    The jni event we want to parse. 
     * @param   fieldPosition   The position (or id) of the field we want to parse
     * 
     * @return                  An Object that contain the JniEvent payload parsed by the C, or null, if if was impossible to parse (i.e., wrong position)
     * 
     * @see org.eclipse.linuxtools.lttng.jni.JniEvent
     */
    static public Object parseField(JniEvent eventToParse, int fieldPosition) {
        
        // Sanity check
        if ( (fieldPosition < 0) || ( fieldPosition >= eventToParse.requestEventMarker().getMarkerFieldsArrayList().size() ) ){
            return null;
        }
        
        // *** HACK ***
        // We cannot use "Object" directly as java does not support swapping primitive value
        //    We either need to create a new object type or to use a "non-primitive" type that have "Setter()" functions
        //    Another (ugly) hack would be to pass an array to modify the reference's reference.
        // ***
        ParsedObjectContent parsedData = new ParsedObjectContent();
        
        // Call the parsing function in C. The result will be put in parsedData object
        ltt_getParsedData(parsedData, eventToParse.getEventPtr().getPointer(), eventToParse.requestEventMarker().getMarkerFieldsArrayList().get(fieldPosition).getMarkerFieldPtr().getPointer() );
        
        return parsedData.getData();
    }

