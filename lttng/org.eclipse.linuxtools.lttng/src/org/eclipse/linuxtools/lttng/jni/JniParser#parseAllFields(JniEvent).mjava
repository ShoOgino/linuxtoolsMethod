    /**
     * Method to parse all field at once<br>
     * All parsing will be done on C side as we need Ltt function
     * 
     * @param   eventToParse    The jni event we want to parse.  
     * @return                  An HashMap of Object that contain the is the JniEvent's payload parsed by the C
     * 
     * @see org.eclipse.linuxtools.lttng.jni.JniEvent
     */
    static public HashMap<String, Object> parseAllFields(JniEvent eventToParse) {
        JniMarker markerData = eventToParse.requestEventMarker();
        int nbMarkerField = markerData.getMarkerFieldsArrayList().size();
        
         // This hashmap will contain the parsed content.
         // ParsedContent is defined at the end of this file
         HashMap<String, Object> parsedDataArray = new HashMap<String, Object>(nbMarkerField);
        
         // *** HACK ***
         // We cannot use "Object" directly as java does not support swapping on primitive value
         //  We either need to create a new object type or to use a "non-primitive" type that have "Setter()" functions
         // ***
         ParsedObjectContent parsedData = new ParsedObjectContent();
         
        // Loop on markerfield, as we need to parse each field in the event data
        for (int pos = 0; pos < nbMarkerField; pos++) {
            // Call the C to parse the data
            ltt_getParsedData(parsedData, eventToParse.getEventPtr().getPointer(), markerData.getMarkerFieldsArrayList().get(pos).getMarkerFieldPtr().getPointer() );
            // Save the result into the HashMap
            parsedDataArray.put(markerData.getMarkerFieldsArrayList().get(pos).getField(), parsedData.getData() );
        }
        
         return parsedDataArray;
    }

