    /* 
     * Fills a map of all the trace files.
     * 
     * Note: This function is called from C and there is no way to propagate
     * exception back to the caller without crashing JNI. Therefore, it MUST
     * catch all exceptions.
     * 
     * @param tracefileName
     * @param tracefilePtr
     */
    @SuppressWarnings("unused")
    private void addTracefileFromC(String tracefileName, long tracefilePtr) {
        // Create a new tracefile object and insert it in the map
        //    the tracefile fill itself with LTT data while being constructed
        try {
            JniTracefile newTracefile = new JniTracefile( new C_Pointer(tracefilePtr), this );
            tracefilesMap.put(tracefileName, newTracefile);
        }
        catch(JniTracefileWithoutEventException e) {
            printlnC("JniTracefile " + tracefileName + " has no event (addTracefileFromC). Ignoring.");
        }
        catch(Exception e) {
            printlnC("Failed to add tracefile " + tracefileName + " to tracefilesMap!(addTracefileFromC)\n\tException raised : " + e.toString() );
        }
    }

