    /**
     * Run the benchmark
     */
    @Test
    public void benchmarkExperimentSizeRequest() {
        Performance perf = Performance.getDefault();

        for (int numTraces = 1; numTraces < MAX_TRACES; numTraces = (int) (1.6 * (numTraces + 1))) {
            PerformanceMeter pm = perf.createPerformanceMeter(TEST_ID + numTraces + " traces");
            perf.tagAsSummary(pm, "Experiment Benchmark:" + numTraces + " traces", Dimension.CPU_TIME);
            if ((int) (1.6 * (numTraces + 1)) > MAX_TRACES) {
                perf.tagAsGlobalSummary(pm, "Experiment Benchmark:" + numTraces + " traces", Dimension.CPU_TIME);
            }

            for (int s = 0; s < SAMPLE_SIZE; s++) {

                InnerEventRequest expReq = new InnerEventRequest(ITmfEvent.class, 0, ITmfEventRequest.ALL_DATA, ExecutionType.BACKGROUND);
                InnerEventRequest traceReq[] = new InnerEventRequest[numTraces];

                init(numTraces);
                fExperiment.sendRequest(expReq);
                ITmfTrace[] traces = fExperiment.getTraces();
                for (int i = 0; i < numTraces; i++) {
                    traceReq[i] = new InnerEventRequest(ITmfEvent.class, 0, ITmfEventRequest.ALL_DATA, ExecutionType.BACKGROUND);
                    traces[i].sendRequest(traceReq[i]);
                }

                pm.start();
                waitForRequest(expReq, traceReq);
                pm.stop();

                for (int i = 0; i < traces.length; i++) {
                    if (!expReq.isTraceHandled(traces[i])) {
                        System.err.println("Trace " + i + " not handled!");
                    }
                }

                fExperiment.dispose();
            }
            pm.commit();
        }
    }

