	/**
	 * Convert a String representing nanoseconds into a valid Long.<p>
	 * This can handle number like "0.5", "0.123456789" as well as plain number like "12".<p>
	 * 
	 * Note : This function ALWAYS return a number, if conversion failed, 0 will be returned.<p>
	 * 
	 * @param timeString	The string to convert
	 * 
	 * @return				The converted nanoseconds time as Long
	 */
	public static Long convertStringToNanoseconds( String timeString ) {
		Long returnedNumber = 0L;
		
	    try {
	    	// Avoid simple commat/dot mistake
	        timeString = timeString.replace(",", ".");
	
	        // If we have a dot, we have a decimal number to convert
	        int dotPosition = timeString.indexOf(".");
	        
	        // If the user begun the line with a dot, we add a zero
	        if ( dotPosition == 0 ) {
                timeString = "0" + timeString;
                dotPosition = 1;
	        }
	        
	        // If we found a dot, verify that we have 9 digits
	        if ( dotPosition != -1 ) {
                int decimalNumber = (timeString.length() - dotPosition -1);
                
                // If we have less than 9 digits, we fill with 0
                if ( decimalNumber <= 9 ) {
                    for ( int nbDec=decimalNumber; nbDec<9; nbDec++) {
                        timeString += "0";
                    }
                }
                // We have OVER 9 digits, skip the useless part
                else {
                	timeString = timeString.substring(dotPosition, 9);
                }
	        }
	        
	        // Conversion into decimal seconds
	        Double dblMaxTimerange = Double.parseDouble(timeString);
	        // Conversion into nanoseconds
	        returnedNumber = (long)(dblMaxTimerange * 1000000000.0);
	    }
	    catch (NumberFormatException e) {
	        System.out.println("Warning : Could not convert string into nanoseconds (convertStringToLong)");
	    }
	    
	    return returnedNumber;
    }

