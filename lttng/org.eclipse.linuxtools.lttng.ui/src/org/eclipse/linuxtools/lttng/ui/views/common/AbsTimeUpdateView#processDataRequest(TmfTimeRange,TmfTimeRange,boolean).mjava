	/**
	 * send data request directly e.g. doesn't use a queue
	 * 
	 * @param requestTrange
	 * @param listener
	 * @param experimentTRange
	 * @param processor
	 * @return
	 */
	private boolean processDataRequest(TmfTimeRange requestTrange,
			TmfTimeRange experimentTRange, boolean clearingData) {
		// Validate input
		if (requestTrange == null || experimentTRange == null) {
			TraceDebug.debug("Invalid input");
			return false;
		}

		LttngSyntEventRequest request = new LttngSyntEventRequest(
				requestTrange, DEFAULT_OFFSET, TmfDataRequest.ALL_DATA,
				DEFAULT_CHUNK, this, experimentTRange, getEventProcessor()) {
	
			Long fCount = getSynEventCount();
			ITransEventProcessor processor = getProcessor();
			TmfTimestamp frunningTimeStamp;
	
			/*
			 * (non-Javadoc)
			 * 
			 * @see
			 * org.eclipse.linuxtools.lttng.request.LttngSyntEventRequest#handleData
			 * ()
			 */
			public void handleData() {
				TmfEvent[] result = getData();
	
				TmfEvent evt = (result.length > 0) ? result[0] : null;
				if (evt != null) {
					LttngSyntheticEvent synEvent = (LttngSyntheticEvent) evt;
					// process event
					SequenceInd indicator = synEvent.getSynType();
					if (indicator == SequenceInd.BEFORE
							|| indicator == SequenceInd.AFTER) {
						processor.process(evt, synEvent.getTraceModel());
					} else if (indicator == SequenceInd.STARTREQ) {
						handleRequestStarted();
					} else if (indicator == SequenceInd.ENDREQ) {
						processor.process(evt, synEvent.getTraceModel());
						// handleCompleted();
					}
	
					if (indicator == SequenceInd.BEFORE) {
						fCount++;
						if (fCount != 0 && fCount % INPUT_CHANGED_REFRESH == 0) {
							// send partial update
							modelInputChanged(this, false);
	
							if (TraceDebug.isDEBUG()) {
								frunningTimeStamp = evt.getTimestamp();
								TraceDebug.debug("handled: " + fCount + " sequence: " + synEvent.getSynType());
							}
	
						}
					}
				}
			}
	
			public void handleRequestStarted() {
				notifyStarting();
			}
	
			public void handleCompleted() {
				super.handleCompleted();

				// Data is not complete and should be handled as such
				if (isFailed() || isCancelled()) {
					modelIncomplete(this);
				}

				if (TraceDebug.isDEBUG()) {
					if (frunningTimeStamp != null) {
						TraceDebug.debug("Last event time stamp: "
								+ frunningTimeStamp.getValue());
					}
				}
			}
		};
	
		// obtain singleton core provider
		LttngSyntheticEventProvider provider = LttngCoreProviderFactory
				.getEventProvider();
	
		// send the request to TMF
		request.startRequestInd(provider);
		request.setclearDataInd(clearingData);
		return true;
	}

