	/**
	 * Recalculate the height of each bar in the elements table.<p>
	 * Need to be called at least once, or when value of "maxHeight", "heighestEventCount" or "averageNumberOfEvents" changes.
	 */
	public void recalculateEventHeight() {
		
		// Recalculate the new HeightFactor for the element; 
		//		the highest bar will get "maxHeight" and other bar a fraction of it.
		// If a maxDifferenceToAverage exist, this is considered here 
		if ( heighestEventCount > (maxDifferenceToAverage * averageNumberOfEvents) ) {
			heightFactor = (double)maxHeight/( maxDifferenceToAverage * (double)averageNumberOfEvents);
		}
		else {
			heightFactor = (double)maxHeight/(double)heighestEventCount;
		}
		
		// Recalculate the height of the bars up to "readyUpToPosition"
		for ( int x=0; x<readyUpToPosition; x++) {
			elementTable[x].intervalHeight = (int)(elementTable[x].intervalNbEvents * heightFactor);
		}
	}

