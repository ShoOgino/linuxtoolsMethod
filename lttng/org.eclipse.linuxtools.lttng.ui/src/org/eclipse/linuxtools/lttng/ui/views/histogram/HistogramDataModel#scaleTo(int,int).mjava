    /**
     * Scale the model data to the width and height requested.
     * 
     * @param width
     * @param height
     * @return the result array of size [width] and where the highest value
     *         doesn't exceed [height]
     */
    public HistogramScaledData scaleTo(int width, int height) {
        // Basic validation
        assert width > 0 && height > 0;

        // The result structure
        HistogramScaledData result = new HistogramScaledData(width, height);

        // Scale horizontally
        int bucketsPerBar = fLastBucket / width + 1;
        result.fBucketDuration = bucketsPerBar * fBucketDuration;
        for (int i = 0; i < width; i++) {
            int count = 0;
            for (int j = i * bucketsPerBar; j < (i + 1) * bucketsPerBar; j++) {
                if (fNbBuckets <= j)
                    break;
                count += fBuckets[j];
            }
            result.fData[i] = count;
            result.fLastBucket = i;
            if (result.fMaxValue < count)
                result.fMaxValue = count;
        }

        // Scale vertically
        if (result.fMaxValue > 0) {
            result.fScalingFactor = (double) height / result.fMaxValue;
        }

        // Set the current event index in the scaled histogram
        if (fCurrentEventTime >= fFirstEventTime && fCurrentEventTime <= fLastEventTime)
            result.fCurrentBucket = (int) ((fCurrentEventTime - fFirstEventTime) / fBucketDuration) / bucketsPerBar;
        else
            result.fCurrentBucket = HistogramScaledData.OUT_OF_RANGE_BUCKET;

        return result;
    }

