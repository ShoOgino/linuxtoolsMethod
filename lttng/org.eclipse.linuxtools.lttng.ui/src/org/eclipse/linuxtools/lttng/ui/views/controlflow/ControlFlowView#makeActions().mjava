	private void makeActions() {
		// resetScale
		resetScale = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.resetStartFinishTime();
				}

			}
		};
		resetScale.setText(Messages.getString("ControlFlowView.Action.Reset")); //$NON-NLS-1$
		resetScale.setToolTipText(Messages
				.getString("ControlFlowView.Action.Reset.ToolTip")); //$NON-NLS-1$
		resetScale.setImageDescriptor(AbstractUIPlugin
				.imageDescriptorFromPlugin(Messages
						.getString("ControlFlowView.tmf.UI"),
						"icons/home_nav.gif"));

		// nextEvent
		nextEvent = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.selectNextEvent();
				}
			}
		};
		nextEvent.setText(Messages
				.getString("ControlFlowView.Action.NextEvent")); //$NON-NLS-1$
		nextEvent.setToolTipText(Messages
				.getString("ControlFlowView.Action.NextEvent.Tooltip")); //$NON-NLS-1$
		nextEvent.setImageDescriptor(AbstractUIPlugin
				.imageDescriptorFromPlugin(Messages
						.getString("ControlFlowView.tmf.UI"),
						"icons/next_event.gif"));

		// prevEvent
		prevEvent = new Action() {
		@Override
		public void run() {
				if (tsfviewer != null) {
					tsfviewer.selectPrevEvent();
				}
			}
		};
		prevEvent.setText(Messages
				.getString("ControlFlowView.Action.PrevEvent")); //$NON-NLS-1$
		prevEvent.setToolTipText(Messages
				.getString("ControlFlowView.Action.PrevEvent.Tooltip")); //$NON-NLS-1$
		prevEvent.setImageDescriptor(AbstractUIPlugin
				.imageDescriptorFromPlugin(Messages
						.getString("ControlFlowView.tmf.UI"),
						"icons/prev_event.gif"));

		// nextTrace
		nextTrace = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.selectNextTrace();
				}
			}
		};
		nextTrace.setText(Messages
				.getString("ControlFlowView.Action.NextProcess")); //$NON-NLS-1$
		nextTrace.setToolTipText(Messages
				.getString("ControlFlowView.Action.NextProcess.ToolTip")); //$NON-NLS-1$
		nextTrace.setImageDescriptor(AbstractUIPlugin
				.imageDescriptorFromPlugin(Messages
						.getString("ControlFlowView.tmf.UI"),
						"icons/next_item.gif"));

		// prevTrace
		prevTrace = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.selectPrevTrace();
				}
			}
		};
		prevTrace.setText(Messages
				.getString("ControlFlowView.Action.PreviousProcess")); //$NON-NLS-1$
		prevTrace.setToolTipText(Messages
				.getString("ControlFlowView.Action.PreviousProcess.Tooltip")); //$NON-NLS-1$
		prevTrace.setImageDescriptor(AbstractUIPlugin
				.imageDescriptorFromPlugin(Messages
						.getString("ControlFlowView.tmf.UI"),
						"icons/prev_item.gif"));

		// showLegend
		showLegend = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.showLegend();
				}
			}
		};
		showLegend.setText(Messages.getString("ControlFlowView.Action.Legend")); //$NON-NLS-1$
		showLegend.setToolTipText(Messages
				.getString("ControlFlowView.Action.Legend.ToolTip")); //$NON-NLS-1$

		// filterTraces
		filterTraces = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.filterTraces();
				}
			}
		};
		filterTraces.setText(Messages
				.getString("ControlFlowView.Action.Filter")); //$NON-NLS-1$
		filterTraces.setToolTipText(Messages
				.getString("ControlFlowView.Action.Filter.ToolTip")); //$NON-NLS-1$
		filterTraces.setImageDescriptor(AbstractUIPlugin
				.imageDescriptorFromPlugin(Messages
						.getString("ControlFlowView.tmf.UI"),
						"icons/filter_items.gif"));

		// zoomIn
		zoomIn = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.zoomIn();
				}
			}
		};
		zoomIn.setText(Messages.getString("ControlFlowView.Action.ZoomIn")); //$NON-NLS-1$
		zoomIn.setToolTipText(Messages
				.getString("ControlFlowView.Action.ZoomIn.Tooltip")); //$NON-NLS-1$
		zoomIn.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(
				Messages.getString("ControlFlowView.tmf.UI"),
				"icons/zoomin_nav.gif"));

		// zoomOut
		zoomOut = new Action() {
			@Override
			public void run() {
				if (tsfviewer != null) {
					tsfviewer.zoomOut();
				}
			}
		};
		zoomOut.setText(Messages.getString("ControlFlowView.Action.ZoomOut")); //$NON-NLS-1$
		zoomOut.setToolTipText(Messages
				.getString("ControlFlowView.Action.ZoomOut.tooltip")); //$NON-NLS-1$
		zoomOut.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(
				Messages.getString("ControlFlowView.tmf.UI"),
				"icons/zoomout_nav.gif"));
		
		// synch
		synch = new Action() {
			@Override
			public void run() {
				// Note: No action since the synch flag is used by Control flow
				// view
				// the actual viewer is set to accept api selections in
				// createpartcontrol.

				// if (synch.isChecked()) {
				// tsfviewer.setAcceptSelectionAPIcalls(true);
				// } else {
				// tsfviewer.setAcceptSelectionAPIcalls(false);
				// }
			}
		};
		synch.setText(Messages.getString("ControlFlowView.Action.Synchronize")); //$NON-NLS-1$
		synch.setToolTipText(Messages
				.getString("ControlFlowView.Action.Synchronize.ToolTip")); //$NON-NLS-1$
		synch.setChecked(false);
		synch.setImageDescriptor(AbstractUIPlugin.imageDescriptorFromPlugin(
				Messages.getString("ControlFlowView.tmf.UI"),
				"icons/synced.gif"));
		// PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_ELCL_SYNCED);

		doubleClickAction = new Action() {
			@Override
			public void run() {
				ISelection selection = tableViewer.getSelection();
				Object obj = ((IStructuredSelection) selection)
						.getFirstElement();
				showMessage("Double-click detected on " + obj.toString()); //$NON-NLS-1$
			}
		};
	}

