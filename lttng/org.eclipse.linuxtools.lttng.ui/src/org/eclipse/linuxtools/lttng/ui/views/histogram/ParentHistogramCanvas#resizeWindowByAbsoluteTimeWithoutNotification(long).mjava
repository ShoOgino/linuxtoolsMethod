	/**
	 * Function that is called when the selection window size (time width) changed by an absolute time.<p>
	 * Note: Given time should be in nanoseconds, positive.
	 * 
	 * Set the new window size and notify the HistogramView that the window changed.
	 * 
	 * @param newTime	 New absoulte time (in nanoseconds) to apply to the window.
	 */
	public void resizeWindowByAbsoluteTimeWithoutNotification(long newTime) {
		
		// We will change the size in case of delta (newTime) != 0
		if (newTime != 0 ) { 
			
			if(newTime > getHistogramContent().getEndTime() - getHistogramContent().getStartTime()) {
				newTime = getHistogramContent().getEndTime() - getHistogramContent().getStartTime();
			}
	
			setSelectedWindowSize(newTime);
	
	/*			
			// Yuriy: we can't use this function because we change the left and right coordinates.
			setWindowCenterPosition(currentWindow.getWindowXPositionCenter());
	*/			
	
			long timestampOfLeftPosition = currentWindow.getTimestampOfCenterPosition() - currentWindow.getWindowTimeWidth() / 2;
			long timestampOfCenterPosition = currentWindow.getTimestampOfCenterPosition();
			long timestampOfRightPosition = 0;
				
			// Let's do the border verifications
			if ( timestampOfLeftPosition < histogramContent.getStartTime() ) {
	
				timestampOfLeftPosition = histogramContent.getStartTime();
				timestampOfCenterPosition = timestampOfLeftPosition + currentWindow.getWindowTimeWidth() / 2;
				timestampOfRightPosition = timestampOfLeftPosition + currentWindow.getWindowTimeWidth();
	
			} else {
				
				timestampOfRightPosition = currentWindow.getTimestampOfCenterPosition() + currentWindow.getWindowTimeWidth() / 2;
					
				if ( timestampOfRightPosition > histogramContent.getEndTime() ) {
						
					timestampOfRightPosition = histogramContent.getEndTime();
					timestampOfCenterPosition = timestampOfRightPosition - currentWindow.getWindowTimeWidth() / 2;
					timestampOfLeftPosition = timestampOfRightPosition - currentWindow.getWindowTimeWidth();
						
				}
				
			}
			
			// Firstly we will setup new left, right and center timestamps
			currentWindow.setTimestampOfLeftPosition( timestampOfLeftPosition );
			currentWindow.setTimestampOfCenterPosition( timestampOfCenterPosition );
			currentWindow.setTimestampOfRightPosition( timestampOfRightPosition );
		
			// After we will update coordonates using timestamps already recalculated
			currentWindow.setWindowXPositionLeft( histogramContent.getClosestXPositionFromTimestamp(timestampOfLeftPosition) );
			currentWindow.setWindowXPositionCenter( histogramContent.getClosestXPositionFromTimestamp(timestampOfCenterPosition) );
			currentWindow.setWindowXPositionRight( histogramContent.getClosestXPositionFromTimestamp(timestampOfRightPosition) );
			
			redrawAsynchronously();
		}
	}

