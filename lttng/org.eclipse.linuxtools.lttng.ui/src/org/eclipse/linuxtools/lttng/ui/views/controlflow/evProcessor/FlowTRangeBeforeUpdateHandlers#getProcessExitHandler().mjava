	/**
	 * <p>
	 * Handles: LTT_EVENT_PROCESS_EXIT
	 * </p>
	 * Replace C function named "before_process_exit_hook" in eventhooks.c
	 * 
	 * @return
	 */
	final IEventProcessing getProcessExitHandler() {
		AbsFlowTRangeUpdate handler = new AbsFlowTRangeUpdate() {

			private Events eventType = Events.LTT_EVENT_PROCESS_EXIT;

			// @Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {

				// We need to process information.
				LttngProcessState process = traceSt.getRunning_process().get(
						trcEvent.getCpuId());

				if (process != null) {
					// *** FIXME ***
					// This C call does not seem to be possible, as we have no
					// "current_process" in LttngTraceState
					// hashed_process_data =
					// process_list->current_hash_data[trace_num][cpu];

					// ***VERIFY***
					// Is this call really replace these two C lines ??
					// HashedProcessData *hashed_process_data = NULL;
					// hashed_process_data =
					// processlist_get_process_data(process_list, pid,
					// process->cpu, &birth,trace_num);
					TimeRangeEventProcess localProcess = procContainer
							.findProcess(process.getPid(), process
									.getCreation_time().getValue(), traceSt
									.getTraceId());

					// Add process to process list if not present
					// Replace C Call :
					// processlist_add(process_list, drawing, pid,
					// process->tgid, process->cpu, process->ppid, &birth,
					// trace_num, process->name, process->brand,&pl_height,
					// &process_info, &hashed_process_data);
					if (localProcess == null) {
						if ((process.getPid() == 0)
								|| (process.getPid() != process.getPpid())) {
							TmfTimeRange timeRange = traceSt.getInputDataRef()
									.getTraceTimeWindow();
							localProcess = addLocalProcess(process, timeRange
									.getStartTime().getValue(), timeRange
									.getEndTime().getValue(), traceSt
									.getTraceId());
							// Call the function that does the actual drawing
							makeDraw(traceSt, trcEvent.getTimestamp(), process,
									localProcess, params);
						} else {
							TraceDebug
									.debug("Pid is null or Pid == PPID!  (getProcessExitHandler)");
						}
					}
				} else {
					TraceDebug
							.debug("Running proces is null! (getProcessExitHandler)");
				}

				return false;
			}

			// @Override
			public Events getEventHandleType() {
				return eventType;
			}
		};
		return handler;
	}

