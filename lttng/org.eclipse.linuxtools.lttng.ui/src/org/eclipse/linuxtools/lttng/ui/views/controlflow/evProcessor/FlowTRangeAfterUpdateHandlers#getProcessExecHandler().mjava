	/**
	 * <p>
	 * Handles: LTT_EVENT_EXEC
	 * </p>
	 * Replace C function "after_fs_exec_hook" in eventhooks.c
	 * 
	 * @return
	 */
	final IEventProcessing getProcessExecHandler() {
	    AbsFlowTRangeUpdate handler = new AbsFlowTRangeUpdate() {

			private Events eventType = Events.LTT_EVENT_EXEC;

			// @Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {
			    
			    LttngProcessState process = traceSt.getRunning_process().get(trcEvent.getCpuId());

                if ( process != null ) {
                    
                    TimeRangeEventProcess localProcess = procContainer.findProcess(process.getPid(),  process.getCpu(), traceSt.getTraceId(), process.getCreation_time());
                    
                    if ( localProcess == null ) {
                        if ( (process.getPid() == 0) || (process.getPid() != process.getPpid()) ) {
                            TmfTimeRange timeRange = traceSt.getInputDataRef().getTraceTimeWindow();
                            localProcess = addLocalProcess(process, timeRange.getStartTime().getValue(), timeRange.getEndTime().getValue(), traceSt.getTraceId());
                        }
                        else {
                            TraceDebug.debug("process pid is not 0 or pid equals ppid! (getProcessExecHandler)");
                        }
                    }
                    else {
                        // If we found the process, the name might be missing. Let's add it here.
                        localProcess.setName(process.getName());
                    }
                }
                else {
                    TraceDebug.debug("process is null! (getProcessExecHandler)");
                }
                
				return false;
			}

			// @Override
			public Events getEventHandleType() {
				return eventType;
			}
		};
		return handler;
	}

