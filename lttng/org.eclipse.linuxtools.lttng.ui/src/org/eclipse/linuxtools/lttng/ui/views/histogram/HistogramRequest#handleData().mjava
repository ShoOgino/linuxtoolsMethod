	/**
	 * HandleData function : will be called by TMF each time a new event is receive for the request.<p>
	 * Calculation for the content is done here.
	 */
	@Override
    public void handleData() {
        TmfEvent[] result = getData();
        TmfEvent[] evt = new TmfEvent[1];
        
        evt[0] = (result.length > 0) ? result[0] : null;
        
        // *** FIXME ***
    	// *** EVIL BUG ***
        // The request by timerange only does not work! (see constructor above) 
    	// 	However, the request with number of events will loop until it reach its number or EOF
    	//  We have to filter out ourself the extra useless events!
    	//
        if ( (evt[0] != null) && (requestCompleted == false) ) {
        	LttngEvent tmpEvent = (LttngEvent)evt[0];
        	
        	// This check is linked to the evil fix mentionned above
        	if ( tmpEvent.getTimestamp().getValue() <= histogramContent.getEndTime() ) {
        		
        		// Distance (in time) between this event and the last one we read
	        	long distance = ( tmpEvent.getTimestamp().getValue() - lastRangeTime );
				
	        	// Check if we changed of interval (the distance is higher than the interval time)
				if  ( distance > histogramContent.getIntervalTime() ) {
					
					histogramContent.getElementByIndex(lastInterval).intervalNbEvents = nbEventsInInterval;
					lastRangeTime = tmpEvent.getTimestamp().getValue();
					
					// * NOTE *
					// We can skip several interval at once, so we need to find what was our interval now
					lastInterval = (int)((lastRangeTime - histogramContent.getStartTime()) / histogramContent.getIntervalTime() );
					
					// *** HACK ***
					// Because of the threads, weird phenomenons seem to happen here, like a position after the 
					//	 element range because another request was issued.
					// This enforce the position but may result in slightly inconsistent result (i.e. a weird misplaced bar sometime).
					if ( lastInterval < 0 ) {
						lastInterval = 0;
					}
					else if ( lastInterval >= histogramContent.getNbElement() ) {
						lastInterval = (histogramContent.getNbElement()-1);
					}
					
					// * NOTE * 
					// We save the time we have here. This mean only the FIRST time read in an interval will be saved. 
					histogramContent.getElementByIndex(lastInterval).firstIntervalTimestamp = lastRangeTime;
					histogramContent.setReadyUpToPosition(lastInterval);
					
					nbIntervalNotEmpty++;
					nbEventsInInterval = 1;
				}
				// We are still in the same interval, just keep counting
				else {
					nbEventsInInterval++;
					if ( nbEventsInInterval > histogramContent.getHeighestEventCount() ) {
						histogramContent.setHeighestEventCount(nbEventsInInterval);
					}
				}
				
				nbEventRead++;
				
				// Call an asynchronous redraw every REDRAW_EVERY_NB_EVENTS events
				// That way we don't need to wait until to end to have something on the screen
				if ( nbEventRead % HistogramConstant.REDRAW_EVERY_NB_EVENTS == 0 ) {
					redrawAsyncronously();
				}
        	}
        	else {
        		// *** FIXME ***
            	// *** EVIL FIX ***
                // Because of the other evil bug (see above), we have to ignore extra useless events we will get
        		// However, we might be far away from the end so we better start a redraw now
        		redrawAsyncronously();
        		requestCompleted = true;
        		
        		// Althought it won't do anything, try to call control functions to stop the request
        		done();
        		cancel();
        		fail();
        	}
		}
    }

