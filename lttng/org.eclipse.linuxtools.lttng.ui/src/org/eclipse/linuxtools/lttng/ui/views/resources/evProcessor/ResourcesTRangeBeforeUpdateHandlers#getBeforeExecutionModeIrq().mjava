	/**
	 * <p>
	 * Handles: LTT_EVENT_IRQ_ENTRY, LTT_EVENT_IRQ_EXIT
	 * </p>
	 * Replace C function named "before_execmode_hook_irq" in eventhooks.c
	 * 
	 * @return
	 */
	final IEventProcessing getBeforeExecutionModeIrq() {
		AbsResourcesTRangeUpdate handler = new AbsResourcesTRangeUpdate() {

			// This method is common to TWO types of events
			private Events eventType = Events.LTT_EVENT_IRQ_ENTRY;

			// @Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {

				Long irqId = null;

				// According to Ltt, we should not draw anything if the channel
				// is the kernel one
				if (trcEvent.getChannelName().equals(
						Channels.LTT_CHANNEL_KERNEL)) {
					return false;
				} else {

					if (trcEvent.getMarkerName().equals(
							Events.LTT_EVENT_IRQ_ENTRY.getInName())) {
						irqId = getAFieldLong(trcEvent, traceSt,
								Fields.LTT_FIELD_IRQ_ID);
					} else if (trcEvent.getMarkerName().equals(
							Events.LTT_EVENT_IRQ_EXIT.getInName())) {
						long cpu = trcEvent.getCpuId();
						irqId = traceSt.getCpu_states().get(cpu)
								.peekFromIrqStack();
						if (irqId.equals(-1L)) {
							// nothing to update
							return false;
						}
					}


					// softIrqId is the resource id here
					TimeRangeEventResource localResource = resourcelist_obtain_irq(
							traceSt, irqId);

					// If the resource is missing in the list, add it
					if (localResource == null) {
						TmfTimeRange timeRange = traceSt.getInputDataRef()
								.getTraceTimeWindow();
						localResource = addLocalResource(timeRange
								.getStartTime().getValue(), timeRange
								.getEndTime().getValue(), traceSt.getTraceId(),
								ResourceTypes.IRQ, irqId);
					}

					// get the start time
					long stime = localResource.getNext_good_time();

					// Get the resource state mode
					String irqStateMode = traceSt.getIrq_states().get(irqId)
							.peekFromIrqStack().getInName();

					// Call the makeDraw function
					makeDraw(traceSt, stime,
							trcEvent.getTimestamp().getValue(), localResource,
							params, irqStateMode);

					// Call the globalProcessBeforeExecmode() after, as
					// it is needed by all
					// getBeforeExecmode*SOMETHING*()
					globalProcessBeforeExecmode(trcEvent, traceSt);
				}
				return false;
			}

			// @Override
			public Events getEventHandleType() {
				return eventType;
			}
		};

		return handler;
	}

