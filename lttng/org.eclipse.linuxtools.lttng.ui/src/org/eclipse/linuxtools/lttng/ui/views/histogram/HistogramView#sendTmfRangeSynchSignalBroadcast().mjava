    /**
     * Function used to tell that the timerange (window) changed.<p>
     * This will most likely be called if the time window is resized.
     * 
     * We send a signal to notify other views of the new timerange.
     */
    public void sendTmfRangeSynchSignalBroadcast() {
    	
//    	System.out.println("sendTmfRangeSynchSignalBroadcast " + System.currentTimeMillis());
    	
    	// *** TODO ***
    	// Not very elegant... we need to chance this below.
    	//
    	long centerTime = fullExperimentCanvas.getCurrentWindow().getTimestampCenter();
    	long windowWidth = fullExperimentCanvas.getCurrentWindow().getWindowTimeWidth();
    	
    	long startTime = centerTime-windowWidth;
    	if ( startTime < fullExperimentCanvas.getHistogramContent().getStartTime() ) {
    		startTime = fullExperimentCanvas.getHistogramContent().getStartTime();
    	}
        LttngTimestamp tmpStartTime = new LttngTimestamp(startTime);
        
        long endTime = centerTime+windowWidth;
    	if ( endTime > fullExperimentCanvas.getHistogramContent().getEndTime() ) {
    		endTime = fullExperimentCanvas.getHistogramContent().getEndTime();
    	}
    	LttngTimestamp tmpEndTime = new LttngTimestamp(endTime);
    	
        TmfTimeRange tmpTimeRange = new TmfTimeRange(tmpStartTime, tmpEndTime);
        LttngTimestamp tmpEventTime = new LttngTimestamp(currentEventTime);
        
        // Send a signal to the framework
        broadcast(new TmfRangeSynchSignal(this, tmpTimeRange, tmpEventTime));
    }

