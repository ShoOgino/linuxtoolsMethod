	/**
	 * This is a callback that will allow us to create the viewer and initialize
	 * it.
	 */
	@Override
	public void createPartControl(Composite parent) {
		top = new Composite(parent, SWT.BORDER);

		top.setLayout(new FillLayout());
		tsfviewer = TmfViewerFactory.createViewer(top,
				new TimeRangeViewerProvider());

		tsfviewer.addWidgetSelectionListner(this);
		tsfviewer.addWidgetTimeScaleSelectionListner(this);

		// Traces shall not be grouped to allow synchronisation
		tsfviewer.groupTraces(true);
		tsfviewer.setAcceptSelectionAPIcalls(true);

		// Viewer to notify selection to this class
		// This class will synchronise selections with table.
		tsfviewer.addWidgetSelectionListner(this);
		tsfviewer.addWidgetTimeScaleSelectionListner(this);

		// Create the help context id for the viewer's control
		// TODO: Associate with help system
		PlatformUI.getWorkbench().getHelpSystem().setHelp(
				tsfviewer.getControl(),
				"org.eclipse.linuxtools.lttng.ui.views.resource.view"); //$NON-NLS-1$

		makeActions();
		hookContextMenu();
		contributeToActionBars();

		// Register the updater in charge to refresh elements as we update the
		// time ranges
		// FlowParamsUpdater listener = FlowModelFactory.getParamsUpdater();
		// tsfviewer.addWidgetTimeScaleSelectionListner(listener);

		// TODO: re-factor registration / notification process
		// Register this view to receive updates when the model is updated with
		// fresh info
		// ModelListenFactory.getRegister().addFlowModelUpdatesListener(this);

		// Register the event processor factory in charge of event handling
		EventProcessorProxy.getInstance().addEventProcessorFactory(
				ResourcesTRangeUpdateFactory.getInstance());

		// set the initial view parameter values
		// Experiment start and end time
		// as well as time space width in pixels, used by the time analysis
		// widget
		ParamsUpdater paramUpdater = ResourceModelFactory.getParamsUpdater();
		StateExperimentManager experimentManger = StateManagerFactory
				.getExperimentManager();
		// Read relevant values
		int timeSpaceWidth = tsfviewer.getTimeSpace();
		TmfTimeRange timeRange = experimentManger.getExperimentTimeRange();
		if (timeRange != null) {
			long time0 = timeRange.getStartTime().getValue();
			long time1 = timeRange.getEndTime().getValue();
			paramUpdater.update(time0, time1, timeSpaceWidth);
		}

		// Read current data if any available
		StateManagerFactory.getExperimentManager().readExperiment(
				"resourceView", this);
	}

