    /**
     * Default Constructor with adjustment for small screen, allow you to give the group name and the text box value.<p>
     *  
     * @param newParentView		Parent HistogramView
     * @param parent			Parent Composite, used to position the inner controls.
     * @param textStyle			Style of the text box. Usually SWT.BORDER or SWT.NONE (or anything that suit a Text)
     * @param groupStyle		Style of the group.   Anything that suite a Text
     * @param groupValue		Value (label) of the group. 
     * @param textValue         Value of the text box.
     * @param isSpaceSaverNeeded Value that tell if we try to save some space in the control.
     */
    public TimeTextGroup(HistogramView newParentView, Composite parent, int textStyle, int groupStyle, String groupValue, String textValue, boolean isSpaceSaverNeeded) {
    	Font font = parent.getFont();
		FontData tmpFontData = font.getFontData()[0];
		
		Font smallFont = null;
		int textBoxSize = -1;
//		int indentSize = -1;
		
		// If we were asked to save size, calculate the correct value here
		if ( isSpaceSaverNeeded == true ) {
			smallFont = new Font(font.getDevice(), tmpFontData.getName(), tmpFontData.getHeight()-VERY_SMALL_FONT_MODIFIER, tmpFontData.getStyle());
			
			// No minimum textBoxSize and no indent size
			textBoxSize = 0;
//	        indentSize = 0;
		}
		else {
			// We use only a slightly smaller font
			smallFont = new Font(font.getDevice(), tmpFontData.getName(), tmpFontData.getHeight()-SMALL_FONT_MODIFIER, tmpFontData.getStyle());
			
			// ** Creation of the textbox
	        // Calculate the optimal size of the textbox already
	        // This will avoid the control to move around and resize when bigger value are given 
	        textBoxSize = HistogramConstant.getTextSizeInControl(parent, LONGEST_STRING_VALUE);
			
	        // Default indent
//	        indentSize = DEFAULT_INDENT_SIZE;
		}
			
		parentView = newParentView;
		
		// ** Creation of the group
//		GridLayout gridLayoutgroup = new GridLayout(2, false);
		GridLayout gridLayoutgroup = new GridLayout(1, false);
		gridLayoutgroup.horizontalSpacing = 0;
		gridLayoutgroup.verticalSpacing = 0;
        grpName = new Group(parent, groupStyle);
        grpName.setText(groupValue);
        grpName.setFont(smallFont);
        grpName.setLayout(gridLayoutgroup);
        
        txtNanosec = new Text(grpName, textStyle);
        txtNanosec.setTextLimit( MAX_CHAR_IN_TEXTBOX );
        txtNanosec.setText(textValue);
        txtNanosec.setFont(smallFont);
        GridData gridDataTextBox = new GridData(SWT.LEFT, SWT.CENTER, true, false);
        gridDataTextBox.horizontalIndent = 0; // indentSize;
        gridDataTextBox.verticalIndent = 0;
        gridDataTextBox.minimumWidth = textBoxSize;
        txtNanosec.setLayoutData(gridDataTextBox);
        
        // ** Creation of the label
/*        
        lblNanosec = new Label(grpName, SWT.LEFT);
        lblNanosec.setText(NANOSEC_LABEL);
        lblNanosec.setFont(smallFont);
        GridData gridDataLabel = new GridData(SWT.LEFT, SWT.CENTER, false, false);
        gridDataLabel.horizontalIndent = indentSize;
        gridDataLabel.verticalIndent = 0;
        lblNanosec.setLayoutData(gridDataLabel);
*/
        
        // Add all listener
        addNeededListeners();
    }

