	/**
	 * Create the UI controls of this view
	 * 
	 * @param  parent	The composite parent of this view
	 */
	@Override
	public void createPartControl(Composite newParent) {
		// Save the parent
		parent = newParent;
		
		// Default font
		Font font = parent.getFont();
		FontData tmpFontData = font.getFontData()[0];
		
		
		Font smallFont = null;
		int  nbEventWidth = -1; 
		int selectedCanvasWidth = -1;
		boolean doesTimeTextGroupNeedAdjustment = false;
		
		// Calculate if we need "small screen" fixes
		if ( parent.getDisplay().getBounds().width < SCREEN_SMALL_IF_SMALLER_THAN ) {
			
			// A lot smaller font for timestamp
			smallFont = new Font(font.getDevice(), tmpFontData.getName(), tmpFontData.getHeight() - VERY_SMALL_FONT_MODIFIER, tmpFontData.getStyle());
			
/*			
			// 2010-06-20 Yuriy
			// Smaller selection window canvas
			selectedCanvasWidth = SMALL_SELECTED_WINDOW_CANVAS_WIDTH;
*/			
			// Smaller event number text field
			nbEventWidth = NB_EVENTS_FIXED_WIDTH/2;
			
			// Tell the text group to ajust
			doesTimeTextGroupNeedAdjustment = true;

		} else {
			
			// Slightly smaller font for timestamp
			smallFont = new Font(font.getDevice(), tmpFontData.getName(), tmpFontData.getHeight() - SMALL_FONT_MODIFIER, tmpFontData.getStyle());
			// Usual size for selected window and event number text field
			nbEventWidth = NB_EVENTS_FIXED_WIDTH;
/*			
			// 2010-06-20 Yuriy
			selectedCanvasWidth = SELECTED_WINDOW_CANVAS_WIDTH;
*/			
			// No ajustement needed by the text group
			doesTimeTextGroupNeedAdjustment = false;
			
		}

		
		/////////////////////////////////////////////////////////////////////////////////////
		// Layout for the whole view, other elements will be in a child composite of this one 
		// Contains :
		// 		Composite layoutSelectionWindow
		//		Composite layoutTimesSpinner
		//		Composite layoutExperimentHistogram
		/////////////////////////////////////////////////////////////////////////////////////
		Composite layoutFullView = new Composite(parent, SWT.FILL);
		GridLayout gridFullView = new GridLayout();
		gridFullView.numColumns = 2;
		gridFullView.horizontalSpacing = 0;
		gridFullView.verticalSpacing = 0;
		gridFullView.marginHeight = 0;
		gridFullView.marginWidth = 0;
		layoutFullView.setLayout(gridFullView);

		
		/////////////////////////////////////////////////////////////////////////////////////
		// Layout that contain the time spinners
		// Contains : 
		// 		NanosecTextGroup  ntgCurrentEventTime
		// 		NanosecTextGroup  ntgTimeRangeWindow
		// 		NanosecTextGroup  ntgCurrentWindowTime
		/////////////////////////////////////////////////////////////////////////////////////
		Composite layoutTimeSpinners = new Composite(layoutFullView, SWT.NONE);
		GridLayout gridTimesSpinner = new GridLayout();
		gridTimesSpinner.numColumns = 3;
		gridTimesSpinner.marginHeight = 0;
		gridTimesSpinner.marginWidth = 0;
		gridTimesSpinner.horizontalSpacing = 5;
		gridTimesSpinner.verticalSpacing = 0;
		gridTimesSpinner.makeColumnsEqualWidth = true;
		gridTimesSpinner.marginLeft = 5;
		gridTimesSpinner.marginRight = 5;
		layoutTimeSpinners.setLayout(gridTimesSpinner);
		
		GridData gridDataCurrentEvent = new GridData();
		gridDataCurrentEvent.horizontalAlignment = SWT.LEFT;
		gridDataCurrentEvent.verticalAlignment = SWT.CENTER;
		ntgCurrentEventTime = new TimeTextGroup(this, layoutTimeSpinners, SWT.BORDER, SWT.BORDER, CURRENT_EVENT_TIME_LABEL_TEXT, HistogramConstant.formatNanoSecondsTime(0L), doesTimeTextGroupNeedAdjustment);
		ntgCurrentEventTime.setLayoutData(gridDataCurrentEvent);		
		
		GridData gridDataTimeSpan = new GridData();
		gridDataTimeSpan.horizontalAlignment = SWT.CENTER;
		gridDataTimeSpan.verticalAlignment = SWT.CENTER;
		ntgWindowTimeSpan = new TimeTextGroup(this, layoutTimeSpinners, SWT.BORDER, SWT.BORDER, WINDOW_TIMESPAN_LABEL_TEXT, HistogramConstant.formatNanoSecondsTime(0L), doesTimeTextGroupNeedAdjustment);
		ntgWindowTimeSpan.setLayoutData(gridDataTimeSpan);
		 		
		GridData gridDataWindowCenter = new GridData();
		gridDataWindowCenter.horizontalAlignment = SWT.RIGHT;
		gridDataWindowCenter.verticalAlignment = SWT.CENTER;	
		ntgWindowCenterTime = new TimeTextGroup(this, layoutTimeSpinners, SWT.BORDER, SWT.BORDER, WINDOW_CENTER_TIME_LABEL_TEXT, HistogramConstant.formatNanoSecondsTime(0L), doesTimeTextGroupNeedAdjustment);
		ntgWindowCenterTime.setLayoutData(gridDataWindowCenter);
		
		
		/////////////////////////////////////////////////////////////////////////////////////
		// Layout that contain the SelectionWindow
		// Contains : 
		// 		Label txtWindowStartTime
		// 		Label txtWindowStopTime
		// 		Label txtWindowMaxNbEvents
		// 		Label txtWindowMinNbEvents
		// 		ChildrenHistogramCanvas selectedWindowCanvas
		/////////////////////////////////////////////////////////////////////////////////////
		Composite layoutSelectionWindow = new Composite(layoutFullView, SWT.FILL);
		GridLayout gridSelectionWindow = new GridLayout();
		gridSelectionWindow.numColumns = 3;
		gridSelectionWindow.marginHeight = 0;
		gridSelectionWindow.marginWidth = 2;
		gridSelectionWindow.marginTop = 5;
		gridSelectionWindow.horizontalSpacing = 0;
		gridSelectionWindow.verticalSpacing = 0;
		layoutSelectionWindow.setLayout(gridSelectionWindow);
		
		GridData gridDataSelectionWindow = new GridData();
		gridDataSelectionWindow.horizontalAlignment = SWT.FILL;
		gridDataSelectionWindow.verticalAlignment = SWT.FILL;	
		layoutSelectionWindow.setLayoutData(gridDataSelectionWindow);
		
		GridData gridDataSelectionWindowCanvas = new GridData();
		gridDataSelectionWindowCanvas.horizontalSpan = 2;
		gridDataSelectionWindowCanvas.verticalSpan = 2;
		gridDataSelectionWindowCanvas.horizontalAlignment = SWT.FILL;
		gridDataSelectionWindowCanvas.grabExcessHorizontalSpace = true;
		gridDataSelectionWindowCanvas.verticalAlignment = SWT.FILL;
/*
 		// 2010-06-20 Yuriy 
		gridDataSelectionWindowCanvas.heightHint = SELECTED_WINDOW_CANVAS_HEIGHT;
		gridDataSelectionWindowCanvas.minimumHeight = SELECTED_WINDOW_CANVAS_HEIGHT;
*/		
		gridDataSelectionWindowCanvas.widthHint = selectedCanvasWidth;
		gridDataSelectionWindowCanvas.minimumWidth = selectedCanvasWidth;
		selectedWindowCanvas = new ChildrenHistogramCanvas(this, layoutSelectionWindow, SWT.BORDER);
		selectedWindowCanvas.setLayoutData(gridDataSelectionWindowCanvas);
		
		GridData gridDataWindowMaxEvents = new GridData();
		gridDataWindowMaxEvents.horizontalAlignment = SWT.RIGHT;
		gridDataWindowMaxEvents.verticalAlignment = SWT.TOP;
		// Force a width, to avoid the control to enlarge if the number of events change
		gridDataWindowMaxEvents.minimumWidth = nbEventWidth;
		txtWindowMaxNbEvents = new Text(layoutSelectionWindow, SWT.READ_ONLY);
		txtWindowMaxNbEvents.setFont(smallFont);
		txtWindowMaxNbEvents.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		txtWindowMaxNbEvents.setEditable(false);
		txtWindowMaxNbEvents.setText("0");
		txtWindowMaxNbEvents.setLayoutData(gridDataWindowMaxEvents);
		
		GridData gridDataWindowMinEvents = new GridData();
		gridDataWindowMinEvents.horizontalAlignment = SWT.RIGHT;
		gridDataWindowMinEvents.verticalAlignment = SWT.BOTTOM;
		// Force a width, to avoid the control to enlarge if the number of events change
		gridDataWindowMinEvents.minimumWidth = nbEventWidth;
		txtWindowMinNbEvents = new Text(layoutSelectionWindow, SWT.READ_ONLY);
		txtWindowMinNbEvents.setFont(smallFont);
		txtWindowMinNbEvents.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		txtWindowMinNbEvents.setEditable(false);
		txtWindowMinNbEvents.setText("0");
		txtWindowMinNbEvents.setLayoutData(gridDataWindowMinEvents);
		
		GridData gridDataWindowStart = new GridData();
		gridDataWindowStart.horizontalAlignment = SWT.LEFT;
		gridDataWindowStart.verticalAlignment = SWT.BOTTOM;
		txtWindowStartTime = new Text(layoutSelectionWindow, SWT.READ_ONLY);
		txtWindowStartTime.setFont(smallFont);
		txtWindowStartTime.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		txtWindowStartTime.setEditable(false);
		txtWindowStartTime.setText("0.000000000");
		txtWindowStartTime.setLayoutData(gridDataWindowStart);
		
		GridData gridDataWindowStop = new GridData();
		gridDataWindowStop.horizontalAlignment = SWT.RIGHT;
		gridDataWindowStop.verticalAlignment = SWT.BOTTOM;
		txtWindowStopTime = new Text(layoutSelectionWindow, SWT.READ_ONLY);
		txtWindowStopTime.setFont(smallFont);
		txtWindowStopTime.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		txtWindowStopTime.setEditable(false);
		txtWindowStopTime.setText("0.000000000");
		txtWindowStopTime.setLayoutData(gridDataWindowStop);
		

/*
		// 2010-06-10 Yuriy: NOT NEEDED AFTER GUI IMPROVEMENTS. WORK FINE WITOUT THIS HACK 
		// *** HACK ***
		// To align properly AND to make sure the canvas size is fixed, we NEED to make sure all "section" of the 
		//		gridlayout are taken (and if possible of a fixed size).
		// However, SWT is VERY VERY DUMB and won't consider griddata that contain no control. 
		// Since there will be missing a section, the SelectedWindowCanvas + NbEventsText will take 3 spaces, but
		//		startTimeText + stopTimeText will take only 2 (as if empty the other griddata of 1 will get ignored).
		// StopTime will then take over the missing space; I want to align "stopTime" right on the end of canvas, so 
		// 		the added space to stop time would make it being aligned improperly
		// So I NEED the empty griddata to be considered! 
		// Visually : 
		// |---------------|---------------|-----------|
		// |SelectionCanvas SelectionCanvas|NbEventText|
		// |SelectionCanvas SelectionCanvas|NbEventText|
		// |---------------|---------------|-----------|
		// |StartTime      |       StopTime|    ???    |
		// |---------------|---------------|-----------|
		//
		// So since SWT will only consider griddata with control, 
		//		I need to create a totally useless control in the ??? section.
		// That's ugly, useless and it is generally a bad practice.
		//
		// *** SUB-HACK ***
		// Other interesting fact about SWT : the way it draws (Fill/Expand control in grid) will change if 
		//		the control is a Text or a Label. 
		// A Label here will be "pushed" by startTime/stopTime Text and won't fill the full space as NbEventText.
		// A Text  here will NOT be "pushed" and would give a nice visual output.
		// 		(NB : No, I am NOT kidding, try it for yourself!)
		//
		// Soooooo I guess I will use a Text here. Way to go SWT!
		// Downside is that disabled textbox has a slightly different color (even if you force it yourself) so if I want
		//		to make the text "invisible", I have to keep it enabled (but read only), so it can be clicked on.
		//
		// Label uselessControlToByPassSWTStupidBug = new Label(layoutSelectionWindow, SWT.BORDER); // WON'T align correctly!!!
		//GridData gridDataSpacer = new GridData(SWT.FILL, SWT.TOP, true, true, 1, 1);
		GridData gridDataSpacer = new GridData();
		gridDataWindowStop.horizontalAlignment = SWT.FILL;
		gridDataWindowStop.verticalAlignment = SWT.TOP;
		gridDataSpacer.minimumWidth = nbEventWidth;
		Text uselessControlToByPassSWTStupidBug = new Text(layoutSelectionWindow, SWT.READ_ONLY); // WILL align correctly!!!
		uselessControlToByPassSWTStupidBug.setEditable(false);
		uselessControlToByPassSWTStupidBug.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		uselessControlToByPassSWTStupidBug.setLayoutData(gridDataSpacer);
*/		
		
		
		/////////////////////////////////////////////////////////////////////////////////////
		// Layout that contain the complete experiment histogram and related controls.
		// Contains : 
		// 		ParentHistogramCanvas fullExperimentCanvas
		//		Text txtExperimentStartTime
		//		Text txtExperimentStopTime
		/////////////////////////////////////////////////////////////////////////////////////
		Composite layoutExperimentHistogram = new Composite(layoutFullView, SWT.FILL);
		
		GridLayout gridExperimentHistogram = new GridLayout();
		gridExperimentHistogram.numColumns = 2;
		gridExperimentHistogram.marginHeight = 0;
		gridExperimentHistogram.marginWidth = 0;
		gridExperimentHistogram.horizontalSpacing = 0;
		gridExperimentHistogram.verticalSpacing = 0;
		gridExperimentHistogram.marginLeft = 5;
		gridExperimentHistogram.marginRight = 5;
		layoutExperimentHistogram.setLayout(gridExperimentHistogram);
		
/*
		// 2010-06-10 Yuriy: NOT NEEDED AFTER GUI IMPROVEMENTS
		GridData gridDataExperimentHistogram = new GridData(SWT.FILL, SWT.FILL, true, false, 2, 1);
		layoutExperimentHistogram.setLayoutData(gridDataExperimentHistogram);
*/
		
		// *** Everything related to the experiment canvas is below
		GridData gridDataExperimentCanvas = new GridData();
		gridDataExperimentCanvas.horizontalSpan = 2;
		gridDataExperimentCanvas.horizontalAlignment = SWT.FILL;
		gridDataExperimentCanvas.grabExcessHorizontalSpace = true;
		gridDataExperimentCanvas.verticalAlignment = SWT.FILL;
		gridDataExperimentCanvas.grabExcessVerticalSpace = true;
/*		
		// 2010-06-20 Yuriy: We use the dynamic height.
		gridDataExperimentCanvas.heightHint = FULL_TRACE_CANVAS_HEIGHT;
		gridDataExperimentCanvas.minimumHeight = FULL_TRACE_CANVAS_HEIGHT;
*/		
		fullExperimentCanvas = new ParentHistogramCanvas(this, layoutExperimentHistogram, SWT.BORDER);
		fullExperimentCanvas.setLayoutData(gridDataExperimentCanvas);
		layoutExperimentHistogram.setLayoutData(gridDataExperimentCanvas);
		
		GridData gridDataExperimentStart = new GridData();
		gridDataExperimentStart.horizontalAlignment = SWT.LEFT;
		gridDataExperimentStart.verticalAlignment = SWT.BOTTOM;
		txtExperimentStartTime = new Text(layoutExperimentHistogram, SWT.READ_ONLY);
		txtExperimentStartTime.setFont(smallFont);
		txtExperimentStartTime.setText("0.000000000");
		txtExperimentStartTime.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		txtExperimentStartTime.setEditable(false);
		txtExperimentStartTime.setLayoutData(gridDataExperimentStart);
		
		GridData gridDataExperimentStop = new GridData();
		gridDataExperimentStop.horizontalAlignment = SWT.RIGHT;
		gridDataExperimentStop.verticalAlignment = SWT.BOTTOM;
		txtExperimentStopTime = new Text(layoutExperimentHistogram, SWT.READ_ONLY);
		txtExperimentStopTime.setFont(smallFont);
		txtExperimentStopTime.setText("0.000000000");
		txtExperimentStopTime.setBackground(parent.getDisplay().getSystemColor(SWT.COLOR_TITLE_INACTIVE_BACKGROUND));
		txtExperimentStopTime.setEditable(false);
		txtExperimentStopTime.setLayoutData(gridDataExperimentStop);
	}

