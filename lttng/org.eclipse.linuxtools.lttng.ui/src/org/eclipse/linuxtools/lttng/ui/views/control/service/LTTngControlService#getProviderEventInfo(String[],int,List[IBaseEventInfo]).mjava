    /**
     * Parses the event information within a provider. 
     * 
     * @param output - a command output array
     * @param currentIndex - current index in command output array
     * @param events - list for returning event information
     * @return the new current index in command output array
     */
    private int getProviderEventInfo(String[] output, int currentIndex, List<IBaseEventInfo> events) {
        int index = currentIndex;
        while (index < output.length) {
            String line = output[index];
            if (line.matches(PROVIDER_EVENT_PATTERN)) {
                // sched_kthread_stop (loglevel: TRACE_EMERG0) (type: tracepoint)
                Pattern pattern = Pattern.compile(PROVIDER_EVENT_PATTERN);

                Matcher matcher = pattern.matcher(line);

                if (matcher.matches()) {
                    IBaseEventInfo eventInfo = new BaseEventInfo(matcher.group(1).trim());
                    eventInfo.setLogLevel(matcher.group(2).trim());
                    eventInfo.setEventType(matcher.group(3).trim());
                    events.add(eventInfo);
                }
            } else if (line.matches(UST_PROVIDER_PATTERN)) {
                return index;
            }
            index++;
        }
        return index;
    }

