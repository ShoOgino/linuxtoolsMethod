    /*
     * (non-Javadoc)
     * @see org.eclipse.core.commands.AbstractHandler#execute(org.eclipse.core.commands.ExecutionEvent)
     */
    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        final IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();

        if (window == null) {
            return false;
        }

        TargetNodeComponent node = fSession.getTargetNode();
        List<ITraceControlComponent> providers = node.getChildren(TraceProviderGroup.class);
        
        final IEnableEventsDialog dialog = new EnableEventsDialog(window.getShell(), (TraceProviderGroup)providers.get(0), getDomain());
        
        if (dialog.open() != Window.OK) {
            return null;
        }

        Job job = new Job(Messages.TraceControl_ChangeEventStateJob) {
            @Override
            protected IStatus run(IProgressMonitor monitor) {
                String errorString = null;

                try {
                    // Enable tracepoint events
                    if (dialog.isTracepoints()) {
                        if (dialog.isAllTracePoints()) {
                            enableEvents(null, dialog.isKernel(), monitor);
                        } else {
                            List<String> eventNames = dialog.getEventNames();
                            if (eventNames.size() > 0) {
                                enableEvents(eventNames, dialog.isKernel(), monitor);
                            }
                        }
                    }

                    // Enable syscall events
                    if (dialog.isAllSysCalls()) {
                        if (dialog.isAllSysCalls()) {
                            enableSyscalls(monitor);
                        } 
                    }

                    // Enable dynamic probe
                    if (dialog.isDynamicProbe()) {
                        if ((dialog.getProbeEventName() != null && dialog.getProbeName() != null)) {
                            enableProbe(dialog.getProbeEventName(), dialog.getProbeName(), monitor);
                        } 
                    }

                    // Enable dynamic function probe
                    if (dialog.isDynamicFunctionProbe()) {
                        if ((dialog.getFunctionEventName() != null) && (dialog.getFunction() != null)) {
                            enableFunctionProbe(dialog.getFunctionEventName(), dialog.getFunction(), monitor);
                        } 
                    }

                    // Enable event using a wildcard
                    if (dialog.isWildcard()) {
                        List<String> eventNames = dialog.getEventNames();
                        eventNames.add(dialog.getWildcard());

                        if (eventNames.size() > 0) {
                            enableEvents(eventNames, dialog.isKernel(), monitor);
                        }
                    }
                    
                    // Enable events using log level
                    if (dialog.isLogLevel()) {
                        enableLogLevel(dialog.getLogLevelEventName(), dialog.getLogLevelType(), dialog.getLogLevel(), monitor);
                    }

                } catch (ExecutionException e) {
                    if (errorString == null) {
                        errorString = new String();
                    } 
                    errorString += e.toString() + "\n"; //$NON-NLS-1$
                }

                // get session configuration in all cases
                try {
                    fSession.getConfigurationFromNode(monitor);
                } catch (ExecutionException e) {
                    if (errorString == null) {
                        errorString = new String();
                    }
                    errorString += Messages.TraceControl_ListSessionFailure + ": " + e.toString();  //$NON-NLS-1$ 
                } 

                if (errorString != null) {
                    return new Status(Status.ERROR, LTTngUiPlugin.PLUGIN_ID, errorString);
                }
                return Status.OK_STATUS;
            }
        };
        job.setUser(true);
        job.schedule();

        return null;
    }

