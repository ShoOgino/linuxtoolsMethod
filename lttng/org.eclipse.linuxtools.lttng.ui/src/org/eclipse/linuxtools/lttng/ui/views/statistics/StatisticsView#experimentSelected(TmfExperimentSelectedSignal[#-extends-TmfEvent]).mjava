	/**
	 * @param signal
	 */
	@TmfSignalHandler
	public void experimentSelected(TmfExperimentSelectedSignal<? extends TmfEvent> signal) {
		if (signal != null) {
			TmfExperiment<?> experiment = signal.getExperiment();
			String experimentName =  experiment.getName();

			if (StatisticsTreeRootFactory.containsTreeRoot(experimentName)) {
				// The experiment root is already present
				StatisticsTreeNode experimentTreeNode = StatisticsTreeRootFactory.getStatTreeRoot(experimentName);

				@SuppressWarnings("rawtypes")
                ITmfTrace[] traces = experiment.getTraces();
				
				LTTngTreeNode expNode = StateManagerFactory.getExperimentManager().getSelectedExperiment();
				
				// check if there is partial data loaded in the experiment
				int numTraces = experiment.getTraces().length;
				int numNodeTraces = experimentTreeNode.getNbChildren();

				if (numTraces == numNodeTraces) {
					boolean same = true;
					// Detect if the experiment contains the same traces as when
					// previously selected
					for (int i = 0; i < numTraces; i++) {
						String traceName = traces[i].getName();
						LTTngTreeNode child = expNode.getChildByName(traceName);
						if ((child == null) || (!experimentTreeNode.containsChild(child.getId().intValue()))) {
							 same = false;
							 break;
						}
					}

					if (same) {
						treeViewer.setInput(experimentTreeNode);
						synchronized (fStatisticsUpdateSyncObj) {
							fStatisticsUpdateBusy = false;
							fStatisticsUpdatePending = false;
						}
						// request in case current data is incomplete
						requestData(experiment, experiment.getTimeRange(), false);
						return;
					}
				}
			}

			StatisticsTreeNode treeModelRoot = StatisticsTreeRootFactory.getStatTreeRoot(experiment.getName());

			// if the model has contents, clear to start over
			if (treeModelRoot.hasChildren()) {
				treeModelRoot.reset();
			}

			// set input to a clean data model
			treeViewer.setInput(treeModelRoot);

			synchronized (fStatisticsUpdateSyncObj) {
				fStatisticsUpdateBusy = false;
				fStatisticsUpdatePending = false;
			}

			// if the data is not available or has changed, reload it
			fClearData = true;
			if(fRequestData) {
			    requestData(experiment, experiment.getTimeRange(), fClearData);
			    fRequestData = false;
			}
		}
	}

