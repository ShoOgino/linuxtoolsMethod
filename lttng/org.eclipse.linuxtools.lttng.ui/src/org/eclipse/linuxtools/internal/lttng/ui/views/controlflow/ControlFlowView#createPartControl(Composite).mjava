	/**
	 * This is a callback that will allow us to create the viewer and initialize
	 * it.
	 */
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * org.eclipse.linuxtools.tmf.ui.views.TmfView#createPartControl(org.eclipse
	 * .swt.widgets.Composite)
	 */
	@Override
	public void createPartControl(Composite parent) {

		SashForm sash = new SashForm(parent, SWT.NONE);

		tableViewer = new TableViewer(sash, SWT.FULL_SELECTION | SWT.H_SCROLL);
		tableViewer.setContentProvider(new ViewContentProvider(tableViewer));
		tableViewer.setLabelProvider(new ViewLabelProvider());
		Table table = tableViewer.getTable();
		tableViewer.addSelectionChangedListener(new ISelectionChangedListener() {
			@Override
			public void selectionChanged(SelectionChangedEvent event) {
				ISelection sel = event.getSelection();
				if (!sel.isEmpty()) {
					Object firstSel = null;
					if (sel instanceof IStructuredSelection) {
						firstSel = ((IStructuredSelection) sel).getFirstElement();

						if (firstSel instanceof ITmfTimeAnalysisEntry) {
							ITmfTimeAnalysisEntry trace = (ITmfTimeAnalysisEntry) firstSel;
							tsfviewer.setSelectedTrace(trace);
							int selection = tsfviewer.getVerticalBar().getSelection();
							tableViewer.getTable().setTopIndex(selection);
						} else if (firstSel == FILLER) {
						    // filler element was selected, select the last item instead
						    Table table = tableViewer.getTable();
						    table.select(table.getItemCount() - 1 - numFillerRows); // subtract the filler elements
						    Object selectedItem = ((IStructuredSelection) tableViewer.getSelection()).getFirstElement();
						    if (selectedItem instanceof ITmfTimeAnalysisEntry) {
						        tsfviewer.setSelectedTrace((ITmfTimeAnalysisEntry) selectedItem);
						        int selection = tsfviewer.getVerticalBar().getSelection();
						        tableViewer.getTable().setTopIndex(selection);
						    }
						}
					}
				}
			}
		});

		table.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseScrolled(MouseEvent e) {
                ScrollBar scrollBar = tsfviewer.getVerticalBar();
                tsfviewer.setTopIndex(scrollBar.getSelection() - e.count);
                tableViewer.getTable().setTopIndex(scrollBar.getSelection());
            }});

		// Describe table
		applyTableLayout(table);

		int borderWidth = table.getBorderWidth();

		int itemHeight = table.getItemHeight() + getTableItemHeightAdjustement();
		int headerHeight = table.getHeaderHeight();
		table.getVerticalBar().setVisible(false);

		numFillerRows = Display.getDefault().getBounds().height / itemHeight;

		tsfviewer = TmfViewerFactory.createViewer(sash, new FlowTimeRangeViewerProvider(getParamsUpdater()));

		// Traces shall not be grouped to allow synchronisation
		tsfviewer.groupTraces(false);
		tsfviewer.setItemHeight(itemHeight);
		tsfviewer.setBorderWidth(borderWidth);
		tsfviewer.setHeaderHeight(headerHeight);
		// Names provided by the table
		tsfviewer.setNameWidthPref(0);
		tsfviewer.setAcceptSelectionAPIcalls(true);

		// Viewer to notify selection to this class
		// This class will synchronise selections with table.
		tsfviewer.addWidgetSelectionListner(this);
		tsfviewer.addFilterSelectionListner(this);
		tsfviewer.addWidgetTimeScaleSelectionListner(this);

		tsfviewer.getVerticalBar().addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                ScrollBar scrollBar = (ScrollBar) e.widget;
                int selection = scrollBar.getSelection();
                tableViewer.getTable().setTopIndex(selection);
            }});

        tsfviewer.getControl().addControlListener(new ControlAdapter(){
            @Override
            public void controlResized(ControlEvent e) {
                // ensure the viewers are aligned
                int selection = tsfviewer.getVerticalBar().getSelection();
                tableViewer.getTable().setTopIndex(selection);
            }});

		sash.setWeights(new int[] { 1, 1 });
		// Create the help context id for the viewer's control
		// TODO: Associate with help system
		PlatformUI.getWorkbench().getHelpSystem().setHelp(
				tableViewer.getControl(),
				"org.eclipse.linuxtools.lttnng.ui.views.flow.viewer"); //$NON-NLS-1$

		makeActions();
		hookContextMenu();
		contributeToActionBars();

		TmfExperiment<?> experiment = TmfExperiment.getCurrentExperiment();
		if (experiment != null) {
			TmfTimeRange experimentTRange = experiment.getTimeRange();

			if (experimentTRange != TmfTimeRange.NULL_RANGE) {
				// send request and received the adjusted time used
				TmfTimeRange adjustedTimeRange = initialExperimentDataRequest(this,
						experimentTRange);
	
				// initialize widget time boundaries and filtering parameters
				modelUpdateInit(experimentTRange, adjustedTimeRange, this);
			}
		} else {
			TraceDebug.debug("No selected experiment information available"); //$NON-NLS-1$
		}
	}

