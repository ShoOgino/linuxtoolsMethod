    /*
     * (non-Javadoc)
     * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
     */
    @Override
    public void run(IAction arg0) {
        ConfigureTraceWizard wizard = new ConfigureTraceWizard();
        wizard.init(SystemBasePlugin.getActiveWorkbenchWindow().getWorkbench(), fSelection);
        WizardDialog wDialog= new WizardDialog(getShell(), wizard);
        wDialog.open();
        if (wDialog.getReturnCode() != Window.OK) {
            return;
        }
        
        final TraceConfig result = wizard.getTraceConfig();

        if (result != null) {
//            try {

                // Update channel settings
                TraceChannels channels = result.getTraceChannels();

                for (Iterator<String> iterator = channels.keySet().iterator(); iterator.hasNext();) {
                    String chanName = (String) iterator.next();
                    TraceChannel chan = channels.get(chanName);

                    boolean doIt = false;

                    // If we channel settings have been updated send the relevant command to the agent
                    TraceChannel other = new TraceChannel(chan.getName());

                    if (fSelectedTrace.getTraceConfig() == null || fSelectedTrace.getTraceConfig().getTraceChannels() == null) {
                        // Do the update since channels haven't been configured previously (or we re-connected to the agent)  
                        doIt = true; 
                    } else if (fSelectedTrace.getTraceConfig() != null && fSelectedTrace.getTraceConfig().getTraceChannels() != null) {
                        // Channels has been configured previously, compare new settings with old. Do the update if necessary 
                        TraceChannel other2 = fSelectedTrace.getTraceConfig().getTraceChannels().get(chanName);
                        if (other2 != null) {
                            other = other2;
                        }

                        doIt = !(chan.equals(other));
                    }

                    // Please note that currently, the agent doesn't support the retrieval of channel settings. 
                    // Therefore, the current settings might not be known!

                    if (doIt) {
                        if (!fSelectedTrace.isUst()) {
                            // Update kernel tracing related parameters (not applicable for UST)

                            if (chan.isEnabledStatusKnown()) {
                                if(!other.isEnabledStatusKnown() || (chan.isEnabled() != other.isEnabled()) ) {
                                    setChannelEnable(chan.getName(), chan.isEnabled());
                                }
                            }

                            if (chan.isChannelOverrideStatusKnown()) {
                                if(!other.isChannelOverrideStatusKnown() || (chan.isChannelOverride() != other.isChannelOverride())) {
                                    setChannelOverwrite(chanName, chan.isChannelOverride());
                                }
                            }

                            if (chan.getSubbufNum() != other.getSubbufNum()) {
                                setChannelSubbufNum(chanName, chan.getSubbufNum());
                            }

                            if (chan.getSubbufSize() != other.getSubbufSize()) {
                                setChannelSubbufSize(chanName, chan.getSubbufSize());
                            }
                        }

                        if (chan.getTimer() != other.getTimer()) {
                            setChannelTimer(chanName, chan.getTimer());    
                        }
                    }
                }
                // Update state of trace
                if (fSelectedTrace.getTraceState() == TraceState.CREATED) {
                    fSelectedTrace.setTraceState(TraceState.CONFIGURED);
                }

                fSelectedTrace.setTraceConfig(result);

                ISystemRegistry registry = SystemStartHere.getSystemRegistry();
                registry.fireRemoteResourceChangeEvent(ISystemRemoteChangeEvents.SYSTEM_REMOTE_RESOURCE_CHANGED, fSelectedTrace, fSelectedTrace.getParent(), fSelectedTrace.getSubSystem(), null);

//            } catch (SystemMessageException e) {
//                SystemMessageException sysExp;
//                if (e instanceof SystemMessageException) {
//                    sysExp = (SystemMessageException)e;
//                } else {
//                    sysExp = new SystemMessageException(LTTngUiPlugin.getDefault().getMessage(e));    
//                }
//                
//                SystemBasePlugin.logError(Messages.Lttng_Control_ErrorConfigureTrace + " (" +  //$NON-NLS-1$
//                        Messages.Lttng_Resource_Trace + ": "  + fSelectedTrace.getName() + ")", sysExp); //$NON-NLS-1$ //$NON-NLS-2$
//            }
        }
    }

