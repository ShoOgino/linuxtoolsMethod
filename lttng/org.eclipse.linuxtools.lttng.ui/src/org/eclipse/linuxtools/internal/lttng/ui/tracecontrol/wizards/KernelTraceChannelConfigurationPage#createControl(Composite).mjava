    /*
     * (non-Javadoc)
     * @see org.eclipse.jface.dialogs.IDialogPage#createControl(org.eclipse.swt.widgets.Composite)
     */
    @Override
    public void createControl(Composite parent) {
        container = new Composite(parent, SWT.NULL);
        container.setLayout(new GridLayout());
        setControl(container);

        Composite headerComposite = new Composite(container, SWT.FILL);
        GridLayout headerLayout = new GridLayout(1, true);
        headerLayout.marginHeight = 0;
        headerLayout.marginWidth = 0;
        headerComposite.setLayout(headerLayout);
        headerComposite.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        
        tableViewer = new TableViewer(headerComposite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL | SWT.FULL_SELECTION );
        tableViewer.setUseHashlookup(true);
        
        Table table = tableViewer.getTable(); 
        table.setHeaderVisible(true);

        fColumnNames = new ArrayList<String>();
        for (int i = 0; i < columnDataList.length; i++) {

            final ColumnData columnData = columnDataList[i];
            fColumnNames.add(columnData.header);
            final TableColumn tableColumn = new TableColumn(table, SWT.LEFT);
            tableColumn.setText(columnData.header);
            tableColumn.setWidth(columnData.width);
            tableColumn.setAlignment(columnData.alignment);
            tableColumn.setToolTipText(columnData.tooltip);
            tableColumn.setMoveable(false);
            if (columnData.comparator != null) {
                tableColumn.addSelectionListener(new SelectionAdapter() {
                    @Override
                    public void widgetSelected(SelectionEvent e) {
                        if (tableViewer.getTable().getSortDirection() == SWT.UP || (tableViewer.getTable().getSortColumn() != tableColumn)) {
                            tableViewer.setComparator(columnData.comparator);
                            tableViewer.getTable().setSortDirection(SWT.DOWN);
                        } else {
                            tableViewer.setComparator(new ViewerComparator() {
                                @Override
                                public int compare(Viewer viewer,Object e1, Object e2) {
                                    return -1 * columnData.comparator.compare(viewer, e1,e2);
                                }
                            });
                            tableViewer.getTable().setSortDirection(SWT.UP);
                        }
                        tableViewer.getTable().setSortColumn(tableColumn);
                    }
                });
            }
        }

        tableViewer.setColumnProperties(fColumnNames.toArray(new String[0]));
        
        // Create the cell editors
        CellEditor[] editors = new CellEditor[columnDataList.length];

        // Column 1 : Completed (Checkbox)
        TextCellEditor textEditor = new TextCellEditor(table);
        editors[0] = textEditor;

        // Column 2 : Description (Free text)
        editors[1] = new CheckboxCellEditor(table);

        // Column 3 : Owner (Combo Box) 
        editors[2] = new CheckboxCellEditor(table);

        // Column 4 : Percent complete (Text with digits only)
         textEditor = new TextCellEditor(table);
        ((Text) textEditor.getControl()).addVerifyListener(
        
            new VerifyListener() {
                
                @Override
                public void verifyText(VerifyEvent e) {
                    e.doit = e.text.matches("[0-9]*"); //$NON-NLS-1$
                }
            });
        editors[3] = textEditor;

        textEditor = new TextCellEditor(table);
        ((Text) textEditor.getControl()).addVerifyListener(
        
            new VerifyListener() {
                
                @Override
                public void verifyText(VerifyEvent e) {
                    e.doit = e.text.matches("[0-9]*"); //$NON-NLS-1$
                }
            });
        editors[4] = textEditor;
        
        textEditor = new TextCellEditor(table);
        ((Text) textEditor.getControl()).addVerifyListener(
        
            new VerifyListener() {
                
                @Override
                public void verifyText(VerifyEvent e) {
                    e.doit = e.text.matches("[0-9]*"); //$NON-NLS-1$
                }
            });
        editors[5] = textEditor;

        // Assign the cell editors to the viewer 
        tableViewer.setCellEditors(editors);
        tableViewer.setCellModifier(new TraceChannelCellModifier(this));

        tableViewer.setContentProvider(new TraceChannelTableContentProvider());
        tableViewer.setLabelProvider(new TraceChannelTableLabelProvider());
        
        table.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));

        makeActions();
        addContextMenu();
    }

