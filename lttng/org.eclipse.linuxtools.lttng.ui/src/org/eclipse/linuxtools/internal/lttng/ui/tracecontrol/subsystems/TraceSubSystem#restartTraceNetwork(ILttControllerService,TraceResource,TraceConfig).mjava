    /*
     * Stop and restart the network transfer. Only normal channels are written while trace is started.  
     */
    private void restartTraceNetwork(final ILttControllerService service, final TraceResource trace, final TraceConfig traceConfig) throws Exception {
        File newDir = new File(traceConfig.getTracePath());
        if (!newDir.exists()) {
            boolean created = newDir.mkdirs();
            if (!created) {
                throw new Exception(Messages.Lttng_Control_ErrorCreateTracePath + ": " + traceConfig.getTracePath()); //$NON-NLS-1$
            }
            if (traceConfig.getProject() != null) {
                ImportToProject.linkTrace(getShell(), trace, traceConfig.getProject(), traceConfig.getTraceName());
            }
        }

        // stop the previous lttd
        boolean ok = new TCFTask<Boolean>() {
            @Override
            public void run() {

                // Setup trace transport using Lttng controller service proxy
                service.stopWriteTraceNetwork(trace.getParent().getParent().getName(), 
                        trace.getParent().getName(), 
                        traceConfig.getTraceName(), 
                        new ILttControllerService.DoneStopWriteTraceNetwork() {

                    @Override
                    public void doneStopWriteTraceNetwork(IToken token, Exception error, Object str) {
                        if (error != null) {
                            // Notify with error
                            error(error);
                            return;
                        }

                        // Notify about success
                        done(true);
                    }
                });
            }}.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT, TimeUnit.SECONDS);

        if (!ok) {
            return;
        }

        // lttd will only perform the shutdown after stopWriteTraceNetwork
        // when it receives the next on_read_subbuffer callback

        if (trace.getTraceState() == TraceState.PAUSED) {
            // we need to start the trace to make sure that the network transfer is stopped
            ok = new TCFTask<Boolean>() {
                @Override
                public void run() {

                    // Start the trace
                    service.startTrace(trace.getParent().getParent().getName(), 
                            trace.getParent().getName(), 
                            traceConfig.getTraceName(), 
                            new ILttControllerService.DoneStartTrace() {

                        @Override
                        public void doneStartTrace(IToken token, Exception error, Object str) {
                            if (error != null) {
                                // Notify with error
                                error(error);
                                return;
                            }

                            // Notify about success
                            done(true);
                        }
                    });
                }}.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT, TimeUnit.SECONDS);

            if (!ok) {
                return;
            }

            trace.setTraceState(TraceState.STARTED);

            // wait for the lttd shutdown
            Thread.sleep(1000);

            // return to paused state
            ok = new TCFTask<Boolean>() {
                @Override
                public void run() {

                    // Pause the trace
                    service.pauseTrace(trace.getParent().getParent().getName(), 
                            trace.getParent().getName(), 
                            traceConfig.getTraceName(), 
                            new ILttControllerService.DonePauseTrace() {

                        @Override
                        public void donePauseTrace(IToken token, Exception error, Object str) {
                            if (error != null) {
                                // Notify with error
                                error(error);
                                return;
                            }

                            // Notify about success
                            done(true);
                        }
                    });
                }}.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT, TimeUnit.SECONDS);

            if (!ok) {
                return;
            }

            trace.setTraceState(TraceState.PAUSED);

        } else {
            // wait for the lttd shutdown
            Thread.sleep(1000);
        }

        // start a new lttd
        new TCFTask<Boolean>() {
            @Override
            public void run() {

                // Setup trace transport using Lttng controller service proxy
                service.writeTraceNetwork(trace.getParent().getParent().getName(), 
                        trace.getParent().getName(), 
                        traceConfig.getTraceName(), 
                        traceConfig.getTracePath(), 
                        traceConfig.getNumChannel(), 
                        traceConfig.getIsAppend(), 
                        false, 
                        true, // write only normal channels 
                        new ILttControllerService.DoneWriteTraceNetwork() {

                    @Override
                    public void doneWriteTraceNetwork(IToken token, Exception error, Object str) {
                        if (error != null) {
                            // Notify with error
                            error(error);
                            return;
                        }

                        // Notify about success
                        done(true);
                    }
                });
            }}.get(TraceControlConstants.DEFAULT_TCF_TASK_TIMEOUT, TimeUnit.SECONDS);
    }

