    /*
     * (non-Javadoc)
     * @see org.eclipse.linuxtools.lttng.ui.views.latency.model.IGraphDataModel#scaleTo(int, int, int)
     */
    @Override
    public GraphScaledData scaleTo(int width, int height, int barWidth) {
        GraphScaledData scaledData = new GraphScaledData(width, height, barWidth);
        fLock.lock();
        try {
            if (!fHorDistributionData.isFirst() && !fVerDistributionData.isFirst() ) {

                // Basic validation
                if (width <= 0 ||  height <= 0 || barWidth <= 0)
                    throw new AssertionError("Invalid histogram dimensions (" + width + "x" + height + ", barWidth=" + barWidth + ")");   //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$//$NON-NLS-4$

                // Scale horizontally
                int nbBars = width / barWidth;
                int bucketsPerBar = fHorDistributionData.getLastBucket() / nbBars + 1;

                int horData[][] = new int[nbBars][fNbBuckets];  
                for (int y = 0; y < fNbBuckets; y++) {
                    for (int i = 0; i < nbBars; i++) {
                        int count = 0;
                        for (int j = i * bucketsPerBar; j < (i + 1) * bucketsPerBar; j++) {
                            if (fNbBuckets <= j)
                                break;
                            count += fBuckets[j][y];
                        }
                        horData[i][y] = count;
                    }
                }

                // Scale vertically
                int nbVerBars = height / barWidth;
                int bucketsPerVerBar = fVerDistributionData.getLastBucket() / nbVerBars + 1;

                int verData[][] = new int[nbBars][nbVerBars];  
                for (int x = 0; x < nbBars; x++) {
                    for (int i = 0; i < nbVerBars; i++) {
                        int count = 0;
                        for (int j = i * bucketsPerVerBar; j < (i + 1) * bucketsPerVerBar; j++) {
                            if (fNbBuckets <= j)
                                break;
                            count += horData[x][j];
                        }
                        verData[x][i] = count;
                    }
                }

                scaledData.setData(verData);
                scaledData.setHorFirstBucketTime(fHorDistributionData.getFirstBucketTime());
                scaledData.setVerFirstBucketTime(fVerDistributionData.getFirstBucketTime());
                scaledData.setHorFirstEventTime(fHorDistributionData.getFirstEventTime());
                scaledData.setVerFirstEventTime(fVerDistributionData.getFirstEventTime());
                scaledData.setHorLastEventTime(fHorDistributionData.getLastEventTime());
                scaledData.setVerLastEventTime(fVerDistributionData.getLastEventTime());
                scaledData.setHorBucketDuration(bucketsPerBar * fHorDistributionData.getBucketDuration());
                scaledData.setVerBucketDuration(bucketsPerVerBar * fVerDistributionData.getBucketDuration());
                scaledData.setHorLastBucket(fHorDistributionData.getLastBucket() / bucketsPerBar);
                scaledData.setVerLastBucket(fVerDistributionData.getLastBucket() / bucketsPerVerBar);
                scaledData.setCurrentEventTime(fCurrentEventTime);
            }
        } finally {
            fLock.unlock();
        }

        return scaledData;
    }

