    /*
     * (non-Javadoc)
     * 
     * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)
     */
    @Override
    public void run(IAction action) {
        Shell shell = getShell();
        final TargetResource targetResource = getFirstSelectedTarget();
        TraceSubSystem subSystem = (TraceSubSystem) targetResource.getSubSystem();
        NewTraceDialog dialog = new NewTraceDialog(shell, subSystem, targetResource);

        final TraceConfig traceConfig = dialog.open();

        if (traceConfig == null) {
            return;
        }

        try {
            final ILttControllerService service = subSystem.getControllerService();

            TraceResource trace = new TraceResource(targetResource.getSubSystem(), service);
            trace.setName(traceConfig.getTraceName());
            trace.setParent(targetResource);
            trace.setTraceConfig(traceConfig);

            if (targetResource.isUst()) {
                boolean ok = setupUstLocation(service, targetResource, traceConfig);
                if (!ok) {
                    return;
                }
            }

            trace.setupTrace();

            if (!targetResource.isUst()) {

                // Enable all channels by default
                trace.setChannelEnable(TraceControlConstants.Lttng_Control_AllChannels, true);

                // Set overwrite mode for all channels according to user
                // selection (true for flight recorder, false for normal)
                trace.setChannelOverwrite(TraceControlConstants.Lttng_Control_AllChannels, traceConfig.getMode() == TraceConfig.FLIGHT_RECORDER_MODE);

                // Set channel timer for all channels
                final long period = 1000;
                trace.setChannelTimer(TraceControlConstants.Lttng_Control_AllChannels, period);

                // Set subbuffer size for all channels
                final long subbufSize = 16384;
                trace.setChannelSubbufSize(TraceControlConstants.Lttng_Control_AllChannels, subbufSize);

                // Set number of subbuffers for all channels
                final long subbufNum = 2;
                trace.setChannelSubbufNum(TraceControlConstants.Lttng_Control_AllChannels, subbufNum);
            }

            if (traceConfig.isNetworkTrace()) {

                File newDir = new File(traceConfig.getTracePath());
                if (!newDir.exists()) {
                    boolean created = newDir.mkdirs();
                    if (!created) {
                        throw new Exception(Messages.Lttng_Control_ErrorCreateTracePath + ": " + traceConfig.getTracePath()); //$NON-NLS-1$
                    }
                }
            }

            if (trace.isUst()) {
                // in UST the tracing is started after setupTrace!!
                trace.setTraceState(TraceState.STARTED);
            } else {
                trace.setTraceState(TraceState.CONFIGURED);
            }

            targetResource.addTrace(trace);

            ISystemRegistry registry = SystemStartHere.getSystemRegistry();
            registry.fireRemoteResourceChangeEvent(ISystemRemoteChangeEvents.SYSTEM_REMOTE_RESOURCE_CREATED, trace, targetResource, subSystem, null);

        } catch (Exception e) {
            SystemMessageException sysExp;
            if (e instanceof SystemMessageException) {
                sysExp = (SystemMessageException) e;
            } else {
                sysExp = new SystemMessageException(Activator.getDefault().getMessage(e));
            }
            SystemBasePlugin.logError(Messages.Lttng_Control_ErrorNewTrace + " (" + //$NON-NLS-1$
                    Messages.Lttng_Resource_Trace + ": " + traceConfig.getTraceName() + ")", sysExp); //$NON-NLS-1$ //$NON-NLS-2$

            return;
        }

    }

