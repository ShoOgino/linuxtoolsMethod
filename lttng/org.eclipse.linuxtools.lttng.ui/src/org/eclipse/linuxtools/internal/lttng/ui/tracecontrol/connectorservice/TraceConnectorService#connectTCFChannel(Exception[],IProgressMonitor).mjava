    /*
     * Connect the TCF channel.
     */
    private boolean connectTCFChannel(Exception[] res, IProgressMonitor monitor) {
        if (fChannel != null) {
            switch (fChannel.getState()) {
            case IChannel.STATE_OPEN:
            case IChannel.STATE_CLOSED:
                synchronized (res) {
                    if (fChannelError instanceof Exception) {
                        res[0] = (Exception) fChannelError;
                    }
                    else if (fChannelError != null) {
                        res[0] = new Exception(fChannelError);
                    }
                    else {
                        res[0] = null;
                    }
                    res.notifyAll();
                    return true;
                }
                default:
            }
        }
        if (monitor.isCanceled()) {
            synchronized (res) {
                res[0] = new Exception(Messages.Trace_Connector_Service_Canceled_Msg); 
                if (fChannel != null) {
                    fChannel.terminate(res[0]);
                }
                res.notifyAll();
                return true;
            }
        }
        if (fChannel == null) {
            String host = getHostName().toLowerCase();
            int port = getConnectPort();
            if (port <= 0) {
                // Default fallback
                port = TraceConnectorServiceManager.TCF_PORT;
            }
            IPeer peer = null;
            String port_str = Integer.toString(port);
            ILocator locator = Protocol.getLocator();
            for (IPeer p : locator.getPeers().values()) {
                Map<String, String> attrs = p.getAttributes();
                if ("TCP".equals(attrs.get(IPeer.ATTR_TRANSPORT_NAME)) &&  //$NON-NLS-1$
                        host.equalsIgnoreCase(attrs.get(IPeer.ATTR_IP_HOST)) && port_str.equals(attrs.get(IPeer.ATTR_IP_PORT))) {
                    peer = p;
                    break;
                }
            }
            if (peer == null) {
                Map<String, String> attrs = new HashMap<String, String>();
                attrs.put(IPeer.ATTR_ID, "RSE:" + host + ":" + port_str);  //$NON-NLS-1$ //$NON-NLS-2$
                attrs.put(IPeer.ATTR_NAME, getName());
                attrs.put(IPeer.ATTR_TRANSPORT_NAME, "TCP");  //$NON-NLS-1$
                attrs.put(IPeer.ATTR_IP_HOST, host);
                attrs.put(IPeer.ATTR_IP_PORT, port_str);
                peer = new AbstractPeer(attrs);
            }
            fChannel = peer.openChannel();
            fChannel.addChannelListener(new IChannel.IChannelListener() {
                @Override
                public void onChannelOpened() {
                    assert fChannel != null;

                    // Check if remote server provides LTTng service
                    if (fChannel.getRemoteService(ILttControllerService.NAME) == null) {
                        return;
                    }
                    // Create service proxy, passing the fChannel to the proxy
                    ILttControllerService controllerService = new LttControllerServiceProxy(fChannel);

                    fChannel.setServiceProxy(ILttControllerService.class, controllerService);

                    ISubSystem[] subSystems = getSubSystems();

                    for (int i = 0; i < subSystems.length; i++) {
                        if (subSystems[i] instanceof TraceSubSystem) {
                            // There is only one trace subsystem per trace connector service 
                            fDownloadProxy = new DownloadProxy((TraceSubSystem)subSystems[i]);
                        }
                    }

                    final IChannel.IEventListener listener = new IChannel.IEventListener() {

                        @Override
                        public void event(String name, byte[] data) {
                            if (fDownloadProxy != null) {
                                if (name.compareTo(TraceControlConstants.Lttng_Control_New_Event_Data) == 0) {
                                    fDownloadProxy.writeDownloadedTrace(data);
                                    }
                                else if (name.compareTo(TraceControlConstants.Lttng_Control_Unwrite_Trace_Data_Event) == 0) {
                                        // only for UST
                                        // TODO implement handling
                                    }
                                else if (name.compareTo(TraceControlConstants.Lttng_Control_Trace_Done_Event) == 0) {
                                    // finished 
                                    fDownloadProxy.handleTraceDoneEvent(data);
                                } else {
                                    try {
                                        throw new IOException(LttngConstants.Lttng_Control_Command + ": " + Messages.Lttng_Control_Unknown_Event_Msg + ": " + name);  //$NON-NLS-1$ //$NON-NLS-2$  
                                    } catch (IOException e) {
                                        SystemBasePlugin.logError("TraceConnectorService", e); //$NON-NLS-1$
                                    }
                                }
                            }
                        }
                    };
                    fChannel.addEventListener(controllerService, listener);
                    run_wait_list();
                }

                @Override
                public void congestionLevel(int level) {
                }

                @Override
                public void onChannelClosed(Throwable error) {
                    assert fChannel != null;
                    fChannel.removeChannelListener(this);
                    fChannelError = error;
                    if (fWaitList.isEmpty()) {
                        fireCommunicationsEvent(CommunicationsEvent.CONNECTION_ERROR);
                    } else {
                        run_wait_list();
                    }
                    fChannel = null;
                    fChannelError = null;
                }

            });

            assert fChannel.getState() == IChannel.STATE_OPENING;
        }
        return false;
    }

