    /**
     * Constructor of the Ethernet Packet class.
     *
     * @param file
     *            The file that contains this packet.
     * @param parent
     *            The parent packet of this packet (the encapsulating packet).
     * @param packet
     *            The entire packet (header and payload).
     * @throws BadPacketException
     *             Thrown when the packet is erroneous.
     */
    public EthernetIIPacket(PcapFile file, @Nullable Packet parent, ByteBuffer packet) throws BadPacketException {
        super(file, parent, Protocol.ETHERNET_II);

        if (packet.array().length <= EthernetIIValues.ETHERNET_II_MIN_SIZE) {
            throw new BadPacketException("An Ethernet II packet can't be smaller than 14 bytes."); //$NON-NLS-1$
        }

        // The endpoints are lazy loaded. They are defined in the get*Endpoint()
        // methods.
        fSourceEndpoint = null;
        fDestinationEndpoint = null;

        fFields = null;

        fDestinationMacAddress = new byte[EthernetIIValues.MAC_ADDRESS_SIZE];
        fSourceMacAddress = new byte[EthernetIIValues.MAC_ADDRESS_SIZE];
        packet.order(ByteOrder.BIG_ENDIAN);
        packet.position(0);
        packet.get(fDestinationMacAddress);
        packet.get(fSourceMacAddress);
        fType = ConversionHelper.unsignedShortToInt(packet.getShort());

        // Get payload if it exists.
        if (packet.array().length - packet.position() > 0) {
            byte[] array = new byte[packet.array().length - packet.position()];
            packet.get(array);
            ByteBuffer payload = ByteBuffer.wrap(array);
            if (payload != null) {
                payload.order(ByteOrder.BIG_ENDIAN);
                payload.position(0);
            }
            fPayload = payload;

        } else {
            fPayload = null;
        }

        // Find child
        fChildPacket = findChildPacket();

    }

