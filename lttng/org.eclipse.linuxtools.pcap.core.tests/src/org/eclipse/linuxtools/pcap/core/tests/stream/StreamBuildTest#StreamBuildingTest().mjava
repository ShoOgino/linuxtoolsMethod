    /**
     * Test that verify that stream building is done correctly.
     */
    @Test
    public void StreamBuildingTest() {
        PcapTestTrace trace = PcapTestTrace.MOSTLY_TCP;
        assumeTrue(trace.exists());

        try {
            String file = trace.getPath();
            // Test Ethernet II stream
            PacketStreamBuilder builder = new PacketStreamBuilder(Protocol.ETHERNET_II);
            builder.parsePcapFile(file);
            assertEquals(Protocol.ETHERNET_II, builder.getProtocol());
            // Should do one loop only, so hardcoded values are okay.
            for (PacketStream stream : builder.getStreams()) {
                assertTrue(stream.toString().contains("Stream eth.0, Number of Packets: 43"));
                for (int i = 0; i < stream.size(); i++) {
                    Long id = stream.get(i).getIndex();
                    String path = stream.get(i).getPath();
                    assertTrue(id >= 0 && id < 43);
                    assertEquals(file, path);
                }
            }

            // Test TCP streams and other constructor
            builder = new PacketStreamBuilder(Protocol.TCP);
            builder.parsePcapFile(file);
            assertEquals(Protocol.TCP, builder.getProtocol());

            PacketStream stream = builder.getStream(0);
            if (stream == null) {
                fail("StreamBuildingTest has failed!");
                return;
            }
            assertEquals(Protocol.TCP, stream.getProtocol());
            assertEquals(0, stream.getID());
            assertEquals("tcp.0", stream.getUniqueID());
            assertEquals(34, stream.size());
            for (int i = 0; i < stream.size(); i++) {
                Long id = stream.get(i).getIndex();
                String path = stream.get(i).getPath();
                assertTrue(TCP_INDEX_SET_STREAM_34_PACKETS.contains(id));
                assertEquals(file, path);
            }

            stream = builder.getStream(1);
            if (stream == null) {
                fail("StreamBuildingTest has failed!");
                return;
            }
            assertEquals(Protocol.TCP, stream.getProtocol());
            assertEquals(1, stream.getID());
            assertEquals("tcp.1", stream.getUniqueID());
            assertEquals(7, stream.size());
            for (int i = 0; i < stream.size(); i++) {
                Long id = stream.get(i).getIndex();
                String path = stream.get(i).getPath();
                assertTrue(TCP_INDEX_SET_STREAM_7_PACKETS.contains(id));
                assertEquals(file, path);
            }

            builder.clear();
            assertEquals(0, builder.getNbStreams());
        } catch (IOException | BadPcapFileException e) {
            fail("StreamBuildingTest has failed!");
        }

    }

