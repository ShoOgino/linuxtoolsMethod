    /* (non-Javadoc)
     * @see org.eclipse.linuxtools.tmf.ui.views.TmfView#createPartControl(org.eclipse.swt.widgets.Composite)
     */
    @Override
    public void createPartControl(Composite parent) {
        fTimeGraphCombo = new TimeGraphCombo(parent, SWT.NONE);

        fTimeGraphCombo.setTreeContentProvider(new TreeContentProvider());

        fTimeGraphCombo.setTreeLabelProvider(new TreeLabelProvider());

        fTimeGraphCombo.setTimeGraphProvider(new TimeGraphPresentationProvider() {
            private static final String UNKNOWN = "UNKNOWN"; //$NON-NLS-1$
            private static final String WAIT = "WAIT"; //$NON-NLS-1$
            private static final String USERMODE = "USERMODE"; //$NON-NLS-1$
            private static final String SYSCALL = "SYSCALL"; //$NON-NLS-1$
            private static final String INTERRUPTED = "INTERRUPTED"; //$NON-NLS-1$

            @Override 
            public String getStateTypeName() {
                return Messages.ControlFlowView_stateTypeName;
            }
            
            @Override
            public StateItem[] getStateTable() {
                return new StateItem[] {
                        new StateItem(new RGB(100, 100, 100), UNKNOWN),
                        new StateItem(new RGB(150, 150, 0), WAIT),
                        new StateItem(new RGB(0, 200, 0), USERMODE),
                        new StateItem(new RGB(0, 0, 200), SYSCALL),
                        new StateItem(new RGB(200, 100, 100), INTERRUPTED)
                };
            }

            @Override
            public int getEventTableIndex(ITimeEvent event) {
                if (event instanceof ControlFlowEvent) {
                    int status = ((ControlFlowEvent) event).getStatus();
                    if (status == Attributes.STATUS_WAIT) {
                        return 1;
                    } else if (status == Attributes.STATUS_RUN_USERMODE) {
                        return 2;
                    } else if (status == Attributes.STATUS_RUN_SYSCALL) {
                        return 3;
                    } else if (status == Attributes.STATUS_INTERRUPTED) {
                        return 4;
                    }
                }
                return 0;
            }

            @Override
            public String getEventName(ITimeEvent event) {
                if (event instanceof ControlFlowEvent) {
                    int status = ((ControlFlowEvent) event).getStatus();
                    if (status == Attributes.STATUS_WAIT) {
                        return WAIT;
                    } else if (status == Attributes.STATUS_RUN_USERMODE) {
                        return USERMODE;
                    } else if (status == Attributes.STATUS_RUN_SYSCALL) {
                        return SYSCALL;
                    } else if (status == Attributes.STATUS_INTERRUPTED) {
                        return INTERRUPTED;
                    }
                }
                return UNKNOWN;
            }
            
            @Override
            public Map<String, String> getEventHoverToolTipInfo(ITimeEvent event) {
                Map<String, String> retMap = new HashMap<String, String>();
                if (event instanceof ControlFlowEvent) {
                    int status = ((ControlFlowEvent) event).getStatus();
                    if (status == Attributes.STATUS_RUN_SYSCALL) {
                        ControlFlowEntry entry = (ControlFlowEntry) event.getEntry();
                        IStateSystemQuerier ssq = entry.getTrace().getStateSystem();
                        try {
                            int syscallQuark = ssq.getQuarkRelative(entry.getThreadQuark(), Attributes.SYSTEM_CALL);
                            ITmfStateInterval value = ssq.querySingleState(event.getTime(), syscallQuark);
                            if (!value.getStateValue().isNull()) {
                                ITmfStateValue state = value.getStateValue();
                                retMap.put(Messages.ControlFlowView_attributeSyscallName, state.toString());
                            }
                            
                        } catch (AttributeNotFoundException e) {
                            e.printStackTrace();
                        } catch (TimeRangeException e) {
                            e.printStackTrace();
                        }
//                        List<ITmfStateInterval> statusIntervals = ssq.queryHistoryRange(statusQuark, startTime, endTime - 1, resolution);
                    } 
                }
                
                return retMap;
            }
        });

        fTimeGraphCombo.setTreeColumns(COLUMN_NAMES);

        fTimeGraphCombo.getTimeGraphViewer().addRangeListener(new ITimeGraphRangeListener() {
            @Override
            public void timeRangeUpdated(TimeGraphRangeUpdateEvent event) {
                final long startTime = event.getStartTime();
                final long endTime = event.getEndTime();
                TmfTimeRange range = new TmfTimeRange(new CtfTmfTimestamp(startTime), new CtfTmfTimestamp(endTime));
                TmfTimestamp time = new CtfTmfTimestamp(fTimeGraphCombo.getTimeGraphViewer().getSelectedTime());
                broadcast(new TmfRangeSynchSignal(ControlFlowView.this, range, time));
                if (fZoomThread != null) {
                    fZoomThread.cancel();
                }
                startZoomThread(startTime, endTime);
            }
        });

        fTimeGraphCombo.getTimeGraphViewer().addTimeListener(new ITimeGraphTimeListener() {
            @Override
            public void timeSelected(TimeGraphTimeEvent event) {
                long time = event.getTime();
                broadcast(new TmfTimeSynchSignal(ControlFlowView.this, new CtfTmfTimestamp(time)));
            }
        });

        fTimeGraphCombo.addSelectionListener(new ITimeGraphSelectionListener() {
            @Override
            public void selectionChanged(TimeGraphSelectionEvent event) {
                //ITimeGraphEntry selection = event.getSelection();
            }
        });

        fTimeGraphCombo.getTimeGraphViewer().setTimeCalendarFormat(true);

        final Thread thread = new Thread("ControlFlowView build") { //$NON-NLS-1$
            @Override
            public void run() {
                if (TmfExperiment.getCurrentExperiment() != null) {
                    selectExperiment(TmfExperiment.getCurrentExperiment());
                }
            }
        };
        thread.start();
        
        // View Action Handling
        makeActions();
        contributeToActionBars();
    }

