    /**
     * Processes an event received: if it is identified as a response, try to get its request to remove it from the
     * list. If no request was saved, dismiss the current response. If it is a request, save it to the list of requests
     * waiting for a response.
     * @param event
     *            The event to identify, and maybe process if it is a response.
     * @return The request event associated with the current event (a response), or null if nothing was found (no
     *         request associated with this response, or the event to identify was a request that was added to the
     *         list).
     */
    public LttngEvent process(ITmfEvent ev) {
        LttngEvent event = (LttngEvent) ev;
        fProcessedEvents++;

        String markerName = event.getMarkerName();
        if (fMatch.containsKey(markerName)) {
            String startEventType = fMatch.get(markerName);
            Stack<LttngEvent> events = fStack.getStackOf(startEventType);

            if (events != null) {
                for (int i = events.size() - 1; i >= 0; i--) {
                    LttngEvent request = events.get(i);

                    if (request.getCpuId() == event.getCpuId() && event.getTimestamp().getValue() > request.getTimestamp().getValue()) {
                        fStack.removeEvent(startEventType, request);
                        fMatchedEvents++;
                        return request;
                    }
                }
            }
            return null;
        } else {
            // Add only if there can later be a match for this request
            if (fMatch.containsValue(event.getMarkerName())) {
                fStack.put(event.clone());
            }
            return null;
        }
    }

