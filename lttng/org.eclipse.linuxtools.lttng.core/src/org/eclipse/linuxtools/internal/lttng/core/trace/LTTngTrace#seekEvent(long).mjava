    /**
     * Position the trace to the event at the given position (rank).
     * <p>
     * NOTE : Seeking by position is very slow in LTTng, consider seeking by
     * timestamp.
     * 
     * @param rank Position (or rank) of the event in the trace, starting at 0.
     * 
     * @return The TmfContext that point to this event
     * 
     * @see org.eclipse.linuxtools.internal.lttng.core.event.LttngLocation
     * @see org.eclipse.linuxtools.tmf.core.trace.TmfContext
     */
    @Override
    public synchronized TmfContext seekEvent(final long rank) {

        if (PRINT_DEBUG)
            System.out.println("seekEvent(rank) rank -> " + rank); //$NON-NLS-1$

        ITmfTimestamp timestamp = null;
        long index = rank / getCacheSize();

        // Get the timestamp of the closest check point to the given position
        if (fCheckpoints.size() > 0) {
            if (index >= fCheckpoints.size())
                index = fCheckpoints.size() - 1;
            timestamp = fCheckpoints.elementAt((int) index).getTimestamp();
        } else
            timestamp = getStartTime();

        // Seek to the found time
        final TmfContext tmpContext = seekEvent(timestamp);
        tmpContext.setRank((index + 1) * fCacheSize);
        previousLocation = (LttngLocation) tmpContext.getLocation();

        // Ajust the index of the event we found at this check point position
        Long currentPosition = index * getCacheSize();

        Long lastTimeValueRead = 0L;

        // Get the event at current position. This won't move to the next one
        JniEvent tmpJniEvent = currentJniTrace.findNextEvent();
        // Now that we are positionned at the checkpoint,
        // we need to "readNext" (Position - CheckpointPosition) times or until
        // trace "run out"
        while ((tmpJniEvent != null) && (currentPosition < rank)) {
            tmpJniEvent = currentJniTrace.readNextEvent();
            currentPosition++;
        }

        // If we found our event, save its timestamp
        if (tmpJniEvent != null)
            lastTimeValueRead = tmpJniEvent.getEventTime().getTime();

        // Set the operation marker as seek, to be able to detect we did "seek"
        // this event
        previousLocation.setLastOperationSeek();
        // Save read event time
        previousLocation.setOperationTime(lastTimeValueRead);

        // *** VERIFY ***
        // Is that too paranoid?
        //
        // We don't trust what upper level could do with our internal location
        // so we create a new one to return instead
        final LttngLocation curLocation = new LttngLocation(previousLocation);

        return new TmfContext(curLocation, rank);
    }

