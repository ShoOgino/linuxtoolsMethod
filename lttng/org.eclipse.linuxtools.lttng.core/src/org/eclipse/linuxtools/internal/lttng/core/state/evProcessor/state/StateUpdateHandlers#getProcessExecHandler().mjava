	/**
	 * <p>
	 * Handles: LTT_EVENT_EXEC
	 * </p>
	 * <p>
	 * FIELDS: LTT_FIELD_FILENAME
	 * </p>
	 * 
	 * @return
	 */
	final ILttngEventProcessor getProcessExecHandler() {
		AbsStateUpdate handler = new AbsStateUpdate() {

			// @Override
			@Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {

				Long cpu = trcEvent.getCpuId();
				LttngProcessState process = traceSt.getRunning_process().get(
						cpu);

				// #if 0//how to use a sequence that must be transformed in a
				// string
				// /* PID of the process to release */
				// guint64 name_len = ltt_event_field_element_number(e,
				// lttv_trace_get_hook_field(th, 0));
				// //name = ltt_event_get_string(e,
				// lttv_trace_get_hook_field(th, 0));
				// LttField *child = ltt_event_field_element_select(e,
				// lttv_trace_get_hook_field(th, 0), 0);
				// gchar *name_begin =
				// (gchar*)(ltt_event_data(e)+ltt_event_field_offset(e, child));
				// gchar *null_term_name = g_new(gchar, name_len+1);
				// memcpy(null_term_name, name_begin, name_len);
				// null_term_name[name_len] = '\0';
				// process->name = g_quark_from_string(null_term_name);
				// #endif //0

				process.setName(getAFieldString(trcEvent, traceSt,
						Fields.LTT_FIELD_FILENAME));
				process.setBrand(StateStrings.LTTV_STATE_UNBRANDED);
				return false;

			}
		};
		return handler;
	}

