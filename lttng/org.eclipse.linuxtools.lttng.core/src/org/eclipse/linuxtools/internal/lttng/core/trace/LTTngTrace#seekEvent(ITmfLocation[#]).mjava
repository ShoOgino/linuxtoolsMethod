    /**
     * Position the trace to the event at the given location.
     * <p>
     * NOTE : Seeking by location is very fast compare to seeking by position
     * but is still slower than "ReadNext", avoid using it for small interval.
     * 
     * @param location Location of the event in the trace. If no event available
     *            at this exact location, we will position ourself to the next
     *            one.
     * 
     * @return The TmfContext that point to this event
     * 
     * @see org.eclipse.linuxtools.internal.lttng.core.event.LttngLocation
     * @see org.eclipse.linuxtools.tmf.core.trace.TmfContext
     */
    @Override
    public synchronized ITmfContext seekEvent(final ITmfLocation<?> location) {

        if (PRINT_DEBUG)
            System.out.println("seekLocation(location) location -> " + location); //$NON-NLS-1$

        // If the location in context is null, create a new one
        if (location == null) {
            LttngLocation curLocation = new LttngLocation();
            final ITmfContext context = seekEvent(curLocation.getOperationTime());
            context.setRank(0);
            return context;
        }
        
        // The only seek valid in LTTng is with the time, we call
        // seekEvent(timestamp)
        LttngLocation curLocation = (LttngLocation) location;
        final ITmfContext context = seekEvent(curLocation.getOperationTime());

        // If the location is marked with the read next flag
        // then it is pointing to the next event following the operation time
        if (curLocation.isLastOperationReadNext())
            getNext(context);

        return context;
    }

