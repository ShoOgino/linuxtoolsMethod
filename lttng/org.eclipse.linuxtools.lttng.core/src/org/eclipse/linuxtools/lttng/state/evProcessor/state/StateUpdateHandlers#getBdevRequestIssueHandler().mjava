	/**
	 * Handle the event LTT_EVENT_REQUEST_ISSUE
	 * 
	 * @return
	 */
	final ILttngEventProcessor getBdevRequestIssueHandler() {
		AbsStateUpdate handler = new AbsStateUpdate() {

			// @Override
			@Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {

				// Get Fields
				Long major = getAFieldLong(trcEvent, traceSt,
						Fields.LTT_FIELD_MAJOR);
				Long minor = getAFieldLong(trcEvent, traceSt,
						Fields.LTT_FIELD_MINOR);
				Long operation = getAFieldLong(trcEvent, traceSt,
						Fields.LTT_FIELD_OPERATION);

				// calculate bdevcode
				Long devcode = mkdev(major, minor);

				if (devcode == null) {
					TraceDebug
							.debug("incorrect calcualtion of bdevcode input( major: " //$NON-NLS-1$
									+ major
									+ " minor: " //$NON-NLS-1$
									+ minor
									+ " operation: " + operation); //$NON-NLS-1$
					return true;
				}

				Map<Long, LttngBdevState> bdev_states = traceSt
						.getBdev_states();
				// Get the instance
				LttngBdevState bdevState = bdev_states.get(devcode);
				if (bdevState == null) {
					bdevState = new LttngBdevState();
				}

				// update the mode in the stack
				if (operation == 0L) {
					bdevState.pushToBdevStack(BdevMode.LTTV_BDEV_BUSY_READING);
				} else {
					bdevState.pushToBdevStack(BdevMode.LTTV_BDEV_BUSY_WRITING);
				}

				// make sure it is included in the set
				bdev_states.put(devcode, bdevState);
				return false;

			}
		};
		return handler;
	}

