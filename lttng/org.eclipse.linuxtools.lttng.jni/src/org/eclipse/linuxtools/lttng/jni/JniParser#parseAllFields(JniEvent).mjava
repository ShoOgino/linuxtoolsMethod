    /**
     * Method to parse all fields at once.<p>
     * 
     * All parsing will be done on C side as we need LTT functions.
     * 
     * @param   eventToParse    The jni event we want to parse.  
     * @return                  An HashMap of Object that contain the is the JniEvent's payload parsed by the C
     * 
     * @see org.eclipse.linuxtools.lttng.jni.JniEvent
     */
    static public HashMap<String, Object> parseAllFields(JniEvent eventToParse) {
        HashMap<String,JniMarkerField> markerFieldData = eventToParse.requestEventMarker().getMarkerFieldsHashMap();
		
		// This hashmap will contain the parsed content.
		// ParsedContent is a local class defined at the end of this file
		
		// *** HACK ***
		// We want (need?) the map that contain the parsed data to be in the same order as markerField map
		// The "instinctive way" would be to use : 
		//       HashMap<String, Object> parsedDataMap = new HashMap<String, Object>(nbMarkerField);
		//
		// However, we cannot ensure that the newly created hashmap will use the same order.
		// The hard way would be to override the default hash function for both hashmap
		// However, this is way easier to abuse the fact that both hashmap are of type <String, something...>
		// Therefore we can abuse the java-cast with clone() : 
		//       HashMap<String, Object> parsedDataMap = (HashMap<String, Object>)markerFieldData.clone();
		// Or even safer, use HashMap constructor to do so : 
        HashMap<String, Object> parsedDataMap = new HashMap<String, Object>(markerFieldData);
		
        JniMarkerField      newMarkerField  = null;
        Iterator<String>    iterator        = markerFieldData.keySet().iterator();
        
        while ( iterator.hasNext() ) {
            newMarkerField = markerFieldData.get(iterator.next());
            // Call the C to parse the data
            ltt_getParsedData(eventToParse.getEventPtr().getLibraryId(), parsedData, eventToParse.getEventPtr().getPointer(), newMarkerField.getMarkerFieldPtr().getPointer());
            // Save the result into the HashMap
            parsedDataMap.put(newMarkerField.getField(), parsedData.getData() );
        }
 
        return parsedDataMap;
    }

