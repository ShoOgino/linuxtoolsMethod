    /* 
     * Fills a map of all the JniMarkerField associated with this JniMarker.
     * 
     * Note: This function is called from C and there is no way to propagate
     * exception back to the caller without crashing JNI. Therefore, it MUST
     * catch all exceptions.
     * 
     * @param markerName        Name of the parent marker
     * @param markerFieldPtr    C Pointer (converted in long) to marker_field C Structure
     */
    @SuppressWarnings("unused")
    private void addMarkerFieldFromC(String markerFieldName, long markerFieldPtr) {
        // Create a new Jaf_markerField object and insert it in the map
        // the maker field fill itself with LTT data while being constructed
        try {
            JniMarkerField newMarkerField = allocateNewJniMarkerField( new Jni_C_Pointer(markerFieldPtr) );
            markerFieldsArrayList.add(newMarkerField);
            markerFieldsHashMap.put(markerFieldName, newMarkerField);
            
        } catch (JniException e) {
            printlnC("Failed to add marker field " + markerFieldName + " to marker fields list!(addMarkerFieldFromC)\n\tException raised : " + e.toString() );
        }
    }

