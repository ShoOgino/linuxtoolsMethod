	/**
     * Function place holder to allocate a new JniEvent.<p>
     * <br>
     * JniEvent constructor is non overridable so we need another overridable function to return the correct version of JniEvent.<br>
     * Effect of this function should be the same (allocate a fresh new JniEvent).<br>
     * <br>
     * <b>!! Override this with you version specific implementation.</b><br>
     * 
     * @param newEventPtr			The pointer of an already opened LttEvent C Structure
     * @param newMarkersMap			An already populated HashMap of JniMarker objects for this new event
     * @param newParentTracefile	The JniTrace parent of this tracefile.
     * 
     * @return						The newly allocated JniEvent of the correct version
     * 
     * @throws JniException			The construction (allocation) failed.
     * 
     * @see org.eclipse.linuxtools.lttng.jni.JniEvent
     * @see org.eclipse.linuxtools.lttng.jni.common.Jni_C_Pointer_And_Library_Id
     * @see org.eclipse.linuxtools.lttng.jni.JniMarker
     * @see org.eclipse.linuxtools.lttng.jni.JniTracefile
     */
	public abstract JniEvent allocateNewJniEvent(Jni_C_Pointer_And_Library_Id newEventPtr, HashMap<Integer, JniMarker> newMarkersMap, JniTracefile newParentTracefile) throws JniException;

