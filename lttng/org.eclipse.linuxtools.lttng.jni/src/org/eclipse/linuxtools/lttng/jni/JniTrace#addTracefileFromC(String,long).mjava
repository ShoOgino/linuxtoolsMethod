    /*
     * Fills a map of all the trace files.
     *
     * Note: This function is called from C and there is no way to propagate
     * exception back to the caller without crashing JNI. Therefore, it MUST
     * catch all exceptions.
     *
     * @param tracefileName
     *
     * @param tracefilePtr
     */
    protected void addTracefileFromC(String tracefileName, long tracefilePtr) {

        JniTracefile newTracefile = null;

        // Create a new tracefile object and insert it in the map
        // the tracefile fill itself with LTT data while being constructed
        try {
            newTracefile = allocateNewJniTracefile(new Jni_C_Pointer_And_Library_Id(thisTracePtr.getLibraryId(), tracefilePtr), this);
            getTracefilesMap().put((tracefileName + newTracefile.getCpuNumber()), newTracefile);
        } catch (JniTracefileWithoutEventException e) {
            if (printLttDebug == true) {
                printlnC(thisTracePtr.getLibraryId(), "JniTracefile " + tracefileName + " has no event (addTracefileFromC). Ignoring."); //$NON-NLS-1$ //$NON-NLS-2$
            }
        } catch (Exception e) {
            if (printLttDebug == true) {
                printlnC(thisTracePtr.getLibraryId(),
                        "Failed to add tracefile " + tracefileName + " to tracefilesMap!(addTracefileFromC)\n\tException raised : " + e.toString()); //$NON-NLS-1$ //$NON-NLS-2$
            }
        }
    }

