    @Override
    protected Control createDialogArea(Composite parent) {

        // Main dialog panel
        Composite dialogComposite = new Composite(parent, SWT.NONE);
        GridLayout layout = new GridLayout(3, true);
        dialogComposite.setLayout(layout);

        Label channelNameLabel = new Label(dialogComposite, SWT.RIGHT);
        channelNameLabel.setText(Messages.TraceControl_EnableChannelNameLabel);
        fChannelNameText = new Text(dialogComposite, SWT.NONE);
        fChannelNameText.setToolTipText(Messages.TraceControl_EnableChannelNameTooltip);

        Label subBufferSizeLabel = new Label(dialogComposite, SWT.RIGHT);
        subBufferSizeLabel.setText(Messages.TraceControl_SubBufferSizePropertyName);
        fSubBufferSizeText = new Text(dialogComposite, SWT.NONE);
        fSubBufferSizeText.setToolTipText(Messages.TraceControl_EnableChannelSubBufferSizeTooltip);
        fSubBufferSizeText.addVerifyListener(fVerifyListener);
        fSubBufferSizeText.addFocusListener(fFocusListener);
        fSubBufferSizeText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));

        Label numSubBufferLabel = new Label(dialogComposite, SWT.RIGHT);
        numSubBufferLabel.setText(Messages.TraceControl_NbSubBuffersPropertyName);
        fNumberOfSubBuffersText = new Text(dialogComposite, SWT.NONE);
        fNumberOfSubBuffersText.setToolTipText(Messages.TraceControl_EnableChannelNbSubBuffersTooltip);
        fNumberOfSubBuffersText.addVerifyListener(fVerifyListener);
        fNumberOfSubBuffersText.addFocusListener(fFocusListener);

        Label switchTimerLabel = new Label(dialogComposite, SWT.RIGHT);
        switchTimerLabel.setText(Messages.TraceControl_SwitchTimerPropertyName);
        fSwitchTimerText = new Text(dialogComposite, SWT.NONE);
        fSwitchTimerText.setToolTipText(Messages.TraceControl_EnableChannelSwitchTimerTooltip);
        fSwitchTimerText.addVerifyListener(fVerifyListener);
        fSwitchTimerText.addFocusListener(fFocusListener);

        Label readTimerLabel = new Label(dialogComposite, SWT.RIGHT);
        readTimerLabel.setText(Messages.TraceControl_ReadTimerPropertyName);
        fReadTimerText = new Text(dialogComposite, SWT.NONE);
        fReadTimerText.setToolTipText(Messages.TraceControl_EnableChannelReadTimerTooltip);
        fReadTimerText.addVerifyListener(fVerifyListener);
        fReadTimerText.addFocusListener(fFocusListener);

        if (fTargetNodeComponent.isTraceFileRotationSupported()) {
            Label maxSizeTraceFilesLabel = new Label(dialogComposite, SWT.RIGHT);
            maxSizeTraceFilesLabel.setText(Messages.TraceControl_MaxSizeTraceFilesPropertyName);
            fMaxSizeTraceText = new Text(dialogComposite, SWT.NONE);
            fMaxSizeTraceText.setToolTipText(Messages.TraceControl_EnbleChannelMaxSizeTraceFilesTooltip);
            fMaxSizeTraceText.addVerifyListener(fVerifyListener);
            fMaxSizeTraceText.addFocusListener(fFocusListener);

            Label maxNumTraceFilesLabel = new Label(dialogComposite, SWT.RIGHT);
            maxNumTraceFilesLabel.setText(Messages.TraceControl_MaxNumTraceFilesPropertyName);
            fMaxNumberTraceText = new Text(dialogComposite, SWT.NONE);
            fMaxNumberTraceText.setToolTipText(Messages.TraceControl_EnbleChannelMaxNumTraceFilesTooltip);
            fMaxNumberTraceText.addVerifyListener(fVerifyListener);
            fMaxNumberTraceText.addFocusListener(fFocusListener);
        }

        if (fTargetNodeComponent.isPeriodicalMetadataFlushSupported()) {
            fMetadataChannelButton = new Button(dialogComposite, SWT.CHECK);
            fMetadataChannelButton.setText(Messages.TraceControl_ConfigureMetadataChannelName);
            fMetadataChannelButton.setSelection(false);

            fMetadataChannelButton.addSelectionListener(new SelectionAdapter() {
                @Override
                public void widgetSelected(SelectionEvent e) {
                    if (fMetadataChannelButton.getSelection()) {
                        fPreviousChannelName = fChannelNameText.getText();
                        fChannelNameText.setText("metadata"); //$NON-NLS-1$
                        fChannelNameText.setEnabled(false);
                    } else {
                        fChannelNameText.setText(fPreviousChannelName);
                        fChannelNameText.setEnabled(true);
                    }
                }
            });
        }

        Group discardModeGroup = new Group(dialogComposite, SWT.SHADOW_NONE);
        discardModeGroup.setText(Messages.TraceControl_EnableChannelDiscardModeGroupName);
        layout = new GridLayout(2, true);
        discardModeGroup.setLayout(layout);

        fDiscardModeButton = new  Button(discardModeGroup, SWT.RADIO);
        fDiscardModeButton.setText(Messages.TraceControl_EnableChannelDiscardModeLabel);
        fDiscardModeButton.setToolTipText(Messages.TraceControl_EnableChannelDiscardModeTooltip);
        fDiscardModeButton.setSelection(true);

        fOverwriteModeButton = new Button(discardModeGroup, SWT.RADIO);
        fOverwriteModeButton.setText(Messages.TraceControl_EnableChannelOverwriteModeLabel);
        fOverwriteModeButton.setToolTipText(Messages.TraceControl_EnableChannelOverwriteModeTooltip);
        fOverwriteModeButton.setSelection(false);

        Group domainGroup = new Group(dialogComposite, SWT.SHADOW_NONE);
        domainGroup.setText(Messages.TraceControl_DomainDisplayName);
        layout = new GridLayout(2, true);
        domainGroup.setLayout(layout);

        fKernelButton = new Button(domainGroup, SWT.RADIO);
        fKernelButton.setText(Messages.TraceControl_KernelDomainDisplayName);
        fKernelButton.setSelection(fIsKernel);
        fUstButton = new Button(domainGroup, SWT.RADIO);
        fUstButton.setText(Messages.TraceControl_UstDisplayName);
        fUstButton.setSelection(!fIsKernel);

        if (fTargetNodeComponent.isPerUIDBuffersSupported()) {
            Button fDummyButton = new Button(domainGroup, SWT.CHECK);
            fDummyButton.setEnabled(false);
            fDummyButton.setVisible(false);
            fUIDBuffersButton = new Button(domainGroup, SWT.CHECK);
            fUIDBuffersButton.setText(Messages.TraceControl_PerUidBuffersDisplayName);
            fUIDBuffersButton.setSelection(false);
            fUIDBuffersButton.setEnabled(!fIsKernel);

            fUstButton.addSelectionListener(new SelectionAdapter() {
                @Override
                public void widgetSelected(SelectionEvent e) {
                    if (fUstButton.getSelection()) {
                        fUIDBuffersButton.setEnabled(true);
                    } else {
                        fUIDBuffersButton.setEnabled(false);
                    }
                }
            });
        }

        if ((fDomain != null) || (!fHasKernel)) {
            fKernelButton.setEnabled(false);
            fUstButton.setEnabled(false);
        }

        // layout widgets
        GridData data = new GridData(GridData.FILL, GridData.CENTER, false, false, 3, 1);
        discardModeGroup.setLayoutData(data);
        data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, true);
        fDiscardModeButton.setLayoutData(data);
        data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, true);
        fOverwriteModeButton.setLayoutData(data);

        data = new GridData(GridData.FILL, GridData.CENTER, false, false, 3, 1);
        domainGroup.setLayoutData(data);

        data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, true);
        fKernelButton.setLayoutData(data);
        data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, true);
        fUstButton.setLayoutData(data);
        if (fTargetNodeComponent.isPerUIDBuffersSupported()) {
            data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, true);
            fUIDBuffersButton.setLayoutData(data);
        }
        if (fTargetNodeComponent.isPeriodicalMetadataFlushSupported()) {
            data = new GridData(SWT.BEGINNING, SWT.BEGINNING, true, true);
            fMetadataChannelButton.setLayoutData(data);
        }

        data = new GridData(GridData.FILL_HORIZONTAL);
        data.horizontalSpan = 2;

        fChannelNameText.setLayoutData(data);
        fSubBufferSizeText.setLayoutData(data);
        fNumberOfSubBuffersText.setLayoutData(data);
        fSwitchTimerText.setLayoutData(data);
        fReadTimerText.setLayoutData(data);
        if (fTargetNodeComponent.isTraceFileRotationSupported()) {
            fMaxNumberTraceText.setLayoutData(data);
            fMaxSizeTraceText.setLayoutData(data);
        }

        setDefaults();

        return dialogComposite;
    }

