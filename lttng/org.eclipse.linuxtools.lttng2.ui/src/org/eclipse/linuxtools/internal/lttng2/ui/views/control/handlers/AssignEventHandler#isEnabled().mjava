    @Override
    public boolean isEnabled() {
        ArrayList<BaseEventComponent> events = new ArrayList<BaseEventComponent>();
        TraceSessionComponent[] sessions = null;
        Boolean isKernel = null;

        // Get workbench page for the Control View
        IWorkbenchPage page = getWorkbenchPage();
        if (page == null) {
            return false;
        }

        // Check if one or more session are selected
        ISelection selection = page.getSelection(ControlView.ID);
        if (selection instanceof StructuredSelection) {

            StructuredSelection structered = ((StructuredSelection) selection);
            for (Iterator<?> iterator = structered.iterator(); iterator.hasNext();) {
                Object element = iterator.next();
                if (element instanceof BaseEventComponent) {
                    BaseEventComponent event = (BaseEventComponent) element;
                    ITraceControlComponent provider = event.getParent();

                    // check for kernel or UST provider
                    boolean temp = false;
                    if (provider instanceof KernelProviderComponent) {
                        temp = true;
                    } else if (provider instanceof UstProviderComponent) {
                        temp = false;
                    } else {
                        return false;
                    }
                    if (isKernel == null) {
                        isKernel = Boolean.valueOf(temp);
                    } else {
                        // don't mix events from Kernel and UST provider
                        if (isKernel.booleanValue() != temp) {
                            return false;
                        }
                    }

                    // Add BaseEventComponents
                    events.add(event);

                    if (sessions == null) {
                        TargetNodeComponent  root = (TargetNodeComponent)event.getParent().getParent().getParent();
                        sessions = root.getSessions();
                    }
                }
            }
        }

        boolean isEnabled = ((!events.isEmpty()) && (sessions != null) && (sessions.length > 0));

        // To avoid compiler warnings check for null even if isKernel is always not null when used below
        if (isKernel == null) {
            return false;
        }

        fLock.lock();
        try {
            fParam = null;
            if(isEnabled) {
                fParam = new Parameter(sessions, events, isKernel);
            }
        } finally {
            fLock.unlock();
        }
        return isEnabled;
    }

