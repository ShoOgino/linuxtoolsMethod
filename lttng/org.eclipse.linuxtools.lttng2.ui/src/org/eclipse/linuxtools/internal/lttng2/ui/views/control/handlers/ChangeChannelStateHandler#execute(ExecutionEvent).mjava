    /*
     * (non-Javadoc)
     * @see org.eclipse.core.commands.AbstractHandler#execute(org.eclipse.core.commands.ExecutionEvent)
     */
    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();

        if (window == null) {
            return false;
        }

        Job job = new Job(Messages.TraceControl_ChangeChannelStateJob) {
            @Override
            protected IStatus run(IProgressMonitor monitor) {
                String errorString = null;

                TraceSessionComponent session = null;

                try {
                    if (fKernelDomain != null) {
                        session = (TraceSessionComponent)fKernelDomain.getParent();
                        List<String> channelNames = new ArrayList<String>();
                        for (Iterator<TraceChannelComponent> iterator = fKernelChannels.iterator(); iterator.hasNext();) {
                            // Enable all selected channels which are disabled
                            TraceChannelComponent channel = (TraceChannelComponent) iterator.next();
                            channelNames.add(channel.getName());
                        }
                        
                        changeState(fKernelDomain, channelNames, monitor);

                        for (Iterator<TraceChannelComponent> iterator = fKernelChannels.iterator(); iterator.hasNext();) {
                            // Enable all selected channels which are disabled
                            TraceChannelComponent channel = (TraceChannelComponent) iterator.next();
                            channel.setState(getNewState());
                        }
                    }

                    if (fUstDomain != null) {
                        if (session == null) {
                            session = (TraceSessionComponent)fUstDomain.getParent();
                        }

                        List<String> channelNames = new ArrayList<String>();
                        for (Iterator<TraceChannelComponent> iterator = fUstChannels.iterator(); iterator.hasNext();) {
                            // Enable all selected channels which are disabled
                            TraceChannelComponent channel = (TraceChannelComponent) iterator.next();
                            channelNames.add(channel.getName());
                        }

                        changeState(fUstDomain, channelNames, monitor);
                        
                        for (Iterator<TraceChannelComponent> iterator = fUstChannels.iterator(); iterator.hasNext();) {
                            // Enable all selected channels which are disabled
                            TraceChannelComponent channel = (TraceChannelComponent) iterator.next();
                            channel.setState(getNewState());
                        }
                    }
                } catch (ExecutionException e) {
                    errorString = e.toString() + "\n"; //$NON-NLS-1$
                }

                // In all cases notify listeners  
                session.fireComponentChanged(session);

                if (errorString != null) {
                    return new Status(Status.ERROR, Activator.PLUGIN_ID, errorString);
                }

                return Status.OK_STATUS;
            }
        };
        job.setUser(true);
        job.schedule();

        return null;
    }

