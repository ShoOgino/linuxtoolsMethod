    /*
     * (non-Javadoc)
     * @see org.eclipse.core.commands.AbstractHandler#execute(org.eclipse.core.commands.ExecutionEvent)
     */
    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        final IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();

        if (window == null) {
            return false;
        }
        fLock.lock();
        try {
            // Make a copy for thread safety
            final CommandParameter param = fParam.clone();

            UIJob getJob = new UIJob(Messages.TraceControl_GetContextJob) {
                @Override
                public IStatus runInUIThread(IProgressMonitor monitor) {

                    try {
                        final List<String> availableContexts = param.getSession().getContextList(monitor);
                        final IAddContextDialog dialog = TraceControlDialogFactory.getInstance().getAddContextDialog();
                        dialog.setAvalibleContexts(availableContexts); 

                        if ((dialog.open() != Window.OK) || (dialog.getContexts().isEmpty())) {
                            return Status.OK_STATUS;
                        }

                        Job addJob = new Job(Messages.TraceControl_AddContextJob) {
                            @Override
                            protected IStatus run(IProgressMonitor monitor) {
                                StringBuffer errorString = new StringBuffer();

                                try {
                                    List<String> contextNames = dialog.getContexts();
                                    addContexts(param, contextNames, monitor);

                                } catch (ExecutionException e) {
                                    errorString.append(e.toString());
                                    errorString.append('\n');
                                }

                                // get session configuration in all cases
                                try {
                                    param.getSession().getConfigurationFromNode(monitor);
                                } catch (ExecutionException e) {
                                    errorString.append(Messages.TraceControl_ListSessionFailure);
                                    errorString.append(": "); //$NON-NLS-1$
                                    errorString.append(e.toString());
                                } 

                                if (errorString.length() > 0) {
                                    return new Status(Status.ERROR, Activator.PLUGIN_ID, errorString.toString());
                                }
                                return Status.OK_STATUS;
                            }
                        };
                        addJob.setUser(true);
                        addJob.schedule();
                    } catch (ExecutionException e) {
                        return new Status(Status.ERROR, Activator.PLUGIN_ID, e.toString());
                    }

                    return Status.OK_STATUS;
                }
            };
            getJob.setUser(false);
            getJob.schedule();

        } finally {
            fLock.unlock();
        }
        return null;
    }

