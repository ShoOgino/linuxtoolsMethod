    /*
     * (non-Javadoc)
     * @see org.eclipse.linuxtools.internal.lttng2.ui.views.control.service.ICommandShell#executeCommand(java.lang.String, org.eclipse.core.runtime.IProgressMonitor, boolean)
     */
    @Override
    public ICommandResult executeCommand(final String command, final IProgressMonitor monitor, final boolean checkReturnValue) throws ExecutionException {
        if (fIsConnected) {
            FutureTask<CommandResult> future = new FutureTask<CommandResult>(new Callable<CommandResult>() {
                @Override
                public CommandResult call() throws IOException, CancellationException {
                    final ArrayList<String> result = new ArrayList<String>();
                    int returnValue = 0;

                    synchronized (fHostShell) {
                        fHostShell.writeToShell(formatShellCommand(command));
                        String nextLine;
                        while ((nextLine = fBufferReader.readLine()) != null) {

                            if (monitor.isCanceled()) {
                                flushInput();
                                throw new CancellationException();
                            }

                            if (nextLine.contains(DONE_MARKUP_STRING) && nextLine.contains(SHELL_ECHO_CMD)) {
                                break;
                            }
                        }

                        while ((nextLine = fBufferReader.readLine()) != null) {
                            // check if job was cancelled
                            if (monitor.isCanceled()) {
                                flushInput();
                                throw new CancellationException();
                            }

                            if (!nextLine.contains(DONE_MARKUP_STRING)) {
                                result.add(nextLine);
                            } else {
                                if (checkReturnValue) {
                                    returnValue = Integer.valueOf(nextLine.substring(DONE_MARKUP_STRING.length()+1));
                                }
                                break;
                            }
                        }

                        flushInput();
                    }
                    return new CommandResult(returnValue, result.toArray(new String[result.size()]));
                }
            });

            fExecutor.execute(future);

            try {
                return future.get(DEFAULT_TIMEOUT_VALUE, TimeUnit.MILLISECONDS);
            } catch (java.util.concurrent.ExecutionException ex) {
                throw new ExecutionException(Messages.TraceControl_ExecutionFailure, ex);
            } catch (InterruptedException ex) {
                throw new ExecutionException(Messages.TraceControl_ExecutionCancelled, ex);
            } catch (TimeoutException ex) {
                throw new ExecutionException(Messages.TraceControl_ExecutionTimeout, ex);
            }
        }
        throw new ExecutionException(Messages.TraceControl_ShellNotConnected, null);
    }

