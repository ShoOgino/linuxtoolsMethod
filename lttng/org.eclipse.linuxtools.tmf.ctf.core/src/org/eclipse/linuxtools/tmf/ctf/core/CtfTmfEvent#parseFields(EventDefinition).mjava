    /**
     * Extract the field information from the structDefinition haze-inducing
     * mess, and put them into something ITmfEventField can cope with.
     */
    private static CtfTmfEventField[] parseFields(@NonNull EventDefinition eventDef) {
        List<CtfTmfEventField> fields = new ArrayList<>();

        StructDefinition structFields = eventDef.getFields();
        if (structFields != null) {
            if (structFields.getFieldNames() != null) {
                for (String curFieldName : structFields.getFieldNames()) {
                    fields.add(CtfTmfEventField.parseField(structFields.getDefinition(curFieldName), curFieldName));
                }
            }
        }
        /* Add context information as CtfTmfEventField */
        StructDefinition structContext = eventDef.getContext();
        if (structContext != null) {
            for (String contextName : structContext.getFieldNames()) {
                /* Prefix field name */
                String curContextName = CtfConstants.CONTEXT_FIELD_PREFIX + contextName;
                fields.add(CtfTmfEventField.parseField(structContext.getDefinition(contextName), curContextName));
            }
        }

        return fields.toArray(new CtfTmfEventField[fields.size()]);
    }

