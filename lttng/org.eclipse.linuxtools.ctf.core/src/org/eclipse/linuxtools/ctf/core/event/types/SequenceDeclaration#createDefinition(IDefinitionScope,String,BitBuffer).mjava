    /**
     * @since 3.0
     */
    @SuppressWarnings("null") // immutablelist
    @Override
    public SequenceDefinition createDefinition(
            IDefinitionScope definitionScope, String fieldName, BitBuffer input) throws CTFReaderException {
        IDefinition lenDef = null;

        if (definitionScope != null) {
            lenDef = definitionScope.lookupDefinition(getLengthName());
        }

        if (lenDef == null) {
            throw new CTFReaderException("Sequence length field not found"); //$NON-NLS-1$
        }

        if (!(lenDef instanceof IntegerDefinition)) {
            throw new CTFReaderException("Sequence length field not integer"); //$NON-NLS-1$
        }

        IntegerDefinition lengthDefinition = (IntegerDefinition) lenDef;

        if (lengthDefinition.getDeclaration().isSigned()) {
            throw new CTFReaderException("Sequence length must not be signed"); //$NON-NLS-1$
        }

        long length = lengthDefinition.getValue();
        if ((length > Integer.MAX_VALUE) || (!input.canRead((int) length * fElemType.getMaximumSize()))) {
            throw new CTFReaderException("Sequence length too long " + length); //$NON-NLS-1$
        }

        Collection<String> collection = fPaths.get(fieldName);
        while (collection.size() < length) {
            fPaths.put(fieldName, fieldName + '[' + collection.size() + ']');
        }
        List<String> paths = (List<String>) fPaths.get(fieldName);
        Builder<Definition> definitions = new ImmutableList.Builder<>();
        for (int i = 0; i < length; i++) {
            definitions.add(fElemType.createDefinition(definitionScope, paths.get(i), input));
        }
        return new SequenceDefinition(this, definitionScope, fieldName, definitions.build());
    }

