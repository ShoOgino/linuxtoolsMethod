    private void parseEventDeclaration(CommonTree eventDecl,
            EventDeclaration event) throws ParseException {
        assert ((eventDecl.getType() == CTFParser.CTF_EXPRESSION_TYPE) || (eventDecl
                .getType() == CTFParser.CTF_EXPRESSION_VAL));

        /* There should be a left and right */
        assert (eventDecl.getChildCount() == 2);

        CommonTree leftNode = (CommonTree) eventDecl.getChild(0);
        assert (leftNode.getType() == CTFParser.CTF_LEFT);
        CommonTree rightNode = (CommonTree) eventDecl.getChild(1);
        assert (rightNode.getType() == CTFParser.CTF_RIGHT);

        List<CommonTree> leftStrings = leftNode.getChildren();
        assert (leftStrings != null);

        if (!isUnaryString(leftStrings.get(0))) {
            throw new ParseException(
                    "Left side of CTF assignment must be a string"); //$NON-NLS-1$
        }

        String left = concatenateUnaryStrings(leftStrings);

        if (left.equals("name")) { //$NON-NLS-1$
            if (event.nameIsSet()) {
                throw new ParseException("name already defined"); //$NON-NLS-1$
            }

            String name = getEventName(rightNode);

            event.setName(name);
        } else if (left.equals("id")) { //$NON-NLS-1$
            if (event.idIsSet()) {
                throw new ParseException("id already defined"); //$NON-NLS-1$
            }

            long id = getEventID(rightNode);

            event.setId(id);
        } else if (left.equals("stream_id")) { //$NON-NLS-1$
            if (event.streamIsSet()) {
                throw new ParseException("stream id already defined"); //$NON-NLS-1$
            }

            long streamId = getStreamID(rightNode);

            Stream stream = trace.getStream(streamId);

            if (stream == null) {
                throw new ParseException("Stream " + streamId + " not found"); //$NON-NLS-1$ //$NON-NLS-2$
            }

            event.setStream(stream);
        } else if (left.equals("context")) { //$NON-NLS-1$
            if (event.contextIsSet()) {
                throw new ParseException("context already defined"); //$NON-NLS-1$
            }

            CommonTree typeSpecifier = (CommonTree) rightNode.getChild(0);

            if (typeSpecifier.getType() != CTFParser.TYPE_SPECIFIER_LIST) {
                throw new ParseException("context expects a type specifier"); //$NON-NLS-1$
            }

            IDeclaration contextDecl = parseTypeSpecifierList(typeSpecifier,
                    null);

            if (!(contextDecl instanceof StructDeclaration)) {
                throw new ParseException("context expects a struct"); //$NON-NLS-1$
            }

            event.setContext((StructDeclaration) contextDecl);
        } else if (left.equals("fields")) { //$NON-NLS-1$
            if (event.fieldsIsSet()) {
                throw new ParseException("fields already defined"); //$NON-NLS-1$
            }

            CommonTree typeSpecifier = (CommonTree) rightNode.getChild(0);

            if (typeSpecifier.getType() != CTFParser.TYPE_SPECIFIER_LIST) {
                throw new ParseException("fields expects a type specifier"); //$NON-NLS-1$
            }

            IDeclaration fieldsDecl = parseTypeSpecifierList(typeSpecifier,
                    null);

            if (!(fieldsDecl instanceof StructDeclaration)) {
                throw new ParseException("fields expects a struct"); //$NON-NLS-1$
            }
            /*
             * The following is done to remove the underscores in the event
             * names. These underscores were added by the LTTng tracer.
             */
            StructDeclaration fields = (StructDeclaration) fieldsDecl;
            HashMap<String, IDeclaration> fieldMap = fields.getFields();
            List<String> fieldsList = fields.getFieldsList();
            HashMap<String, String> translationMap = new HashMap<String, String>();
            Set<String> keys = fieldMap.keySet();
            for (String key : keys) {
                if (key.startsWith("_", 0)) {//$NON-NLS-1$
                    final String newKey = key.substring(1);
                    translationMap.put(key, newKey);
                    fieldsList.set(fieldsList.indexOf(key), newKey);
                }
            }
            Iterator<Entry<String, String>> it = translationMap.entrySet()
                    .iterator();
            while (it.hasNext()) {
                final Entry<String, String> pairs = it.next();
                final String oldKey = pairs.getKey();
                final String newKey = pairs.getValue();
                final IDeclaration value = fieldMap.get(oldKey);
                fieldMap.put(newKey, value);
                fieldMap.remove(oldKey);
            }
            event.setFields(fields);

        } else {
            throw new ParseException("Unknown event attribute : " + left); //$NON-NLS-1$
        }
    }

