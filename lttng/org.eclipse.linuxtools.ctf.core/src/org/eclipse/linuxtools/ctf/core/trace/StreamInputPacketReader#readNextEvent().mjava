    /**
     * Reads the next event of the packet into the right event definition.
     *
     * @return The event definition containing the event data that was just
     *         read.
     * @throws CTFReaderException
     *             If there was a problem reading the trace
     */
    public EventDefinition readNextEvent() throws CTFReaderException {
        /* WARNING: This is still LTTng-specific. */
        Long eventID = null;
        long timestamp = 0;

        if (lostEventsInThisPacket > lostSoFar) {
            EventDefinition eventDef = EventDeclaration
                    .getLostEventDeclaration().createDefinition(
                            streamInputReader);
            eventDef.setTimestamp(this.lastTimestamp);
            ++lostSoFar;
            return eventDef;
        }
        StructDefinition sehd = getStreamEventHeaderDef(); // acronym for a long
                                                           // variable name
        BitBuffer currentBitBuffer = getBitBuffer();
        /*
         * Read the stream event header.
         */

        if (sehd != null) {
            sehd.read(currentBitBuffer);

            /*
             * Check for an event id.
             */
            SimpleDatatypeDefinition idDef = (SimpleDatatypeDefinition) sehd
                    .lookupDefinition("id"); //$NON-NLS-1$
            IntegerDefinition timestampDef = sehd.lookupInteger("timestamp"); //$NON-NLS-1$
            eventID = idDef.getIntegerValue();

            /*
             * Check for the variant v.
             */
            VariantDefinition variantDef = (VariantDefinition) sehd
                    .lookupDefinition("v"); //$NON-NLS-1$
            if (variantDef != null) {

                /*
                 * Get the variant current field
                 */
                StructDefinition variantCurrentField = (StructDefinition) variantDef
                        .getCurrentField();

                /*
                 * Try to get the id field in the current field of the variant.
                 * If it is present, it overrides the previously read event id.
                 */
                IntegerDefinition idIntegerDef = (IntegerDefinition) variantCurrentField
                        .lookupDefinition("id"); //$NON-NLS-1$
                if (idIntegerDef != null) {
                    eventID = idIntegerDef.getValue();
                }
                /*
                 * Get the timestamp.
                 */
                timestampDef = (IntegerDefinition) variantCurrentField
                        .lookupDefinition("timestamp"); //$NON-NLS-1$

            }

            /*
             * Calculate the event timestamp.
             */
            timestamp = calculateTimestamp(timestampDef);
        }

        /*
         * Read the stream event context.
         */
        if (getStreamEventContextDef() != null) {
            getStreamEventContextDef().read(currentBitBuffer);
        }

        /*
         * Get the right event definition using the event id.
         */
        EventDefinition eventDef = events.get(eventID);
        if (eventDef == null) {
            throw new CTFReaderException("Incorrect event id : " + eventID); //$NON-NLS-1$
        }

        /*
         * Read the event context.
         */
        if (eventDef.getContext() != null) {
            eventDef.getContext().read(currentBitBuffer);
        }

        /*
         * Read the event fields.
         */
        if (eventDef.getFields() != null) {
            eventDef.getFields().read(currentBitBuffer);
        }

        /*
         * Set the event timestamp using the timestamp calculated by
         * updateTimestamp.
         */
        eventDef.setTimestamp(timestamp);

        return eventDef;
    }

