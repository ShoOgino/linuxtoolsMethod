    /**
     * Relative <i>get</i> method for reading integer of <i>length</i> bits.
     *
     * Reads <i>length</i> bits starting at the current position. The result is
     * signed extended if <i>signed</i> is true. The current position is
     * increased of <i>length</i> bits.
     *
     * @param length
     *            The length in bits of this integer
     * @param signed
     *            The sign extended flag
     * @return The int value read from the buffer
     */
    public int getInt(int length, boolean signed) {
        int val = 0;
        if (!canRead(length)) {
            throw new BufferOverflowException();
        }
        if (length == 0) {
            return 0;
        }
        boolean gotIt = false;

        // Fall back to fast ByteBuffer reader if we want to read byte-aligned bytes
        if (this.pos % BitBuffer.BIT_CHAR == 0) {
            switch (length) {
            case BitBuffer.BIT_CHAR:
                // Byte
                if (signed) {
                    val = this.buf.get(this.pos / 8);
                } else {
                    val = (this.buf.get(this.pos / 8)) & 0xff;
                }
                gotIt = true;
                break;

            case BitBuffer.BIT_SHORT:
                // Word
                if (signed) {
                    val = this.buf.getShort(this.pos / 8);
                } else {
                    short a = this.buf.getShort(this.pos / 8);
                    val = a & 0xffff;
                }
                gotIt = true;
                break;

            case BitBuffer.BIT_INT:
                // Double word
                val = this.buf.getInt(this.pos / 8);
                gotIt = true;
                break;

            default:
                break;
            }
        }
        if (!gotIt) {
            // Nothing read yet: use longer methods
            if (this.byteOrder == ByteOrder.LITTLE_ENDIAN) {
                val = getIntLE(this.pos, length, signed);
            } else {
                val = getIntBE(this.pos, length, signed);
            }
        }
        this.pos += length;

        return val;
    }

