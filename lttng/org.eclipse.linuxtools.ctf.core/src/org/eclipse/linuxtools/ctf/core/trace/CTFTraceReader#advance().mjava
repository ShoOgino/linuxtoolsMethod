    /**
     * Go to the next event.
     *
     * @return True if an event was read.
     */
    public boolean advance() {
        /*
         * Index the
         */
        /*
         * Remove the reader from the top of the priority queue.
         */
        StreamInputReader top = this.prio.poll();

        /*
         * If the queue was empty.
         */
        if (top == null) {
            return false;
        }

        /*
         * Read the next event of this reader.
         */
        if (top.readNextEvent()) {
            /*
             * Add it back in the queue.
             */
            this.prio.add(top);
            final long topEnd = top.getCurrentEvent().timestamp;
            this.endTime = Math.max(topEnd, this.endTime);
            this.eventCountPerTraceFile[top.getName()]++;
        }
        if(hasMoreEvents())
        {
            /*
             * increment the index
             */
            index++;
            StreamInputPacketReader packetReader = top.getPacketReader();
            if (packetReader.hasMoreEvents() == false) {
                StreamInputPacketIndexEntry currentPacket = packetReader
                        .getCurrentPacket();
                currentPacket.indexBegin = startIndex;
                currentPacket.rankEnd = index;
                startIndex = index + 1;
            }
        }
        /*
         * If there is no reader in the queue, it means the trace reader reached
         * the end of the trace.
         */
        return hasMoreEvents();
    }

