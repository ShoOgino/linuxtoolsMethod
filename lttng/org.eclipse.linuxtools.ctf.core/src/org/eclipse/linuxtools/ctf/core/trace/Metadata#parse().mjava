    /**
     * Parse the metadata file.
     *
     * @throws CTFReaderException
     *             If there was a problem parsing the metadata
     */
    public void parse() throws CTFReaderException {
        FileInputStream fis = null;
        FileChannel metadataFileChannel = null;

        /*
         * Reader. It will contain a StringReader if we are using packet-based
         * metadata and it will contain a FileReader if we have text-based
         * metadata.
         */
        Reader metadataTextInput = null;

        try {
            fis = new FileInputStream(metadataFile);
            metadataFileChannel = fis.getChannel();

            /* Check if metadata is packet-based */
            if (isPacketBased(metadataFileChannel)) {
                /* Create StringBuffer to receive metadata text */
                StringBuffer metadataText = new StringBuffer();

                /*
                 * Read metadata packet one by one, appending the text to the
                 * StringBuffer
                 */
                MetadataPacketHeader packetHeader = readMetadataPacket(
                        metadataFileChannel, metadataText);
                while (packetHeader != null) {
                    packetHeader = readMetadataPacket(metadataFileChannel,
                            metadataText);
                }

                /* Wrap the metadata string with a StringReader */
                metadataTextInput = new StringReader(metadataText.toString());
            } else {
                /* Wrap the metadata file with a FileReader */
                metadataTextInput = new FileReader(metadataFile);
            }

            CommonTree tree = createAST(metadataTextInput);

            /* Generate IO structures (declarations) */
            IOStructGen gen = new IOStructGen(tree, trace);
            gen.generate();

        } catch (FileNotFoundException e) {
            throw new CTFReaderException("Cannot find metadata file!"); //$NON-NLS-1$
        } catch (IOException e) {
            /* This would indicate a problem with the ANTLR library... */
            throw new CTFReaderException(e);
        } catch (ParseException e) {
            throw new CTFReaderException(e);
        } catch (RecognitionException e) {
            throw new CtfAntlrException(e);
        } catch (RewriteCardinalityException e){
            throw new CtfAntlrException(e);
        } finally {
            /* Ghetto resource management. Java 7 will deliver us from this... */
            if (metadataTextInput != null) {
                try {
                    metadataTextInput.close();
                } catch (IOException e) {
                    // Do nothing
                }
            }
            if (metadataFileChannel != null) {
                try {
                    metadataFileChannel.close();
                } catch (IOException e) {
                    // Do nothing
                }
            }
            if (fis != null) {
                try {
                    fis.close();
                } catch (IOException e) {
                    // Do nothing
                }
            }
        }
    }

