    /**
     * Creates the string representation of a type specifier.
     *
     * @param typeSpecifier
     *            A TYPE_SPECIFIER node.
     * @param sb
     *            A StringBuilder to which will be appended the string.
     * @throws ParseException
     */
    private static void createTypeSpecifierString(CommonTree typeSpecifier,
            StringBuilder sb) throws ParseException {
        switch (typeSpecifier.getType()) {
        case CTFParser.FLOATTOK:
        case CTFParser.INTTOK:
        case CTFParser.LONGTOK:
        case CTFParser.SHORTTOK:
        case CTFParser.SIGNEDTOK:
        case CTFParser.UNSIGNEDTOK:
        case CTFParser.CHARTOK:
        case CTFParser.DOUBLETOK:
        case CTFParser.VOIDTOK:
        case CTFParser.BOOLTOK:
        case CTFParser.COMPLEXTOK:
        case CTFParser.IMAGINARYTOK:
        case CTFParser.CONSTTOK:
        case CTFParser.IDENTIFIER:
            sb.append(typeSpecifier.getText());
            break;
        case CTFParser.STRUCT: {
            CommonTree structName = (CommonTree) typeSpecifier.getFirstChildWithType(CTFParser.STRUCT_NAME);
            if (structName == null) {
                throw new ParseException(
                        "nameless struct found in createTypeSpecifierString"); //$NON-NLS-1$
            }
            assert (structName.getChildCount() == 1);

            CommonTree structNameIdentifier = (CommonTree) structName.getChild(0);
            assert (structNameIdentifier.getType() == CTFParser.IDENTIFIER);

            sb.append(structNameIdentifier.getText());
            break;
        }
        case CTFParser.VARIANT: {
            CommonTree variantName = (CommonTree) typeSpecifier.getFirstChildWithType(CTFParser.VARIANT_NAME);
            if (variantName == null) {
                throw new ParseException(
                        "nameless variant found in createTypeSpecifierString"); //$NON-NLS-1$
            }
            assert (variantName.getChildCount() == 1);

            CommonTree variantNameIdentifier = (CommonTree) variantName.getChild(0);
            assert (variantNameIdentifier.getType() == CTFParser.IDENTIFIER);

            sb.append(variantNameIdentifier.getText());
            break;
        }
        case CTFParser.ENUM: {
            CommonTree enumName = (CommonTree) typeSpecifier.getFirstChildWithType(CTFParser.ENUM_NAME);
            if (enumName == null) {
                throw new ParseException(
                        "nameless enum found in createTypeSpecifierString"); //$NON-NLS-1$
            }
            assert (enumName.getChildCount() == 1);

            CommonTree enumNameIdentifier = (CommonTree) enumName.getChild(0);
            assert (enumNameIdentifier.getType() == CTFParser.IDENTIFIER);

            sb.append(enumNameIdentifier.getText());
            break;
        }
        case CTFParser.FLOATING_POINT:
        case CTFParser.INTEGER:
        case CTFParser.STRING:
            throw new ParseException(
                    "CTF type found in createTypeSpecifierString"); //$NON-NLS-1$
            /* break; */
        default:
            childTypeError(typeSpecifier);
            break;
        }
    }

