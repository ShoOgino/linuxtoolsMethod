    private void parseIncompleteRoot(CommonTree root) throws ParseException {
        List<CommonTree> children = root.getChildren();

        if (fHasBeenParsed == false) {
            throw new ParseException("You need to run generate first"); //$NON-NLS-1$
        }
        List<CommonTree> streams = new ArrayList<>();
        List<CommonTree> events = new ArrayList<>();
        List<CommonTree> declarations = new ArrayList<>();
        List<CommonTree> environments = new ArrayList<>();
        List<CommonTree> clocks = new ArrayList<>();
        List<CommonTree> callsites = new ArrayList<>();
        /* Create a new declaration scope with no parent. */
        pushScope();

        for (CommonTree child : children) {
            final int type = child.getType();
            switch (type) {
            case CTFParser.DECLARATION:
                declarations.add(child);
                break;
            case CTFParser.TRACE:
                throw new ParseException("Trace block defined here, please use generate and not generateFragment to parse this fragment"); //$NON-NLS-1$
            case CTFParser.STREAM:
                streams.add(child);
                break;
            case CTFParser.EVENT:
                events.add(child);
                break;
            case CTFParser.CLOCK:
                clocks.add(child);
                break;
            case CTFParser.ENV:
                environments.add(child);
                break;
            case CTFParser.CALLSITE:
                callsites.add(child);
                break;
            default:
                childTypeError(child);
            }
        }
        for (CommonTree decl : declarations) {
            parseRootDeclaration(decl);
        }

        for (CommonTree environment : environments) {
            parseEnvironment(environment);
        }
        for (CommonTree clock : clocks) {
            parseClock(clock);
        }
        for (CommonTree callsite : callsites) {
            parseCallsite(callsite);
        }

        for (CommonTree stream : streams) {
            parseStream(stream);
        }

        for (CommonTree event : events) {
            parseEvent(event);
        }
        popScope();
    }

