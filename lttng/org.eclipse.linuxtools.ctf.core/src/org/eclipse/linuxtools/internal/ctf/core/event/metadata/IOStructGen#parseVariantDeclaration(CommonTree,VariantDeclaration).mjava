    private void parseVariantDeclaration(CommonTree declaration,
            VariantDeclaration variant) throws ParseException {
        assert (declaration.getType() == CTFParser.SV_DECLARATION);

        List<CommonTree> children = declaration.getChildren();
        assert (children != null);

        /* Get the type specifier list node */
        CommonTree typeSpecifierListNode = (CommonTree) declaration.getFirstChildWithType(CTFParser.TYPE_SPECIFIER_LIST);
        assert (typeSpecifierListNode != null);

        /* Get the type declarator list node */
        CommonTree typeDeclaratorListNode = (CommonTree) declaration.getFirstChildWithType(CTFParser.TYPE_DECLARATOR_LIST);
        assert (typeDeclaratorListNode != null);

        /* Get the type declarator list */
        List<CommonTree> typeDeclaratorList = typeDeclaratorListNode.getChildren();
        assert (typeDeclaratorList != null);

        /*
         * For each type declarator, parse the declaration and add a field to
         * the variant
         */
        for (CommonTree typeDeclaratorNode : typeDeclaratorList) {
            assert (typeDeclaratorNode.getType() == CTFParser.TYPE_DECLARATOR);

            StringBuilder identifierSB = new StringBuilder();

            IDeclaration decl = parseTypeDeclarator(typeDeclaratorNode,
                    typeSpecifierListNode, identifierSB);

            if (variant.hasField(identifierSB.toString())) {
                throw new ParseException("variant: duplicate field " //$NON-NLS-1$
                        + identifierSB.toString());
            }

            variant.addField(identifierSB.toString(), decl);
        }
    }

