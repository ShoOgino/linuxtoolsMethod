    /**
     * Parses a declaration found in a struct.
     *
     * @param declaration
     *            A SV_DECLARATION node.
     * @param struct
     *            A struct declaration. (I know, little name clash here...)
     * @throws ParseException
     */
    private void parseStructDeclaration(CommonTree declaration,
            StructDeclaration struct) throws ParseException {
        assert (declaration.getType() == CTFParser.SV_DECLARATION);

        List<CommonTree> children = declaration.getChildren();
        assert (children != null);

        /* Get the type specifier list node */
        CommonTree typeSpecifierListNode = (CommonTree) declaration
                .getFirstChildWithType(CTFParser.TYPE_SPECIFIER_LIST);
        assert (typeSpecifierListNode != null);

        /* Get the type declarator list node */
        CommonTree typeDeclaratorListNode = (CommonTree) declaration
                .getFirstChildWithType(CTFParser.TYPE_DECLARATOR_LIST);
        assert (typeDeclaratorListNode != null);

        /* Get the type declarator list */
        List<CommonTree> typeDeclaratorList = typeDeclaratorListNode
                .getChildren();
        assert (typeDeclaratorList != null);

        /*
         * For each type declarator, parse the declaration and add a field to
         * the struct
         */
        for (CommonTree typeDeclaratorNode : typeDeclaratorList) {
            assert (typeDeclaratorNode.getType() == CTFParser.TYPE_DECLARATOR);

            StringBuilder identifierSB = new StringBuilder();

            IDeclaration decl = parseTypeDeclarator(typeDeclaratorNode,
                    typeSpecifierListNode, identifierSB);
            String fieldName = identifierSB.toString();

            if (struct.hasField(fieldName)) {
                throw new ParseException("struct: duplicate field " //$NON-NLS-1$
                        + fieldName);
            }

            struct.addField(fieldName, decl);

        }
    }

