    /*
     * Initialized the KeyBindingsManager.
     */
    private void initialize() {
        fGoToMessageForKeyBinding = new MoveToMessage();
        Object serviceObject = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getService(IHandlerService.class);
        IHandlerService service = (IHandlerService) serviceObject;
        AbstractHandler handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fGoToMessageForKeyBinding.run();
                return null;
            }
        };
        IHandlerActivation activation = service.activateHandler(fGoToMessageForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

        fMoveUpForKeyBinding = new MoveSDUp();
        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fMoveUpForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fMoveUpForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

        fMoveDownForKeyBinding = new MoveSDDown();
        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fMoveDownForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fMoveDownForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

        fMoveLeftForKeyBinding = new MoveSDLeft();
        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fMoveLeftForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fMoveLeftForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

        fMoveRightForKeyBinding = new MoveSDRight();
        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fMoveRightForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fMoveRightForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

        fFindForKeyBinding = new OpenSDFindDialog();
        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fFindForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fFindForKeyBinding.getActionDefinitionId(), handler);
        fFindForKeyBinding.setEnabled(false);
        fHandlerActivations.add(activation);

        fShowNodeStartForKeyBinding = new ShowNodeStart();
        fShowNodeStartForKeyBinding.setText(Messages.SequenceDiagram_ShowNodeStart);

        fShowNodeStartForKeyBinding.setId("org.eclipse.linuxtools.tmf.ui.views.uml2sd.handlers.ShowNodeStart");//$NON-NLS-1$
        fShowNodeStartForKeyBinding.setActionDefinitionId("org.eclipse.linuxtools.tmf.ui.views.uml2sd.handlers.ShowNodeStart");//$NON-NLS-1$

        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fShowNodeStartForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fShowNodeStartForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

        fShowNodeEndForKeyBinding = new ShowNodeEnd();
        fShowNodeEndForKeyBinding.setText(Messages.SequenceDiagram_ShowNodeEnd);
        fShowNodeEndForKeyBinding.setId("org.eclipse.linuxtools.tmf.ui.views.uml2sd.handlers.ShowNodeEnd");//$NON-NLS-1$
        fShowNodeEndForKeyBinding.setActionDefinitionId("org.eclipse.linuxtools.tmf.ui.views.uml2sd.handlers.ShowNodeEnd");//$NON-NLS-1$

        handler = new AbstractHandler() {
            @Override
            public Object execute(ExecutionEvent event) throws ExecutionException {
                fShowNodeEndForKeyBinding.run();
                return null;
            }
        };
        activation = service.activateHandler(fShowNodeEndForKeyBinding.getActionDefinitionId(), handler);
        fHandlerActivations.add(activation);

    }

