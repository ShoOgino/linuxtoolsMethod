    /* (non-Javadoc)
     * @see org.eclipse.ui.part.WorkbenchPart#createPartControl(org.eclipse.swt.widgets.Composite)
     */
    @Override
	public void createPartControl(Composite parent) {
    	
    	// Create a virtual table
    	// TODO: change SINGLE to MULTI line selection and adjust the selection listener
        final int style = SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER | SWT.VIRTUAL;
        fTable = new Table(parent, style);

        // Set the table layout
        GridData layoutData = new GridData(SWT.FILL, SWT.FILL, true, true);
        layoutData.horizontalSpan= columnData.length;
        fTable.setLayoutData(layoutData);

        // Some cosmetic enhancements
        fTable.setHeaderVisible(true);
        fTable.setLinesVisible(true);

        // Set the columns
        setColumnHeaders(fTable);

        // Handle the table item requests 
        fTable.addSelectionListener(new SelectionListener() {

			public void widgetDefaultSelected(SelectionEvent e) {
				// TODO Auto-generated method stub
			}

			public void widgetSelected(SelectionEvent e) {
				TmfTimestamp ts = extractTimestamp(fTable.getSelection()[0].getText());
				broadcastSignal(new TmfTimeSynchSignal(fTable, ts));
			}
        });

        // Handle the table item requests 
        fTable.addListener(SWT.SetData, new Listener() {
			public void handleEvent(Event event) {
				TableItem item = (TableItem) event.item;
				final int index = fTable.indexOf(item);
				// Note: this works because handleEvent() is called once for each row, in sequence  
				if ((index >= cacheStartIndex ) && (index < cacheEndIndex)) {
					item.setText(extractItemFields(cache[index - cacheStartIndex]));
					return;
				}
				
				// *** TODO ***
				// This is broken!
				// 
				// This one fails to return any result : 
				// 		TmfDataRequest<TmfEvent> request = new TmfDataRequest<TmfEvent>(fExperiment.getTimeRange(), index, 1) {
				// All these will return THE SAME RESULT!
				//		TmfDataRequest<TmfEvent> request = new TmfDataRequest<TmfEvent>(index, 1) {
				// 		TmfDataRequest<TmfEvent> request = new TmfDataRequest<TmfEvent>(index+10, 1) {
				// 		TmfDataRequest<TmfEvent> request = new TmfDataRequest<TmfEvent>(null, 1) {
				// 		
				// THIS IS ONLY A TEMPORARY FIX! 
				
				TmfDataRequest<TmfEvent> request = new TmfDataRequest<TmfEvent>(index, 1) {
					@Override
					public void handleData() {
						TmfEvent[] tmpEvent = getData();
						if ( (tmpEvent != null) && (tmpEvent.length > 0) ) {
							cache = tmpEvent;
						}
//						cacheStartIndex = index;
//						cacheEndIndex = index + cache.length; 
					}
				};
				fExperiment.processRequest(request, true);
				
				if (cache[0] != null) {
					item.setText(extractItemFields(cache[0]));
				}
				
			}
        });

        fTable.setItemCount(0);
    	fTitlePrefix = getTitle();

    	// If an experiment is already selected, update the table
    	fExperiment = TmfExperiment.getCurrentExperiment();
    	if (fExperiment != null) {
    		experimentSelected(new TmfExperimentSelectedSignal(fTable, fExperiment));
    	}
    }

