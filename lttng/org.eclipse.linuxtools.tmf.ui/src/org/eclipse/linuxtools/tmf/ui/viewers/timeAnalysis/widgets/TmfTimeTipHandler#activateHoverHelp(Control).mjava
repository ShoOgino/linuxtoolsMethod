	public void activateHoverHelp(final Control control) {
		control.addMouseListener(new MouseAdapter() {
			public void mouseDown(MouseEvent e) {
				if (_tipShell.isVisible())
					_tipShell.setVisible(false);
			}
		});

		control.addMouseTrackListener(new MouseTrackAdapter() {
			public void mouseExit(MouseEvent e) {
				if (_tipShell.isVisible())
					_tipShell.setVisible(false);
				_tipItem = null;

			}

			private void addItem(String name, String value) {
				TableItem line = new TableItem(_tipTable, SWT.NONE);
				line.setText(0, name);
				line.setText(1, value);
			}

			private void fillValues(Point pt, TmfTimeStatesCtrl threadStates,
					Item item) {
				if (item instanceof TraceItem) {
					ITmfTimeAnalysisEntry thrd = ((TraceItem) item)._trace;
					ITimeEvent threadEvent = Utils.findEvent(thrd, threadStates
							.hitTimeTest(pt.x, pt.y), 2);
					ITimeEvent nextEvent = Utils.findEvent(thrd, threadStates
							.hitTimeTest(pt.x, pt.y), 1);
					// thread name
					addItem(Messages._TRACE_NAME, thrd.getName());
					// class name
					addItem(Messages._TRACE_CLASS_NAME, _utilImp
							.getTraceClassName(thrd));
					// thread state
					addItem(Messages._TRACE_STATE, _utilImp
							.getEventName(threadEvent));

					// This block receives a
					// list of <String, String> values to be added to the tip
					// table
					Map<String, String> eventAddOns = _utilImp
							.getEventHoverToolTipInfo(threadEvent);
					for (Iterator<String> iter = eventAddOns.keySet()
							.iterator(); iter.hasNext();) {
						String message = (String) iter.next();
						addItem(message, eventAddOns.get(message));
					}

					// start time
					long startTime = threadEvent == null ? thrd.getStartTime()
							: threadEvent.getTime();

					long duration = threadEvent == null ? -1 : threadEvent
							.getDuration();

					if (duration < 0 && threadEvent != null
							&& nextEvent != null) {
						long stopTime = nextEvent.getTime();
						duration = stopTime - startTime;
					}
					long eventEndtime = startTime + duration;

// TODO: Check if we need "format"					
//					TimeFormat format = TimeFormat.RELATIVE;
					Resolution res = Resolution.NANOSEC;
					if (_timeDataProvider.isCalendarFormat()) {
//						format = TimeFormat.ABSOLUTE; // Absolute format
//														// (calendar)
						// Add Date
						addItem(Messages._TRACE_DATE, Utils
								.formatDate(startTime));
					}
					addItem(Messages._TRACE_START_TIME, Utils.formatTime(
							startTime, TimeFormat.RELATIVE, res));

					addItem(Messages._TRACE_STOP_TIME, Utils.formatTime(
							eventEndtime, TimeFormat.RELATIVE, res));

					// Duration in relative format in any case
					addItem(Messages._DURATION, duration > -1 ? Utils
							.formatTime(duration, TimeFormat.RELATIVE, res)
							: "?");

				} else if (item instanceof GroupItem) {
					addItem(Messages._TRACE_GROUP_NAME, item.toString());
					addItem(Messages._NUMBER_OF_TRACES, ""
							+ ((GroupItem) item)._traces.size());
				}
			}

			public void mouseHover(MouseEvent event) {
				Point pt = new Point(event.x, event.y);
				Widget widget = event.widget;
				Item item = null;
				if (widget instanceof TmfTimeStatesCtrl) {
					TmfTimeStatesCtrl threadStates = (TmfTimeStatesCtrl) widget;
					item = (Item) threadStates.getItem(pt);
					_tipTable.remove(0, _tipTable.getItemCount() - 1);
					new TableColumn(_tipTable, SWT.NONE);
					new TableColumn(_tipTable, SWT.NONE);
					fillValues(pt, threadStates, item);
					_tipTable.getColumn(0).setWidth(200);
					_tipTable.getColumn(1).pack();
					_tipTable.setSize(_tipTable.computeSize(SWT.DEFAULT, 200));
					_tipShell.pack();
				} else if (widget == null) {
					_tipShell.setVisible(false);
					_tipItem = null;
					return;
				}
				if (item == _tipItem)
					return;
				_tipItem = item;
				_tipPosition = control.toDisplay(pt);
				_tipShell.pack();
				setHoverLocation(_tipShell, _tipPosition);
				_tipShell.setVisible(true);
			}
		});
	}

