    /**
     * Display the tooltip using the given text The tooltip will stay on screen until it is told otherwise
     *
     * @param value the text to display
     */
    public void showToolTip(String value) {
        if ((value == null) || (value.equalsIgnoreCase(""))) { //$NON-NLS-1$
            fToolTipShell.setVisible(false);
            return;
        }

        fText = value;
        int w = fToolTipShell.getBounds().width;
        Point hr = Display.getDefault().getCursorLocation();
        int cursorH = 32;
        for (int i = 0; i < Display.getDefault().getCursorSizes().length; i++) {
            if (Display.getDefault().getCursorSizes()[i].y < cursorH) {
                cursorH = Display.getDefault().getCursorSizes()[i].y;
            }
        }
        if (hr.x + w > Display.getDefault().getBounds().width) {
            int tempX = (hr.x + w) - Display.getDefault().getBounds().width;
            if (tempX > Display.getDefault().getBounds().width) {
                hr.x = 0;
            }
            hr.x = hr.x - tempX;
        }
        fTextBox.setText(value);
        int charactersPerColumn = 100;
        GC gc = new GC(fTextBox);
        FontMetrics fm = gc.getFontMetrics();
        gc.dispose();
        int width = charactersPerColumn * fm.getAverageCharWidth();
        fTextBox.setSize(fTextBox.computeSize(width, fTextBox.getLineCount() * fTextBox.getLineHeight()));
        fToolTipShell.setLocation(hr.x, hr.y + cursorH);
        fToolTipShell.setSize(fTextBox.getSize());
        fTextBox.setVisible(true);
        fToolTipShell.setVisible(true);

    }

