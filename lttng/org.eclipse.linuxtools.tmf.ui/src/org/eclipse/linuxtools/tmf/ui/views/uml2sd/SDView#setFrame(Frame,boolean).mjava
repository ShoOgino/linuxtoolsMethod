    /**
     * The frame to render (the sequence diagram)
     *
     * @param frame the frame to display
     * @param resetPosition boolean Flag whether to reset the position or not.
     */
    protected void setFrame(Frame frame, boolean resetPosition) {
        if (getSDWidget() == null) {
            return;
        }

        if (frame == null) {
            loadBlank();
            return;
        }

        IUml2SDLoader loader = LoadersManager.getInstance().getCurrentLoader(getViewSite().getId(), this);
        if (loader == null) {
            return;
        }

        if (loader.getTitleString() != null) {
            setContentDescription(loader.getTitleString());
        }

        getSDWidget().setFrame(frame, resetPosition);

        if (fTimeCompressionBar != null) {
            fTimeCompressionBar.setFrame(frame);
        }
        updateCoolBar();
        if (fTimeCompressionBar != null) {
            if (!frame.hasTimeInfo()) {
                Composite parent = fTimeCompressionBar.getParent();
                fTimeCompressionBar.setVisible(false);
                parent.layout(true);
            } else {
                Composite parent = fTimeCompressionBar.getParent();
                fTimeCompressionBar.setVisible(true);
                parent.layout(true);
            }
        }
        IContributionItem shortKeysMenu = getViewSite().getActionBars().getMenuManager().find("org.eclipse.linuxtools.tmf.ui.views.uml2sd.handlers");//$NON-NLS-1$
        MenuManager shortKeys = (MenuManager) shortKeysMenu;
        if (shortKeys != null) {
            IContributionItem[] items = shortKeys.getItems();
            for (int i = 0; i < items.length; i++) {
                if (items[i] instanceof ActionContributionItem) {
                    IAction action = ((ActionContributionItem) items[i]).getAction();
                    if (action != null) {
                        action.setEnabled(true);
                    }
                }
            }
        }
        createCoolbarContent();
    }

