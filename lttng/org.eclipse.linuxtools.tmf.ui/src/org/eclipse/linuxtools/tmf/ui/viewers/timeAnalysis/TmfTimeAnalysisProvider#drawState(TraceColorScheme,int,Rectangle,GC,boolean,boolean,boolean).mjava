	public void drawState(TraceColorScheme colors, int colorIdx,
			Rectangle rect, GC gc, boolean selected, boolean rectBound,
			boolean timeSelected) {

		boolean visible = rect.width == 0 ? false : true;
		int colorIdx1 = colorIdx;
		
		timeSelected = timeSelected && selected;
		if (timeSelected) {
			colorIdx1 = colorIdx + TraceColorScheme.STATES_SEL0
					- TraceColorScheme.STATES0;
		}

		if (visible) {
			// fill all rect area
			if (rect.isEmpty())
				return;

			gc.setBackground(colors.getColor(colorIdx1));
			gc.fillRectangle(rect);
			colorIdx1 = colorIdx + TraceColorScheme.STATES_BORDER0
					- TraceColorScheme.STATES0;
			gc.setForeground(colors.getColor(colorIdx1));

			// draw bounds
			if (!timeSelected) {
				if (rectBound && rect.width >= 3) {
					gc.drawRectangle(rect.x, rect.y, rect.width - 1,
							rect.height - 1);
				} else {
					// Draw the top and bottom borders i.e. no side borders
					// top
					gc
							.drawLine(rect.x, rect.y, rect.x + rect.width - 1,
									rect.y);
					// bottom
					gc.drawLine(rect.x, rect.y + rect.height - 1, rect.x
							+ rect.width - 1, rect.y + rect.height - 1);
				}
			}
			// draw decoration middle line
			// int mindy = rect.y + rect.height / 2;
			// if (TraceColorScheme.GOLD_STATE == colorIdx
			// || TraceColorScheme.ORANGE_STATE == colorIdx) {
			// int s = gc.getLineStyle();
			// int w = gc.getLineWidth();
			// gc.setLineStyle(SWT.LINE_DOT);
			// gc.setLineWidth(2);
			// gc.drawLine(rect.x, mindy, rect.x + rect.width, mindy);
			// gc.setLineStyle(s);
			// gc.setLineWidth(w);
			// } else if (TraceColorScheme.RED_STATE == colorIdx
			// || TraceColorScheme.GRAY_STATE == colorIdx) {
			// int w = gc.getLineWidth();
			// gc.setLineWidth(2);
			// gc.drawLine(rect.x, mindy, rect.x + rect.width, mindy);
			// gc.setLineWidth(w);
			// }
			// // draw selection bounds
			// if (timeSelected) {
			// gc.setForeground(colors
			// .getColor(TraceColorScheme.SELECTED_TIME));
			// if (rect.width >= 3) {
			// gc.drawRectangle(rect.x, rect.y, rect.width - 1,
			// rect.height - 1);
			// // gc.drawRectangle(rect.x + 1, rect.y + 1, rect.width - 3,
			// // rect.height - 3);
			// } else {
			// gc
			// .drawLine(rect.x, rect.y, rect.x + rect.width - 1,
			// rect.y);
			// gc.drawLine(rect.x, rect.y + rect.height - 1, rect.x
			// + rect.width - 1, rect.y + rect.height - 1);
			// }
			// gc.drawLine(rect.x, rect.y + 1, rect.x + rect.width - 1,
			// rect.y + 1);
			// gc.drawLine(rect.x, rect.y + rect.height - 2, rect.x
			// + rect.width - 1, rect.y + rect.height - 2);
			// }
		} else {
			// selected rectangle area is not visible but can be represented
			// with a broken vertical line of specified width.
			int width = 2;
			rect.width = width;
			// check if height is greater than zero.
			if (rect.isEmpty())
				return;
			// colorIdx1 = TraceColorScheme.BLACK;
			gc.setForeground(colors.getColor(colorIdx));
			int s = gc.getLineStyle();
			int w = gc.getLineWidth();
			gc.setLineStyle(SWT.LINE_DOT);
			gc.setLineWidth(width);
			// Trace.debug("Reactangle not visible, drawing vertical line with: "
			// + rect.x + "," + rect.y + "," + rect.x + "," + rect.y
			// + rect.height);
			gc.drawLine(rect.x, rect.y, rect.x, rect.y + rect.height);
			gc.setLineStyle(s);
			gc.setLineWidth(w);
		}
	}

