    @SuppressWarnings("unchecked")
    @TmfSignalHandler
    public void traceParserUpdated(final TmfTraceParserUpdatedSignal signal) {
        if (signal.getTraceResource().equals(fFile)) {
            broadcast(new TmfTraceClosedSignal(this, fTrace));
            try {
                fTrace.getName();
                fTrace = null;
                final String traceTypeId = fFile.getPersistentProperty(TmfTraceElement.TRACETYPE);
                if (traceTypeId != null)
                    for (final IConfigurationElement ce : TmfTraceType.getTypeElements())
                        if (traceTypeId.equals(ce.getAttribute(TmfTraceType.ID_ATTR))) {
                            fTrace = (ITmfTrace<?>) ce.createExecutableExtension(TmfTraceType.TRACE_TYPE_ATTR);
                            final TmfEvent event = (TmfEvent) ce.createExecutableExtension(TmfTraceType.EVENT_TYPE_ATTR);
                            final String path = fFile.getLocationURI().getPath();
                            fTrace.initTrace(null, path, event.getClass());
                            break;
                        }
            } catch (final InvalidRegistryObjectException e) {
                e.printStackTrace();
            } catch (final FileNotFoundException e) {
                e.printStackTrace();
            } catch (final CoreException e) {
                e.printStackTrace();
            }
            fEventsTable.dispose();
            if (fTrace != null) {
                fEventsTable = createEventsTable(fParent, fTrace.getIndexPageSize());
                fEventsTable.setTrace(fTrace, true);
                broadcast(new TmfTraceOpenedSignal(this, fTrace, fFile, fEventsTable));
            } else
                fEventsTable = new TmfEventsTable(fParent, 0);
            fParent.layout();
        }
    }

