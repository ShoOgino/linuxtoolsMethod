    @Override
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null)
            return null;

        // Check that the trace is valid
        if (fTrace == null) {
            return null;
        }

        TmfEvent traceEvent = fTrace.instantiateEvent();
        ITmfTrace trace = fTrace.instantiateTrace();
        if (trace == null) {
            displayErrorMsg(Messages.OpenTraceHandler_NoTraceType);
            return null;
        }

        // Get the editor_id from the extension point
        String editorId = fTrace.getEditorId();
        boolean usesEditor = editorId != null && editorId.length() > 0;

        try {
            trace.initTrace(fTrace.getLocation().getPath(), traceEvent.getClass(), usesEditor);
        } catch (FileNotFoundException e) {
            displayErrorMsg(Messages.OpenTraceHandler_NoTrace);
            return null;
        }

        if (usesEditor) {
            try {
                IResource resource = fTrace.getResource();
                IEditorInput editorInput = new TmfEditorInput(resource, trace);
                IWorkbench wb = PlatformUI.getWorkbench();
                IWorkbenchPage activePage = wb.getActiveWorkbenchWindow().getActivePage();

                IEditorPart editor = activePage.findEditor(editorInput);
                if (editor != null && editor instanceof IReusableEditor) {
                    activePage.reuseEditor((IReusableEditor) editor, editorInput);
                    activePage.activate(editor);
                } else {
                    editor = activePage.openEditor(editorInput, editorId);
                }
            } catch (PartInitException e) {
                e.printStackTrace();
            }

        } else {
            ITmfTrace[] traces = new ITmfTrace[] { trace };
            TmfExperiment experiment = new TmfExperiment(traceEvent.getClass(), fTrace.getName(), traces, trace.getCacheSize());
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this, experiment));
        }
        return null;
    }

