    /**
     * Gets node list from node A to node B

     * @param from A from node
     * @param to A to node
     * @return the list of nodes
     */
    public ArrayList<GraphNode> getNodeList(GraphNode from, GraphNode to) {
        ArrayList<GraphNode> result = new ArrayList<GraphNode>();

        if (from != null) {
            result.add(from);
        } else if (to != null) {
            result.add(to);
        }

        if (from == null || to == null) {
            return result;
        }

        if (from == to) {
            return result;
        }

        int startX = Math.min(from.getX(), Math.min(to.getX(), Math.min(from.getX() + from.getWidth(), to.getX() + to.getWidth())));
        int endX = Math.max(from.getX(), Math.max(to.getX(), Math.max(from.getX() + from.getWidth(), to.getX() + to.getWidth())));
        int startY = Math.min(from.getY(), Math.min(to.getY(), Math.min(from.getY() + from.getHeight(), to.getY() + to.getHeight())));
        int endY = Math.max(from.getY(), Math.max(to.getY(), Math.max(from.getY() + from.getHeight(), to.getY() + to.getHeight())));

        if (!hasChilden) {
            return result;
        }

        Iterator<String> it = nodes.keySet().iterator();
        while (it.hasNext()) {
            Object nodeType = it.next();
            List<GraphNode> nodesList = (List<GraphNode>) nodes.get(nodeType);
            if (nodesList == null || nodesList.isEmpty()) {
                return null;
            }
            for (int i = 0; i < nodesList.size(); i++) {
                GraphNode node = (GraphNode) nodesList.get(i);
                int nw = node.getWidth();
                int nh = node.getHeight();
                int nx = node.getX();
                int ny = node.getY();
                if (contains(startX, startY, endX - startX, endY - startY, nx + 1, ny + 1) && contains(startX, startY, endX - startX, endY - startY, nx + nw - 2, ny + nh - 2)) {
                    result.add(node);
                }
                result.addAll(node.getNodeList(from, to));
            }
        }
        if ((to != null) && (!result.contains(to))) {
            result.add(to);
        }
        return result;
    }

