    /**
     * Handler called when an experiment is selected. Checks if the experiment
     * has changed and requests the selected experiment if it has not yet been
     * cached.
     *
     * @param signal
     *            Contains the information about the selection.
     */
    @TmfSignalHandler
    public void experimentSelected(TmfExperimentSelectedSignal signal) {
        if (signal != null) {
            // Does not reload the same trace if already opened
            if (fExperiment == null
                    || signal.getExperiment().toString().compareTo(fExperiment.toString()) != 0) {
                /*
                 * Dispose the current viewer and adapt the new one to the trace
                 * type of the experiment selected
                 */
                fStatsViewers.clear();
                // Update the current experiment
                fExperiment = signal.getExperiment();
                createStatisticsViewers();
                fStatsViewers.layout();

                TmfStatisticsViewer statViewer;
                for (ITmfViewer viewer : fStatsViewers.getViewers()) {
                    if (!(viewer instanceof TmfStatisticsViewer)) {
                        Activator.getDefault().logError("Error - cannot cast viewer to a statistics viewer"); //$NON-NLS-1$
                        continue;
                    }
                    statViewer = (TmfStatisticsViewer) viewer;
                    setInput(statViewer, fExperiment.getTraces());
                }

                if (fRequestData) {
                    TmfExperimentRangeUpdatedSignal updateSignal = new TmfExperimentRangeUpdatedSignal(null, fExperiment, fExperiment.getTimeRange());
                    TmfStatisticsViewer statsViewer;
                    // Synchronizes the request to make them coalesced
                    fExperiment.startSynch(new TmfStartSynchSignal(0));
                    for (ITmfViewer viewer : fStatsViewers.getViewers()) {
                        if (!(viewer instanceof TmfStatisticsViewer)) {
                            Activator.getDefault().logError("Error - cannot cast viewer to a statistics viewer"); //$NON-NLS-1$
                            continue;
                        }
                        statsViewer = (TmfStatisticsViewer) viewer;
                        statsViewer.experimentRangeUpdated(updateSignal);
                    }
                    fExperiment.endSynch(new TmfEndSynchSignal(0));
                    fRequestData = false;
                }
            }
        }
    }

