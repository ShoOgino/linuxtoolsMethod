    /**
     * Creates the tree viewer.
     *
     * @param parent
     *            the parent composite
     * @return the tree viewer
     */
    protected CheckboxTreeViewer createTreeViewer(Composite parent) {
        PatternFilter filter = new TreePatternFilter();
        filter.setIncludeLeadingWildcard(true);
        fTree = new FilteredCheckboxTree(parent, SWT.BORDER | SWT.MULTI, filter, true);

        Tree tree = fTree.getViewer().getTree();
        tree.setHeaderVisible(true);
        for (String columnName : fColumnNames) {
            TreeColumn column = new TreeColumn(tree, SWT.LEFT);
            column.setText(columnName);
            column.pack();
        }

        fTree.getViewer().setContentProvider(fContentProvider);
        fTree.getViewer().setLabelProvider(fLabelProvider);
        fTree.addCheckStateListener(new CheckStateListener());
        fTree.getViewer().setComparator(fComparator);
        if (fFilters != null) {
            for (int i = 0; i != fFilters.size(); i++) {
                fTree.getViewer().addFilter(fFilters.get(i));
            }
        }
        fTree.getViewer().setInput(fInput);

        // pack the columns again for a nice view...
        for (TreeColumn column : tree.getColumns()) {
            column.pack();
        }
        return (CheckboxTreeViewer) fTree.getViewer();
    }

