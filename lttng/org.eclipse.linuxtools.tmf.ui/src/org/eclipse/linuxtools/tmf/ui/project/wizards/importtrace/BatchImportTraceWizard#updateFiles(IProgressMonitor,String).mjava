    /*
     * I am a job. Make me work
     */
    private synchronized IStatus updateFiles(IProgressMonitor monitor, String traceToScan) {
        final Set<String> filesToScan = new TreeSet<String>();
        int workToDo = 1;
        for (String name : fParentFiles.keySet()) {

            final File file = new File(name);
            final File[] listFiles = file.listFiles();
            if (listFiles != null) {
                workToDo += listFiles.length;
            }
        }
        int step = TOTALWORK / workToDo;
        try {
            for (String name : fParentFiles.keySet()) {
                final File fileToAdd = new File(name);
                final Set<String> parentFilesToScan = fParentFiles.get(fileToAdd.getAbsolutePath());
                recurse(parentFilesToScan, fileToAdd, monitor, step);
                if (monitor.isCanceled()) {
                    fParentFilesToScan.remove(traceToScan);
                    fParentFiles.remove(traceToScan);
                    return CANCEL_STATUS;
                }
            }
            filesToScan.clear();
            for (String name : fParentFiles.keySet()) {
                filesToScan.addAll(fParentFiles.get(name));
                fParentFilesToScan.add(name);
            }
            for (String fileToScan : filesToScan) {
                for (String traceCat : fTraceTypesToScan) {
                    TraceValidationHelper tv = new TraceValidationHelper(fileToScan, traceCat);
                    // for thread safety, keep checks in this order.
                    if (!fResults.containsKey(tv)) {
                        if (!fTracesToScan.contains(tv)) {
                            fTracesToScan.put(tv);
                            monitor.subTask(tv.getTraceToScan());
                            if (monitor.isCanceled()) {
                                fParentFilesToScan.remove(traceToScan);
                                fParentFiles.remove(traceToScan);
                                return CANCEL_STATUS;
                            }
                        }
                    }
                }
            }
        } catch (InterruptedException e) {
            monitor.done();
            return new Status(IStatus.ERROR, Activator.PLUGIN_ID, e.getMessage(), e);
        }

        monitor.done();
        return Status.OK_STATUS;
    }

