    /**
     * Gets the summary of supported graph nodes.
     *
     * @param provider A filter provider
     * @param loaderClassName A class loader
     * @return graph node summary
     */
    public String getGraphNodeSummary(ISDFilterProvider provider, String loaderClassName) {
        ArrayList<String> list = new ArrayList<>();

        if (provider != null) {
            if (isLifeLineSelected()) {
                list.add(provider.getNodeName(ISDGraphNodeSupporter.LIFELINE, loaderClassName));
            }
            if (isSyncMessageSelected()) {
                list.add(provider.getNodeName(ISDGraphNodeSupporter.SYNCMESSAGE, loaderClassName));
            }
            if (isSyncMessageReturnSelected()) {
                list.add(provider.getNodeName(ISDGraphNodeSupporter.SYNCMESSAGERETURN, loaderClassName));
            }
            if (isAsyncMessageSelected()) {
                list.add(provider.getNodeName(ISDGraphNodeSupporter.ASYNCMESSAGE, loaderClassName));
            }
            if (isAsyncMessageReturnSelected()) {
                list.add(provider.getNodeName(ISDGraphNodeSupporter.ASYNCMESSAGERETURN, loaderClassName));
            }
            if (isStopSelected()) {
                list.add(provider.getNodeName(ISDGraphNodeSupporter.STOP, loaderClassName));
            }
        } else {
            if (isLifeLineSelected()) {
                list.add(Messages.SequenceDiagram_Lifeline);
            }
            if (isSyncMessageSelected()) {
                list.add(Messages.SequenceDiagram_SynchronousMessage);
            }
            if (isSyncMessageReturnSelected()) {
                list.add(Messages.SequenceDiagram_SynchronousMessageReturn);
            }
            if (isAsyncMessageSelected()) {
                list.add(Messages.SequenceDiagram_AsynchronousMessage);
            }
            if (isAsyncMessageReturnSelected()) {
                list.add(Messages.SequenceDiagram_AsynchronousMessageReturn);
            }
            if (isStopSelected()) {
                list.add(Messages.SequenceDiagram_Stop);
            }
        }
        StringBuffer ret = new StringBuffer();
        String prefix = "["; //$NON-NLS-1$
        for (Iterator<String> i = list.iterator(); i.hasNext();) {
            String s = i.next();
            ret.append(prefix);
            ret.append(s);
            prefix = " " + Messages.SequenceDiagram_or + " "; //$NON-NLS-1$ //$NON-NLS-2$
        }
        ret.append("]"); //$NON-NLS-1$
        return ret.toString();
    }

