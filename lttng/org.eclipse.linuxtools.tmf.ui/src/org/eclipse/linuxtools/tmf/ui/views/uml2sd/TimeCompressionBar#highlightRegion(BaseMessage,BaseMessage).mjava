    /**
     * Force the time compression bar to highlight the event occurrences between
     * the two given messages. The event occurrences are highlighted on the
     * first message's end lifeline
     *
     * @param mes1
     *            the first message
     * @param mes2
     *            the second message
     */
    public void highlightRegion(BaseMessage mes1, BaseMessage mes2) {
        BaseMessage localMes1 = mes1;
        BaseMessage localMes2 = mes2;

        if (fFrame == null) {
            return;
        }
        if (!(localMes1 instanceof ITimeRange)) {
            return;
        }
        if (!(localMes2 instanceof ITimeRange)) {
            return;
        }
        ITimeRange t1 = (ITimeRange) localMes1;
        ITimeRange t2 = (ITimeRange) localMes2;

        ITmfTimestamp time1 = t1.getStartTime();
        ITmfTimestamp time2 = t2.getStartTime();
        int event1 = localMes1.getEventOccurrence();
        int event2 = localMes2.getEventOccurrence();

        if (localMes1 instanceof AsyncMessage) {
            AsyncMessage as = (AsyncMessage) localMes1;
            time1 = as.getEndTime();
            event1 = as.getEndOccurrence();
        }
        if (localMes2 instanceof AsyncMessage) {
            AsyncMessage as = (AsyncMessage) localMes2;
            if (as.getEndOccurrence() > as.getStartOccurrence()) {
                time1 = as.getEndTime();
                event1 = as.getEndOccurrence();
            } else {
                time1 = as.getStartTime();
                event1 = as.getStartOccurrence();
            }
        }

        if (event1 > event2) {
            BaseMessage tempMes = localMes2;
            localMes2 = localMes1;
            localMes1 = tempMes;

            t1 = (ITimeRange) localMes1;
            t2 = (ITimeRange) localMes2;

            time1 = t1.getStartTime();
            time2 = t2.getStartTime();
            event1 = localMes1.getEventOccurrence();
            event2 = localMes2.getEventOccurrence();

            if (localMes1 instanceof AsyncMessage) {
                AsyncMessage as = (AsyncMessage) localMes1;
                time1 = as.getEndTime();
                event1 = as.getEndOccurrence();
            }
            if (localMes2 instanceof AsyncMessage) {
                AsyncMessage as = (AsyncMessage) localMes2;
                if (as.getEndOccurrence() > as.getStartOccurrence()) {
                    time1 = as.getEndTime();
                    event1 = as.getEndOccurrence();
                } else {
                    time1 = as.getStartTime();
                    event1 = as.getStartOccurrence();
                }
            }
        }

        ITmfTimestamp minMaxdelta = fMaxTime.getDelta(fMinTime);
        double gr = (minMaxdelta.getValue()) / (double) 10;

        ITmfTimestamp delta = time2.getDelta(time1).getDelta(fMinTime);
        long absDelta = Math.abs(delta.getValue());

        int colIndex = 0;
        if (gr != 0) {
            colIndex = Math.round((float) (absDelta / gr));
            if (colIndex >= fColors.length) {
                colIndex = fColors.length - 1;
            } else if (colIndex < 0) {
                colIndex = 0;
            }
        } else {
            colIndex = 0;
        }
        for (int j = 0; j < fListenerList.size(); j++) {
            ITimeCompressionListener list = fListenerList.get(j);
            if (localMes1.getEndLifeline() != null) {
                list.deltaSelected(localMes1.getEndLifeline(), event1, event2 - event1, fColors[colIndex]);
            } else if (localMes2.getStartLifeline() != null) {
                list.deltaSelected(localMes2.getStartLifeline(), event1, event2 - event1, fColors[colIndex]);
            } else {
                list.deltaSelected(localMes1.getStartLifeline(), event1, event2 - event1, fColors[colIndex]);
            }
        }
    }

