    /**
     * Create a ScrollView, child of composite c. Both scroll bar have the mode AUTO. Auto scroll feature is enabled
     * using a delay of 250ms. Overview feature is not enabled by default (use setOverviewEnabled()).
     * 
     * @param c The parent composite.
     * @param style The SWT style bits @see SWT
     * @param mouseWheel Flag to force scrollView to handles mouse wheel
     */
    public ScrollView(Composite c, int style, boolean mouseWheel) {
        super(c, SWT.NONE); // style&(~(SWT.H_SCROLL|SWT.V_SCROLL)));

        horzsb_ = new Canvas(this, SWT.H_SCROLL);
        if (mouseWheel) {
            // force scroll bar to get mouse wheel, those scrollbar will be hidden
            viewcontrol_ = new Canvas(this, style | SWT.H_SCROLL | SWT.V_SCROLL);
        } else {
            viewcontrol_ = new Canvas(this, style);
        }
        viewcontrol_.setBackground(getBackground());
        // hide scroll bar as their are replaced by vertsb_ and horzsb_.
        if (mouseWheel) {
            viewcontrol_.getVerticalBar().setVisible(false);
            viewcontrol_.getHorizontalBar().setVisible(false);
        }
        vertsb_ = new Canvas(this, SWT.V_SCROLL);
        // make vertsb_ able to receive mouse wheel
        // doesnot help as we can't set a MouseListener on vertsb_.getVerticalBar()
        // to set focus on viewcontrol_
        // vertsb_.addKeyListener( new KeyAdapter() {});

        setLayout(new SVLayout());

        localPaintListener = new PaintListener() {
            @Override
            public void paintControl(PaintEvent event) {
                // use clipping, to reduce cost of paint.
                Rectangle r = event.gc.getClipping();
                int cx = viewToContentsX(r.x);
                int cy = viewToContentsY(r.y);
                drawContents(event.gc, cx, cy, r.width, r.height);
            }
        };
        viewcontrol_.addPaintListener(localPaintListener);

        localMouseMoveListener = new MouseMoveListener() {
            @Override
            public void mouseMove(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = viewToContentsX(e.x);
                e.y = viewToContentsY(e.y);
                contentsMouseMoveEvent(e);
                e.x = ox;
                e.y = oy;
            }
        };

        viewcontrol_.addMouseMoveListener(localMouseMoveListener);

        MouseTrackListener localMouseTrackListener = new MouseTrackListener() {
            @Override
            public void mouseEnter(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = viewToContentsX(e.x);
                e.y = viewToContentsY(e.y);
                contentsMouseEnter(e);
                e.x = ox;
                e.y = oy;
            }

            @Override
            public void mouseHover(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = viewToContentsX(e.x);
                e.y = viewToContentsY(e.y);
                contentsMouseHover(e);
                e.x = ox;
                e.y = oy;
            }

            @Override
            public void mouseExit(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = viewToContentsX(e.x);
                e.y = viewToContentsY(e.y);
                contentsMouseExit(e);
                e.x = ox;
                e.y = oy;
            }

        };

        viewcontrol_.addMouseTrackListener(localMouseTrackListener);

        localMouseListener = new MouseListener() {
            @Override
            public void mouseDoubleClick(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = viewToContentsX(e.x);
                e.y = viewToContentsY(e.y);
                contentsMouseDoubleClickEvent(e);
                e.x = ox;
                e.y = oy;
            }

            @Override
            public void mouseDown(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = mouse_down_x_ = viewToContentsX(e.x);
                e.y = mouse_down_y_ = viewToContentsY(e.y);
                contentsMouseDownEvent(e);
                e.x = ox;
                e.y = oy;
            }

            @Override
            public void mouseUp(MouseEvent e) {
                int ox = e.x, oy = e.y;
                e.x = viewToContentsX(e.x);
                e.y = viewToContentsY(e.y);
                contentsMouseUpEvent(e);
                e.x = ox;
                e.y = oy;
                // here because class extenting me can catch mouse Up and want to scroll...
                mouse_down_x_ = mouse_down_y_ = -1;
            }
        };
        viewcontrol_.addMouseListener(localMouseListener);

        localKeyListener = new KeyListener() {
            @Override
            public void keyPressed(KeyEvent e) {
                keyPressedEvent(e);
            }

            @Override
            public void keyReleased(KeyEvent e) {
                keyReleasedEvent(e);
            }
        };

        viewcontrol_.addKeyListener(localKeyListener);

        getVerticalBar().addSelectionListener(new SelectionListener() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                setContentsPos(contents_x_, getVerticalBar().getSelection());
                // need to change "hidden" vertical bar value ?
                // force focus on viewcontrol_ so we got future mouse wheel's scroll events
                if (!viewcontrol_.isFocusControl()) {
                    viewcontrol_.setFocus();
                }
            }

            @Override
            public void widgetDefaultSelected(SelectionEvent e) {
            }
        });

        if (viewcontrol_.getVerticalBar() != null)
            // add viewcontrol hidden scrollbar listener to get mouse wheel ...
            viewcontrol_.getVerticalBar().addSelectionListener(new SelectionListener() {
                @Override
                public void widgetSelected(SelectionEvent e) {
                    ScrollBar b = viewcontrol_.getVerticalBar();
                    setContentsPos(contents_x_, b.getSelection());
                    // change "real" vertical bar selection too
                    getVerticalBar().setSelection(b.getSelection());
                }

                @Override
                public void widgetDefaultSelected(SelectionEvent e) {
                }
            });
        getHorizontalBar().addSelectionListener(new SelectionListener() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                setContentsPos(getHorizontalBar().getSelection(), contents_y_);
                // need to change "real" horizontal bar too ?
                // force focus on viewcontrol_ so we got future mouse wheel's scroll events
                if (!viewcontrol_.isFocusControl()) {
                    viewcontrol_.setFocus();
                }
            }

            @Override
            public void widgetDefaultSelected(SelectionEvent e) {
            }
        });
        if (viewcontrol_.getHorizontalBar() != null)
            viewcontrol_.getHorizontalBar().addSelectionListener(new SelectionListener() {
                @Override
                public void widgetSelected(SelectionEvent e) {
                    ScrollBar b = viewcontrol_.getHorizontalBar();
                    setContentsPos(b.getSelection(), contents_y_);
                    // change "real" vertical bar selection too
                    getHorizontalBar().setSelection(b.getSelection());
                }

                @Override
                public void widgetDefaultSelected(SelectionEvent e) {
                }
            });
    }

