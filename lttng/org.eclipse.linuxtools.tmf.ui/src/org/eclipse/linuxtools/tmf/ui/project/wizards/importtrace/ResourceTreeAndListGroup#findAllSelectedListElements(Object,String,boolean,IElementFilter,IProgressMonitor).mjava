    /**
     * Add all of the selected children of nextEntry to result recursively.
     * This does not set any values in the checked state.
     * @param treeElement The tree elements being queried
     * @param addAll a boolean to indicate if the checked state store needs to be queried
     * @param filter IElementFilter - the filter being used on the data
     * @param monitor IProgressMonitor or null that the cancel is polled for
     */
    private void findAllSelectedListElements(Object treeElement,
            String parentLabel, boolean addAll, IElementFilter filter,
            IProgressMonitor monitor) throws InterruptedException {

        String fullLabel = null;
        if (monitor != null && monitor.isCanceled()) {
			return;
		}
        if (monitor != null) {
            fullLabel = getFullLabel(treeElement, parentLabel);
            monitor.subTask(fullLabel);
        }

        if (addAll) {
			filter.filterElements(listContentProvider.getElements(treeElement),
                    monitor);
		} else { //Add what we have stored
            if (checkedStateStore.containsKey(treeElement)) {
				filter.filterElements((Collection) checkedStateStore
                        .get(treeElement), monitor);
			}
        }

        Object[] treeChildren = treeContentProvider.getChildren(treeElement);
        for (int i = 0; i < treeChildren.length; i++) {
            Object child = treeChildren[i];
            if (addAll) {
				findAllSelectedListElements(child, fullLabel, true, filter,
                        monitor);
			} else { //Only continue for those with checked state
                if (checkedStateStore.containsKey(child)) {
					findAllSelectedListElements(child, fullLabel,
                            whiteCheckedTreeItems.contains(child), filter,
                            monitor);
				}
            }

        }
    }

