    @Override
    public void mouseDown(MouseEvent e) {
        if (fDragState != DRAG_NONE || null == fTimeProvider) {
            return;
        }
        int idx;
        if (1 == e.button) {
            int nameSpace = fTimeProvider.getNameSpace();
            if (nameSpace != 0 && isOverSplitLine(e.x)) {
                fDragState = DRAG_SPLIT_LINE;
                fDragX = e.x;
                fDragX0 = fDragX;
                fTime0bak = fTimeProvider.getTime0();
                fTime1bak = fTimeProvider.getTime1();
                redraw();
                return;
            }

            idx = getItemIndexAtY(e.y);
            if (idx >= 0) {
                Item item = fItemData.fExpandedItems[idx];
                if (item.fHasChildren && e.x < nameSpace && e.x < MARGIN + (item.fLevel + 1) * EXPAND_SIZE) {
                    toggle(idx);
                } else {
                    long hitTime = getTimeAtX(e.x);
                    if (hitTime >= 0) {
                        setCapture(true);
                        fDragState = DRAG_TRACE_ITEM;
                        fDragX = e.x - nameSpace;
                        fDragX0 = fDragX;
                        fTime0bak = fTimeProvider.getTime0();
                        fTime1bak = fTimeProvider.getTime1();
                    }
                }
                selectItem(idx, false);
                fireSelectionChanged();
            } else {
                selectItem(idx, false); // clear selection
                redraw();
                fireSelectionChanged();
            }
        } else if (3 == e.button) {
            if (fTimeProvider.getTime0() == fTimeProvider.getTime1() || getCtrlSize().x - fTimeProvider.getNameSpace() <= 0) {
                return;
            }
            setCapture(true);
            fDragX = Math.min(Math.max(e.x, fTimeProvider.getNameSpace()), getCtrlSize().x - RIGHT_MARGIN);
            fDragX0 = fDragX;
            fDragState = DRAG_ZOOM;
        }
    }

