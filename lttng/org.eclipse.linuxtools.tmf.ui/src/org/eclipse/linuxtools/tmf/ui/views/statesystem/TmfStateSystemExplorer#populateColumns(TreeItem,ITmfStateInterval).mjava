    /**
     * Populate an 'item' (a row in the tree) with the information found in the
     * interval. This method should only be called by the UI thread.
     */
    private void populateColumns(TreeItem item, ITmfStateInterval interval) {
        try {
            ITmfStateValue state = interval.getStateValue();
            String value ;

            // add the value in the 2nd column
            switch (state.getType()) {
            case INTEGER:
                value = String.valueOf(state.unboxInt());
                item.setText(TYPE_COL, Messages.TypeInteger);
                break;
            case LONG:
                value = String.valueOf(state.unboxLong());
                item.setText(TYPE_COL, Messages.TypeLong);
                break;
            case STRING:
                value = state.unboxStr();
                item.setText(TYPE_COL, Messages.TypeString);
                break;
            case NULL:
            default:
                value = emptyString ;
                item.setText(TYPE_COL, emptyString);
                break;
            }

            TmfTimestamp startTime = new TmfTimestamp(interval.getStartTime(), ITmfTimestamp.NANOSECOND_SCALE);
            item.setText(START_TIME_COL, startTime.toString());

            TmfTimestamp endTime = new TmfTimestamp(interval.getEndTime(), ITmfTimestamp.NANOSECOND_SCALE);
            item.setText(END_TIME_COL, endTime.toString());

            item.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)) ;

            if (!filterStatus) {
                if (!value.equals(item.getText(VALUE_COL)) || fCurrentTimestamp == startTime.getValue()) {
                    item.setBackground(Display.getDefault().getSystemColor(SWT.COLOR_YELLOW));
                }
            }

            item.setText(VALUE_COL, value) ;

        } catch (StateValueTypeException e) {
            /* Should not happen, we're case-switching on the specific types */
            throw new RuntimeException();
        }
    }

