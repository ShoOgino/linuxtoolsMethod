    /**
     * @see org.eclipse.jface.dialogs.Dialog#createDialogArea(org.eclipse.swt.widgets.Composite)
     */
    @Override
    public Control createDialogArea(Composite parent) {

        Group ret = new Group(parent, SWT.NONE);
        ret.setText(SDMessages._57);
        RowLayout rowLayout = new RowLayout();
        rowLayout.wrap = false;
        rowLayout.pack = true;
        rowLayout.justify = false;
        rowLayout.type = SWT.HORIZONTAL;
        rowLayout.marginLeft = 4;
        rowLayout.marginTop = 4;
        rowLayout.marginRight = 4;
        rowLayout.marginBottom = 4;
        rowLayout.spacing = 8;
        ret.setLayout(rowLayout);

        table = new Table(ret, SWT.MULTI | SWT.CHECK);
        table.setLayoutData(new RowData(220, 84));
        table.setHeaderVisible(false);
        table.addSelectionListener(new SelectionListener() {
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetDefaultSelected(SelectionEvent e) {
                int count = table.getSelectionCount();
                if (count == 1) {
                    Criteria c = openFilterDialog(((CriteriaTableItem) table.getSelection()[0].getData()).getCriteria(), SDMessages._63);
                    if (c != null) {
                        replaceSelectedCriteria(c);
                    }
                }
            }

            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetSelected(SelectionEvent e) {
                handleTableSelectionCount();
            }
        });
        if (filters != null) {
            for (Iterator<FilterCriteria> i = filters.iterator(); i.hasNext();) {
                FilterCriteria filterCriteria = (FilterCriteria) i.next();
                addCriteria(filterCriteria.getCriteria(), filterCriteria.isActive(), filterCriteria.isPositive(), filterCriteria.getLoaderClassName());
            }
        }

        Composite commands = new Composite(ret, SWT.NONE);
        RowLayout rowLayoutCommands = new RowLayout();
        rowLayoutCommands.wrap = false;
        rowLayoutCommands.pack = false;
        rowLayoutCommands.justify = true;
        rowLayoutCommands.type = SWT.VERTICAL;
        rowLayoutCommands.marginLeft = 0;
        rowLayoutCommands.marginTop = 4;
        rowLayoutCommands.marginRight = 0;
        rowLayoutCommands.marginBottom = 4;
        rowLayoutCommands.spacing = 8;
        commands.setLayout(rowLayoutCommands);
        add = new Button(commands, SWT.NONE);
        add.setText(SDMessages._61);
        add.addSelectionListener(new SelectionListener() {
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetDefaultSelected(SelectionEvent e) {
                // Nothing to do
            }

            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetSelected(SelectionEvent e) {
                Criteria init = new Criteria();
                Criteria c = openFilterDialog(init, SDMessages._62);
                if (c != null) {
                    addCriteria(c, true, false, null);
                }
            }
        });

        edit = new Button(commands, SWT.NONE);
        edit.setText(SDMessages._60);
        edit.addSelectionListener(new SelectionListener() {
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetDefaultSelected(SelectionEvent e) {
                // Nothing to do
            }
            
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetSelected(SelectionEvent e) {
                Criteria c = openFilterDialog(((CriteriaTableItem) table.getSelection()[0].getData()).getCriteria(), SDMessages._63);
                if (c != null) {
                    replaceSelectedCriteria(c);
                }
            }
        });
        edit.setEnabled(false);

        remove = new Button(commands, SWT.NONE);
        remove.setText(SDMessages._64);
        remove.addSelectionListener(new SelectionListener() {
            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetDefaultSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetDefaultSelected(SelectionEvent e) {
                // Nothing to do
            }

            /*
             * (non-Javadoc)
             * @see org.eclipse.swt.events.SelectionListener#widgetSelected(org.eclipse.swt.events.SelectionEvent)
             */
            @Override
            public void widgetSelected(SelectionEvent e) {
                table.remove(table.getSelectionIndices());
                handleTableSelectionCount();
            }
        });
        remove.setEnabled(false);

        getShell().setText(SDMessages._65);
        /*
         * for (int i=0;i<filters.size();i++) { if (filters.get(i) instanceof FilterCriteria)
         * addCriteria(((FilterCriteria)filters.get(i)).getCriteria(),true); }
         */
        return ret;
    }

