    /**
     * Create a data viewer.
     *
     * @param parent
     *            Parent composite
     * @param style
     *            Style to use
     * @return The new data viewer
     */
    protected Control createDataViewer(Composite parent, int style) {
        loadOptions();
        fColorScheme = new TimeGraphColorScheme();
        fDataViewer = new Composite(parent, style) {
            @Override
            public void redraw() {
                fTimeScaleCtrl.redraw();
                fTimeGraphCtrl.redraw();
                super.redraw();
            }
        };
        GridLayout gl = new GridLayout(2, false);
        gl.marginHeight = fBorderWidth;
        gl.marginWidth = 0;
        gl.verticalSpacing = 0;
        gl.horizontalSpacing = 0;
        fDataViewer.setLayout(gl);

        fTimeScaleCtrl = new TimeGraphScale(fDataViewer, fColorScheme);
        fTimeScaleCtrl.setTimeProvider(fTimeDataProvider);
        fTimeScaleCtrl.setLayoutData(new GridData(SWT.FILL, SWT.DEFAULT, true, false));
        fTimeScaleCtrl.setHeight(fTimeScaleHeight);
        fTimeScaleCtrl.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseScrolled(MouseEvent e) {
                fTimeGraphCtrl.zoom(e.count > 0);
            }
        });

        fVerticalScrollBar = new Slider(fDataViewer, SWT.VERTICAL | SWT.NO_FOCUS);
        fVerticalScrollBar.setLayoutData(new GridData(SWT.DEFAULT, SWT.FILL, false, true, 1, 2));
        fVerticalScrollBar.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                setTopIndex(fVerticalScrollBar.getSelection());
            }
        });

        fTimeGraphCtrl = createTimeGraphControl(fDataViewer, fColorScheme);

        fTimeGraphCtrl.setTimeProvider(this);
        fTimeGraphCtrl.setTimeGraphScale(fTimeScaleCtrl);
        fTimeGraphCtrl.addSelectionListener(this);
        fTimeGraphCtrl.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        fTimeGraphCtrl.addMouseWheelListener(new MouseWheelListener() {
            @Override
            public void mouseScrolled(MouseEvent e) {
                adjustVerticalScrollBar();
            }
        });
        fTimeGraphCtrl.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.character == '+') {
                    zoomIn();
                } else if (e.character == '-') {
                    zoomOut();
                }
                adjustVerticalScrollBar();
            }
        });

        fHorizontalScrollBar = new Slider(fDataViewer, SWT.HORIZONTAL | SWT.NO_FOCUS);
        fHorizontalScrollBar.setLayoutData(new GridData(SWT.FILL, SWT.DEFAULT, true, false));
        fHorizontalScrollBar.addListener(SWT.MouseWheel, new Listener() {
            @Override
            public void handleEvent(Event event) {
                if ((event.stateMask & SWT.MODIFIER_MASK) == SWT.CTRL) {
                    getTimeGraphControl().zoom(event.count > 0);
                } else {
                    getTimeGraphControl().horizontalScroll(event.count > 0);
                }
                // don't handle the immediately following SWT.Selection event
                event.doit = false;
            }
        });
        fHorizontalScrollBar.addListener(SWT.Selection, new Listener() {
            @Override
            public void handleEvent(Event event) {
                int start = fHorizontalScrollBar.getSelection();
                long time0 = getTime0();
                long time1 = getTime1();
                long timeMin = getMinTime();
                long timeMax = getMaxTime();
                long delta = timeMax - timeMin;

                long range = time1 - time0;
                time0 = timeMin + Math.round(delta * ((double) start / H_SCROLLBAR_MAX));
                time1 = time0 + range;

                // TODO: Follow-up with Bug 310310
                // In Linux SWT.DRAG is the only value received
                // https://bugs.eclipse.org/bugs/show_bug.cgi?id=310310
                if (event.detail == SWT.DRAG) {
                    setStartFinishTime(time0, time1);
                } else {
                    setStartFinishTimeNotify(time0, time1);
                }
            }
        });

        Composite filler = new Composite(fDataViewer, SWT.NONE);
        GridData gd = new GridData(SWT.DEFAULT, SWT.DEFAULT, false, false);
        gd.heightHint = fHorizontalScrollBar.getSize().y;
        filler.setLayoutData(gd);
        filler.setLayout(new FillLayout());

        fTimeGraphCtrl.addControlListener(new ControlAdapter() {
            @Override
            public void controlResized(ControlEvent event) {
                resizeControls();
            }
        });
        resizeControls();
        fDataViewer.update();
        adjustHorizontalScrollBar();
        adjustVerticalScrollBar();
        return fDataViewer;
    }

