    /**
     * Update the statistics values. It can be extended by subclasses if they
     * want to show something other than the base information in their viewer.
     * They can decide to show the base information too, by calling
     * super.updateValues() or not.
     *
     * @param statsData
     *            The statistics tree we are updating
     * @param trace
     *            The trace related to these statistics
     * @param timeRange
     *            The time range for which we are updating. For updates to the
     *            global data this should be the whole (available) time range of
     *            the trace.
     * @param isGlobal
     *            Are we updating the Global data (for the complete time range
     *            of the trace), or the selected time range data?
     */
    protected void updateValues(AbsTmfStatisticsTree statsData, ITmfTrace trace,
            TmfTimeRange timeRange, boolean isGlobal) {
        ITmfStatistics stats = trace.getStatistics();

        /*
         * "Global", "partial", "total", etc., it's all very confusing...
         *
         * The base view shows the total count for the trace and for
         * each even types, organized in columns like this:
         *
         *                   |  Global  |  Time range |
         * trace name        |    A     |      B      |
         *    Event Type     |          |             |
         *       <event 1>   |    C     |      D      |
         *       <event 2>   |   ...    |     ...     |
         *         ...       |          |             |
         *
         * Here, we called the cells like this:
         *  A : GlobalTotal
         *  B : TimeRangeTotal
         *  C : GlobalTypeCount(s)
         *  D : TimeRangeTypeCount(s)
         */

        ITmfTimestamp start = timeRange.getStartTime();
        ITmfTimestamp end = timeRange.getEndTime();
        String name = trace.getName();

        /*
         * Fill in the Total row (cell A or B, depending if isGlobal)
         * (we can still use .getEventsInRange(), even if it's global,
         * start and end will cover the whole trace)
         */
        long globalTotal = stats.getEventsInRange(start, end);
        statsData.setTotal(name, isGlobal, globalTotal);

        /* Fill in an the event counts (either cells C or D) */
        Map<String, Long> map = stats.getEventTypesInRange(start, end);
        for (Map.Entry<String, Long> entry : map.entrySet()) {
            statsData.setTypeCount(name, entry.getKey(), isGlobal, entry.getValue());
        }
    }

