    private boolean updateStateEntries(ITmfStateSystem ss, List<ITmfStateInterval> fullState, TmfTreeViewerEntry parent, int parentQuark, long timestamp) {
        boolean changed = false;
        try {
            for (int quark : ss.getSubAttributes(parentQuark, false)) {
                if (quark >= fullState.size()) {
                    // attribute was created after the full state query
                    continue;
                }
                ITmfStateInterval interval = fullState.get(quark);
                StateEntry stateEntry = findStateEntry(parent, quark);
                if (stateEntry == null) {
                    boolean modified = fFilterStatus ?
                            interval.getStartTime() == timestamp :
                                !interval.getStateValue().isNull();
                    stateEntry = new StateEntry(ss.getAttributeName(quark), quark, ss.getFullAttributePath(quark),
                            interval.getStateValue(),
                            new TmfTimestamp(interval.getStartTime(), ITmfTimestamp.NANOSECOND_SCALE),
                            new TmfTimestamp(interval.getEndTime(), ITmfTimestamp.NANOSECOND_SCALE),
                            modified);

                    // update children first to know if parent is really needed
                    updateStateEntries(ss, fullState, stateEntry, quark, timestamp);

                    /*
                     * Add this entry to parent if filtering is off, or
                     * if the entry has children to display, or
                     * if there is a state change at the current timestamp
                     */
                    if (!fFilterStatus || stateEntry.hasChildren() || interval.getStartTime() == timestamp) {
                        parent.addChild(stateEntry);
                        changed = true;
                    }
                } else {
                    stateEntry.update(interval.getStateValue(),
                            new TmfTimestamp(interval.getStartTime(), ITmfTimestamp.NANOSECOND_SCALE),
                            new TmfTimestamp(interval.getEndTime(), ITmfTimestamp.NANOSECOND_SCALE));

                    // update children recursively
                    updateStateEntries(ss, fullState, stateEntry, quark, timestamp);
                }

            }
        } catch (AttributeNotFoundException e) {
            /* Should not happen, we're iterating on known attributes */
        }
        return changed;
    }

