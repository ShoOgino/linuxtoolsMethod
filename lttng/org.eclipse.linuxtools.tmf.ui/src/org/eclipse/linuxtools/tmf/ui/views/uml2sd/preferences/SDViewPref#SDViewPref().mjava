    /**
     * Builds the Sequence Diagram preference handler: - Define the preference default values. - Load the currently used
     * preferences setting
     */
    protected SDViewPref() {
        fPrefStore = Activator.getDefault().getPreferenceStore();

        fPrefStore.setDefault(PREF_LINK_FONT, true);
        fPrefStore.setDefault(PREF_EXCLUDE_EXTERNAL_TIME, true);
        fPrefStore.setDefault(PREF_LIFELINE_WIDTH, 200);
        fPrefStore.setDefault(PREF_USE_GRADIENT, true);
        fPrefStore.setDefault(PREF_TOOLTIP, true);

        fFontPref = new Hashtable<>();
        fForeColorPref = new Hashtable<>();
        fBackColorPref = new Hashtable<>();
        fTextColorPref = new Hashtable<>();

        for (int i = 0; i < FONT_LIST.length; i++) {
            if (FONT_LIST[i].equals(PREF_FRAME_NAME)) {
                FontData[] data = Display.getDefault().getSystemFont().getFontData();
                data[0].setStyle(SWT.BOLD);
                PreferenceConverter.setDefault(fPrefStore, FONT_LIST[i], data[0]);
                PreferenceConverter.setDefault(fPrefStore, FONT_LIST[i] + TEMP_TAG, data[0]);
            } else {
                PreferenceConverter.setDefault(fPrefStore, FONT_LIST[i], Display.getDefault().getSystemFont().getFontData());
                PreferenceConverter.setDefault(fPrefStore, FONT_LIST[i] + TEMP_TAG, Display.getDefault().getSystemFont().getFontData());
            }
        }

        for (int i = 0; i < PREF_BACK_COLOR_LIST.length; i++) {
            IColor color;
            if ((PREF_BACK_COLOR_LIST[i].equals(PREF_EXEC)) || PREF_BACK_COLOR_LIST[i].equals(PREF_FRAME_NAME)) {
                color = new ColorImpl(Display.getDefault(), 201, 222, 233);
            } else if (PREF_BACK_COLOR_LIST[i].equals(PREF_LIFELINE)) {
                color = new ColorImpl(Display.getDefault(), 220, 220, 220);
            } else if (PREF_BACK_COLOR_LIST[i].equals(PREF_LIFELINE_HEADER)) {
                color = new ColorImpl(Display.getDefault(), 245, 244, 244);
            } else {
                color = new ColorImpl(Display.getDefault(), 255, 255, 255);
            }
            PreferenceConverter.setDefault(fPrefStore, PREF_BACK_COLOR_LIST[i] + BACK_COLOR_POSTFIX, ((Color) color.getColor()).getRGB());
            PreferenceConverter.setDefault(fPrefStore, PREF_BACK_COLOR_LIST[i] + BACK_COLOR_POSTFIX + TEMP_TAG, ((Color) color.getColor()).getRGB());
            color.dispose();
        }

        for (int i = 0; i < PREF_FORE_COLOR_LIST.length; i++) {
            IColor color;
            if (PREF_FORE_COLOR_LIST[i].equals(PREF_LIFELINE)) {
                color = new ColorImpl(Display.getDefault(), 129, 129, 129);
            } else if (PREF_FORE_COLOR_LIST[i].equals(PREF_FRAME_NAME)) {
                color = new ColorImpl(Display.getDefault(), 81, 153, 200);
            } else if (PREF_FORE_COLOR_LIST[i].equals(PREF_LIFELINE_HEADER)) {
                color = new ColorImpl(Display.getDefault(), 129, 127, 137);
            } else {
                color = new ColorImpl(Display.getDefault(), 134, 176, 212);
            }
            PreferenceConverter.setDefault(fPrefStore, PREF_FORE_COLOR_LIST[i] + FORE_COLOR_POSTFIX, ((Color) color.getColor()).getRGB());
            PreferenceConverter.setDefault(fPrefStore, PREF_FORE_COLOR_LIST[i] + FORE_COLOR_POSTFIX + TEMP_TAG, ((Color) color.getColor()).getRGB());
            color.dispose();
        }

        for (int i = 0; i < PREF_TEXT_COLOR_LIST.length; i++) {
            IColor color;
            if (PREF_TEXT_COLOR_LIST[i].equals(PREF_LIFELINE)) {
                color = new ColorImpl(Display.getDefault(), 129, 129, 129);
            } else if (PREF_TEXT_COLOR_LIST[i].equals(PREF_FRAME_NAME)) {
                color = new ColorImpl(Display.getDefault(), 0, 0, 0);
            } else if (PREF_TEXT_COLOR_LIST[i].equals(PREF_LIFELINE_HEADER)) {
                color = new ColorImpl(Display.getDefault(), 129, 127, 137);
            } else {
                color = new ColorImpl(Display.getDefault(), 134, 176, 212);
            }
            PreferenceConverter.setDefault(fPrefStore, PREF_TEXT_COLOR_LIST[i] + TEXT_COLOR_POSTFIX, ((Color) color.getColor()).getRGB());
            PreferenceConverter.setDefault(fPrefStore, PREF_TEXT_COLOR_LIST[i] + TEXT_COLOR_POSTFIX + TEMP_TAG, ((Color) color.getColor()).getRGB());
            color.dispose();
        }

        IColor color = new ColorImpl(Display.getDefault(), 218, 232, 238);
        PreferenceConverter.setDefault(fPrefStore, PREF_TIME_COMP, ((Color) color.getColor()).getRGB());
        color.dispose();

        buildFontsAndColors();

        fPrefStore.addPropertyChangeListener(this);
    }

