    public void activateHoverHelp(final Control control) {
        //FIXME: remove old listeners
        control.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseDown(MouseEvent e) {
                if (_tipShell.isVisible()) {
                    _tipShell.setVisible(false);
                }
            }
        });

        control.addMouseMoveListener(new MouseMoveListener() {
            @Override
            public void mouseMove(MouseEvent e) {
                if (_tipShell.isVisible()) {
                    _tipShell.setVisible(false);
                }
            }
        });

        control.addMouseTrackListener(new MouseTrackAdapter() {
            @Override
            public void mouseExit(MouseEvent e) {
                if (_tipShell.isVisible()) {
                    _tipShell.setVisible(false);
                }
            }

            private void addItem(String name, String value) {
                TableItem line = new TableItem(_tipTable, SWT.NONE);
                line.setText(0, name);
                line.setText(1, value);
            }

            private void fillValues(Point pt, TimeGraphControl threadStates, TimeGraphItem item) {
                if (item == null) {
                    return;
                }
                if (! item._trace.hasTimeEvents()) {
                    addItem(Messages.TmfTimeTipHandler_TRACE_GROUP_NAME, item.toString());
                    addItem(Messages.TmfTimeTipHandler_NUMBER_OF_TRACES, "" + item.children.size()); //$NON-NLS-1$
                } else {
                    ITimeGraphEntry thrd = item._trace;
                    ITimeEvent threadEvent = Utils.findEvent(thrd, threadStates.getTimeAtX(pt.x), 2);
                    ITimeEvent nextEvent = Utils.findEvent(thrd, threadStates.getTimeAtX(pt.x), 1);
                    // state name
                    addItem(_utilImp.getStateTypeName(), thrd.getName());
                    if (threadEvent == null) {
                        return;
                    }
                    // thread state
                    String state = _utilImp.getEventName(threadEvent);
                    if (state != null) {
                        addItem(Messages.TmfTimeTipHandler_TRACE_STATE, state);
                    }

                    // This block receives a
                    // list of <String, String> values to be added to the tip
                    // table
                    Map<String, String> eventAddOns = _utilImp.getEventHoverToolTipInfo(threadEvent);
                    if (eventAddOns != null) {
                        for (Iterator<String> iter = eventAddOns.keySet().iterator(); iter.hasNext();) {
                            String message = (String) iter.next();
                            addItem(message, eventAddOns.get(message));
                        }
                    }

                    long eventStartTime = -1;
                    long eventDuration = -1;
                    long eventEndTime = -1;

                    if (threadEvent != null) {
                        eventStartTime = threadEvent.getTime();
                        eventDuration = threadEvent.getDuration();
                        if (eventDuration < 0 && nextEvent != null) {
                            eventEndTime = nextEvent.getTime();
                            eventDuration = eventEndTime - eventStartTime;
                        } else {
                            eventEndTime = eventStartTime + eventDuration;
                        }
                    }

                    // TODO: Check if we need "format"					
                    //					TimeFormat format = TimeFormat.RELATIVE;
                    Resolution res = Resolution.NANOSEC;
                    if (_timeDataProvider.isCalendarFormat()) {
                        //						format = TimeFormat.ABSOLUTE; // Absolute format
                        //														// (calendar)
                        // Add Date
                        addItem(Messages.TmfTimeTipHandler_TRACE_DATE, eventStartTime > -1 ?
                                Utils.formatDate(eventStartTime)
                                : "?"); //$NON-NLS-1$
                        if (eventDuration > 0) {
                            addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME, eventStartTime > -1 ?
                                    Utils.formatTime(eventStartTime, TimeFormat.ABSOLUTE, res)
                                    : "?"); //$NON-NLS-1$

                            addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME, eventEndTime > -1 ?
                                    Utils.formatTime(eventEndTime, TimeFormat.ABSOLUTE, res)
                                    : "?"); //$NON-NLS-1$
                        } else {
                            addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME, eventStartTime > -1 ?
                                    Utils.formatTime(eventStartTime, TimeFormat.ABSOLUTE, res)
                                    : "?"); //$NON-NLS-1$
                        }
                    } else {
                        if (eventDuration > 0) {
                            addItem(Messages.TmfTimeTipHandler_TRACE_START_TIME, eventStartTime > -1 ?
                                    Utils.formatTime(eventStartTime, TimeFormat.RELATIVE, res)
                                    : "?"); //$NON-NLS-1$

                            addItem(Messages.TmfTimeTipHandler_TRACE_STOP_TIME, eventEndTime > -1 ?
                                    Utils.formatTime(eventEndTime, TimeFormat.RELATIVE, res)
                                    : "?"); //$NON-NLS-1$
                        } else {
                            addItem(Messages.TmfTimeTipHandler_TRACE_EVENT_TIME, eventStartTime > -1 ?
                                    Utils.formatTime(eventStartTime, TimeFormat.RELATIVE, res)
                                    : "?"); //$NON-NLS-1$
                        }
                    }

                    if (eventDuration > 0) {
                        // Duration in relative format in any case
                        addItem(Messages.TmfTimeTipHandler_DURATION, eventDuration > -1 ?
                                Utils.formatTime(eventDuration, TimeFormat.RELATIVE, res)
                                : "?"); //$NON-NLS-1$
                    }
                }
            }

            @Override
            public void mouseHover(MouseEvent event) {
                Point pt = new Point(event.x, event.y);
                TimeGraphControl threadStates = (TimeGraphControl) event.widget;
                TimeGraphItem item = threadStates.getItem(pt);
                _tipTable.remove(0, _tipTable.getItemCount() - 1);
                fillValues(pt, threadStates, item);
                _tipTable.getColumn(0).pack();
                _tipTable.getColumn(1).pack();
                _tipShell.pack();
                _tipPosition = control.toDisplay(pt);
                _tipShell.pack();
                setHoverLocation(_tipShell, _tipPosition);
                _tipShell.setVisible(true);
            }
        });
    }

