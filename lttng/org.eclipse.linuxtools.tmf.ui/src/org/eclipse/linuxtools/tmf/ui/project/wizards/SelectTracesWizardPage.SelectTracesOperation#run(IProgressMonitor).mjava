        public void run(IProgressMonitor progressMonitor) {

            // Check if operation was cancelled.
            boolean changed = false;

            // Add the selected traces to the experiment
            Set<String> keys = fPreviousTraces.keySet();
            SubMonitor subMonitor = SubMonitor.convert(progressMonitor, traces.length + keys.size());
            try {
                for (TmfTraceElement trace : traces) {
                    ModalContext.checkCanceled(progressMonitor);
                    String name = trace.getElementPath();
                    if (keys.contains(name)) {
                        subMonitor.setTaskName(Messages.SelectTracesWizardPage_TraceRemovalTask + " " + trace.getElementPath()); //$NON-NLS-1$
                        fPreviousTraces.remove(name);
                    } else {
                        subMonitor.setTaskName(Messages.SelectTracesWizardPage_TraceSelectionTask + " " + trace.getElementPath()); //$NON-NLS-1$
                        fExperiment.addTrace(trace, false);
                        changed = true;
                    }
                    subMonitor.worked(1);
                }

                // Remove traces that were unchecked (thus left in
                // fPreviousTraces)
                keys = fPreviousTraces.keySet();
                for (String key : keys) {
                    ModalContext.checkCanceled(progressMonitor);
                    TmfTraceElement trace = fPreviousTraces.get(key);
                    subMonitor.setTaskName(Messages.SelectTracesWizardPage_TraceRemovalTask + " " + trace.getElementPath()); //$NON-NLS-1$

                    try {
                        fExperiment.removeTrace(trace);
                    } catch (CoreException e) {
                        Activator.getDefault().logError(Messages.SelectTracesWizardPage_SelectionError + " " + experiment.getName(), e); //$NON-NLS-1$
                    }
                    changed = true;
                    subMonitor.worked(1);
                }
                if (changed) {
                    fExperiment.closeEditors();
                    fExperiment.deleteSupplementaryResources();
                }
                setStatus(Status.OK_STATUS);
            } catch (InterruptedException e) {
                setStatus(Status.CANCEL_STATUS);
            } catch (Exception e) {
                Activator.getDefault().logError(Messages.SelectTracesWizardPage_SelectionError, e);
                setStatus(new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.SelectTracesWizardPage_SelectionError, e));
            }
        }

