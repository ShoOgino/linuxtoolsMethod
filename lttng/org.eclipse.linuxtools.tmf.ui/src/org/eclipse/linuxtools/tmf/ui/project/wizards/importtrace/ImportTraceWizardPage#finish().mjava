    /**
     * Finish the import.
     *
     * @return <code>true</code> if successful else false
     */
    public boolean finish() {
        // Ensure source is valid
        File sourceDir = new File(getSourceDirectoryName());
        if (!sourceDir.isDirectory()) {
            setErrorMessage(Messages.ImportTraceWizard_InvalidTraceDirectory);
            return false;
        }

        try {
            sourceDir.getCanonicalPath();
        } catch (IOException e) {
            MessageDialog.openInformation(getContainer().getShell(), Messages.ImportTraceWizard_Information,
                    Messages.ImportTraceWizard_InvalidTraceDirectory);
            return false;
        }

        // Save directory for next import operation
        fRootDirectory = getSourceDirectoryName();

        List<FileSystemElement> selectedResources = getSelectedResources();
        Iterator<FileSystemElement> resources = selectedResources.iterator();

        // Use a map to end up with unique resources (getSelectedResources() can
        // return duplicates)
        Map<String, File> fileSystemObjects = new HashMap<String, File>();
        while (resources.hasNext()) {
            File file = (File) resources.next().getFileSystemObject();
            String key = file.getAbsolutePath();
            fileSystemObjects.put(key, file);
        }

        if (fileSystemObjects.size() > 0) {
            boolean ok = importResources(fileSystemObjects);
            String traceBundle = null;
            String traceTypeId = null;
            String traceIcon = null;
            String traceType = fTraceTypes.getText();
            boolean traceTypeOK = false;
            if (traceType.startsWith(TmfTraceType.CUSTOM_TXT_CATEGORY)) {
                for (CustomTxtTraceDefinition def : CustomTxtTraceDefinition.loadAll()) {
                    if (traceType.equals(TmfTraceType.CUSTOM_TXT_CATEGORY + SEPARATOR + def.definitionName)) {
                        traceTypeOK = true;
                        traceBundle = Activator.getDefault().getBundle().getSymbolicName();
                        traceTypeId = CustomTxtTrace.class.getCanonicalName() + SEPARATOR + def.definitionName;
                        traceIcon = DEFAULT_TRACE_ICON_PATH;
                        break;
                    }
                }
            } else if (traceType.startsWith(TmfTraceType.CUSTOM_XML_CATEGORY)) {
                for (CustomXmlTraceDefinition def : CustomXmlTraceDefinition.loadAll()) {
                    if (traceType.equals(TmfTraceType.CUSTOM_XML_CATEGORY + SEPARATOR + def.definitionName)) {
                        traceTypeOK = true;
                        traceBundle = Activator.getDefault().getBundle().getSymbolicName();
                        traceTypeId = CustomXmlTrace.class.getCanonicalName() + SEPARATOR + def.definitionName;
                        traceIcon = DEFAULT_TRACE_ICON_PATH;
                        break;
                    }
                }
            } else {
                if (!traceType.equals("")) { //$NON-NLS-1$
                    // Trace type was selected
                    String temp[] = traceType.split(SEPARATOR, 2);
                    if (temp.length < 2) {
                        Activator.getDefault().logError("Error with trace type " + traceType); //$NON-NLS-1$
                        return false;
                    }
                    final String traceId = TmfTraceType.getInstance().getTraceTypeId(temp[0], temp[1]);
                    if (traceId != null) {
                        if (!TmfTraceType.getInstance().validateTrace(traceId, getSelectedResources())) {
                            setMessage(null);
                            setErrorMessage(Messages.ImportTraceWizard_TraceValidationFailed);
                            return false;
                        }
                    } else {
                        setMessage(null);
                        setErrorMessage(Messages.ImportTraceWizard_TraceValidationFailed);
                        return false;
                    }
                    IConfigurationElement ce = TmfTraceType.getInstance().getTraceAttributes(traceId);
                    if (ce != null) {
                        traceTypeOK = true;
                        traceBundle = ce.getContributor().getName();
                        traceTypeId = ce.getAttribute(TmfTraceType.ID_ATTR);
                        traceIcon = ce.getAttribute(TmfTraceType.ICON_ATTR);
                    }
                }
            }
            if (ok && traceTypeOK && !traceType.equals("")) { //$NON-NLS-1$
                // Tag the selected traces with their type
                List<String> files = new ArrayList<String>(fileSystemObjects.keySet());
                Collections.sort(files, new Comparator<String>() {
                    @Override
                    public int compare(String o1, String o2) {
                        String v1 = o1 + File.separatorChar;
                        String v2 = o2 + File.separatorChar;
                        return v1.compareTo(v2);
                    }
                });
                // After sorting, traces correspond to the unique prefixes
                String prefix = null;
                for (int i = 0; i < files.size(); i++) {
                    File file = fileSystemObjects.get(files.get(i));
                    String name = file.getAbsolutePath() + File.separatorChar;
                    if (fTargetFolder != null && (prefix == null || !name.startsWith(prefix))) {
                        prefix = name; // new prefix
                        IResource resource = fTargetFolder.findMember(file.getName());
                        if (resource != null) {
                            try {
                                // Set the trace properties for this resource
                                resource.setPersistentProperty(TmfCommonConstants.TRACEBUNDLE, traceBundle);
                                resource.setPersistentProperty(TmfCommonConstants.TRACETYPE, traceTypeId);
                                resource.setPersistentProperty(TmfCommonConstants.TRACEICON, traceIcon);
                                TmfProjectElement tmfProject = TmfProjectRegistry.getProject(resource.getProject());
                                if (tmfProject != null) {
                                    for (TmfTraceElement traceElement : tmfProject.getTracesFolder().getTraces()) {
                                        if (traceElement.getName().equals(resource.getName())) {
                                            traceElement.refreshTraceType();
                                            break;
                                        }
                                    }
                                }
                            } catch (CoreException e) {
                                Activator.getDefault().logError("Error importing trace resource " + resource.getName(), e); //$NON-NLS-1$
                            }
                        }
                    }
                }
            }
            return ok;
        }

        MessageDialog.openInformation(getContainer().getShell(), Messages.ImportTraceWizard_Information,
                Messages.ImportTraceWizard_SelectTraceNoneSelected);
        return false;
    }

