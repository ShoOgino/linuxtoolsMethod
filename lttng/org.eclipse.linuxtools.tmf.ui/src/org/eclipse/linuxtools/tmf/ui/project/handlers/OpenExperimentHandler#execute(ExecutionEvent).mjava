    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null)
            return false;

        // Close the current experiment, if any
        TmfExperiment<?> currentExperiment = TmfExperiment.getCurrentExperiment();
        if (currentExperiment != null) {
            currentExperiment.dispose();
        }

        // Instantiate the experiment's traces
        List<TmfTraceElement> traceEntries = fExperiment.getTraces();
        int nbTraces = traceEntries.size();
        ITmfTrace<?>[] traces = new ITmfTrace[nbTraces];
        for (int i = 0; i < nbTraces; i++) {
            TmfTraceElement element = traceEntries.get(i);
            ITmfTrace trace = element.instantiateTrace();
            TmfEvent traceEvent = element.instantiateEvent();
            try {
                trace.initTrace(element.getLocation().getPath(), traceEvent.getClass());
            } catch (FileNotFoundException e) {
                displayErrorMsg(""); //$NON-NLS-1$
            }
            traces[i] = trace;
        }

        // Create the experiment and signal
        TmfExperiment experiment = new TmfExperiment(traces[0].getClass(), "Experiment", traces, //$NON-NLS-1$
                traces[0].getCacheSize());
        TmfExperiment.setCurrentExperiment(experiment);
        TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this, experiment));

        return null;
    }

