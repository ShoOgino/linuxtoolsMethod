    /**
     * Get the mangled type information from an array of types.
     *
     * @param type
     *            The types to convert. See method implementation for what it
     *            expects.
     * @return The mangled string of types
     */
    @SuppressWarnings("nls")
    static public String getTypeSignature(String type) {
        int dim = 0;
        for (int j = 0; j < type.length(); j++) {
            if (type.charAt(j) == '[') {
                dim++;
            }
        }
        int pos = type.indexOf('[');
        if (pos >= 0) {
            type = type.substring(0, pos);
        }
        StringBuffer sig = new StringBuffer(""); //$NON-NLS-1$
        for (int j = 0; j < dim; j++)
         {
            sig.append("[");                 //$NON-NLS-1$
        }
        if (type.equals("boolean")) {
            sig.append("Z");                 //$NON-NLS-1$
        } else if (type.equals("byte")) {
            sig.append("B");                 //$NON-NLS-1$
        } else if (type.equals("char")) {
            sig.append("C");                 //$NON-NLS-1$
        } else if (type.equals("short")) {
            sig.append("S");                 //$NON-NLS-1$
        } else if (type.equals("int")) {
            sig.append("I");                 //$NON-NLS-1$
        } else if (type.equals("long")) {
            sig.append("J");                 //$NON-NLS-1$
        } else if (type.equals("float")) {
            sig.append("F");                 //$NON-NLS-1$
        } else if (type.equals("double")) {
            sig.append("D");                 //$NON-NLS-1$
        } else if (type.equals("void")) {
            sig.append("V");                 //$NON-NLS-1$
        }
        else {
            sig.append("L").append(type.replace('.', '/')).append(";"); //$NON-NLS-1$ //$NON-NLS-2$
        }
        return sig.toString();
    }

