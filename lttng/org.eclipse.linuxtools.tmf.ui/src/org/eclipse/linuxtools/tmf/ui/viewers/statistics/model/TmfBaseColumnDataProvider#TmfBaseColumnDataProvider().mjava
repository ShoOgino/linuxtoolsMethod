    /**
     * Create basic columns to represent the statistics data
     */
    public TmfBaseColumnDataProvider() {
        /* List that will be used to create the table. */
        ImmutableList.Builder<TmfBaseColumnData> builder = new ImmutableList.Builder<>();
        /* Column showing the name of the events and its level in the tree */
        builder.add(new TmfBaseColumnData(
                LEVEL_COLUMN,
                200,
                SWT.LEFT,
                LEVEL_COLUMN_TIP,
                new ColumnLabelProvider() {
                    @Override
                    public String getText(Object element) {
                        return ((TmfStatisticsTreeNode) element).getName();
                    }

                    @Override
                    public Image getImage(Object element) {
                        TmfStatisticsTreeNode node = (TmfStatisticsTreeNode) element;
                        if (HIDDEN_FOLDER_LEVELS.contains(node.getName())) {
                            return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_FOLDER);
                        }
                        return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJ_ELEMENT);
                    }
                },
                new ViewerComparator() {
                    @Override
                    public int compare(Viewer viewer, Object e1, Object e2) {
                        TmfStatisticsTreeNode n1 = (TmfStatisticsTreeNode) e1;
                        TmfStatisticsTreeNode n2 = (TmfStatisticsTreeNode) e2;

                        return n1.getName().compareTo(n2.getName());
                    }
                },
                null));

        /* Column showing the total number of events */
        builder.add(new TmfBaseColumnData(
                EVENTS_COUNT_COLUMN,
                140,
                SWT.RIGHT,
                EVENTS_COUNT_COLUMN_TIP,
                new ColumnLabelProvider() {
                    @Override
                    public String getText(Object element) {
                        TmfStatisticsTreeNode node = (TmfStatisticsTreeNode) element;
                        if (!HIDDEN_FOLDER_LEVELS.contains(node.getName())) {
                            return TmfStatisticsFormatter.toColumnData(node, StatsColumn.TOTAL);
                        }
                        return EMPTY_STRING;
                    }
                },
                new ViewerComparator() {
                    @Override
                    public int compare(Viewer viewer, Object e1, Object e2) {
                        TmfStatisticsTreeNode n1 = (TmfStatisticsTreeNode) e1;
                        TmfStatisticsTreeNode n2 = (TmfStatisticsTreeNode) e2;

                        return (int) (n1.getValues().getTotal() - n2.getValues().getTotal());
                    }
                },
                new ITmfColumnPercentageProvider() {
                    @Override
                    public double getPercentage(TmfStatisticsTreeNode node) {
                        TmfStatisticsTreeNode top = node.getTop();
                        return (top == null || top.getValues().getTotal() == 0) ?
                                0 : (double) (node.getValues().getTotal()) / top.getValues().getTotal();
                    }
                }));

        /* Column showing the number of events within the selected time range */
        builder.add(new TmfBaseColumnData(
                PARTIAL_EVENTS_COUNT_COLUMN,
                140,
                SWT.RIGHT,
                PARTIAL_COUNT_COLUMN_TIP,
                new ColumnLabelProvider() {
                    @Override
                    public String getText(Object element) {
                        TmfStatisticsTreeNode node = (TmfStatisticsTreeNode) element;
                        if (!HIDDEN_FOLDER_LEVELS.contains(node.getName())) {
                            return TmfStatisticsFormatter.toColumnData(node, StatsColumn.PARTIAL);
                        }
                        return EMPTY_STRING;
                    }

                },
                new ViewerComparator() {
                    @Override
                    public int compare(Viewer viewer, Object e1, Object e2) {
                        TmfStatisticsTreeNode n1 = (TmfStatisticsTreeNode) e1;
                        TmfStatisticsTreeNode n2 = (TmfStatisticsTreeNode) e2;

                        return (int) (n1.getValues().getPartial() - n2.getValues().getPartial());
                    }
                },
                new ITmfColumnPercentageProvider() {
                    @Override
                    public double getPercentage(TmfStatisticsTreeNode node) {
                        TmfStatisticsTreeNode top = node.getTop();
                        return (top == null || top.getValues().getPartial() == 0) ?
                                0 : (double) (node.getValues().getPartial()) / top.getValues().getPartial();
                    }
                }));

        /* Dummy column used to "fix" the display on Linux (using GTK) */
        builder.add(new TmfBaseColumnData(EMPTY_STRING, 1, SWT.RIGHT, EMPTY_STRING,
                new ColumnLabelProvider() {
                    @Override
                    public String getText(Object element) {
                        return EMPTY_STRING;
                    }
                },
                new ViewerComparator(),
                new ITmfColumnPercentageProvider() {
                    @Override
                    public double getPercentage(TmfStatisticsTreeNode node) {
                        return 0;
                    }
                }));

        fColumnData = builder.build();
    }

