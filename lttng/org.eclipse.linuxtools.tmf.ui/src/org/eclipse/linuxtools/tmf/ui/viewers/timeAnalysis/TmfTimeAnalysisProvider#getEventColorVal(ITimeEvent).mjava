	/**
	 * Uses the abstract method getEventcolor to obtain an enum value and
	 * convert it to an internal color index
	 * 
	 * @param event
	 * @return
	 */
	public int getEventColorVal(ITimeEvent event) {
		StateColor colors = getEventColor(event);
		if (colors == StateColor.GREEN) {
			return TraceColorScheme.GREEN_STATE;
		} else if (colors == StateColor.DARK_BLUE) {
			return TraceColorScheme.DARK_BLUE_STATE;
		} else if (colors == StateColor.RED) {
			return TraceColorScheme.RED_STATE;
		} else if (colors == StateColor.GOLD) {
			return TraceColorScheme.GOLD_STATE;
		} else if (colors == StateColor.ORANGE) {
			return TraceColorScheme.ORANGE_STATE;
		} else if (colors == StateColor.GRAY) {
			return TraceColorScheme.GRAY_STATE;
		} else if (colors == StateColor.DARK_GREEN) {
			return TraceColorScheme.DARK_GREEN_STATE;
		} else if (colors == StateColor.DARK_YELLOW) {
			return TraceColorScheme.DARK_YELLOW_STATE;
		} else if (colors == StateColor.MAGENTA3) {
			return TraceColorScheme.MAGENTA3_STATE;
		} else if (colors == StateColor.PURPLE1) {
			return TraceColorScheme.PURPLE1_STATE;
		} else if (colors == StateColor.PINK1) {
			return TraceColorScheme.PINK1_STATE;
		} else if (colors == StateColor.AQUAMARINE) {
			return TraceColorScheme.AQUAMARINE_STATE;
		} else if (colors == StateColor.LIGHT_BLUE) {
			return TraceColorScheme.LIGHT_BLUE_STATE;
		} else if (colors == StateColor.CADET_BLUE) {
			return TraceColorScheme.CADET_BLUE_STATE_SEL;
		} else if (colors == StateColor.OLIVE) {
			return TraceColorScheme.OLIVE_STATE;
		}

		return TraceColorScheme.BLACK_STATE;
	}

