    @Override
    public void createPartControl(Composite parent) {
        fViewer = new TimeGraphViewer(parent, SWT.NONE);
        fPresentationProvider = new TimeChartAnalysisProvider();
        fViewer.setTimeGraphProvider(fPresentationProvider);
        fViewer.setTimeFormat(TimeFormat.CALENDAR);
        fViewer.addTimeListener(this);
        fViewer.addRangeListener(this);
        fViewer.addSelectionListener(this);
        fViewer.setMinimumItemWidth(1);

        IStatusLineManager statusLineManager = getViewSite().getActionBars().getStatusLineManager();
        fViewer.getTimeGraphControl().setStatusLineManager(statusLineManager);

        IEditorReference[] editorReferences = getSite().getPage().getEditorReferences();
        for (IEditorReference editorReference : editorReferences) {
            IEditorPart editor = editorReference.getEditor(false);
            if (editor instanceof ITmfTraceEditor) {
                ITmfTrace trace = ((ITmfTraceEditor) editor).getTrace();
                if (trace != null) {
                    IFile bookmarksFile = ((ITmfTraceEditor) editor).getBookmarksFile();
                    TimeChartAnalysisEntry timeAnalysisEntry = new TimeChartAnalysisEntry(trace, fDisplayWidth * 2);
                    fTimeAnalysisEntries.add(timeAnalysisEntry);
                    fDecorationProviders.put(trace, new TimeChartDecorationProvider(bookmarksFile));
                    Thread thread = new ProcessTraceThread(timeAnalysisEntry);
                    thread.start();
                }
            }
        }
        fViewer.setInput(fTimeAnalysisEntries.toArray(new TimeChartAnalysisEntry[0]));

        ColorSettingsManager.addColorSettingsListener(this);
        ResourcesPlugin.getWorkspace().addResourceChangeListener(this, IResourceChangeEvent.POST_CHANGE);
    }

