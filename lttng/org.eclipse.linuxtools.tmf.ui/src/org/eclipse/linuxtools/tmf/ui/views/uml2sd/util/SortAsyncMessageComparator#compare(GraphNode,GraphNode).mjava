    /**
     * Compares two synchronous syncMessages Returns 0 (equal) if one of the message is not synchronous
     * 
     * @return 1 if arg0 is greater, 0 if equal, -1 otherwise
     */
    @Override
    public int compare(GraphNode arg0, GraphNode arg1) {
        if (arg0 instanceof AsyncMessage && arg1 instanceof AsyncMessage) {
            AsyncMessage m1 = (AsyncMessage) arg0;
            AsyncMessage m2 = (AsyncMessage) arg1;
            int m1Min, m2Min;
            // AsyncMessage has two ends which may have different event occurrences
            // Search for the smaller event occurrence for each messages
            if (m1.getStartOccurrence() > m1.getEndOccurrence())
                m1Min = m1.getEndOccurrence();
            else
                m1Min = m1.getStartOccurrence();
            if (m2.getStartOccurrence() > m2.getEndOccurrence())
                m2Min = m2.getEndOccurrence();
            else
                m2Min = m2.getStartOccurrence();

            int m1Max, m2Max;
            // Search for the greater event occurrence for each messages
            if (m1.getStartOccurrence() > m1.getEndOccurrence())
                m1Max = m1.getStartOccurrence();
            else
                m1Max = m1.getEndOccurrence();
            if (m2.getStartOccurrence() > m2.getEndOccurrence())
                m2Max = m2.getStartOccurrence();
            else
                m2Max = m2.getEndOccurrence();

            if (m1Min > m2Min)
                return 1;
            else if ((m1Min == m2Min))
                if (m1Max == m2Max)
                    return 0;
                else if (m1Max > m2Max)
                    return -1;
                else
                    return 1;
            else
                return -1;
        } else
            return 0;
    }

