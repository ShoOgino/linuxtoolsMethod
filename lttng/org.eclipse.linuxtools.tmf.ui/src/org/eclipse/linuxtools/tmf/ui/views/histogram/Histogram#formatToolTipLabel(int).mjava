    private String formatToolTipLabel(final int index) {
        long startTime = fScaledData.getBucketStartTime(index);
        // negative values are possible if time values came into the model in decreasing order
        if (startTime < 0) {
            startTime = 0;
        }
        final long endTime = fScaledData.getBucketEndTime(index);
        final int nbEvents = (index >= 0) ? fScaledData.fData[index] : 0;
        final String newLine = System.getProperty("line.separator"); //$NON-NLS-1$
        final StringBuffer buffer = new StringBuffer();
        int selectionBeginBucket = Math.min(fScaledData.fSelectionBeginBucket, fScaledData.fSelectionEndBucket);
        int selectionEndBucket = Math.max(fScaledData.fSelectionBeginBucket, fScaledData.fSelectionEndBucket);
        if (selectionBeginBucket <= index && index <= selectionEndBucket && fSelectionBegin != fSelectionEnd) {
            TmfTimestampDelta delta = new TmfTimestampDelta(Math.abs(fSelectionEnd - fSelectionBegin), ITmfTimestamp.NANOSECOND_SCALE);
            buffer.append(NLS.bind(Messages.Histogram_selectionSpanToolTip, delta.toString()));
            buffer.append(newLine);
        }
        buffer.append(NLS.bind(Messages.Histogram_bucketRangeToolTip,
                new TmfTimestamp(startTime, ITmfTimestamp.NANOSECOND_SCALE).toString(),
                new TmfTimestamp(endTime, ITmfTimestamp.NANOSECOND_SCALE).toString()));
        buffer.append(newLine);
        buffer.append(NLS.bind(Messages.Histogram_eventCountToolTip, nbEvents));
        if (!HistogramScaledData.hideLostEvents) {
            final int nbLostEvents = (index >= 0) ? fScaledData.fLostEventsData[index] : 0;
            buffer.append(newLine);
            buffer.append(NLS.bind(Messages.Histogram_lostEventCountToolTip, nbLostEvents));
        }
        return buffer.toString();
    }

