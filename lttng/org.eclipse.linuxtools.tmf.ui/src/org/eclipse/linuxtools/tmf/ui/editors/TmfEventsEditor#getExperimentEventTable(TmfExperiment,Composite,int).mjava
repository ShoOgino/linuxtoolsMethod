    /**
     * Get the events table for an experiment. If all traces in the experiment
     * are of the same type, use the same behavior as if it was one trace of
     * that type.
     *
     * @param experiment
     *            the experiment
     * @param parent
     *            the parent Composite
     * @param cacheSize
     *            the event table cache size
     * @return An event table of the appropriate type
     */
    private static @NonNull TmfEventsTable getExperimentEventTable(
            final TmfExperiment experiment, final Composite parent,
            final int cacheSize) {

        String commonTraceType = getCommonTraceType(experiment);
        if (commonTraceType != null) {
            /*
             * All the traces in this experiment are of the same type, let's
             * just use the normal table for that type.
             */
            return getEventTable(experiment.getTraces()[0], parent, cacheSize);
        }

        /*
         * There are different trace types in the experiment, so we are
         * definitely using a TmfEventsTable. Aggregate the columns from all
         * trace types.
         */
        ITmfTrace[] traces = experiment.getTraces();
        Set<TmfEventTableColumn> cols = new LinkedHashSet<>();

        for (ITmfTrace trace : traces) {
            Collection<? extends TmfEventTableColumn> traceCols =
                    TmfTraceTypeUIUtils.getEventTableColumns(trace);
            if (traceCols == null) {
                cols.addAll(TmfEventsTable.DEFAULT_COLUMNS);
            } else {
                cols.addAll(traceCols);
            }
        }

        return new TmfEventsTable(parent, cacheSize, cols);
    }

