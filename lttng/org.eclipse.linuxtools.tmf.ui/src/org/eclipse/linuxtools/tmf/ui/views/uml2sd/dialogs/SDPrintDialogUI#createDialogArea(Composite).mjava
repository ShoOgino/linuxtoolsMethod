    /**
     * Creates the dialog area.
     *
     * @param parent The parent composite
     * @return dialog control
     */
    public Control createDialogArea(Composite parent) {

        GridLayout parentLayout = new GridLayout();
        parentLayout.numColumns = 6;
        parent.setLayout(parentLayout);

        Group g1 = new Group(parent, SWT.SHADOW_NONE);
        g1.setText(Messages.SequenceDiagram_ZoomOption);
        g1.setLayoutData(newGridData(3));
        GridLayout g1layout = new GridLayout();
        g1layout.numColumns = 2;
        g1.setLayout(g1layout);

        fUseCurrentZoom = new Button(g1, SWT.RADIO);
        fUseCurrentZoom.setText(Messages.SequenceDiagram_UseCurrentZoom);
        fUseCurrentZoom.setLayoutData(newGridData(2));
        fUseCurrentZoom.addSelectionListener(fSelectionListener);

        fSetHPagesNumber = new Button(g1, SWT.RADIO);
        fSetHPagesNumber.setText(Messages.SequenceDiagram_NumberOfHorizontalPages);
        fSetHPagesNumber.setLayoutData(newGridData(1));
        fSetHPagesNumber.addSelectionListener(fSelectionListener);

        fHorPagesNum = new Text(g1, SWT.SINGLE | SWT.BORDER);
        fHorPagesNum.addModifyListener(fModifyListener);

        fSetVPagesNumber = new Button(g1, SWT.RADIO);
        fSetVPagesNumber.setText(Messages.SequenceDiagram_NumberOfVerticalPages);
        fSetVPagesNumber.setLayoutData(newGridData(1));
        fSetVPagesNumber.addSelectionListener(fSelectionListener);

        fVertPagesNum = new Text(g1, SWT.SINGLE | SWT.BORDER);
        fVertPagesNum.addModifyListener(fModifyListener);

        Label nbTotal = new Label(g1, SWT.SHADOW_NONE | SWT.RIGHT);
        nbTotal.setText(Messages.TotalNumberOfPages);
        // nbTotal.setLayoutData(newGridData(1));

        fTotalPages = new Text(g1, SWT.SINGLE | SWT.BORDER | SWT.READ_ONLY);
        // nbHV.addModifyListener(modifListener);

        Group g2 = new Group(parent, SWT.SHADOW_NONE);
        g2.setText(Messages.SequenceDiagram_Preview);
        GridData data = new GridData(GridData.GRAB_VERTICAL | GridData.VERTICAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL);
        data.horizontalSpan = 3;
        data.verticalSpan = 2;
        g2.setLayoutData(data);
        GridLayout g2layout = new GridLayout();
        // g2layout.
        g2layout.numColumns = 1;
        // SVLayout g2layout = new SVLayout();
        g2.setLayout(g2layout);

        GridData data2 = new GridData(GridData.GRAB_VERTICAL | GridData.VERTICAL_ALIGN_FILL | GridData.GRAB_HORIZONTAL | GridData.HORIZONTAL_ALIGN_FILL);
        data2.horizontalSpan = 1;
        data2.verticalSpan = 1;

        fOverviewCanvas = new LocalSD(g2, SWT.NO_BACKGROUND);
        GridData seqDiagLayoutData = new GridData(GridData.HORIZONTAL_ALIGN_FILL | GridData.VERTICAL_ALIGN_FILL);
        fOverviewCanvas.setLayoutData(seqDiagLayoutData);
        // overviewCanvas.resizeContents(100,100);
        if (fSdView.getContentsWidth() < fSdView.getVisibleWidth() && fSdView.getContentsHeight() < fSdView.getVisibleHeight()) {
            fTest = 3;
        } else {
            fTest = 10;
        }
        fOverviewCanvas.setFrame(fSdView.getFrame(), true);
        fOverviewCanvas.setZoomValue((float) 1 / fTest);
        fOverviewCanvas.setCornerControl(null);
        seqDiagLayoutData.widthHint = fOverviewCanvas.getContentsWidth() / fTest;
        seqDiagLayoutData.widthHint = fOverviewCanvas.getFrame().getWidth() / fTest + 15;

        if (fSdView.getVisibleWidth() < fSdView.getContentsWidth()) {
            seqDiagLayoutData.widthHint = fOverviewCanvas.getContentsWidth() / fTest;
            if (seqDiagLayoutData.widthHint > Display.getDefault().getClientArea().width / 4) {
                seqDiagLayoutData.widthHint = Display.getDefault().getClientArea().width / 4;
            }
        } else {
            seqDiagLayoutData.widthHint = fOverviewCanvas.getFrame().getWidth() / fTest + 15;
        }

        if (fSdView.getVisibleHeight() < fSdView.getContentsHeight()) {
            seqDiagLayoutData.heightHint = fOverviewCanvas.getContentsHeight() / fTest;
            if (seqDiagLayoutData.heightHint > Display.getDefault().getClientArea().width / 4) {
                seqDiagLayoutData.heightHint = Display.getDefault().getClientArea().width / 4;
            }
        } else {
            seqDiagLayoutData.heightHint = fOverviewCanvas.getFrame().getHeight() / fTest;
        }

        fOverviewCanvas.setEnabled(false);

        fCurrentSelection = new Label(g2, SWT.SHADOW_NONE | SWT.LEFT);
        fCurrentSelection.setLayoutData(newGridData(1));

        Group g3 = new Group(parent, SWT.SHADOW_NONE);
        g3.setText(Messages.SequenceDiagram_PrintRange);
        g3.setLayoutData(newGridData(3));
        GridLayout g3layout = new GridLayout();
        g3layout.numColumns = 4;
        g3.setLayout(g3layout);

        fAllPages = new Button(g3, SWT.RADIO);
        fAllPages.setText(Messages.SequenceDiagram_AllPages);
        fAllPages.setLayoutData(newGridData(4));
        fAllPages.addSelectionListener(fSelectionListener);

        fCurrentPage = new Button(g3, SWT.RADIO);
        fCurrentPage.setText(Messages.SequenceDiagram_CurrentView);
        fCurrentPage.setLayoutData(newGridData(4));
        fCurrentPage.setEnabled(true);
        fCurrentPage.setSelection(true);
        fCurrentPage.addSelectionListener(fSelectionListener);

        fPageList = new Button(g3, SWT.RADIO);
        fPageList.setText(Messages.SequenceDiagram_SelectedPages);
        fPageList.setLayoutData(newGridData(4));
        fPageList.addSelectionListener(fSelectionListener);

        fPageRange = new Button(g3, SWT.RADIO);
        fPageRange.setText(Messages.SequenceDiagram_FromPage);
        fPageRange.setLayoutData(newGridData(1));
        fPageRange.addSelectionListener(fSelectionListener);

        fFromPage = new Text(g3, SWT.SINGLE | SWT.BORDER);

        Label labelTo = new Label(g3, SWT.CENTER);
        labelTo.setText(Messages.SequenceDiagram_to);

        fToPage = new Text(g3, SWT.SINGLE | SWT.BORDER);

        fToolTip = new DiagramToolTip(fOverviewCanvas);

        fOverviewCanvas.getViewControl().addMouseTrackListener(new MouseTrackListener() {
            @Override
            public void mouseEnter(MouseEvent e) {
                fToolTip.hideToolTip();
            }

            @Override
            public void mouseExit(MouseEvent e) {
                fToolTip.hideToolTip();
            }

            @Override
            public void mouseHover(MouseEvent e) {
                int x1 = (int) (fOverviewCanvas.viewToContentsX(e.x) / fOverviewCanvas.getZoomValue() / fStepX);
                int x2 = (int) (fOverviewCanvas.viewToContentsY(e.y) / fOverviewCanvas.getZoomValue() / fStepY);
                int num = x1 + x2 * getNbRow() + 1;
                if (num > maxNumOfPages()) {
                    return;
                }
                if (num > 0) {
                    fToolTip.showToolTip(String.valueOf(num));
                    displayPageNum();
                } else {
                    fCurrentSelection.setText("");//$NON-NLS-1$
                    fToolTip.hideToolTip();
                }
            }

        });

        fOverviewCanvas.addTraverseListener(new LocalTraverseListener());

        fOverviewCanvas.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                fOverviewCanvas.redraw();
            }

            @Override
            public void focusLost(FocusEvent e) {
                fOverviewCanvas.redraw();
            }
        });

        if (fShowPrintButton) {
            Composite printerDlg = new Composite(parent, SWT.NONE);
            data = new GridData(SWT.FILL, SWT.DEFAULT, true, false);
            data.horizontalSpan = 6;
            parentLayout = new GridLayout();
            parentLayout.numColumns = 2;
            printerDlg.setLayout(parentLayout);
            printerDlg.setLayoutData(data);

            Label label = new Label(printerDlg, SWT.NONE);
            label.setLayoutData(new GridData(SWT.FILL, SWT.DEFAULT, true, false));
            fPrinterDialog = new Button(printerDlg, SWT.PUSH);
            fPrinterDialog.setText(Messages.SequenceDiagram_Printer);

            fPrinterDialog.addSelectionListener(new SelectionListener() {
                @Override
                public void widgetSelected(SelectionEvent e) {
                    printButtonSelected();
                }

                @Override
                public void widgetDefaultSelected(SelectionEvent e) {
                }

            });
        }

        updatePrinterStatus();

        return parent;
    }

