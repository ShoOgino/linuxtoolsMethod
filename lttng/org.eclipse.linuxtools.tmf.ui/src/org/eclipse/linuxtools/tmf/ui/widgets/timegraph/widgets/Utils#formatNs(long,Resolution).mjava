    /**
     * Obtains the remainder fraction on unit Seconds of the entered value in
     * nanoseconds. e.g. input: 1241207054171080214 ns The number of fraction
     * seconds can be obtained by removing the last 9 digits: 1241207054 the
     * fractional portion of seconds, expressed in ns is: 171080214
     *
     * @param time
     *            The source time in ns
     * @param res
     *            The Resolution to use
     * @return the formatted nanosec
     */
    public static String formatNs(long time, Resolution res) {
        StringBuffer str = new StringBuffer();
        boolean neg = time < 0;
        if (neg) {
            time = -time;
        }

        // The following approach could be used although performance
        // decreases in half.
        // String strVal = String.format("%09d", time);
        // String tmp = strVal.substring(strVal.length() - 9);

        long ns = time;
        ns %= 1000000000;
        if (ns < 10) {
            str.append("00000000"); //$NON-NLS-1$
        } else if (ns < 100) {
            str.append("0000000"); //$NON-NLS-1$
        } else if (ns < 1000) {
            str.append("000000"); //$NON-NLS-1$
        } else if (ns < 10000) {
            str.append("00000"); //$NON-NLS-1$
        } else if (ns < 100000) {
            str.append("0000"); //$NON-NLS-1$
        } else if (ns < 1000000) {
            str.append("000"); //$NON-NLS-1$
        } else if (ns < 10000000) {
            str.append("00"); //$NON-NLS-1$
        } else if (ns < 100000000) {
            str.append("0"); //$NON-NLS-1$
        }
        str.append(ns);

        if (res == Resolution.MILLISEC) {
            return str.substring(0, 3);
        } else if (res == Resolution.MICROSEC) {
            return str.substring(0, 6);
        } else if (res == Resolution.NANOSEC) {
            return str.substring(0, 9);
        }
        return ""; //$NON-NLS-1$
    }

