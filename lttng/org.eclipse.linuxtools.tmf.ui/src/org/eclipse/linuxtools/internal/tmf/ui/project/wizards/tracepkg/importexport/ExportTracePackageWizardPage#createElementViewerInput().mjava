    @Override
    protected Object createElementViewerInput() {
        List<TracePackageTraceElement> traceElements = new ArrayList<>();
        for (TmfTraceElement tmfTraceElement : fSelectedTraces) {
            TracePackageTraceElement traceElement = new TracePackageTraceElement(null, tmfTraceElement);

            // Trace files
            List<TracePackageElement> children = new ArrayList<>();
            TracePackageFilesElement filesElement = new TracePackageFilesElement(traceElement, tmfTraceElement.getResource());
            filesElement.setChecked(true);
            children.add(filesElement);

            // Supplementary files
            IResource[] supplementaryResources = tmfTraceElement.getSupplementaryResources();
            List<TracePackageElement> suppFilesChildren = new ArrayList<>();
            TracePackageSupplFilesElement suppFilesElement = new TracePackageSupplFilesElement(traceElement);
            children.add(suppFilesElement);
            for (IResource res : supplementaryResources) {
                suppFilesChildren.add(new TracePackageSupplFileElement(res, suppFilesElement));
            }

            // Bookmarks
            IFile bookmarksFile = tmfTraceElement.getBookmarksFile();
            if (bookmarksFile != null && bookmarksFile.exists()) {
                IMarker[] findMarkers;
                try {
                    findMarkers = bookmarksFile.findMarkers(IMarker.BOOKMARK, false, IResource.DEPTH_ZERO);
                    if (findMarkers.length > 0) {
                        children.add(new TracePackageBookmarkElement(traceElement, null));
                    }
                } catch (CoreException e) {
                    // Should not happen since we just checked bookmarksFile.exists() but log it just in case
                    Activator.getDefault().logError("Error finding bookmarks", e); //$NON-NLS-1$
                }
            }

            traceElements.add(traceElement);

        }

        return traceElements.toArray(new TracePackageTraceElement[] {});
    }

