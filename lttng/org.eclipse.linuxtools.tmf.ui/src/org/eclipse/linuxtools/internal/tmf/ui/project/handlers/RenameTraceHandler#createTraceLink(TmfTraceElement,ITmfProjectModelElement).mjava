    private void createTraceLink(TmfTraceElement trace, final ITmfProjectModelElement experiment) {
        try {
            IResource resource = trace.getResource();
            IPath location = resource.getLocation();
            // Get the trace properties for this resource
            String traceBundle = resource.getPersistentProperty(TmfTraceElement.TRACEBUNDLE);
            String traceTypeId = resource.getPersistentProperty(TmfTraceElement.TRACETYPE);
            String traceIcon = resource.getPersistentProperty(TmfTraceElement.TRACEICON);
            if (resource instanceof IFolder) {
                IFolder folder = ((IFolder) experiment.getResource()).getFolder(trace.getName());
                if (ResourcesPlugin.getWorkspace().validateLinkLocation(folder, location).isOK()) {
                    folder.createLink(location, IResource.REPLACE, null);
                    folder.setPersistentProperty(TmfTraceElement.TRACEBUNDLE, traceBundle);
                    folder.setPersistentProperty(TmfTraceElement.TRACETYPE, traceTypeId);
                    folder.setPersistentProperty(TmfTraceElement.TRACEICON, traceIcon);
                }
                else {
                    System.out.println("Invalid Trace Location"); //$NON-NLS-1$
                }
            }
            else {
                IFile file = ((IFolder) experiment.getResource()).getFile(trace.getName());
                if (ResourcesPlugin.getWorkspace().validateLinkLocation(file, location).isOK()) {
                    file.createLink(location, IResource.REPLACE, null);
                    file.setPersistentProperty(TmfTraceElement.TRACEBUNDLE, traceBundle);
                    file.setPersistentProperty(TmfTraceElement.TRACETYPE, traceTypeId);
                    file.setPersistentProperty(TmfTraceElement.TRACEICON, traceIcon);
                }
                else {
                    System.out.println("Invalid Trace Location"); //$NON-NLS-1$
                }
            }
            experiment.refresh();
        } catch (CoreException e) {
            e.printStackTrace();
        }
    }

