    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return null;
        }

        // Get the selection
        ISelection selection = HandlerUtil.getCurrentSelection(event);
        if (!(selection instanceof IStructuredSelection)) {
            return null;
        }
        final Multimap<TmfCommonProjectElement, IResource> resourceMap =
                TreeMultimap.create(new ElementComparator(), new ResourceComparator());
        final Iterator<Object> iterator = ((IStructuredSelection) selection).iterator();

        while (iterator.hasNext()) {
            Object element = iterator.next();
            if (element instanceof TmfTraceElement) {
                TmfTraceElement trace = (TmfTraceElement) element;
                // If trace is under an experiment, use the original trace from the traces folder
                trace = trace.getElementUnderTraceFolder();
                for (IResource resource : trace.getSupplementaryResources()) {
                    resourceMap.put(trace, resource);
                }

            } else if (element instanceof TmfExperimentElement) {
                TmfExperimentElement experiment = (TmfExperimentElement) element;
                for (IResource resource : experiment.getSupplementaryResources()) {
                    resourceMap.put(experiment, resource);
                }
                for (TmfTraceElement trace : experiment.getTraces()) {
                    // If trace is under an experiment, use the original trace from the traces folder
                    trace = trace.getElementUnderTraceFolder();
                    for (IResource resource : trace.getSupplementaryResources()) {
                        resourceMap.put(trace, resource);
                    }
                }
            }
        }

        SelectSupplementaryResourcesDialog dialog =
                new SelectSupplementaryResourcesDialog(window.getShell(), resourceMap);
        if (dialog.open() != Window.OK) {
            return null;
        }

        Set<IProject> projectsToRefresh = new HashSet<>();

        // Delete the resources that were selected
        List<IResource> allResourcesToDelete = Arrays.asList(dialog.getResources());
        for (TmfCommonProjectElement element : resourceMap.keySet()) {
            List<IResource> traceResourcesToDelete = new ArrayList<>(resourceMap.get(element));
            traceResourcesToDelete.retainAll(allResourcesToDelete);
            if (!traceResourcesToDelete.isEmpty()) {
                // Delete the selected resources
                element.closeEditors();
                element.deleteSupplementaryResources(traceResourcesToDelete.toArray(new IResource[0]));
                projectsToRefresh.add(element.getProject().getResource());
            }
        }

        // Refresh projects
        Iterator<IProject> projectIterator = projectsToRefresh.iterator();
        while (projectIterator.hasNext()) {
            IProject project = projectIterator.next();
            try {
                project.refreshLocal(IResource.DEPTH_INFINITE, null);
            } catch (CoreException e) {
                Activator.getDefault().logError("Error refreshing project " + project, e); //$NON-NLS-1$
            }
        }

        return null;
    }

