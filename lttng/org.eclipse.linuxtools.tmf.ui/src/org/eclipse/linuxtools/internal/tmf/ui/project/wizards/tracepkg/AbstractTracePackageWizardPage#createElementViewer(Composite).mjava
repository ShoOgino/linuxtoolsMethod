    /**
     * Create the element viewer
     *
     * @param compositeParent
     *            the parent composite
     */
    protected void createElementViewer(Composite compositeParent) {
        fElementViewer = new CheckboxTreeViewer(compositeParent, SWT.SINGLE | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER | SWT.CHECK);

        fElementViewer.addCheckStateListener(new ICheckStateListener() {
            @Override
            public void checkStateChanged(CheckStateChangedEvent event) {
                TracePackageElement element = (TracePackageElement) event.getElement();
                if (!element.isEnabled()) {
                    fElementViewer.setChecked(element, element.isChecked());
                } else {
                    setSubtreeChecked(fElementViewer, element, true, event.getChecked());
                }
                maintainCheckIntegrity(element);

                if (element.getParent() != null) {
                    // Uncheck everything in this trace if Trace files are unchecked
                    if (element instanceof TracePackageFilesElement) {
                        if (!element.isChecked()) {
                            setSubtreeChecked(fElementViewer, element.getParent(), false, false);
                        }
                    // Check Trace files if anything else is selected
                    } else if (element.isChecked()) {
                        TracePackageElement parent = element.getParent();
                        while (parent != null) {
                            for (TracePackageElement e : parent.getChildren()) {
                                if (e instanceof TracePackageFilesElement) {
                                    setSubtreeChecked(fElementViewer, e, false, true);
                                    break;
                                }
                            }
                            parent = parent.getParent();
                        }
                    }
                }


                updateApproximateSelectedSize();
                updatePageCompletion();
            }

            private void maintainCheckIntegrity(final TracePackageElement element) {
                TracePackageElement parentElement = element.getParent();
                boolean allChecked = true;
                boolean oneChecked = false;
                if (parentElement != null) {
                    if (parentElement.getChildren() != null) {
                        for (TracePackageElement child : parentElement.getChildren()) {
                            boolean checked = fElementViewer.getChecked(child) && !fElementViewer.getGrayed(child);
                            oneChecked |= checked;
                            allChecked &= checked;
                        }
                    }
                    if (oneChecked && !allChecked) {
                        fElementViewer.setGrayChecked(parentElement, true);
                    } else {
                        fElementViewer.setGrayed(parentElement, false);
                        fElementViewer.setChecked(parentElement, allChecked);
                    }
                    maintainCheckIntegrity(parentElement);
                }
            }
        });
        GridData layoutData = new GridData(GridData.FILL_BOTH);
        fElementViewer.getTree().setLayoutData(layoutData);
        fElementViewer.setContentProvider(new TracePackageContentProvider());
        fElementViewer.setLabelProvider(new TracePackageLabelProvider());
    }

