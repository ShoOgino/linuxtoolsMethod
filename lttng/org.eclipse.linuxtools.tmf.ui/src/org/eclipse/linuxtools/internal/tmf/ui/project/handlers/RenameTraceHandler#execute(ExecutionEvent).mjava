    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return null;
        }

        // If trace is under an experiment, use the original trace from the traces folder
        fTrace = fTrace.getElementUnderTraceFolder();

        // Fire the Rename Trace dialog
        Shell shell = window.getShell();
        TmfTraceFolder traceFolder = (TmfTraceFolder) fTrace.getParent();
        final TmfTraceElement oldTrace = fTrace;
        RenameTraceDialog dialog = new RenameTraceDialog(shell, fTrace);
        if (dialog.open() != Window.OK) {
            return null;
        }

        // Locate the new trace object
        TmfTraceElement trace = null;
        String newTraceName = dialog.getNewTraceName();
        for (TmfTraceElement element : traceFolder.getTraces()) {
            if (element.getName().equals(newTraceName)) {
                trace = element;
                break;
            }
        }
        final TmfTraceElement newTrace = trace;
        if (newTrace == null) {
            return null;
        }

        WorkspaceModifyOperation operation = new WorkspaceModifyOperation() {
            @Override
            protected void execute(IProgressMonitor monitor) throws CoreException, InvocationTargetException, InterruptedException {
                TmfExperimentFolder experimentFolder = newTrace.getProject().getExperimentsFolder();
                for (final TmfExperimentElement experiment : experimentFolder.getExperiments()) {
                    for (final TmfTraceElement expTrace : experiment.getTraces()) {
                        if (expTrace.getName().equals(oldTrace.getName())) {
                            // Create a link to the renamed trace
                            createTraceLink(newTrace, experiment);
                            // Remove the old trace link
                            expTrace.getResource().delete(true, null);
                        }
                    }
                }
            }
        };

        try {
            PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
        } catch (InterruptedException exception) {
        } catch (InvocationTargetException exception) {
        } catch (RuntimeException exception) {
        }

        return null;
    }

