        private void extractInputs() {
            inputLine.setRegex(selectedLine.regexText.getText());
            switch (cardinalityCombo.getSelectionIndex()) {
            case 0:
                inputLine.cardinality = Cardinality.ZERO_OR_MORE;
                break;
            case 1:
                inputLine.cardinality = Cardinality.ONE_OR_MORE;
                break;
            case 2:
                inputLine.cardinality = Cardinality.ZERO_OR_ONE;
                break;
            case 3:
                inputLine.cardinality = Cardinality.ONE;
                break;
            case 4: //(?,?)
                int min, max;
                try {
                    min = Integer.parseInt(cardinalityMinText.getText());
                } catch (NumberFormatException e) {
                    min = -1;
                }
                try {
                    if (cardinalityMaxText.getText().equals(INFINITY_STRING)) {
                        max = Cardinality.INF;
                    } else {
                        max = Integer.parseInt(cardinalityMaxText.getText());
                    }
                } catch (NumberFormatException e) {
                    max = -1;
                }
                inputLine.cardinality = new Cardinality(min, max);
                break;
            default:
                inputLine.cardinality = Cardinality.ZERO_OR_MORE;
                break;
            }
            inputLine.columns = new ArrayList<InputData>(inputs.size());
            for (int i = 0; i < inputs.size(); i++) {
                InputGroup group = inputs.get(i);
                InputData inputData = new InputData();
                if (group.tagCombo.getText().equals(CustomTraceDefinition.TAG_OTHER)) {
                    inputData.name = group.tagText.getText().trim();
                } else {
                    inputData.name = group.tagCombo.getText();
                    if (group.tagCombo.getText().equals(CustomTraceDefinition.TAG_TIMESTAMP)) {
                        inputData.format = group.tagText.getText().trim();
                    }
                }
                inputData.action = group.actionCombo.getSelectionIndex();
                inputLine.columns.add(inputData);
            }
        }

