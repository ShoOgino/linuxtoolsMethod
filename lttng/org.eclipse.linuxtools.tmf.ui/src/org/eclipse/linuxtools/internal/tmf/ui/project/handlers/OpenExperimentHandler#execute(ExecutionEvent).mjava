    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return false;
        }

        try {
            IFile bookmarksFile = fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
            if (!bookmarksFile.exists()) {
                InputStream source = new ByteArrayInputStream(new byte[0]);
                bookmarksFile.create(source, true, null);
            }
            bookmarksFile.setHidden(true);

            IFile file = fExperiment.getResource().getFile(fExperiment.getName() + '_');
            if (!file.exists()) {
                file.createLink(bookmarksFile.getLocation(), IResource.REPLACE, null);
            }
            file.setHidden(true);
            file.setPersistentProperty(TmfTraceElement.TRACETYPE, TmfExperiment.class.getCanonicalName());

            // Instantiate the experiment's traces
            List<TmfTraceElement> traceEntries = fExperiment.getTraces();
            int nbTraces = traceEntries.size();
            int cacheSize = Integer.MAX_VALUE;
            boolean useEditor = true;
            String experimentEditorId = null;
            ITmfTrace<?>[] traces = new ITmfTrace[nbTraces];
            for (int i = 0; i < nbTraces; i++) {
                TmfTraceElement element = traceEntries.get(i);
                ITmfTrace trace = element.instantiateTrace();
                ITmfEvent traceEvent = element.instantiateEvent();
                if ((trace == null) || (traceEvent == null)) {
                    displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
                    for (int j = 0; j < i; j++) {
                        traces[j].dispose();
                    }
                    return null;
                }
                try {
                    trace.initTrace(element.getName(), element.getLocation().getPath(), traceEvent.getClass());
                } catch (FileNotFoundException e) {
                    displayErrorMsg(""); //$NON-NLS-1$
                }
                trace.setResource(element.getResource());
                cacheSize = Math.min(cacheSize, trace.getIndexPageSize());
                String editorId = element.getEditorId();
                if (editorId == null) {
                    useEditor = false;
                    experimentEditorId = null;
                } else if (useEditor) {
                    if (experimentEditorId == null) {
                        experimentEditorId = editorId;
                    } else if (!editorId.equals(experimentEditorId)) {
                        useEditor = false;
                    }
                }
                traces[i] = trace;
            }

            // Create the experiment
            TmfExperiment experiment = new TmfExperiment(TmfEvent.class, fExperiment.getName(), traces, cacheSize);
            experiment.setBookmarksFile(file);

            if (useEditor) {
                IEditorInput editorInput = new TmfEditorInput(file, experiment);
                IWorkbench wb = PlatformUI.getWorkbench();
                IWorkbenchPage activePage = wb.getActiveWorkbenchWindow().getActivePage();

                String editorId = TmfEventsEditor.ID;
                IEditorPart editor = activePage.findEditor(new FileEditorInput(file));
                if ((editor != null) && (editor instanceof IReusableEditor)) {
                    activePage.reuseEditor((IReusableEditor) editor, editorInput);
                    activePage.activate(editor);
                } else {
                    activePage.openEditor(editorInput, editorId);
                }
                experiment.initTrace(null, null, null);
                experiment.indexTrace(true);
                IDE.setDefaultEditor(file, editorId);
                // editor should dispose the experiment on close
            } else {
                TmfExperiment.setCurrentExperiment(experiment);
                TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this, experiment));
                IDE.setDefaultEditor(file, EventsViewEditor.ID);
            }
        } catch (CoreException e) {
            displayErrorMsg(e.getMessage());
        }

        return null;
    }

