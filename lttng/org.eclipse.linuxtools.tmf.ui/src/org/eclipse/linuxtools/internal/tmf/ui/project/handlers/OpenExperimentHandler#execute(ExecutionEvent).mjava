    @SuppressWarnings({ "rawtypes", "unchecked" })
    @Override
    public Object execute(final ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        final IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return false;
        }

        try {
            final IFile bookmarksFile = fExperiment.getProject().getExperimentsFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
            if (!bookmarksFile.exists()) {
                final InputStream source = new ByteArrayInputStream(new byte[0]);
                bookmarksFile.create(source, true, null);
            }
            bookmarksFile.setHidden(true);

            final IFile file = fExperiment.getResource().getFile(fExperiment.getName() + '_');
            if (!file.exists()) {
                file.createLink(bookmarksFile.getLocation(), IResource.REPLACE, null);
            }
            file.setHidden(true);
            file.setPersistentProperty(TmfCommonConstants.TRACETYPE, TmfExperiment.class.getCanonicalName());

            // Instantiate the experiment's traces
            final List<TmfTraceElement> traceEntries = fExperiment.getTraces();
            final int nbTraces = traceEntries.size();
            int cacheSize = Integer.MAX_VALUE;
            String commonEditorId = null;
            final ITmfTrace[] traces = new ITmfTrace[nbTraces];
            for (int i = 0; i < nbTraces; i++) {
                TmfTraceElement element = traceEntries.get(i);

                // Since trace is under an experiment, use the original trace from the traces folder
                element = element.getElementUnderTraceFolder();

                final ITmfTrace trace = element.instantiateTrace();
                final ITmfEvent traceEvent = element.instantiateEvent();
                if ((trace == null) || (traceEvent == null)) {
                    displayErrorMsg(Messages.OpenExperimentHandler_NoTraceType);
                    for (int j = 0; j < i; j++) {
                        traces[j].dispose();
                    }
                    return null;
                }
                try {
                    trace.initTrace(element.getResource(), element.getLocation().getPath(), traceEvent.getClass());
                } catch (final TmfTraceException e) {
                    displayErrorMsg(""); //$NON-NLS-1$
                }
                cacheSize = Math.min(cacheSize, trace.getCacheSize());

                // If all traces use the same editorId, use it, otherwise use the default
                final String editorId = element.getEditorId();
                if (commonEditorId == null) {
                    commonEditorId = (editorId != null) ? editorId : TmfEventsEditor.ID;
                } else if (!commonEditorId.equals(editorId)) {
                    commonEditorId = TmfEventsEditor.ID;
                }
                traces[i] = trace;
            }

            // Create the experiment
            TmfExperiment experiment = new TmfExperiment(ITmfEvent.class, fExperiment.getName(), traces, cacheSize);
            experiment.setBookmarksFile(file);

            final IEditorInput editorInput = new TmfEditorInput(file, experiment);
            final IWorkbench wb = PlatformUI.getWorkbench();
            final IWorkbenchPage activePage = wb.getActiveWorkbenchWindow().getActivePage();

            final IEditorPart editor = activePage.findEditor(new FileEditorInput(file));
            if ((editor != null) && (editor instanceof IReusableEditor)) {
                activePage.reuseEditor((IReusableEditor) editor, editorInput);
                activePage.activate(editor);
            } else {
                activePage.openEditor(editorInput, commonEditorId);
            }
            IDE.setDefaultEditor(file, commonEditorId);
            // editor should dispose the experiment on close
        } catch (final CoreException e) {
            displayErrorMsg(e.getMessage());
        }

        return null;
    }

