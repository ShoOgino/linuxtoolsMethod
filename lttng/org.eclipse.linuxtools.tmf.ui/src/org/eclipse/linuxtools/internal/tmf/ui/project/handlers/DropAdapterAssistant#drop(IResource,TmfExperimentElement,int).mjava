    /**
     * Drop a trace by copying/linking a resource in a target experiment
     *
     * @param sourceResource the source resource
     * @param targetExperiment the target experiment
     * @param operation the drop operation (DND.DROP_COPY | DND.DROP_LINK)
     * @return the target resource or null if unsuccessful
     */
    private static IResource drop(IResource sourceResource,
            TmfExperimentElement targetExperiment,
            int operation) {

        IResource traceResource = sourceResource;

        IPath tracesFolderPath = targetExperiment.getProject().getTracesFolder().getPath();
        if (tracesFolderPath.isPrefixOf(sourceResource.getFullPath())) {
            String elementPath = sourceResource.getFullPath().makeRelativeTo(tracesFolderPath).toString();
            for (TmfTraceElement trace : targetExperiment.getTraces()) {
                if (trace.getElementPath().equals(elementPath)) {
                    return null;
                }
            }
        } else {
            String targetName = sourceResource.getName();
            for (ITmfProjectModelElement element : targetExperiment.getProject().getTracesFolder().getChildren()) {
                if (element.getName().equals(targetName)) {
                    targetName = promptRename(element);
                    if (targetName == null) {
                        return null;
                    }
                    break;
                }
            }
            try {
                if (operation == DND.DROP_COPY && !sourceResource.isLinked()) {
                    IPath destination = targetExperiment.getProject().getTracesFolder().getResource().getFullPath().addTrailingSeparator().append(targetName);
                    sourceResource.copy(destination, false, null);
                    cleanupBookmarks(destination);
                } else {
                    createLink(targetExperiment.getProject().getTracesFolder().getResource(), sourceResource, targetName);
                }
                // use the copied resource for the experiment
                if (sourceResource.getType() == IResource.FILE) {
                    traceResource = targetExperiment.getProject().getTracesFolder().getResource().getFile(targetName);
                } else if (sourceResource.getType() == IResource.FOLDER) {
                    traceResource = targetExperiment.getProject().getTracesFolder().getResource().getFolder(targetName);
                }
                String sourceLocation = sourceResource.getPersistentProperty(TmfCommonConstants.SOURCE_LOCATION);
                if (sourceLocation == null) {
                     sourceLocation = URIUtil.toUnencodedString(new File(sourceResource.getLocationURI()).toURI());
                }
                traceResource.setPersistentProperty(TmfCommonConstants.SOURCE_LOCATION, sourceLocation);
            } catch (CoreException e) {
                displayException(e);
                return null;
            }
        }
        if (traceResource != null && traceResource.exists()) {
            setTraceType(traceResource);
            for (TmfTraceElement trace : targetExperiment.getProject().getTracesFolder().getTraces()) {
                if (trace.getResource().equals(traceResource)) {
                    targetExperiment.addTrace(trace);
                    targetExperiment.closeEditors();
                    targetExperiment.deleteSupplementaryResources();
                    break;
                }
            }
            return traceResource;
        }
        return null;
    }

