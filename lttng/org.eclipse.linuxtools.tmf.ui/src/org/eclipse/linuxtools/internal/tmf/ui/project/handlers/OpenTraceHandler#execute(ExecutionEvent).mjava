    @Override
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public Object execute(final ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        final IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return null;
        }

        // Check that the trace is valid
        if (fTrace == null) {
            return null;
        }

        // If trace is under an experiment, use the original trace from the traces folder
        fTrace = fTrace.getElementUnderTraceFolder();

        final ITmfTrace trace = fTrace.instantiateTrace();
        final ITmfEvent traceEvent = fTrace.instantiateEvent();
        if ((trace == null) || (traceEvent == null)) {
            displayErrorMsg(Messages.OpenTraceHandler_NoTraceType);
            return null;
        }

        // Get the editor_id from the extension point
        final String editorId = fTrace.getEditorId();
        final boolean usesEditor = (editorId != null) && (editorId.length() > 0);

        try {
            trace.initTrace(fTrace.getResource(), fTrace.getLocation().getPath(), traceEvent.getClass());
        } catch (final TmfTraceException e) {
            displayErrorMsg(Messages.OpenTraceHandler_NoTrace + "\n\n" + e); //$NON-NLS-1$
            return null;
        }

        final IResource resource = fTrace.getResource();
        IFile file = null;
        if (resource instanceof IFile) {
            file = (IFile) resource;
        } else if (resource instanceof IFolder) {
            try {
                final IFile bookmarksFile = fTrace.getProject().getTracesFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
                if (!bookmarksFile.exists()) {
                    final InputStream source = new ByteArrayInputStream(new byte[0]);
                    bookmarksFile.create(source, true, null);
                }
                bookmarksFile.setHidden(true);

                final IFolder folder = (IFolder) resource;
                file = folder.getFile(fTrace.getName() + '_');
                if (!file.exists()) {
                    file.createLink(bookmarksFile.getLocation(), IResource.REPLACE, null);
                }
                file.setHidden(true);
                if (usesEditor) {
                    file.setPersistentProperty(TmfCommonConstants.TRACETYPE, fTrace.getTraceType());
                } else {
                    file.setPersistentProperty(TmfCommonConstants.TRACETYPE, TmfTrace.class.getCanonicalName());
                }
            } catch (final CoreException e) {
                Activator.getDefault().logError("Error opening trace " + fTrace.getName(), e); //$NON-NLS-1$
            }
        }

        if (usesEditor) {
            try {
                final IEditorInput editorInput = new TmfEditorInput(file, trace);
                final IWorkbench wb = PlatformUI.getWorkbench();
                final IWorkbenchPage activePage = wb.getActiveWorkbenchWindow().getActivePage();

                final IEditorPart editor = activePage.findEditor(new FileEditorInput(file));
                if ((editor != null) && (editor instanceof IReusableEditor)) {
                    activePage.reuseEditor((IReusableEditor) editor, editorInput);
                    activePage.activate(editor);
                } else {
                    activePage.openEditor(editorInput, editorId);
                    if (resource instanceof IFile) {
                        IDE.setDefaultEditor((IFile) resource, editorId);
                    }
                }
            } catch (final PartInitException e) {
                Activator.getDefault().logError("Error opening trace " + fTrace.getName(), e); //$NON-NLS-1$
            }
        } else {
            // Create the experiment
            final ITmfTrace[] traces = new ITmfTrace[] { trace };
            final TmfExperiment experiment = new TmfExperiment(traceEvent.getClass(), fTrace.getName(), traces, trace.getCacheSize());
            experiment.setBookmarksFile(file);

            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this, experiment));
            IDE.setDefaultEditor(file, EventsViewEditor.ID);
        }
        return null;
    }

