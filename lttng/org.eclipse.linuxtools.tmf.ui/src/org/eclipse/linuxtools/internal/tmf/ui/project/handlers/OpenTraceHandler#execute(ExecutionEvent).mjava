    @Override
    @SuppressWarnings({ "rawtypes", "unchecked" })
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null)
            return null;

        // Check that the trace is valid
        if (fTrace == null) {
            return null;
        }

        // If trace is under an experiment, use the original trace from the traces folder
        if (fTrace.getParent() instanceof TmfExperimentElement) {
            for (TmfTraceElement trace : fTrace.getProject().getTracesFolder().getTraces()) {
                if (trace.getName().equals(fTrace.getName())) {
                    fTrace = trace;
                    break;
                }
            }
        }

        ITmfTrace trace = fTrace.instantiateTrace();
        TmfEvent traceEvent = fTrace.instantiateEvent();
        if (trace == null || traceEvent == null) {
            displayErrorMsg(Messages.OpenTraceHandler_NoTraceType);
            return null;
        }

        // Get the editor_id from the extension point
        String editorId = fTrace.getEditorId();
        boolean usesEditor = editorId != null && editorId.length() > 0;

        try {
            trace.initTrace(fTrace.getName(), fTrace.getLocation().getPath(), traceEvent.getClass(), usesEditor);
        } catch (FileNotFoundException e) {
            displayErrorMsg(Messages.OpenTraceHandler_NoTrace);
            return null;
        }
        trace.setResource(fTrace.getResource());

        IResource resource = fTrace.getResource();
        IFile file = null;
        if (resource instanceof IFile) {
            file = (IFile) resource;
        } else if (resource instanceof IFolder){
            try {
                IFile bookmarksFile = fTrace.getProject().getTracesFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
                if (!bookmarksFile.exists()) {
                    InputStream source = new ByteArrayInputStream(new byte[0]);
                    bookmarksFile.create(source, true, null);
                }
                bookmarksFile.setHidden(true);

                IFolder folder = (IFolder) resource;
                file = folder.getFile(fTrace.getName() + '_');
                if (!file.exists()) {
                    file.createLink(bookmarksFile.getLocation(), IResource.REPLACE, null);
                }
                file.setHidden(true);
                if (usesEditor) {
                    file.setPersistentProperty(TmfTraceElement.TRACETYPE, fTrace.getTraceType());
                } else {
                    file.setPersistentProperty(TmfTraceElement.TRACETYPE, TmfTrace.class.getCanonicalName());
                }
            } catch (CoreException e) {
                e.printStackTrace();
            }
        }

        if (usesEditor) {
            try {
                IEditorInput editorInput = new TmfEditorInput(file, trace);
                IWorkbench wb = PlatformUI.getWorkbench();
                IWorkbenchPage activePage = wb.getActiveWorkbenchWindow().getActivePage();

                IEditorPart editor = activePage.findEditor(new FileEditorInput(file));
                if (editor != null && editor instanceof IReusableEditor) {
                    activePage.reuseEditor((IReusableEditor) editor, editorInput);
                    activePage.activate(editor);
                } else {
                    activePage.openEditor(editorInput, editorId);
                    if (resource instanceof IFile) {
                        IDE.setDefaultEditor((IFile) resource, editorId);
                    }
                }
            } catch (PartInitException e) {
                e.printStackTrace();
            }
        } else {
            // Create the experiment
            ITmfTrace[] traces = new ITmfTrace[] { trace };
            TmfExperiment experiment = new TmfExperiment(traceEvent.getClass(), fTrace.getName(), traces, trace.getCacheSize());
            experiment.setBookmarksFile(file);
    
            TmfExperiment.setCurrentExperiment(experiment);
            TmfSignalManager.dispatchSignal(new TmfExperimentSelectedSignal(this, experiment));
            IDE.setDefaultEditor(file, EventsViewEditor.ID);
        }
        return null;
    }

