    @Override
    public Object execute(final ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        final IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return null;
        }

        // Check that the trace is valid
        if (fTrace == null) {
            return null;
        }

        // If trace is under an experiment, use the original trace from the traces folder
        final TmfTraceElement traceElement = fTrace.getElementUnderTraceFolder();

        Thread thread = new Thread() {
            @Override
            public void run() {

                final ITmfTrace trace = traceElement.instantiateTrace();
                final ITmfEvent traceEvent = traceElement.instantiateEvent();
                if ((trace == null) || (traceEvent == null)) {
                    displayErrorMsg(Messages.OpenTraceHandler_NoTraceType);
                    if (trace != null) {
                        trace.dispose();
                    }
                    return;
                }

                // Get the editor_id from the extension point
                String traceEditorId = traceElement.getEditorId();
                final String editorId = (traceEditorId != null) ? traceEditorId : TmfEventsEditor.ID;

                try {
                    trace.initTrace(traceElement.getResource(), traceElement.getLocation().getPath(), traceEvent.getClass());
                } catch (final TmfTraceException e) {
                    displayErrorMsg(Messages.OpenTraceHandler_InitError + "\n\n" + e); //$NON-NLS-1$
                    trace.dispose();
                    return;
                }

                final IResource resource = traceElement.getResource();
                IFile file = null;
                if (resource instanceof IFile) {
                    file = (IFile) resource;
                } else if (resource instanceof IFolder) {
                    try {
                        final IFile bookmarksFile = traceElement.getProject().getTracesFolder().getResource().getFile(BOOKMARKS_HIDDEN_FILE);
                        if (!bookmarksFile.exists()) {
                            final InputStream source = new ByteArrayInputStream(new byte[0]);
                            bookmarksFile.create(source, true, null);
                        }
                        bookmarksFile.setHidden(true);

                        final IFolder folder = (IFolder) resource;
                        file = folder.getFile(traceElement.getName() + '_');
                        if (!file.exists()) {
                            file.createLink(bookmarksFile.getLocation(), IResource.REPLACE, null);
                        }
                        file.setHidden(true);
                        file.setPersistentProperty(TmfCommonConstants.TRACETYPE, TmfTrace.class.getCanonicalName());
                        IDE.setDefaultEditor(file, editorId);
                        // editor should dispose the trace on close
                    } catch (final CoreException e) {
                        Activator.getDefault().logError("Error opening trace " + traceElement.getName(), e); //$NON-NLS-1$
                        displayErrorMsg(Messages.OpenTraceHandler_Error + "\n\n" + e.getMessage()); //$NON-NLS-1$
                        trace.dispose();
                        return;
                    }
                }

                final IFile editorFile = file;
                Display.getDefault().asyncExec(new Runnable() {
                    @Override
                    public void run() {
                        try {
                            final IEditorInput editorInput = new TmfEditorInput(editorFile, trace);
                            final IWorkbench wb = PlatformUI.getWorkbench();
                            final IWorkbenchPage activePage = wb.getActiveWorkbenchWindow().getActivePage();

                            final IEditorPart editor = activePage.findEditor(new FileEditorInput(editorFile));
                            if ((editor != null) && (editor instanceof IReusableEditor)) {
                                activePage.reuseEditor((IReusableEditor) editor, editorInput);
                                activePage.activate(editor);
                            } else {
                                activePage.openEditor(editorInput, editorId);
                                if (resource instanceof IFile) {
                                    IDE.setDefaultEditor((IFile) resource, editorId);
                                }
                            }
                        } catch (final PartInitException e) {
                            displayErrorMsg(Messages.OpenTraceHandler_Error + "\n\n" + e.getMessage()); //$NON-NLS-1$
                            Activator.getDefault().logError("Error opening trace " + traceElement.getName(), e); //$NON-NLS-1$
                            trace.dispose();
                        }
                    }
                });

            }
        };

        thread.start();
        return null;
    }

