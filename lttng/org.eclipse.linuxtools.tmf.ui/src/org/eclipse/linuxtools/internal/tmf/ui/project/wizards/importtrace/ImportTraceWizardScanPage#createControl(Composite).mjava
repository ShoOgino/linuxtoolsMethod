    @Override
    public void createControl(Composite parent) {
        super.createControl(parent);
        final Composite control = (Composite) this.getControl();
        setTitle(Messages.ImportTraceWizardScanPageTitle);
        traceTypeViewer = new CheckboxTreeViewer(control, SWT.CHECK);
        traceTypeViewer.setContentProvider(getBatchWizard().getScannedTraces());
        traceTypeViewer.getTree().setHeaderVisible(true);
        traceTypeViewer.getControl().setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, true));
        traceTypeViewer.setInput(getBatchWizard().getScannedTraces());
        traceTypeViewer.addCheckStateListener(new ImportTraceCheckStateListener());

        TreeViewerFocusCellManager focusCellManager = new TreeViewerFocusCellManager(traceTypeViewer, new FocusCellOwnerDrawHighlighter(traceTypeViewer));
        ColumnViewerEditorActivationStrategy actSupport = new ColumnViewerEditorActivationStrategy(traceTypeViewer) {
        };
        TreeViewerEditor.create(traceTypeViewer, focusCellManager, actSupport, ColumnViewerEditor.TABBING_HORIZONTAL
                | ColumnViewerEditor.TABBING_MOVE_TO_ROW_NEIGHBOR
                | ColumnViewerEditor.TABBING_VERTICAL | ColumnViewerEditor.KEYBOARD_ACTIVATION);

        final TextCellEditor textCellEditor = new TextCellEditor(traceTypeViewer.getTree());
        // --------------------
        // Column 1
        // --------------------
        TreeViewerColumn column = new TreeViewerColumn(traceTypeViewer, SWT.NONE);
        column.getColumn().setWidth(COL_WIDTH);
        column.getColumn().setText(Messages.ImportTraceWizardTraceDisplayName);
        column.setLabelProvider(new FirstColumnLabelProvider());
        column.setEditingSupport(new ColumnEditorSupport(traceTypeViewer, textCellEditor));

        // --------------------
        // Column 2
        // --------------------

        column = new TreeViewerColumn(traceTypeViewer, SWT.NONE);
        column.getColumn().setWidth(500);
        column.getColumn().setText(Messages.ImportTraceWizardImportCaption);
        column.setLabelProvider(new ColumnLabelProvider() {
            @Override
            public String getText(Object element) {
                if (element instanceof FileAndName) {
                    FileAndName elem = (FileAndName) element;
                    return elem.getFile().getPath();
                }
                return null;
            }
        });
        // --------------------
        // Column 3
        // --------------------

        column = new TreeViewerColumn(traceTypeViewer, SWT.NONE);

        column.getColumn().setWidth(80);
        column.getColumn().setText(Messages.ImportTraceWizardScanPageSize);
        column.getColumn().setAlignment(SWT.RIGHT);
        column.setLabelProvider(new ColumnLabelProvider() {

            @Override
            public String getText(Object element) {
                if (element instanceof FileAndName) {

                    FileAndName elem = (FileAndName) element;
                    long len = recurseSize(elem.getFile());
                    if (len > 0) {
                        double sizeb10 = Math.log10(len);
                        DecimalFormat df = new DecimalFormat();
                        df.setMaximumFractionDigits(2);
                        df.setMinimumFractionDigits(0);
                        if (sizeb10 > 12) {
                            final double tbSize = len / 1024.0 / 1024 / 1024 / 1024;
                            return df.format(tbSize) + Messages.ImportTraceWizardScanPageTerabyte;
                        }
                        if (sizeb10 > 9) {
                            final double gbSize = len / 1024.0 / 1024 / 1024;
                            return df.format(gbSize) + Messages.ImportTraceWizardScanPageGigabyte;
                        }
                        if (sizeb10 > 6) {
                            final double mbSize = len / 1024.0 / 1024;
                            return df.format(mbSize) + Messages.ImportTraceWizardScanPageMegabyte;
                        }
                        if (sizeb10 > 3) {
                            final double kbSize = len / 1024.0;
                            return df.format(kbSize) + Messages.ImportTraceWizardScanPageKilobyte;
                        }
                    }
                    return Long.toString(len) + Messages.ImportTraceWizardScanPagebyte;

                }
                return null;
            }

            private long recurseSize(File file) {
                if (file.isFile() && file.canRead()) {
                    return file.length();
                }
                long size = 0;
                if (file.exists() && file.isDirectory() && file.canRead()) {
                    final File[] listFiles = file.listFiles();
                    if (listFiles != null) {
                        for (File child : listFiles) {
                            if (child.isFile() && child.canRead()) {
                                size += child.length();
                            } else if (child.isDirectory()) {
                                size += recurseSize(child);
                            } else {
                                Activator.getDefault().logError("Unknown \"file\" type for " + child + ' ' + child.toString()); //$NON-NLS-1$
                            }
                        }
                    }
                }
                return size;
            }
        });

        init();
        getBatchWizard().setTracesToScan(fTracesToScan);
        getBatchWizard().setTraceFolder(fTargetFolder);

        fRunnable.schedule();
        setErrorMessage(Messages.ImportTraceWizardScanPageSelectAtleastOne);
    }

