    /**
     * Drop a trace by importing/linking a path in a target experiment
     *
     * @param path the source path
     * @param targetExperiment the target experiment
     * @param operation the drop operation (DND.DROP_COPY | DND.DROP_LINK)
     * @return true if successful
     */
    private static boolean drop(Path path,
            TmfExperimentElement targetExperiment,
            int operation) {

        IPath tracesFolderPath = targetExperiment.getProject().getTracesFolder().getResource().getLocation();
        IResource traceResource = null;
        if (tracesFolderPath.isPrefixOf(path)) {
            String elementPath = path.makeRelativeTo(tracesFolderPath).toString();
            for (TmfTraceElement trace : targetExperiment.getTraces()) {
                if (trace.getElementPath().equals(elementPath)) {
                    return false;
                }
            }
            traceResource = targetExperiment.getProject().getTracesFolder().getResource().findMember(elementPath);
        } else {
            String targetName = path.lastSegment();
            for (ITmfProjectModelElement element : targetExperiment.getProject().getTracesFolder().getChildren()) {
                if (element.getName().equals(targetName)) {
                    targetName = promptRename(element);
                    if (targetName == null) {
                        return false;
                    }
                    break;
                }
            }
            if (operation == DND.DROP_COPY) {
                importTrace(targetExperiment.getProject().getTracesFolder().getResource(), path, targetName);
            } else {
                createLink(targetExperiment.getProject().getTracesFolder().getResource(), path, targetName);
            }
            // use the copied resource for the experiment
            File file = new File(path.toString());
            if (file.exists() && file.isFile()) {
                traceResource = targetExperiment.getProject().getTracesFolder().getResource().getFile(targetName);
            } else if (file.exists() && file.isDirectory()) {
                traceResource = targetExperiment.getProject().getTracesFolder().getResource().getFolder(targetName);
            }
        }
        if (traceResource != null && traceResource.exists()) {
            try {
                String sourceLocation = URIUtil.toUnencodedString(path.toFile().toURI());
                traceResource.setPersistentProperty(TmfCommonConstants.SOURCE_LOCATION, sourceLocation);
            } catch (CoreException e) {
                displayException(e);
            }
            setTraceType(traceResource);
            for (TmfTraceElement trace : targetExperiment.getProject().getTracesFolder().getTraces()) {
                if (trace.getResource().equals(traceResource)) {
                    targetExperiment.addTrace(trace);
                    targetExperiment.closeEditors();
                    targetExperiment.deleteSupplementaryResources();
                    break;
                }
            }
            return true;
        }
        return false;
    }

