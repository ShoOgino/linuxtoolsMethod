    private void validate() {
        definition.categoryName = categoryText.getText().trim();
        definition.definitionName = logtypeText.getText().trim();
        definition.timeStampOutputFormat = timeStampOutputFormatText.getText().trim();

        if (selectedElement != null) {
            selectedElement.extractInputs();
            treeViewer.refresh();
        }

        StringBuffer errors = new StringBuffer();

        if (definition.categoryName.length() == 0) {
            errors.append(Messages.CustomXmlParserInputWizardPage_emptyCategoryError);
            categoryText.setBackground(COLOR_LIGHT_RED);
        } else if (definition.definitionName.length() == 0) {
            errors.append(Messages.CustomXmlParserInputWizardPage_emptyLogTypeError);
            logtypeText.setBackground(COLOR_LIGHT_RED);
        } else {
            categoryText.setBackground(COLOR_TEXT_BACKGROUND);
            logtypeText.setBackground(COLOR_TEXT_BACKGROUND);
            if (definition.categoryName.indexOf(':') != -1) {
                errors.append(Messages.CustomXmlParserInputWizardPage_invalidCategoryError);
                categoryText.setBackground(COLOR_LIGHT_RED);
            }
            if (definition.definitionName.indexOf(':') != -1) {
                errors.append(Messages.CustomXmlParserInputWizardPage_invalidLogTypeError);
                logtypeText.setBackground(COLOR_LIGHT_RED);
            }
            for (TraceTypeHelper helper : TmfTraceType.getTraceTypeHelpers()) {
                if (definition.categoryName.equals(helper.getCategoryName()) &&
                        definition.definitionName.equals(helper.getName()) &&
                        (editDefinitionName == null || !editDefinitionName.equals(definition.definitionName)) &&
                        (editCategoryName == null || !editCategoryName.equals(definition.categoryName))) {
                    errors.append(Messages.CustomXmlParserInputWizardPage_duplicatelogTypeError);
                    logtypeText.setBackground(COLOR_LIGHT_RED);
                    break;
                }
            }
        }

        if (definition.rootInputElement == null) {
            errors.append(Messages.CustomXmlParserInputWizardPage_noDocumentError);
        }

        if (definition.rootInputElement != null) {
            logEntryFound = false;
            timeStampFound = false;

            errors.append(validateElement(definition.rootInputElement));

            if ((definition.rootInputElement.attributes != null && definition.rootInputElement.attributes.size() != 0)
                    || (definition.rootInputElement.childElements != null && definition.rootInputElement.childElements.size() != 0)
                    || errors.length() == 0) {
                if (!logEntryFound) {
                    errors.append(Messages.CustomXmlParserInputWizardPage_missingLogEntryError);
                }

                if (timeStampFound) {
                    if (timeStampOutputFormatText.getText().trim().length() == 0) {
                        errors.append(Messages.CustomXmlParserInputWizardPage_missingTimestampFmtError);
                        timeStampOutputFormatText.setBackground(COLOR_LIGHT_RED);
                    } else {
                        try {
                            new TmfTimestampFormat(timeStampOutputFormatText.getText().trim());
                            timeStampOutputFormatText.setBackground(COLOR_TEXT_BACKGROUND);
                        } catch (IllegalArgumentException e) {
                            errors.append(Messages.CustomXmlParserInputWizardPage_invalidTimestampFmtError);
                            timeStampOutputFormatText.setBackground(COLOR_LIGHT_RED);
                        }
                    }
                } else {
                    timeStampPreviewText.setText(Messages.CustomXmlParserInputWizardPage_notimestamporAttributeError);
                }
            }
        } else {
            timeStampPreviewText.setText(Messages.CustomXmlParserInputWizardPage_notimestamporAttributeError);
        }

        if (errors.length() == 0) {
            setDescription(defaultDescription);
            setPageComplete(true);
        } else {
            setDescription(errors.toString());
            setPageComplete(false);
        }
    }

