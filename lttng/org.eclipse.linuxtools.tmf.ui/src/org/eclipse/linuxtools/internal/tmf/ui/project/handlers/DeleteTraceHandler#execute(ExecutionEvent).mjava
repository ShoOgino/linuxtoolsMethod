    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return null;
        }

        // Confirm the operation
        Shell shell = window.getShell();
        MessageBox confirmOperation = new MessageBox(shell, SWT.ICON_QUESTION | SWT.CANCEL | SWT.OK);
        confirmOperation.setText(Messages.DeleteDialog_Title);
        confirmOperation.setMessage(Messages.DeleteTraceHandler_Message);
        if (confirmOperation.open() != SWT.OK) {
            return null;
        }

        Iterator<Object> iterator = fSelection.iterator();
        while (iterator.hasNext()) {
            Object element = iterator.next();
            if (element instanceof TmfTraceElement) {
                final TmfTraceElement trace = (TmfTraceElement) element;
                IResource resource = trace.getResource();
                try {
                    // Close the trace if open
                    IFile file = trace.getBookmarksFile();
                    FileEditorInput input = new FileEditorInput(file);
                    IWorkbench wb = PlatformUI.getWorkbench();
                    for (IWorkbenchWindow wbWindow : wb.getWorkbenchWindows()) {
                        for (IWorkbenchPage wbPage : wbWindow.getPages()) {
                            for (IEditorReference editorReference : wbPage.getEditorReferences()) {
                                if (editorReference.getEditorInput().equals(input)) {
                                    wbPage.closeEditor(editorReference.getEditor(false), false);
                                }
                            }
                        }
                    }

                    IPath path = resource.getLocation();
                    if (path != null && (trace.getParent() instanceof TmfTraceFolder)) {
                        TmfExperimentFolder experimentFolder = trace.getProject().getExperimentsFolder();

                        // Propagate the removal to traces
                        for (ITmfProjectModelElement experiment : experimentFolder.getChildren()) {
                            List<ITmfProjectModelElement> toRemove = new LinkedList<ITmfProjectModelElement>();
                            for (ITmfProjectModelElement child : experiment.getChildren()) {
                                if (child.getName().equals(trace.getName())) {
                                    toRemove.add(child);
                                }
                            }
                            for (ITmfProjectModelElement child : toRemove) {
                                // Close the experiment if open
                                file = ((TmfExperimentElement) experiment).getBookmarksFile();
                                input = new FileEditorInput(file);
                                for (IWorkbenchWindow wbWindow : wb.getWorkbenchWindows()) {
                                    for (IWorkbenchPage wbPage : wbWindow.getPages()) {
                                        for (IEditorReference editorReference : wbPage.getEditorReferences()) {
                                            if (editorReference.getEditorInput().equals(input)) {
                                                wbPage.closeEditor(editorReference.getEditor(false), false);
                                            }
                                        }
                                    }
                                }
                                experiment.removeChild(child);
                                child.getResource().delete(true, null);
                            }
                        }

                        // Delete supplementary files
                        trace.deleteSupplementaryFolder();
                    }

                    // Finally, delete the trace
                    resource.delete(true, new NullProgressMonitor());

                    // Refresh the project
                    trace.getProject().refresh();

                } catch (final CoreException e) {
                    Display.getDefault().asyncExec(new Runnable() {
                        @Override
                        public void run() {
                            final MessageBox mb = new MessageBox(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
                            mb.setText(Messages.DeleteTraceHandler_Error + ' ' + trace.getName());
                            mb.setMessage(e.getMessage());
                            mb.open();
                        }
                    });
                    Activator.getDefault().logError("Error deleting trace: " + trace.getName(), e); //$NON-NLS-1$
                }
            }
        }

        return null;
    }

