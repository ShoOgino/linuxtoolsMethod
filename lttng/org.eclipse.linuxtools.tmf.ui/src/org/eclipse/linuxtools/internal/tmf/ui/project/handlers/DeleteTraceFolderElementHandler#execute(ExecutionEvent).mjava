    @Override
    public Object execute(ExecutionEvent event) throws ExecutionException {

        // Check if we are closing down
        IWorkbenchWindow window = PlatformUI.getWorkbench().getActiveWorkbenchWindow();
        if (window == null) {
            return null;
        }

        // Get the selection
        ISelection selection = HandlerUtil.getCurrentSelection(event);
        if (!(selection instanceof IStructuredSelection)) {
            return null;
        }
        final DeleteType deleteType = getDeleteType(selection);

        // Confirm the operation
        Shell shell = window.getShell();
        MessageBox confirmOperation = new MessageBox(shell, SWT.ICON_QUESTION | SWT.CANCEL | SWT.OK);
        confirmOperation.setText(getTitle(deleteType));
        confirmOperation.setMessage(getMessage(deleteType));
        if (confirmOperation.open() != SWT.OK) {
            return null;
        }

        final Iterator<Object> iterator = fSelection.iterator();
        final int nbElements = fSelection.size();

        TmfWorkspaceModifyOperation operation = new TmfWorkspaceModifyOperation() {
            @Override
            public void execute(IProgressMonitor monitor) throws CoreException {
                SubMonitor subMonitor = SubMonitor.convert(monitor, nbElements);

                while (iterator.hasNext()) {
                    if (monitor.isCanceled()) {
                        throw new OperationCanceledException();
                    }
                    Object element = iterator.next();
                    SubProgressMonitor elementSubMonitor = new SubProgressMonitor(subMonitor, 1);
                    if (element instanceof TmfTraceElement) {
                        final TmfTraceElement trace = (TmfTraceElement) element;
                        if (!trace.getResource().exists()) {
                            continue;
                        }
                        subMonitor.setTaskName(getTraceTaskName(deleteType) + " " + trace.getElementPath()); //$NON-NLS-1$
                        try {
                            SubMonitor deleteSubMonitor = SubMonitor.convert(elementSubMonitor, 1);
                            trace.delete(deleteSubMonitor);
                        } catch (final CoreException e) {
                            Display.getDefault().asyncExec(new Runnable() {
                                @Override
                                public void run() {
                                    final MessageBox mb = new MessageBox(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
                                    mb.setText(getTraceErrorMessage(deleteType) + ' ' + trace.getName());
                                    mb.setMessage(e.getMessage());
                                    mb.open();
                                }
                            });
                            Activator.getDefault().logError(getTraceErrorMessage(deleteType) + trace.getName(), e);
                        }
                    } else if (element instanceof TmfTraceFolder) {
                        final TmfTraceFolder folder = (TmfTraceFolder) element;
                        final IResource resource = folder.getResource();
                        if (!resource.exists()) {
                            continue;
                        }

                        subMonitor.setTaskName(getTraceFolderTaskName(deleteType) + " " + folder.getPath()); //$NON-NLS-1$

                        try {
                            // delete all traces under this folder
                            SubMonitor childrenSubMonitor = SubMonitor.convert(elementSubMonitor, folder.getTraces().size() + 1);
                            for (TmfTraceElement traceElement : folder.getTraces()) {
                                SubProgressMonitor deleteSubMonitor = new SubProgressMonitor(childrenSubMonitor, 1);
                                traceElement.delete(deleteSubMonitor);
                            }

                            // Finally, delete the folder. For the Traces
                            // folder, we only delete the children since the
                            // folder should always be there.
                            final SubProgressMonitor deleteSubMonitor = new SubProgressMonitor(subMonitor, 1);
                            if (folder instanceof TmfTracesFolder) {
                                resource.accept(new IResourceVisitor() {
                                    @Override
                                    public boolean visit(IResource visitedResource) throws CoreException {
                                        if (visitedResource != resource) {
                                            visitedResource.delete(true, deleteSubMonitor);
                                        }
                                        return true;
                                    }
                                }, IResource.DEPTH_ONE, 0);
                            } else {
                                resource.delete(true, deleteSubMonitor);
                            }
                            childrenSubMonitor.done();
                        } catch (final CoreException e) {
                            Display.getDefault().asyncExec(new Runnable() {
                                @Override
                                public void run() {
                                    final MessageBox mb = new MessageBox(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell());
                                    mb.setText(getFolderErrorMessage(deleteType) + ' ' + folder.getName());
                                    mb.setMessage(e.getMessage());
                                    mb.open();
                                }
                            });
                            Activator.getDefault().logError(getFolderErrorMessage(deleteType) + folder.getName(), e);
                        }
                    }
                    subMonitor.setTaskName(""); //$NON-NLS-1$
                    elementSubMonitor.done();
                }
           }
        };

        try {
            PlatformUI.getWorkbench().getProgressService().run(true, true, operation);
        } catch (InterruptedException e) {
            return null;
        } catch (InvocationTargetException e) {
            MessageDialog.openError(window.getShell(), e.toString(), e.getTargetException().toString());
            return null;
        }
        return null;
    }

