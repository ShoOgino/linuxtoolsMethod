    private void validate() {

        definition.categoryName = categoryText.getText().trim();
        definition.definitionName = logtypeText.getText().trim();
        definition.timeStampOutputFormat = timestampOutputFormatText.getText().trim();

        if (selectedLine != null) {
            selectedLine.extractInputs();
            treeViewer.refresh();
        }

        StringBuffer errors = new StringBuffer();

        if (definition.categoryName.length() == 0) {
            errors.append("Enter a category for the new trace type. "); //$NON-NLS-1$
            categoryText.setBackground(COLOR_LIGHT_RED);
        } else if (definition.definitionName.length() == 0) {
            errors.append("Enter a name for the new trace type. "); //$NON-NLS-1$
            logtypeText.setBackground(COLOR_LIGHT_RED);
        } else {
            categoryText.setBackground(COLOR_TEXT_BACKGROUND);
            logtypeText.setBackground(COLOR_TEXT_BACKGROUND);
            if (definition.categoryName.indexOf(':') != -1) {
                errors.append("Invalid character ':' in category. "); //$NON-NLS-1$
                categoryText.setBackground(COLOR_LIGHT_RED);
            }
            if (definition.definitionName.indexOf(':') != -1) {
                errors.append("Invalid character ':' in trace type. "); //$NON-NLS-1$
                logtypeText.setBackground(COLOR_LIGHT_RED);
            }
            for (TraceTypeHelper helper : TmfTraceType.getTraceTypeHelpers()) {
                if (definition.categoryName.equals(helper.getCategoryName()) &&
                        definition.definitionName.equals(helper.getName()) &&
                        (editDefinitionName == null || !editDefinitionName.equals(definition.definitionName)) &&
                        (editCategoryName == null || !editCategoryName.equals(definition.categoryName))) {
                    errors.append("The trace type name already exists. "); //$NON-NLS-1$
                    logtypeText.setBackground(COLOR_LIGHT_RED);
                    break;
                }
            }
        }

        timestampFound = false;
        for (int i = 0; i < definition.inputs.size(); i++) {

            InputLine inputLine = definition.inputs.get(i);
            String name = Integer.toString(i + 1);
            errors.append(validateLine(inputLine, name));
        }
        if (timestampFound) {
            if (definition.timeStampOutputFormat.length() == 0) {
                errors.append("Enter the output format for the Time Stamp field. "); //$NON-NLS-1$
                timestampOutputFormatText.setBackground(COLOR_LIGHT_RED);
            } else {
                try {
                    new TmfTimestampFormat(definition.timeStampOutputFormat);
                    timestampOutputFormatText.setBackground(COLOR_TEXT_BACKGROUND);
                } catch (IllegalArgumentException e) {
                    errors.append("Enter a valid output format for the Time Stamp field [" + e.getMessage() + "]."); //$NON-NLS-1$ //$NON-NLS-2$
                    timestampOutputFormatText.setBackground(COLOR_LIGHT_RED);
                }
            }

        } else {
            timestampOutputFormatText.setBackground(COLOR_TEXT_BACKGROUND);
        }

        if (errors.length() == 0) {
            setDescription(defaultDescription);
            setPageComplete(true);
        } else {
            setDescription(errors.toString());
            setPageComplete(false);
        }
    }

