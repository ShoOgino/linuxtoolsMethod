    @Override
    protected Control createDialogArea(Composite parent) {
        Composite composite = (Composite) super.createDialogArea(parent);
        composite.setLayout(new GridLayout());
        composite.setLayoutData(new GridData(GridData.FILL_BOTH));

        Group contextGroup = new Group(composite, SWT.SHADOW_NONE);
        contextGroup.setText(Messages.SelectSpplementaryResources_ResourcesGroupTitle);
        contextGroup.setLayout(new GridLayout(2, false));
        contextGroup.setLayoutData(new GridData(GridData.FILL_BOTH));

        fTreeViewer = new CheckboxTreeViewer(contextGroup, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
        GridData data = new GridData(GridData.FILL_BOTH);
        Tree tree = fTreeViewer.getTree();
        tree.setLayoutData(data);
        fTreeViewer.setContentProvider(new ITreeContentProvider() {

            @Override
            public void inputChanged(Viewer viewer, Object oldInput, Object newInput) {
            }

            @Override
            public void dispose() {
            }

            @Override
            public boolean hasChildren(Object element) {
                return element instanceof TmfCommonProjectElement;
            }

            @Override
            public Object getParent(Object element) {
                if (element instanceof IResource) {
                    getParentElement((IResource) element);
                }
                return null;
            }

            @Override
            public Object[] getElements(Object inputElement) {
                if (inputElement instanceof Object[]) {
                    return (Object[]) inputElement;
                }
                return null;
            }

            @Override
            public Object[] getChildren(Object parentElement) {
                if (parentElement instanceof TmfCommonProjectElement) {
                    return fResourceMap.get((TmfCommonProjectElement) parentElement).toArray();
                }
                return null;
            }
        });

        fTreeViewer.setLabelProvider(new LabelProvider() {
            @Override
            public String getText(Object element) {
                if (element instanceof IResource) {
                    IResource resource = (IResource) element;
                    TmfCommonProjectElement projectElement = getParentElement(resource);
                    // remove .tracing/<supplementary folder> segments
                    IPath suppFolderPath = projectElement.getTraceSupplementaryFolder(projectElement.getElementPath()).getFullPath();
                    return resource.getFullPath().removeFirstSegments(suppFolderPath.segmentCount()).toString();
                } else if (element instanceof TmfCommonProjectElement) {
                    TmfCommonProjectElement projectElement = (TmfCommonProjectElement) element;
                    return projectElement.getElementPath();
                }
                return super.getText(element);
            }

            @Override
            public Image getImage(Object element) {
                if (element instanceof IResource) {
                    return RESOURCE_IMAGE;
                } else if (element instanceof TmfTraceElement) {
                    return TRACE_IMAGE;
                } else if (element instanceof TmfExperimentElement) {
                    return EXPERIMENT_IMAGE;
                }
                return null;
            }

        });

        fTreeViewer.setInput(fResourceMap.keySet().toArray());

        fTreeViewer.expandAll();
        setAllChecked(true);

        fTreeViewer.addCheckStateListener(new ICheckStateListener() {
            @Override
            public void checkStateChanged(CheckStateChangedEvent event) {
                if (event.getElement() instanceof TmfCommonProjectElement) {
                    fTreeViewer.setSubtreeChecked(event.getElement(), event.getChecked());
                    fTreeViewer.setGrayed(event.getElement(), false);
                } else if (event.getElement() instanceof IResource) {
                    TmfCommonProjectElement projectElement  = getParentElement((IResource) event.getElement());
                    int checkedCount = 0;
                    Collection<IResource> resources = fResourceMap.get(projectElement);
                    for (IResource resource : resources) {
                        if (fTreeViewer.getChecked(resource)) {
                            checkedCount++;
                        }
                    }
                    if (checkedCount == resources.size()) {
                        fTreeViewer.setChecked(projectElement, true);
                        fTreeViewer.setGrayed(projectElement, false);
                    } else if (checkedCount > 0) {
                        fTreeViewer.setGrayChecked(projectElement, true);
                    } else {
                        fTreeViewer.setGrayChecked(projectElement, false);
                    }
                }
            }
        });

        fTreeViewer.addSelectionChangedListener(new ISelectionChangedListener() {
            @Override
            public void selectionChanged(SelectionChangedEvent event) {
                updateOKButtonEnablement();
            }
        });

        Composite btComp = new Composite(contextGroup, SWT.NONE);
        FillLayout layout = new FillLayout(SWT.VERTICAL);
        layout.spacing = 4;
        btComp.setLayout(layout);

        GridData gd = new GridData();
        gd.verticalAlignment = SWT.CENTER;
        btComp.setLayoutData(gd);

        final Button selectAll = new Button(btComp, SWT.PUSH);
        selectAll.setText(Messages.Dialog_SelectAll);
        selectAll.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                setAllChecked(true);

                updateOKButtonEnablement();
            }
        });

        final Button deselectAll = new Button(btComp, SWT.PUSH);
        deselectAll.setText(Messages.Dialog_DeselectAll);
        deselectAll.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                setAllChecked(false);

                updateOKButtonEnablement();
            }
        });

        getShell().setMinimumSize(new Point(300, 150));

        return composite;
    }

