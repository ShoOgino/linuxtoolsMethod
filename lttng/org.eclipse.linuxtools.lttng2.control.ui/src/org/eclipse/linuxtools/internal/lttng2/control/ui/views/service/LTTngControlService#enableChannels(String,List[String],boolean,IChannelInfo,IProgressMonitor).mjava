    @Override
    public void enableChannels(String sessionName, List<String> channelNames, boolean isKernel, IChannelInfo info, IProgressMonitor monitor) throws ExecutionException {

        // no channels to enable
        if (channelNames.isEmpty()) {
            return;
        }

        StringBuffer command = createCommand(LTTngControlServiceConstants.COMMAND_ENABLE_CHANNEL);

        for (Iterator<String> iterator = channelNames.iterator(); iterator.hasNext();) {
            String channel = iterator.next();
            command.append(channel);
            if (iterator.hasNext()) {
                command.append(',');
            }
        }

        if (isKernel) {
            command.append(LTTngControlServiceConstants.OPTION_KERNEL);
        } else {
            command.append(LTTngControlServiceConstants.OPTION_UST);
        }

        String newSessionName = formatParameter(sessionName);
        command.append(LTTngControlServiceConstants.OPTION_SESSION);
        command.append(newSessionName);

        if (info != null) {
            // --discard Discard event when buffers are full (default)

            // --overwrite Flight recorder mode
            if (info.isOverwriteMode()) {
                command.append(LTTngControlServiceConstants.OPTION_OVERWRITE);
            }
            // --subbuf-size SIZE Subbuffer size in bytes
            // (default: 4096, kernel default: 262144)
            if (info.getSubBufferSize() != LTTngControlServiceConstants.UNUSED_VALUE) {
                command.append(LTTngControlServiceConstants.OPTION_SUB_BUFFER_SIZE);
                command.append(String.valueOf(info.getSubBufferSize()));
            }

            // --num-subbuf NUM Number of subbufers
            if (info.getNumberOfSubBuffers() != LTTngControlServiceConstants.UNUSED_VALUE) {
                command.append(LTTngControlServiceConstants.OPTION_NUM_SUB_BUFFERS);
                command.append(String.valueOf(info.getNumberOfSubBuffers()));
            }

            // --switch-timer USEC Switch timer interval in usec
            if (info.getSwitchTimer() != LTTngControlServiceConstants.UNUSED_VALUE) {
                command.append(LTTngControlServiceConstants.OPTION_SWITCH_TIMER);
                command.append(String.valueOf(info.getSwitchTimer()));
            }

            // --read-timer USEC Read timer interval in usec
            if (info.getReadTimer() != LTTngControlServiceConstants.UNUSED_VALUE) {
                command.append(LTTngControlServiceConstants.OPTION_READ_TIMER);
                command.append(String.valueOf(info.getReadTimer()));
            }

            if (isVersionSupported("2.2.0")) { //$NON-NLS-1$
                // --buffers-uid Every application sharing the same UID use the
                // same buffers --buffers-pid Buffers are allocated per PID
                if (!isKernel) {
                    if (info.getBufferType() == BufferType.BUFFER_PER_PID) {
                        command.append(LTTngControlServiceConstants.OPTION_PER_PID_BUFFERS);

                    } else if (info.getBufferType() == BufferType.BUFFER_PER_UID) {
                        command.append(LTTngControlServiceConstants.OPTION_PER_UID_BUFFERS);
                    }
                }

                // -C SIZE Maximum size of trace files in bytes
                if (info.getMaxSizeTraceFiles() != LTTngControlServiceConstants.UNUSED_VALUE) {
                    command.append(LTTngControlServiceConstants.OPTION_MAX_SIZE_TRACE_FILES);
                    command.append(String.valueOf(info.getMaxSizeTraceFiles()));
                }

                // -W NUM Maximum number of trace files
                if (info.getMaxNumberTraceFiles() != LTTngControlServiceConstants.UNUSED_VALUE) {
                    command.append(LTTngControlServiceConstants.OPTION_MAX_TRACE_FILES);
                    command.append(String.valueOf(info.getMaxNumberTraceFiles()));
                }
            }
        }

        executeCommand(command.toString(), monitor);

    }

