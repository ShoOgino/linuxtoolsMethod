    private void createAdvancedLiveGroup() {
        if (fLiveGroup == null && fIsAdvancedEnabled) {
            GridLayout layout = new GridLayout(7, true);
            fLiveGroup = new Group(fAdvancedGroup, SWT.NONE);
            fLiveGroup.setLayout(layout);
            GridData layoutData = new GridData(GridData.FILL_BOTH);
            fLiveGroup.setLayoutData(layoutData);

            Label label = new Label(fLiveGroup, SWT.NONE);
            label.setText(Messages.TraceControl_CreateSessionLiveConnectionLabel);
            layoutData = new GridData(GridData.FILL_HORIZONTAL);
            layoutData.horizontalSpan = 2;
            label.setLayoutData(layoutData);

            fLiveHostAddressText = new Text(fLiveGroup, SWT.NONE);
            fLiveHostAddressText.setText(DEFAULT_LIVE_URL);
            fLiveHostAddressText.setEnabled(false);
            fLiveHostAddressText.setToolTipText(Messages.TraceControl_CreateSessionLiveConnectionUrlTooltip);
            layoutData = new GridData(GridData.FILL_HORIZONTAL);
            layoutData.horizontalSpan = 4;
            fLiveHostAddressText.setLayoutData(layoutData);

            fLivePortText = new Text(fLiveGroup, SWT.NONE);
            fLivePortText.setText(Integer.toString(DEFAULT_LIVE_PORT));
            fLivePortText.setToolTipText(Messages.TraceControl_CreateSessionLiveConnectionPortTooltip);
            layoutData = new GridData(GridData.FILL_HORIZONTAL);
            fLivePortText.setLayoutData(layoutData);

            Label liveDelayLabel = new Label(fLiveGroup, SWT.NONE);
            layoutData = new GridData(GridData.FILL_HORIZONTAL);
            liveDelayLabel.setText(Messages.TraceControl_CreateSessionLiveDelayLabel);
            liveDelayLabel.setLayoutData(layoutData);
            fLiveDelayText = new Text(fLiveGroup, SWT.NONE);
            fLiveDelayText.setText(DEFAULT_TEXT);
            fLiveDelayText.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
            fLiveDelayText.setToolTipText(Messages.TraceControl_CreateSessionLiveDelayTooltip);
            fLiveDelayText.addVerifyListener(new VerifyListener() {
                @Override
                public void verifyText(VerifyEvent e) {
                    // only numbers and default are allowed.
                    e.doit = e.text.matches("[0-9]*") || e.text.matches(DEFAULT_TEXT); //$NON-NLS-1$
                    updateEnablement();
                }
            });
            fLiveDelayText.addModifyListener(new ModifyListener() {
                @Override
                public void modifyText(ModifyEvent event) {
                    updateEnablement();
                }
            });

            fLiveDelayText.addFocusListener(new FocusListener() {

                @Override
                public void focusLost(FocusEvent e) {
                    Text focusLostWidget = (Text) e.widget;
                    if (focusLostWidget.getText().isEmpty()) {
                        focusLostWidget.setText(DEFAULT_TEXT);
                        focusLostWidget.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_GRAY));
                    }
                }

                @Override
                public void focusGained(FocusEvent e) {
                    Text focusGainedWidget = (Text) e.widget;
                    if (focusGainedWidget.getText().equals(DEFAULT_TEXT)) {
                        focusGainedWidget.setText(""); //$NON-NLS-1$
                        focusGainedWidget.setForeground(getShell().getDisplay().getSystemColor(SWT.COLOR_BLACK));
                    }
                }
            });

            layoutData = new GridData(GridData.FILL_HORIZONTAL);
            layoutData.grabExcessHorizontalSpace = true;
            layoutData.horizontalSpan = 6;
            fLiveDelayText.setLayoutData(layoutData);
            getShell().pack();
        }
    }

