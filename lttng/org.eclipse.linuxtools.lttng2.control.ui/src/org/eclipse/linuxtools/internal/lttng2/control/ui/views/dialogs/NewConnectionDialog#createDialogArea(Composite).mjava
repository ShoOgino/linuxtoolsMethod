    @Override
    protected Control createDialogArea(Composite parent) {
        // Main dialog panel
        GridData gd;
        Composite dialogComposite = new Composite(parent, SWT.NONE);
        GridLayout layout = new GridLayout(1, true);
        dialogComposite.setLayout(layout);
        dialogComposite.setLayoutData(new GridData(GridData.FILL_BOTH));

        Label label = new Label(dialogComposite, SWT.NONE);
        label.setText(Messages.TraceControl_NewNodeExistingConnectionGroupName);
        label.setLayoutData(gd = new GridData());
        gd.widthHint = label.computeSize(-1, -1).x + convertWidthInCharsToPixels(4);
        // Existing connections group
        fConnectionTree = new TreeViewer(dialogComposite);
        fConnectionTree.getTree().setLayoutData(gd = new GridData(SWT.FILL, SWT.FILL, true, true));
        gd.widthHint = convertWidthInCharsToPixels(40);
        gd.heightHint = convertHeightInCharsToPixels(10);
        fConnectionTree.setLabelProvider(new LabelProvider() {
            @Override
            public String getText(Object element) {
                if (element instanceof IRemoteConnection) {
                    IRemoteConnection rc = (IRemoteConnection) element;
                    if (rc.getRemoteServices() == RemoteServices.getLocalServices()) {
                        return rc.getName();
                    }

                    return format("{0} [{1}]", rc.getName(), rc.getAddress()); //$NON-NLS-1$
                } else if (element instanceof IRemoteServices) {
                    IRemoteServices rs = (IRemoteServices) element;
                    return rs.getName();
                }
                return Messages.TraceControl_UnknownNode;
            }

            @Override
            public Image getImage(Object element) {
                if (element instanceof IRemoteConnection) {
                    return Activator.getDefault().loadIcon(CONNECTION_ICON_FILE);
                }
                return Activator.getDefault().loadIcon(PROVIDERS_ICON_FILE);
            }
        });
        fConnectionTree.setContentProvider(new ConnectionContentProvider());
        fConnectionTree.addSelectionChangedListener(new ISelectionChangedListener() {
            @Override
            public void selectionChanged(SelectionChangedEvent event) {
                onSelectionChanged();
            }
        });
        fConnectionTree.addDoubleClickListener(new IDoubleClickListener() {
            @Override
            public void doubleClick(DoubleClickEvent event) {
                okPressed();
            }
        });

        Composite buttons = new Composite(dialogComposite, SWT.NONE);
        layout = new GridLayout(3, true);
        layout.marginHeight = layout.marginWidth = 0;
        buttons.setLayout(layout);
        buttons.setLayoutData(new GridData(SWT.END, SWT.CENTER, false, false));

        new Label(buttons, SWT.NONE);

        fEditButton = new Button(buttons, SWT.PUSH);
        fEditButton.setText(Messages.TraceControl_NewNodeEditButtonName);
        setButtonLayoutData(fEditButton);
        fEditButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onEditConnection();
            }
        });

        fNewButton = new Button(buttons, SWT.PUSH);
        fNewButton.setText(Messages.TraceControl_NewNodeCreateButtonText);
        setButtonLayoutData(fNewButton);
        fNewButton.addSelectionListener(new SelectionAdapter() {
            @Override
            public void widgetSelected(SelectionEvent e) {
                onNewConnection();
            }
        });

        return dialogComposite;
    }

