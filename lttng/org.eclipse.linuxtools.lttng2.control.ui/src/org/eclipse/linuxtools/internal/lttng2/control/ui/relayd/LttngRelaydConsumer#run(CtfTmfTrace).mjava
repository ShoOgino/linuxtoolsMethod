    /**
     * Run the consumer operation for a give trace.
     *
     * @param trace
     *            the trace
     */
    public void run(final CtfTmfTrace trace) {
        if (fSession == null) {
            return;
        }

        fCtfTmfTrace = trace;
        fCtfTrace = trace.getCTFTrace();
        fConsumerJob = new Job("RelayD consumer") { //$NON-NLS-1$

            @Override
            protected IStatus run(final IProgressMonitor monitor) {
                try {
                    while (!monitor.isCanceled()) {
                        List<StreamResponse> attachedStreams = fSession.getStreamList();
                        for (StreamResponse stream : attachedStreams) {
                            if (stream.getMetadataFlag() != 1) {
                                IndexResponse indexReply = fRelayd.getNextIndex(stream);
                                if (indexReply.getStatus() == NextIndexReturnCode.VIEWER_INDEX_OK) {
                                    long nanoTimeStamp = fCtfTrace.timestampCyclesToNanos(indexReply.getTimestampEnd());
                                    if (nanoTimeStamp > fTimestampEnd) {
                                        CtfTmfTimestamp endTime = new CtfTmfTimestamp(nanoTimeStamp);
                                        TmfTimeRange range = new TmfTimeRange(fCtfTmfTrace.getStartTime(), endTime);

                                        long currentTime = System.nanoTime();
                                        if (currentTime - fLastSignal > SIGNAL_THROTTLE_NANOSEC) {
                                            TmfTraceRangeUpdatedSignal signal = new TmfTraceRangeUpdatedSignal(LttngRelaydConsumer.this, fCtfTmfTrace, range);
                                            fCtfTmfTrace.broadcastAsync(signal);
                                            fLastSignal = currentTime;
                                        }
                                        fTimestampEnd = nanoTimeStamp;
                                    }
                                } else if (indexReply.getStatus() == NextIndexReturnCode.VIEWER_INDEX_HUP) {
                                    // The trace is now complete because the trace session was destroyed
                                    fCtfTmfTrace.setComplete(true);
                                    TmfTraceRangeUpdatedSignal signal = new TmfTraceRangeUpdatedSignal(LttngRelaydConsumer.this, fCtfTmfTrace, new TmfTimeRange(fCtfTmfTrace.getStartTime(), new CtfTmfTimestamp(fTimestampEnd)));
                                    fCtfTmfTrace.broadcastAsync(signal);
                                    return Status.OK_STATUS;
                                }
                            }
                        }
                    }
                } catch (IOException e) {
                    Activator.getDefault().logError("Error during live trace reading", e); //$NON-NLS-1$
                    return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.LttngRelaydConsumer_ErrorLiveReading + (e.getMessage() != null ? e.getMessage() : "")); //$NON-NLS-1$
                }

                return Status.OK_STATUS;
            }
        };
        fConsumerJob.setSystem(true);
        fConsumerJob.schedule();
    }

