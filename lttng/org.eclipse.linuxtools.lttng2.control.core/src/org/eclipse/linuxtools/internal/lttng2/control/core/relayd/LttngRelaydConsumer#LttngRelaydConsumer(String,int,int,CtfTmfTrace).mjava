    /**
     * Start a lttng consumer
     *
     * @param address
     *            the ip address in string format
     * @param port
     *            the port, an integer
     * @param session
     *            the session id
     * @param ctfTrace
     *            the parent trace
     */
    public LttngRelaydConsumer(String address, final int port, final int session, final CtfTmfTrace ctfTrace) {
        fAddress = address;
        fPort = port;
        fSession = session;
        fCtfTrace = ctfTrace;
        for (Stream s : fCtfTrace.getCTFTrace().getStreams()) {
            for (StreamInput si : s.getStreamInputs()) {
                fStreams.put(si.getStream().getId(), new File(si.getStream().getTrace().getPath() + si.getFilename()));
            }
        }

        fConsumerJob = new Job("RelayD consumer") { //$NON-NLS-1$

            @Override
            protected IStatus run(IProgressMonitor monitor) {
                try (Socket connection = new Socket(fAddress, fPort);
                        ILttngRelaydConnector relayd = LttngRelaydConnectorFactory.getNewConnector(connection);) {

                    List<SessionResponse> sessions = relayd.getSessions();
                    AttachSessionResponse attachedSession = relayd.attachToSession(sessions.get(fSession));

                    while (!monitor.isCanceled()) {

                        List<StreamResponse> attachedStreams = attachedSession.getStreamList();
                        for (StreamResponse stream : attachedStreams) {

                            TracePacketResponse packet = relayd.getNextPacket(stream);
                            // more streams
                            if ((packet.getFlags() & LttngViewerCommands.NEW_STREAM) == LttngViewerCommands.NEW_STREAM) {
                                Iterable<StreamResponse> newStreams = relayd.getNewStreams();
                                for (StreamResponse streamToAdd : newStreams) {

                                    File f = new File(fCtfTrace.getPath() + File.separator + streamToAdd.getPathName() + streamToAdd.getChannelName());
                                    // touch the file
                                    f.setLastModified(System.currentTimeMillis());
                                    fStreams.put(Long.valueOf(streamToAdd.getId()), f);
                                    fCtfTrace.getCTFTrace().addStream(streamToAdd.getId(), f);

                                }

                            }
                            // more metadata
                            if ((packet.getFlags() & LttngViewerCommands.NEW_METADATA) == LttngViewerCommands.NEW_METADATA) {

                                String metaData = relayd.getMetadata(attachedSession);
                                (new Metadata(ctfTrace.getCTFTrace())).parseTextFragment(metaData);
                            }

                            try (FileOutputStream fos = new FileOutputStream(fStreams.get(stream.getId()), true)) {
                                fos.write(packet.getData());
                                monitor.worked(1);
                            }
                        }

                    }

                } catch (IOException | CTFReaderException e) {
                    Activator.getDefault().logError("Error during live trace reading", e); //$NON-NLS-1$
                }
                return null;
            }
        };
        fConsumerJob.schedule();
    }

