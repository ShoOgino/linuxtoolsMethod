    @Override
    protected void buildStateSystem() throws TmfTraceException {
        /* Set up the path to the history tree file we'll use */
        final String htPath = this.getPath() + ".ht";
        final File htFile = new File(htPath);

        IStateHistoryBackend htBackend;
        IStateChangeInput htInput;
        HistoryBuilder builder;

        /* If the target file already exists, do not rebuild it uselessly */
        // TODO for now we assume it's complete. Might be a good idea to check
        // at least if its range matches the trace's range.
        if (htFile.exists()) {
            /* Load an existing history */
            try {
                htBackend = new HistoryTreeBackend(htFile);
                this.ss = new StateHistorySystem(htBackend, false);
                return;
            } catch (IOException e) {
                /*
                 * There was an error opening the existing file. Perhaps it was
                 * corrupted, perhaps it's an old version? We'll just
                 * fall-through and try to build a new one from scratch instead.
                 */
            }
        }

        /* Create a new state history from scratch */
        htInput = new CtfKernelStateInput(this);

        try {
            htBackend = new ThreadedHistoryTreeBackend(htFile,
                    htInput.getStartTime(), QUEUE_SIZE);
            builder = new HistoryBuilder(htInput, htBackend);
        } catch (IOException e) {
            /* 
             * If it fails here however, it means there was a problem writing
             * to the disk, so throw a real exception this time.
             */
            throw new TmfTraceException(e.getMessage());
        }

        // TODO this part is blocking for now...
        builder.run();

    }

