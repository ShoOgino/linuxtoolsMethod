	/**
	 * Handle the event LTT_EVENT_REQUEST_ISSUE
	 * 
	 * @return
	 */
	final IEventProcessing getBdevRequestIssueHandler() {
		AbsStateUpdate handler = new AbsStateUpdate() {

			private Events eventType = Events.LTT_EVENT_REQUEST_ISSUE;

			// @Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {
				//
				// // Get Fields
				// Long major = getAFieldLong(trcEvent, traceSt,
				// Fields.LTT_FIELD_MAJOR);
				// Long minor = getAFieldLong(trcEvent, traceSt,
				// Fields.LTT_FIELD_MINOR);
				// Long operation = getAFieldLong(trcEvent, traceSt,
				// Fields.LTT_FIELD_OPERATION);
				//
				// // calculate bdevcode
				// Long devcode = mkdev(major, minor);
				//
				// if (devcode == null) {
				// TraceDebug
				// .debug("incorrect calcualtion of bdevcode input( major: "
				// + major
				// + " minor: "
				// + minor
				// + " operation: " + operation);
				// return true;
				// }
				//
				// Map<Long, LttngBdevState> bdev_states = traceSt
				// .getBdev_states();
				// // Get the instance
				// LttngBdevState bdevState = bdev_states.get(devcode);
				// if (bdevState == null) {
				// bdevState = new LttngBdevState();
				// }
				//
				// // update the mode in the stack
				// if (operation == 0L) {
				// bdevState.getMode_stack().push(
				// BdevMode.LTTV_BDEV_BUSY_READING);
				// } else {
				// bdevState.getMode_stack().push(
				// BdevMode.LTTV_BDEV_BUSY_WRITING);
				// }
				//
				// // make sure it is included in the set
				// bdev_states.put(devcode, bdevState);
				return false;

			}

			// @Override
			public Events getEventHandleType() {
				return eventType;
			}
		};
		return handler;
	}

