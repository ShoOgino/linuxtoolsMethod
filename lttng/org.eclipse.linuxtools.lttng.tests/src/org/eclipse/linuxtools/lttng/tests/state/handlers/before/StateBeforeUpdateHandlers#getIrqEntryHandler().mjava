	/**
	 * 
	 * @return
	 */
	final IEventProcessing getIrqEntryHandler() {
		AbsStateUpdate handler = new AbsStateUpdate() {

			private Events eventType = Events.LTT_EVENT_IRQ_ENTRY;

			// @Override
			public boolean process(LttngEvent trcEvent, LttngTraceState traceSt) {
				//
				// Long cpu = trcEvent.getCpuId();
				//
				// Long irq = getAFieldLong(trcEvent, traceSt,
				// Fields.LTT_FIELD_IRQ_ID);
				// if (irq == null) {
				// return true;
				// }
				//
				// String submode;
				// submode = traceSt.getIrq_names().get(irq);
				//
				// if (submode == null) {
				// submode =
				// ExecutionSubMode.LTTV_STATE_SUBMODE_UNKNOWN.getInName();
				// }
				//				
				// /*
				// * Do something with the info about being in user or system
				// mode
				// * when int?
				// */
				// push_state(cpu, ExecutionMode.LTTV_STATE_IRQ, submode,
				// trcEvent
				// .getTimestamp(), traceSt);
				//
				// /* update cpu state */
				// LTTngCPUState cpust = traceSt.getCpu_states().get(cpu);
				// cpu_push_mode(cpust, CpuMode.LTTV_CPU_IRQ); /* mode stack */
				// cpust.setLast_irq(irq); /* last irq */
				//
				// /* udpate irq state */
				// irq_push_mode(traceSt.getIrq_states().get(irq),
				// IRQMode.LTTV_IRQ_BUSY);
				return false;

			}

			public Events getEventHandleType() {
				return eventType;
			}
		};
		return handler;
	}

