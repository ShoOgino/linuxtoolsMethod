    @Override
    public void moduleCreated(IAnalysisModule module) {
        IPath pathToFiles = XmlUtils.getXmlFilesPath();
        File fFolder = pathToFiles.toFile();
        if (!(fFolder.isDirectory() && fFolder.exists())) {
            return;
        }
        for (File xmlFile : fFolder.listFiles()) {
            if (!XmlUtils.xmlValidate(xmlFile).isOK()) {
                continue;
            }

            try {
                /* Load the XML File */
                DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
                DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
                Document doc = dBuilder.parse(xmlFile);
                doc.getDocumentElement().normalize();

                /* get state provider views if the analysis has state systems */
                if (module instanceof TmfStateSystemAnalysisModule) {
                    for (ViewType viewType : ViewType.values()) {
                        NodeList ssViewNodes = doc.getElementsByTagName(viewType.getXmlElem());
                        for (int i = 0; i < ssViewNodes.getLength(); i++) {
                            Element node = (Element) ssViewNodes.item(i);

                            /* Check if analysis is the right one */
                            List<Element> headNodes = XmlUtils.getChildElements(node, TmfXmlStrings.HEAD);
                            if (headNodes.size() != 1) {
                                continue;
                            }

                            List<Element> analysisNodes = XmlUtils.getChildElements(headNodes.get(0), TmfXmlStrings.ANALYSIS);
                            for (Element analysis : analysisNodes) {
                                String analysisId = analysis.getAttribute(TmfXmlStrings.ID);
                                if (analysisId.equals(module.getId())) {
                                    String viewId = viewType.getViewId();
                                    IAnalysisOutput output = new TmfXmlViewOutput(viewId);
                                    output.setOutputProperty(TmfXmlUiStrings.XML_OUTPUT_DATA, node.getAttribute(TmfXmlStrings.ID) + DATA_SEPARATOR + xmlFile.getAbsolutePath(), false);
                                    module.registerOutput(output);
                                }
                            }
                        }
                    }
                }
            } catch (ParserConfigurationException | SAXException | IOException e) {
                Activator.logError("Error opening XML file", e); //$NON-NLS-1$
            }
        }
    }

