    /**
     * Constructor
     *
     * @param baseQuark
     *            The quark matching this entry, or <code>-1</code> if no quark
     * @param displayQuark
     *            The quark containing the value to display. It was needed by
     *            the caller to get the start and end time of this entry, so we
     *            receive it as parameter from him.
     * @param trace
     *            The trace on which we are working (FIXME: is this parameter
     *            useful?)
     * @param name
     *            The name of this entry. It will be overridden if a "name" XML
     *            tag is specified in the entryElement. It will also be used as
     *            the ID of this entry if no "id" XML tag is specified. It
     *            typically is the attribute name corresponding the the base
     *            quark.
     * @param startTime
     *            The start time of this entry lifetime
     * @param endTime
     *            The end time of this entry
     * @param type
     *            The display type of this entry
     * @param ss
     *            The state system this entry belongs to
     * @param entryElement
     *            The XML element describing this entry. This element will be
     *            used to determine, if available, the parent, ID, name and
     *            other display option of this entry
     */
    public XmlEntry(int baseQuark, int displayQuark, ITmfTrace trace, String name, long startTime, long endTime, EntryDisplayType type, @NonNull ITmfStateSystem ss, Element entryElement) {
        super(name, startTime, endTime);
        fTrace = trace;
        fType = type;
        fBaseQuark = baseQuark;
        fDisplayQuark = displayQuark;
        fSs = ss;
        fElement = entryElement;

        /* Get the parent if specified */
        List<Element> elements = XmlUtils.getChildElements(fElement, TmfXmlUiStrings.PARENT_ELEMENT);
        if (elements.size() > 0) {
            fParentId = getFirstValue(elements.get(0));
        } else {
            fParentId = EMPTY_STRING;
        }

        /* Get the name of this entry */
        elements = XmlUtils.getChildElements(fElement, TmfXmlUiStrings.NAME_ELEMENT);
        if (elements.size() > 0) {
            String nameFromSs = getFirstValue(elements.get(0));
            if (!nameFromSs.isEmpty()) {
                setName(nameFromSs);
            }
        }

        /* Get the id of this entry */
        elements = XmlUtils.getChildElements(fElement, TmfXmlUiStrings.ID_ELEMENT);
        if (elements.size() > 0) {
            fId = getFirstValue(elements.get(0));
        } else {
            fId = name;
        }

    }

