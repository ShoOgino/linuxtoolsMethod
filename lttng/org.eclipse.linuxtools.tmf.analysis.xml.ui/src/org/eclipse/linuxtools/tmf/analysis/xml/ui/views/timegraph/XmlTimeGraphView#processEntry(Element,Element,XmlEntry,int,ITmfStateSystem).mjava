    private XmlEntry processEntry(@NonNull Element entryElement, @NonNull Element displayEl,
            XmlEntry parentEntry, int quark, ITmfStateSystem ss) {
        /*
         * Get the start time and end time of this entry from the display
         * attribute
         */
        ITmfXmlStateAttribute display = fFactory.createStateAttribute(displayEl, parentEntry);
        int displayQuark = display.getAttributeQuark(quark);
        if (displayQuark == IXmlStateSystemContainer.ERROR_QUARK) {
            return new XmlEntry(quark, parentEntry.getTrace(),
                    String.format("Unknown display quark for %s", ss.getAttributeName(quark)), ss); //$NON-NLS-1$
        }

        long entryStart = ss.getStartTime();
        long entryEnd = ss.getCurrentEndTime();

        try {

            ITmfStateInterval oneInterval = ss.querySingleState(entryStart, displayQuark);

            /* The entry start is the first non-null interval */
            while (oneInterval.getStateValue().isNull()) {
                long ts = oneInterval.getEndTime() + 1;
                if (ts > ss.getCurrentEndTime()) {
                    break;
                }
                oneInterval = ss.querySingleState(ts, displayQuark);
            }
            entryStart = oneInterval.getStartTime();

            /* The entry end is the last non-null interval */
            oneInterval = ss.querySingleState(entryEnd, displayQuark);
            while (oneInterval.getStateValue().isNull()) {
                long ts = oneInterval.getStartTime() - 1;
                if (ts < ss.getStartTime()) {
                    break;
                }
                oneInterval = ss.querySingleState(ts, displayQuark);
            }
            entryEnd = oneInterval.getEndTime();

        } catch (AttributeNotFoundException | StateSystemDisposedException e) {
        }

        return new XmlEntry(quark, displayQuark, parentEntry.getTrace(), ss.getAttributeName(quark),
                entryStart, entryEnd, EntryDisplayType.DISPLAY, ss, entryElement);
    }

