    @Override
    @SuppressWarnings({ "unchecked", "nls" })    
    public TmfEvent parseNextEvent(ITmfTrace<TmfEvent> eventStream, TmfContext context) throws IOException {
        if (! (eventStream instanceof TmfTraceStub)) {
            return null;
        }

        // Highly inefficient...
        RandomAccessFile stream = ((TmfTraceStub) eventStream).getStream();

        String name = eventStream.getName();
        name = name.substring(name.lastIndexOf('/') + 1);

        long location = 0;
        if (context != null)
            location = ((TmfLocation<Long>) (context.getLocation())).getLocation();
        stream.seek(location);

        try {
            long ts        = stream.readLong();
            String source  = stream.readUTF();
            String type    = stream.readUTF();
            String reference = stream.readUTF();
            String sender = stream.readUTF();
            String receiver = stream.readUTF();
            String signal = stream.readUTF();

            String[] labels = {"sender", "receiver", "signal"};

            TmfEventType tmfEventType = new TmfEventType("UnitTest", type, TmfEventField.makeRoot(labels));
            TmfEvent tmfEvent = new TmfEvent(new TmfTimestamp(ts, -9), source, tmfEventType, reference);

            String content = "[";
            content += sender;
            content += "," + receiver;
            content += "," + signal;
            content += "]";

            // Pre-parse the content
            TmfEventField[] fields = new TmfEventField[3];
            fields[0] = new TmfEventField("sender", sender);
            fields[1] = new TmfEventField("receiver", receiver);
            fields[2] = new TmfEventField("signal", signal);
            
            ITmfEventField tmfContent = new TmfEventField(ITmfEventField.ROOT_ID, content, fields);
            tmfEvent.setContent(tmfContent);

            return tmfEvent;
        } catch (EOFException e) {
        }
        return null;
    }

