    @Override
    @SuppressWarnings({ "nls" })
    public TmfEvent parseEvent(ITmfContext context) {
        if (! (fEventStream instanceof TmfTraceStub)) {
            return null;
        }

        // Highly inefficient...
        RandomAccessFile stream = ((TmfTraceStub) fEventStream).getStream();

//        String name = eventStream.getName();
//        name = name.substring(name.lastIndexOf('/') + 1);

        long location = 0;
        if (context != null) {
            location = (Long) context.getLocation().getLocationInfo();
        }

        try {
            stream.seek(location);

            long ts        = stream.readLong();
            String source  = stream.readUTF();
            String type    = stream.readUTF();
            String reference = stream.readUTF();
            String sender = stream.readUTF();
            String receiver = stream.readUTF();
            String signal = stream.readUTF();

            String[] labels = {"sender", "receiver", "signal"};

            TmfEventType tmfEventType = new TmfEventType("UnitTest", type, TmfEventField.makeRoot(labels));

            String content = "[";
            content += sender;
            content += "," + receiver;
            content += "," + signal;
            content += "]";

            // Pre-parse the content
            TmfEventField[] fields = new TmfEventField[3];
            fields[0] = new TmfEventField("sender", sender);
            fields[1] = new TmfEventField("receiver", receiver);
            fields[2] = new TmfEventField("signal", signal);

            ITmfEventField tmfContent = new TmfEventField(ITmfEventField.ROOT_FIELD_ID, content, fields);
            TmfEvent tmfEvent = new TmfEvent(fEventStream, new TmfTimestamp(ts, -9), source, tmfEventType, tmfContent, reference);

            return tmfEvent;
        } catch (final EOFException e) {
        } catch (final IOException e) {
        }
        return null;
    }

