    public void testScaleToReverse_1() {
        final int nbBuckets = 100;
        final int maxHeight = 24;
        final int width = 10;
        final int barWidth = 1;
        final int nbEvents = 2 * nbBuckets + 1;
        
        // (int)(width / barWith) = 10 
        // -> 10 bars -> expected result needs 10 buckets (scaled data) 
        // 
        // buckets in (model) per bar = last bucket id / nbBars + 1 (plus 1 to cover all used buckets)
        // -> buckets per bar = 50 / 10 + 1 = 6 
        final int[] expectedResult = new int[] { 21, 24, 24, 24, 24, 24, 24, 24, 12, 0 };
        
        HistogramDataModel model = new HistogramDataModel(nbBuckets);
        for (int i = nbEvents - 1; i >= 0; i--) {
            model.countEvent(i, i);
        }

        // verify scaled data
        HistogramScaledData result = model.scaleTo(width, maxHeight, barWidth);
        
        assertEquals(4 * 6, result.fBucketDuration);
        assertEquals(0, result.fCurrentBucket);
        assertEquals(-3, result.fFirstBucketTime); // negative is correct, can happen when reverse
        assertEquals(0, result.fFirstEventTime);
        assertEquals(9, result.fLastBucket);
        assertEquals(24, result.fMaxValue);
        assertEquals((double)maxHeight/24, result.fScalingFactor);
        assertEquals(maxHeight, result.fHeight);
        assertEquals(width, result.fWidth);
        assertEquals(barWidth, result.fBarWidth);

        for (int i = 0; i < result.fData.length; i++) {
            assertEquals(expectedResult[i], result.fData[i]);
        }
        
        // verify model
        assertEquals(nbEvents, model.getNbEvents());
        assertEquals(nbBuckets, model.getNbBuckets());
        assertEquals(4, model.getBucketDuration());
        assertEquals(-3, model.getFirstBucketTime());
        assertEquals(0, model.getStartTime());
        assertEquals(nbEvents - 1, model.getEndTime());
        assertEquals(-3 + 4 * nbBuckets, model.getTimeLimit());
    }

