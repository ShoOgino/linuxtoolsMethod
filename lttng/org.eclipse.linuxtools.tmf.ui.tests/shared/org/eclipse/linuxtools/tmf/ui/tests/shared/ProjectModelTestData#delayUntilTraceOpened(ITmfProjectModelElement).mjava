    /**
     * Makes the main display thread sleep to give a chance to other threads to
     * execute. It sleeps until the a trace element's corresponding trace is
     * available (opened) or returns after a timeout. It allows to set short
     * delays, while still not failing tests when it randomly takes a bit more
     * time for the trace to open.
     *
     * If the project model element sent in parameter is not a trace element,
     * then the thread is delayed only once by the default delay time. For
     * longer delays in those cases, it is preferable to use the
     * {@link ProjectModelTestData#delayThread(long)} instead.
     *
     * Timeout is DELAY_COUNTER * DEFAULT_DELAY ms
     *
     * @param projectElement
     *            The trace element we are waiting for. If the element if not of
     *            type TmfTraceElement, the thread is delayed only once.
     * @throws TimeoutException
     *             If after the maximum number of delays the trace is still
     *             null, we throw a timeout exception, the trace has not opened.
     */
    public static void delayUntilTraceOpened(final ITmfProjectModelElement projectElement) throws TimeoutException {
        if (projectElement instanceof TmfCommonProjectElement) {
            TmfCommonProjectElement traceElement = (TmfCommonProjectElement) projectElement;
            final long deadline = System.nanoTime() + (DELAY_COUNTER * DEFAULT_DELAY * 1000000L);
            do {
                delayThread(DEFAULT_DELAY);
                if (traceElement.getTrace() != null) {
                    return;
                }
            } while (System.nanoTime() < deadline);
            throw new TimeoutException("Timeout while waiting for " + traceElement);
        }
        delayThread(DEFAULT_DELAY);
    }

