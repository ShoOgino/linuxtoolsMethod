    /**
     * Adds a new experiment to the project
     *
     * @param projectElement
     *            The project to add to
     * @param experimentName
     *            Name of the experiment
     * @return The newly created experiment
     */
    public static TmfExperimentElement addExperiment(TmfProjectElement projectElement, String experimentName) {
        IFolder experimentFolder = projectElement.getExperimentsFolder().getResource();
        final IFolder folder = experimentFolder.getFolder(experimentName);

        WorkspaceModifyOperation operation = new WorkspaceModifyOperation() {
            @Override
            public void execute(IProgressMonitor monitor) throws CoreException {
                monitor.beginTask("", 1000);
                folder.create(false, true, monitor);
                monitor.done();
            }
        };
        try {
            PlatformUI.getWorkbench().getProgressService().busyCursorWhile(operation);
        } catch (InterruptedException | InvocationTargetException | RuntimeException exception) {

        }

        for (ITmfProjectModelElement el : projectElement.getExperimentsFolder().getChildren()) {
            if (el.getName().equals(experimentName) && (el instanceof TmfExperimentElement)) {
                return (TmfExperimentElement) el;
            }
        }
        return null;
    }

