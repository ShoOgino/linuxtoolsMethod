    private static void testHistogramView(IViewPart vp, final TmfEventsEditor tmfEd) {
        final CtfTmfEvent desiredEvent1 = getEvent(100);
        UIThreadRunnable.syncExec(new VoidResult() {
            @Override
            public void run() {
                tmfEd.setFocus();
                tmfEd.selectionChanged(new SelectionChangedEvent(tmfEd, new StructuredSelection(desiredEvent1)));
            }
        });

        SWTBotUtil.waitForJobs();
        SWTBotUtil.delay(1000);

        final CtfTmfEvent desiredEvent2 = getEvent(10000);
        SWTBotView hvBot = fBot.viewById(HistogramView.ID);
        List<SWTBotToolbarButton> hvTools = hvBot.getToolbarButtons();
        for (SWTBotToolbarButton hvTool : hvTools) {
            if (hvTool.getToolTipText().toLowerCase().contains("lost")) {
                hvTool.click();
            }
        }
        HistogramView hv = (HistogramView) vp;
        final TmfTimeSynchSignal signal = new TmfTimeSynchSignal(hv, desiredEvent1.getTimestamp());
        final TmfTimeSynchSignal signal2 = new TmfTimeSynchSignal(hv, desiredEvent2.getTimestamp());
        hv.updateTimeRange(100000);
        SWTBotUtil.waitForJobs();
        hv.currentTimeUpdated(signal);
        hv.broadcast(signal);
        SWTBotUtil.waitForJobs();
        SWTBotUtil.delay(1000);

        hv.updateTimeRange(1000000000);
        SWTBotUtil.waitForJobs();
        hv.currentTimeUpdated(signal2);
        hv.broadcast(signal2);
        SWTBotUtil.waitForJobs();
        SWTBotUtil.delay(1000);
        assertNotNull(hv);
    }

