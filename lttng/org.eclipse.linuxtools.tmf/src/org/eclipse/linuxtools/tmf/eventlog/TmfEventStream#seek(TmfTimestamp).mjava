    /**
     * Positions the stream at the first event with timestamp. If there is no
     * such event, positions the stream at the next event, if any.
     * 
     * @param timestamp 
     * @return 
     * @throws IOException 
     */
    public synchronized TmfEvent seek(TmfTimestamp timestamp) throws IOException {

        // First, find the right bookmark
        // TODO: Check the performance of bsearch on ordered Vector<>. Should be OK but...
        int index = Collections.binarySearch(fBookmarks, new TmfStreamBookmark(timestamp, 0));

        // In the very likely event that the bookmark was not found, bsearch
        // returns its negated would-be location (not an offset...). From that
        // index, we can then position the stream and locate the event.  
        if (index < 0) { 
            index = Math.max(0, -(index + 2));
        }

        seekLocation(fBookmarks.elementAt(index).getLocation());
        TmfEvent event;
        do {
            event = getNextEvent();
        } while (event != null && event.getTimestamp().compareTo(timestamp, false) < 0);

        return event;
    }

