    @SuppressWarnings({ "unchecked", "unused" })
	private void indexTraceOld(boolean waitForCompletion) {

		fCheckpoints.clear();
		
		ITmfEventRequest<TmfEvent> request = new TmfEventRequest<TmfEvent>(TmfEvent.class, TmfTimeRange.Eternity, TmfDataRequest.ALL_DATA, 1, ITmfDataRequest.ExecutionType.BACKGROUND) {

			TmfTimestamp startTime =  null;
			TmfTimestamp lastTime  =  null;

			@Override
			public void handleData(TmfEvent event) {
			    super.handleData(event);
				if (event != null) {
					TmfTimestamp ts = event.getTimestamp();
					if (startTime == null) {
						startTime = new TmfTimestamp(ts);
						fStartTime = startTime;
					}
					lastTime = new TmfTimestamp(ts);

					if ((getNbRead() % fIndexPageSize) == 0) {
						updateTraceData();
					}
				}
			}

			@Override
			public void handleSuccess() {
				updateTraceData();
			}

			private void updateTraceData() {
                int nbRead = getNbRead();
				if (nbRead != 0) {
					fEndTime  = new TmfTimestamp(lastTime);
					fNbEvents = nbRead;
					notifyListeners();
				}
			}
		};

		sendRequest((ITmfDataRequest<T>) request);
		if (waitForCompletion)
			try {
				request.waitForCompletion();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
	}

