    @SuppressWarnings({ "unchecked" })
    protected void indexTrace(boolean waitForCompletion) {

    	final Job job = new Job("Indexing " + getName() + "...") { //$NON-NLS-1$ //$NON-NLS-2$
    		@Override
    		protected IStatus run(IProgressMonitor monitor) {
    			while (!monitor.isCanceled()) {
    				try {
    					Thread.sleep(100);
    				} catch (InterruptedException e) {
    					return Status.OK_STATUS;
    				}
    			}
    			monitor.done();
    			return Status.OK_STATUS;
    		}
    	};
    	job.schedule();

    	fCheckpoints.clear();
        ITmfEventRequest<TmfEvent> request = new TmfEventRequest<TmfEvent>(TmfEvent.class, TmfTimeRange.Eternity,
                TmfDataRequest.ALL_DATA, fIndexPageSize, ITmfDataRequest.ExecutionType.BACKGROUND) {

            TmfTimestamp startTime =  null;
            TmfTimestamp lastTime  =  null;

            @Override
            public void handleData(TmfEvent event) {
                super.handleData(event);
                if (event != null) {
                    TmfTimestamp ts = event.getTimestamp();
                    if (startTime == null)
                        startTime = new TmfTimestamp(ts);
                    lastTime = new TmfTimestamp(ts);

                    if ((getNbRead() % fIndexPageSize) == 0) {
                        updateTrace();
                    }
                }
            }

            @Override
            public void handleSuccess() {
                updateTrace();
            }

            @Override
            public void handleCompleted() {
            	job.cancel();
            	super.handleCompleted();
            }

            private void updateTrace() {
                int nbRead = getNbRead();
                if (nbRead != 0) {
                    fStartTime = startTime;
                    fEndTime = lastTime;
                    fNbEvents  = nbRead;
                    notifyListeners();
                }
            }
        };

        sendRequest((ITmfDataRequest<T>) request);
        if (waitForCompletion)
            try {
                request.waitForCompletion();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
    }

