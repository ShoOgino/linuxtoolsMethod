	/**
	 * Process a data request
	 * 
	 * @param request
	 */
	private void processEventRequest(final TmfDataRequest<TmfEvent> request) {

		// General request parameters
		final TmfTimestamp endTime;
		final long index;

		// Initialize depending on request type
		if (request.getRange() != null) {
			index = getIndex(request.getRange().getStartTime());
			endTime = request.getRange().getEndTime();
    	} else {
    		index = request.getIndex();
    		endTime = TmfTimestamp.BigCrunch;
    	}

		// Process the request
		Thread thread = new Thread() {

			private ITmfTrace[] traces = new ITmfTrace[0];
			private TmfTraceContext[] contexts;
			private TmfEvent[] peekEvents;

			@Override
			public void run() {
				
				// Extract the general request information
				int blockSize = request.getBlockize();
				int nbRequestedEvents = request.getNbRequestedItems();
				if (nbRequestedEvents == -1) {
					nbRequestedEvents = Integer.MAX_VALUE;
				}

				// Create the result buffer
				Vector<TmfEvent> events = new Vector<TmfEvent>();
				int nbEvents = 0;

				// Initialize the traces array and position the streams
				traces = fTraces.toArray(traces);
				contexts = new TmfTraceContext[traces.length];
				peekEvents = new TmfEvent[traces.length];
				positionTraces(index, traces, contexts, peekEvents);

				// Get the ordered events
				TmfEvent event = getNextEvent(traces, contexts, peekEvents);
				while (!request.isCancelled() && nbEvents < nbRequestedEvents && event != null
						&& event.getTimestamp().compareTo(endTime, false) <= 0)
				{
					events.add(event);
					if (++nbEvents % blockSize == 0) {
						TmfEvent[] result = new TmfEvent[events.size()];
						events.toArray(result);
						request.setData(result);
						request.handleData();
						events.removeAllElements();
					}
					// To avoid an unnecessary read passed the last event requested
					if (nbEvents < nbRequestedEvents)
						event = getNextEvent(traces, contexts, peekEvents);
				}
				TmfEvent[] result = new TmfEvent[events.size()];
				events.toArray(result);
				request.setData(result);

				request.handleData();
				request.done();
			}
		};
		thread.start();
	}

