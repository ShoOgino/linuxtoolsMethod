		/* (non-Javadoc)
		 * @see org.eclipse.core.runtime.jobs.Job#run(org.eclipse.core.runtime.IProgressMonitor)
		 */
		@Override
		protected IStatus run(IProgressMonitor monitor) {

            monitor.beginTask("Indexing " + fName, IProgressMonitor.UNKNOWN);

            int nbEvents = 0;
            TmfTimestamp startTime = null;
            TmfTimestamp lastTime  = null;

            fCheckpoints = new Vector<TmfTraceCheckpoint>();
            
            try {
            	// Position the trace at the beginning
                TmfTraceContext context = seekLocation(null);
                Object location = context.getLocation();

               	TmfEvent event = getNextEvent(context);
                startTime = new TmfTimestamp(event.getTimestamp());
                lastTime  = new TmfTimestamp(startTime);
                while (event != null) {
                	lastTime = event.getTimestamp();
           			if ((nbEvents++ % fCacheSize) == 0) {
           				lastTime = new TmfTimestamp(event.getTimestamp());
                   		fCheckpoints.add(new TmfTraceCheckpoint(lastTime, location));
                   		fNbEvents = nbEvents;
                   		fTimeRange = new TmfTimeRange(startTime, lastTime);
                   		notifyListeners(new TmfTimeRange(startTime, lastTime));

                        monitor.worked(1);

                        // Check monitor *after* fCheckpoints has been updated
                        if (monitor.isCanceled()) {
                            monitor.done();
                        	return Status.CANCEL_STATUS;
                        }
                    }

                    // We will need this location at the next iteration
                    if ((nbEvents % fCacheSize) == 0) {
                        location = context.getLocation();
           			}

                    event = getNextEvent(context);
                }
            }
            finally {
                synchronized(this) {
                	fNbEvents = nbEvents;
                	fTimeRange = new TmfTimeRange(startTime, lastTime);
            		fIndexing = false;
                }
                notifyListeners(new TmfTimeRange(startTime, lastTime));
                monitor.done();
            }

//            createOffsetsFile();
//            dumpTraceCheckpoints();
            
            return Status.OK_STATUS;
		}

