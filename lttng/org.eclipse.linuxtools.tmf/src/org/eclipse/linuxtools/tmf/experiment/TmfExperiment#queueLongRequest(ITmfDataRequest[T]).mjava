	@Override
	protected void queueLongRequest(final ITmfDataRequest<T> request) {

		// TODO: Handle the data requests also...
		if (!(request instanceof ITmfEventRequest<?>)) {
			super.queueRequest(request);
			return;
		}

		final TmfExperiment<T> experiment = this;
		
		Thread thread = new Thread() {
			@Override
			public void run() {
				
//				final long requestStart = System.nanoTime();

				final Integer[] CHUNK_SIZE = new Integer[1];
				CHUNK_SIZE[0] = fIndexPageSize + 1;
				
				final ITmfEventRequest<T> req = (ITmfEventRequest<T>) request;
				
				final Integer[] nbRead = new Integer[1];
				nbRead[0] = 0;

//				final TmfTimestamp[] timestamp = new TmfTimestamp[1];
//				timestamp[0] = new TmfTimestamp(req.getRange().getStartTime());
//				final TmfTimestamp endTS = req.getRange().getEndTime();

				final Boolean[] isFinished = new Boolean[1];
				isFinished[0] = Boolean.FALSE;

				while (!isFinished[0]) {

//					TmfEventRequest<T> subRequest = new TmfEventRequest<T>(req.getDataType(), new TmfTimeRange(timestamp[0], endTS), 
//							requestedSize, req.getBlockize(), ExecutionType.LONG)
					TmfDataRequest<T> subRequest = new TmfDataRequest<T>(req.getDataType(), nbRead[0], CHUNK_SIZE[0],
							req.getBlockize(), ExecutionType.LONG)
					{
//						int count = 0;
						@Override
						public void handleData() {
							T[] data = getData();
//							if (count == 0) {
//								System.out.println("First event of the block: " + data[0].getTimestamp());
//							}
//							count++;
//							Tracer.trace("Ndx: " + ((TmfEvent) data[0]).getTimestamp());
							req.setData(data);
							req.handleData();
							if (fNbRead == CHUNK_SIZE[0]) {
								nbRead[0] += fNbRead;
//								System.out.println("fNbRead=" + fNbRead + ", count=" + count +", total=" + nbRead[0] + ", TS=" + data[0].getTimestamp());
							}
							if (fNbRead > CHUNK_SIZE[0]) {
								System.out.println("ERROR - Read too many events");
							}
						}
						@Override
						public void handleCompleted() {
//							System.out.println("Request completed at: " + timestamp[0]);
							if (fNbRead < CHUNK_SIZE[0]) {
								req.done();
								isFinished[0] = Boolean.TRUE;
								nbRead[0] += fNbRead;
//								System.out.println("fNbRead=" + fNbRead + ", count=" + count +", total=" + nbRead[0]);
							}
							super.handleCompleted();
						}
					};

					if (!isFinished[0]) {
						experiment.queueRequest(subRequest);

						try {
							subRequest.waitForCompletion();
//							System.out.println("Finished at " + timestamp[0]);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}

//						TmfTimestamp newTS = new TmfTimestamp(timestamp[0].getValue() + 1, timestamp[0].getScale(), timestamp[0].getPrecision());
//						timestamp[0] = newTS;
						CHUNK_SIZE[0] = fIndexPageSize;
//						System.out.println("New timestamp: " + timestamp[0]);
					}
				}
//				final long requestEnded = System.nanoTime();
//				System.out.println("Background request completed. Elapsed= " + (requestEnded * 1.0 - requestStart) / 1000000000);
			}
		};
		thread.start();
	}

