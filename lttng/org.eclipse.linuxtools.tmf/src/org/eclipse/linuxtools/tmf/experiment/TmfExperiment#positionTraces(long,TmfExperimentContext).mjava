	/**
	 * Given an experiment event index, position the set of traces so a call
	 * to getNextEvent() will retrieve the corresponding event.
	 * 
	 * @param index
	 * @param context
	 */
	private synchronized void positionTraces(long index, TmfExperimentContext context) {

		// Extract the relevant information
		ITmfTrace[] traces = context.getTraces();
		TmfEvent[]  events = context.getEvents();
		TmfTraceContext[] contexts = context.getContexts();

		int page = 0;		// The checkpoint page
		int current = 0;	// The current event index (rank)

		// If there is no checkpoint created yet, start from the beginning
		if (fExperimentIndex.size() == 0) {
			for (int i = 0; i < contexts.length; i++) {
				contexts[i] = traces[i].seekLocation(null).clone();
				events[i] = traces[i].parseEvent(contexts[i]);
			}
		}
		else {
			page = (int) index / fIndexPageSize;
			if (page >= fExperimentIndex.size()) {
				page = fExperimentIndex.size() - 1;
			}

			TmfTraceContext[] checkpoint = fExperimentIndex.elementAt(page).getContexts();
			for (int i = 0; i < contexts.length; i++) {
				contexts[i] = checkpoint[i].clone();
				events[i] = traces[i].parseEvent(contexts[i]);
			}
			current = page * fIndexPageSize;
		}

		// Position the traces at the requested index
		while (current++ < index) {
			getNextEvent(context);
		}
	}

