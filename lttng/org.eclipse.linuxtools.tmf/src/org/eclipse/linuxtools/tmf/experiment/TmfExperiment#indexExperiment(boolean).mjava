	@SuppressWarnings("unchecked")
	private void indexExperiment(boolean waitForCompletion) {

		fCheckpoints.clear();
		
//		fEventLog = openLogFile("TraceEvent.log");
//		System.out.println(System.currentTimeMillis() + ": Experiment indexing started");

		ITmfEventRequest<TmfEvent> request = new TmfEventRequest<TmfEvent>(TmfEvent.class, TmfTimeRange.Eternity,
				TmfDataRequest.ALL_DATA, 1, ITmfDataRequest.ExecutionType.BACKGROUND) {

//			long indexingStart = System.nanoTime();
			
			TmfTimestamp startTime =  null;
			TmfTimestamp lastTime  =  null;

			@Override
			public void handleData(TmfEvent event) {
        		super.handleData(event);
				if (event != null) {
					TmfTimestamp ts = event.getTimestamp();
					if (startTime == null)
						startTime = new TmfTimestamp(ts);
					lastTime = new TmfTimestamp(ts);

					if ((getNbRead() % fIndexPageSize) == 0) {
						updateExperiment();
					}
				}
			}

			@Override
			public void handleSuccess() {
//				long indexingEnd = System.nanoTime();

				updateExperiment();
//				System.out.println(System.currentTimeMillis() + ": Experiment indexing completed");

//				long average = (indexingEnd - indexingStart) / fNbEvents;
//				System.out.println(getName() + ": start=" + startTime + ", end=" + lastTime + ", elapsed=" + (indexingEnd * 1.0 - indexingStart) / 1000000000);
//				System.out.println(getName() + ": nbEvents=" + fNbEvents + " (" + (average / 1000) + "." + (average % 1000) + " us/evt)");
			}

			private void updateExperiment() {
				int nbRead = getNbRead();
				if (nbRead != 0) {
//					updateTimeRange();
//					updateNbEvents();
					fTimeRange = new TmfTimeRange(startTime, new TmfTimestamp(lastTime));
					fNbEvents  = nbRead;
					notifyListeners();
				}
			}
		};

		sendRequest((ITmfDataRequest<T>) request);
		if (waitForCompletion)
			try {
				request.waitForCompletion();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
	}

