    /**
     * Method that execute the analysis and verify the results.
     *
     * @throws TmfAnalysisException
     *             Thrown when an analysis error occurs during the setup or
     *             execution. Fails the test.
     * @throws TmfTraceException
     *             Thrown when the trace cannot be initialized. Fails the test.
     */
    @Test
    public void executeAnalysisTest() throws TmfAnalysisException, TmfTraceException {
        PcapTestTrace trace = PcapTestTrace.MOSTLY_TCP;
        assumeTrue(trace.exists());
        String path = trace.getPath();
        try (PcapTrace pcapTrace = new PcapTrace();
                StreamListAnalysis analysis = new StreamListAnalysis();) {
            pcapTrace.initTrace(null, path, null);
            analysis.setId(StreamListAnalysis.ID);
            analysis.setTrace(pcapTrace);
            analysis.schedule();
            analysis.waitForCompletion();

            // Verify that builders are not empty.
            TmfPacketStreamBuilder builder = analysis.getBuilder(TmfProtocol.ETHERNET_II);
            if (builder == null) {
                fail("The PacketStreamBuilder is null!");
                return;
            }
            assertEquals(1, builder.getNbStreams());

            builder = analysis.getBuilder(TmfProtocol.IPV4);
            if (builder == null) {
                fail("The PacketStreamBuilder is null!");
                return;
            }
            assertEquals(3, builder.getNbStreams());

            builder = analysis.getBuilder(TmfProtocol.TCP);
            if (builder == null) {
                fail("The PacketStreamBuilder is null!");
                return;
            }
            assertEquals(2, builder.getNbStreams());

            builder = analysis.getBuilder(TmfProtocol.UDP);
            if (builder == null) {
                fail("The PacketStreamBuilder is null!");
                return;
            }
            assertEquals(1, builder.getNbStreams());
        }
    }

