    /**
     * Initialize the Packet and the Event.
     *
     * @throws BadPcapFileException
     *             Thrown when the pcap file is erroneous.
     * @throws IOException
     *             Thrown when an IO error occurs.
     * @throws BadPacketException
     *             Thrown when the packet is erroneous.
     */
    @BeforeClass
    public static void setUp() throws IOException, BadPcapFileException, BadPacketException {
        ByteBuffer bb = ByteBuffer.allocate(25);
        bb.order(ByteOrder.BIG_ENDIAN);

        // Version + IHL
        bb.put((byte) 0x46);

        // DSCP + ECN
        bb.put((byte) 0x9A);

        // Total length - this is randomly chosen so that we verify that the
        // packet handles wrong total length.
        bb.put((byte) 0x00);
        bb.put((byte) 0xFF);

        // Identification
        bb.put((byte) 0x0F);
        bb.put((byte) 0xF0);

        // Flags + Fragment Offset
        bb.put((byte) 0x1E);
        bb.put((byte) 0xE1);

        // Time to live
        bb.put((byte) 0xA0);

        // Protocol - Unknown
        bb.put((byte) 0xFE);

        // Header checksum - chosen randomly
        bb.put((byte) 0x33);
        bb.put((byte) 0x44);

        // Source IP - 4 bytes
        bb.put((byte) 192);
        bb.put((byte) 168);
        bb.put((byte) 1);
        bb.put((byte) 0);

        // Destination IP - 4 bytes
        bb.put((byte) 193);
        bb.put((byte) 169);
        bb.put((byte) 2);
        bb.put((byte) 1);

        // Options - 4 bytes
        bb.put((byte) 0xA2);
        bb.put((byte) 0x56);
        bb.put((byte) 0xA2);
        bb.put((byte) 0x56);

        // Payload - 1 byte
        bb.put((byte) 0xA6);

        bb.flip();

        PcapTestTrace trace = PcapTestTrace.MOSTLY_TCP;
        assumeTrue(trace.exists());
        try (PcapFile dummy = new PcapFile(trace.getPath())) {
            IPv4Packet packet = new IPv4Packet(dummy, null, bb);
            ITmfEventField[] fieldArray = generatePacketFields(packet);
            fRegularField = new PcapEventField("Regular Field", EMPTY_STRING, fieldArray, packet);
            fRootField = new PcapRootEventField(EMPTY_STRING, fieldArray, packet);
        }

    }

