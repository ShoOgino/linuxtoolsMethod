    /**
     * This method uses the DSF-GDB interface to select a given frame number
     * in the current GDB tracepoint session.
     *
     * @param rank the rank of the tracepoint frame to select.
     * @param update true if visualization should be updated
     * @return boolean true if select worked.
     */
    public boolean selectDataFrame(final long rank, final boolean update) {
        boolean status = true;

        final DsfSession dsfSession = DsfSession.getSession(fSessionId);
        if (dsfSession == null) {
            return false;
        }

        if (update) {
            /*
             * Clear the selection to ensure that the new selection is not
             * prevented from overriding the current selection by the DSF
             * selection policy. This could be removed when DSF provides
             * an API to force the trace record selection in the Debug view.
             */
            Display.getDefault().syncExec(new Runnable() {
                @Override
                public void run() {
                    for (IWorkbenchWindow wbWindow : PlatformUI.getWorkbench().getWorkbenchWindows()) {
                        for (IWorkbenchPage wbPage : wbWindow.getPages()) {
                            IViewPart vp = wbPage.findView(IDebugUIConstants.ID_DEBUG_VIEW);
                            if (vp instanceof AbstractDebugView) {
                                Viewer viewer = ((AbstractDebugView) vp).getViewer();
                                if (viewer instanceof ITreeModelViewer) {
                                    ((ITreeModelViewer) viewer).setSelection(StructuredSelection.EMPTY, false, true);
                                }
                            }
                        }
                    }
                }
            });
        }

        final DsfExecutor executor = dsfSession.getExecutor();
        final DsfServicesTracker tracker = new DsfServicesTracker(GdbTraceCorePlugin.getBundleContext(), fSessionId);

        Query<Object> selectRecordQuery = new Query<Object>() {
            @Override
            public void execute(final DataRequestMonitor<Object> queryRm) {
                final IGDBTraceControl traceControl = tracker.getService(IGDBTraceControl.class);

                final ICommandControlService commandControl = tracker.getService(ICommandControlService.class);
                final ITraceTargetDMContext dmc = (ITraceTargetDMContext) commandControl.getContext();

                if (traceControl != null) {
                    ITraceRecordDMContext newCtx = traceControl.createTraceRecordContext(dmc, Integer.toString((int) rank));
                    if (update) {
                        dsfSession.dispatchEvent(new TraceRecordSelectedChangedEvent(newCtx), new Hashtable<String, String>());
                    }
                    traceControl.selectTraceRecord(newCtx, queryRm);
                } else {
                    queryRm.done();
                }
            }
        };
        try {
            executor.execute(selectRecordQuery);
            selectRecordQuery.get(); // blocks
        } catch (InterruptedException e) {
            status = false;
        } catch (java.util.concurrent.ExecutionException e) {
            status = false;
        } catch (RejectedExecutionException e) {
            status = false;
        } finally {
            tracker.dispose();
        }
        return status;
    }

