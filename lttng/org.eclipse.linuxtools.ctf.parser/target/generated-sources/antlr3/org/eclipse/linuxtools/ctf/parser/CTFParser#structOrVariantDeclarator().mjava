	// $ANTLR start "structOrVariantDeclarator"
	// org/eclipse/linuxtools/ctf/parser/CTFParser.g:393:1: structOrVariantDeclarator : ( declarator ( COLON numberLiteral )? ) -> declarator ;
	public final CTFParser.structOrVariantDeclarator_return structOrVariantDeclarator() throws RecognitionException {
		CTFParser.structOrVariantDeclarator_return retval = new CTFParser.structOrVariantDeclarator_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token COLON85=null;
		ParserRuleReturnScope declarator84 =null;
		ParserRuleReturnScope numberLiteral86 =null;

		CommonTree COLON85_tree=null;
		RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
		RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
		RewriteRuleSubtreeStream stream_numberLiteral=new RewriteRuleSubtreeStream(adaptor,"rule numberLiteral");

		try {
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:394:3: ( ( declarator ( COLON numberLiteral )? ) -> declarator )
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:396:5: ( declarator ( COLON numberLiteral )? )
			{
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:396:5: ( declarator ( COLON numberLiteral )? )
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:396:6: declarator ( COLON numberLiteral )?
			{
			pushFollow(FOLLOW_declarator_in_structOrVariantDeclarator1879);
			declarator84=declarator();
			state._fsp--;
			if (state.failed) return retval;
			if ( state.backtracking==0 ) stream_declarator.add(declarator84.getTree());
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:396:17: ( COLON numberLiteral )?
			int alt27=2;
			int LA27_0 = input.LA(1);
			if ( (LA27_0==COLON) ) {
				alt27=1;
			}
			switch (alt27) {
				case 1 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:396:18: COLON numberLiteral
					{
					COLON85=(Token)match(input,COLON,FOLLOW_COLON_in_structOrVariantDeclarator1882); if (state.failed) return retval; 
					if ( state.backtracking==0 ) stream_COLON.add(COLON85);

					pushFollow(FOLLOW_numberLiteral_in_structOrVariantDeclarator1884);
					numberLiteral86=numberLiteral();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) stream_numberLiteral.add(numberLiteral86.getTree());
					}
					break;

			}

			}

			// AST REWRITE
			// elements: declarator
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if ( state.backtracking==0 ) {
			retval.tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.getTree():null);

			root_0 = (CommonTree)adaptor.nil();
			// 396:41: -> declarator
			{
				adaptor.addChild(root_0, stream_declarator.nextTree());
			}


			retval.tree = root_0;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException e) {
		        throw e;
		    }

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "structOrVariantDeclarator"

