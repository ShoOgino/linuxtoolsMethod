	// $ANTLR start "typeQualifierList"
	// org/eclipse/linuxtools/ctf/parser/CTFParser.g:542:1: typeQualifierList : ( typeQualifier )+ ;
	public final CTFParser.typeQualifierList_return typeQualifierList() throws RecognitionException {
		CTFParser.typeQualifierList_return retval = new CTFParser.typeQualifierList_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		ParserRuleReturnScope typeQualifier144 =null;


		try {
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:543:3: ( ( typeQualifier )+ )
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:543:5: ( typeQualifier )+
			{
			root_0 = (CommonTree)adaptor.nil();


			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:543:5: ( typeQualifier )+
			int cnt47=0;
			loop47:
			while (true) {
				int alt47=2;
				int LA47_0 = input.LA(1);
				if ( (LA47_0==CONSTTOK) ) {
					alt47=1;
				}

				switch (alt47) {
				case 1 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:543:5: typeQualifier
					{
					pushFollow(FOLLOW_typeQualifier_in_typeQualifierList2956);
					typeQualifier144=typeQualifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typeQualifier144.getTree());

					}
					break;

				default :
					if ( cnt47 >= 1 ) break loop47;
					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee = new EarlyExitException(47, input);
					throw eee;
				}
				cnt47++;
			}

			}

			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException e) {
		        throw e;
		    }

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "typeQualifierList"

