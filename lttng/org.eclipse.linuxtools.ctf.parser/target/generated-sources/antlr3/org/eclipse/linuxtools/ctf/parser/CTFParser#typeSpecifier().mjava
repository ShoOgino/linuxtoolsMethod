	// $ANTLR start "typeSpecifier"
	// org/eclipse/linuxtools/ctf/parser/CTFParser.g:283:1: typeSpecifier : ( FLOATTOK | INTTOK | LONGTOK | SHORTTOK | SIGNEDTOK | UNSIGNEDTOK | CHARTOK | DOUBLETOK | VOIDTOK | BOOLTOK | COMPLEXTOK | IMAGINARYTOK | structSpecifier | variantSpecifier | enumSpecifier | ctfTypeSpecifier |{...}? => typedefName );
	public final CTFParser.typeSpecifier_return typeSpecifier() throws RecognitionException {
		CTFParser.typeSpecifier_return retval = new CTFParser.typeSpecifier_return();
		retval.start = input.LT(1);

		CommonTree root_0 = null;

		Token FLOATTOK40=null;
		Token INTTOK41=null;
		Token LONGTOK42=null;
		Token SHORTTOK43=null;
		Token SIGNEDTOK44=null;
		Token UNSIGNEDTOK45=null;
		Token CHARTOK46=null;
		Token DOUBLETOK47=null;
		Token VOIDTOK48=null;
		Token BOOLTOK49=null;
		Token COMPLEXTOK50=null;
		Token IMAGINARYTOK51=null;
		ParserRuleReturnScope structSpecifier52 =null;
		ParserRuleReturnScope variantSpecifier53 =null;
		ParserRuleReturnScope enumSpecifier54 =null;
		ParserRuleReturnScope ctfTypeSpecifier55 =null;
		ParserRuleReturnScope typedefName56 =null;

		CommonTree FLOATTOK40_tree=null;
		CommonTree INTTOK41_tree=null;
		CommonTree LONGTOK42_tree=null;
		CommonTree SHORTTOK43_tree=null;
		CommonTree SIGNEDTOK44_tree=null;
		CommonTree UNSIGNEDTOK45_tree=null;
		CommonTree CHARTOK46_tree=null;
		CommonTree DOUBLETOK47_tree=null;
		CommonTree VOIDTOK48_tree=null;
		CommonTree BOOLTOK49_tree=null;
		CommonTree COMPLEXTOK50_tree=null;
		CommonTree IMAGINARYTOK51_tree=null;

		try {
			// org/eclipse/linuxtools/ctf/parser/CTFParser.g:284:3: ( FLOATTOK | INTTOK | LONGTOK | SHORTTOK | SIGNEDTOK | UNSIGNEDTOK | CHARTOK | DOUBLETOK | VOIDTOK | BOOLTOK | COMPLEXTOK | IMAGINARYTOK | structSpecifier | variantSpecifier | enumSpecifier | ctfTypeSpecifier |{...}? => typedefName )
			int alt16=17;
			int LA16_0 = input.LA(1);
			if ( (LA16_0==FLOATTOK) ) {
				alt16=1;
			}
			else if ( (LA16_0==INTTOK) ) {
				alt16=2;
			}
			else if ( (LA16_0==LONGTOK) ) {
				alt16=3;
			}
			else if ( (LA16_0==SHORTTOK) ) {
				alt16=4;
			}
			else if ( (LA16_0==SIGNEDTOK) ) {
				alt16=5;
			}
			else if ( (LA16_0==UNSIGNEDTOK) ) {
				alt16=6;
			}
			else if ( (LA16_0==CHARTOK) ) {
				alt16=7;
			}
			else if ( (LA16_0==DOUBLETOK) ) {
				alt16=8;
			}
			else if ( (LA16_0==VOIDTOK) ) {
				alt16=9;
			}
			else if ( (LA16_0==BOOLTOK) ) {
				alt16=10;
			}
			else if ( (LA16_0==COMPLEXTOK) ) {
				alt16=11;
			}
			else if ( (LA16_0==IMAGINARYTOK) ) {
				alt16=12;
			}
			else if ( (LA16_0==STRUCTTOK) ) {
				alt16=13;
			}
			else if ( (LA16_0==VARIANTTOK) ) {
				alt16=14;
			}
			else if ( (LA16_0==ENUMTOK) ) {
				alt16=15;
			}
			else if ( (LA16_0==FLOATINGPOINTTOK||LA16_0==INTEGERTOK||LA16_0==STRINGTOK) ) {
				alt16=16;
			}
			else if ( (LA16_0==IDENTIFIER) && (( inTypealiasAlias() || isTypeName(input.LT(1).getText()) ))) {
				alt16=17;
			}

			switch (alt16) {
				case 1 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:284:5: FLOATTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					FLOATTOK40=(Token)match(input,FLOATTOK,FOLLOW_FLOATTOK_in_typeSpecifier1065); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					FLOATTOK40_tree = (CommonTree)adaptor.create(FLOATTOK40);
					adaptor.addChild(root_0, FLOATTOK40_tree);
					}

					}
					break;
				case 2 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:285:5: INTTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					INTTOK41=(Token)match(input,INTTOK,FOLLOW_INTTOK_in_typeSpecifier1071); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					INTTOK41_tree = (CommonTree)adaptor.create(INTTOK41);
					adaptor.addChild(root_0, INTTOK41_tree);
					}

					}
					break;
				case 3 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:286:5: LONGTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					LONGTOK42=(Token)match(input,LONGTOK,FOLLOW_LONGTOK_in_typeSpecifier1077); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					LONGTOK42_tree = (CommonTree)adaptor.create(LONGTOK42);
					adaptor.addChild(root_0, LONGTOK42_tree);
					}

					}
					break;
				case 4 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:287:5: SHORTTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					SHORTTOK43=(Token)match(input,SHORTTOK,FOLLOW_SHORTTOK_in_typeSpecifier1083); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SHORTTOK43_tree = (CommonTree)adaptor.create(SHORTTOK43);
					adaptor.addChild(root_0, SHORTTOK43_tree);
					}

					}
					break;
				case 5 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:288:5: SIGNEDTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					SIGNEDTOK44=(Token)match(input,SIGNEDTOK,FOLLOW_SIGNEDTOK_in_typeSpecifier1089); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					SIGNEDTOK44_tree = (CommonTree)adaptor.create(SIGNEDTOK44);
					adaptor.addChild(root_0, SIGNEDTOK44_tree);
					}

					}
					break;
				case 6 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:289:5: UNSIGNEDTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					UNSIGNEDTOK45=(Token)match(input,UNSIGNEDTOK,FOLLOW_UNSIGNEDTOK_in_typeSpecifier1095); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					UNSIGNEDTOK45_tree = (CommonTree)adaptor.create(UNSIGNEDTOK45);
					adaptor.addChild(root_0, UNSIGNEDTOK45_tree);
					}

					}
					break;
				case 7 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:290:5: CHARTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					CHARTOK46=(Token)match(input,CHARTOK,FOLLOW_CHARTOK_in_typeSpecifier1101); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					CHARTOK46_tree = (CommonTree)adaptor.create(CHARTOK46);
					adaptor.addChild(root_0, CHARTOK46_tree);
					}

					}
					break;
				case 8 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:291:5: DOUBLETOK
					{
					root_0 = (CommonTree)adaptor.nil();


					DOUBLETOK47=(Token)match(input,DOUBLETOK,FOLLOW_DOUBLETOK_in_typeSpecifier1107); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					DOUBLETOK47_tree = (CommonTree)adaptor.create(DOUBLETOK47);
					adaptor.addChild(root_0, DOUBLETOK47_tree);
					}

					}
					break;
				case 9 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:292:5: VOIDTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					VOIDTOK48=(Token)match(input,VOIDTOK,FOLLOW_VOIDTOK_in_typeSpecifier1113); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					VOIDTOK48_tree = (CommonTree)adaptor.create(VOIDTOK48);
					adaptor.addChild(root_0, VOIDTOK48_tree);
					}

					}
					break;
				case 10 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:293:5: BOOLTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					BOOLTOK49=(Token)match(input,BOOLTOK,FOLLOW_BOOLTOK_in_typeSpecifier1119); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					BOOLTOK49_tree = (CommonTree)adaptor.create(BOOLTOK49);
					adaptor.addChild(root_0, BOOLTOK49_tree);
					}

					}
					break;
				case 11 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:294:5: COMPLEXTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					COMPLEXTOK50=(Token)match(input,COMPLEXTOK,FOLLOW_COMPLEXTOK_in_typeSpecifier1125); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					COMPLEXTOK50_tree = (CommonTree)adaptor.create(COMPLEXTOK50);
					adaptor.addChild(root_0, COMPLEXTOK50_tree);
					}

					}
					break;
				case 12 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:295:5: IMAGINARYTOK
					{
					root_0 = (CommonTree)adaptor.nil();


					IMAGINARYTOK51=(Token)match(input,IMAGINARYTOK,FOLLOW_IMAGINARYTOK_in_typeSpecifier1131); if (state.failed) return retval;
					if ( state.backtracking==0 ) {
					IMAGINARYTOK51_tree = (CommonTree)adaptor.create(IMAGINARYTOK51);
					adaptor.addChild(root_0, IMAGINARYTOK51_tree);
					}

					}
					break;
				case 13 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:296:5: structSpecifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_structSpecifier_in_typeSpecifier1137);
					structSpecifier52=structSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, structSpecifier52.getTree());

					}
					break;
				case 14 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:297:5: variantSpecifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_variantSpecifier_in_typeSpecifier1143);
					variantSpecifier53=variantSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, variantSpecifier53.getTree());

					}
					break;
				case 15 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:298:5: enumSpecifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_enumSpecifier_in_typeSpecifier1149);
					enumSpecifier54=enumSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, enumSpecifier54.getTree());

					}
					break;
				case 16 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:299:5: ctfTypeSpecifier
					{
					root_0 = (CommonTree)adaptor.nil();


					pushFollow(FOLLOW_ctfTypeSpecifier_in_typeSpecifier1155);
					ctfTypeSpecifier55=ctfTypeSpecifier();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, ctfTypeSpecifier55.getTree());

					}
					break;
				case 17 :
					// org/eclipse/linuxtools/ctf/parser/CTFParser.g:300:5: {...}? => typedefName
					{
					root_0 = (CommonTree)adaptor.nil();


					if ( !(( inTypealiasAlias() || isTypeName(input.LT(1).getText()) )) ) {
						if (state.backtracking>0) {state.failed=true; return retval;}
						throw new FailedPredicateException(input, "typeSpecifier", " inTypealiasAlias() || isTypeName(input.LT(1).getText()) ");
					}
					pushFollow(FOLLOW_typedefName_in_typeSpecifier1165);
					typedefName56=typedefName();
					state._fsp--;
					if (state.failed) return retval;
					if ( state.backtracking==0 ) adaptor.addChild(root_0, typedefName56.getTree());

					}
					break;

			}
			retval.stop = input.LT(-1);

			if ( state.backtracking==0 ) {
			retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
			adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
			}
		}

		    catch (RecognitionException e) {
		        throw e;
		    }

		finally {
			// do for sure before leaving
		}
		return retval;
	}
	// $ANTLR end "typeSpecifier"

