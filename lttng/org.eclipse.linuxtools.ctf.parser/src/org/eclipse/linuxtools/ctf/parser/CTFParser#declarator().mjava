    // $ANTLR start "declarator"
    // CTFParser.g:746:1: declarator : ( pointer )* directDeclarator -> ^( TYPE_DECLARATOR ( pointer )* directDeclarator ) ;
    public final CTFParser.declarator_return declarator() throws RecognitionException {
        CTFParser.declarator_return retval = new CTFParser.declarator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.pointer_return pointer127 = null;

        CTFParser.directDeclarator_return directDeclarator128 = null;


        RewriteRuleSubtreeStream stream_directDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule directDeclarator");
        RewriteRuleSubtreeStream stream_pointer=new RewriteRuleSubtreeStream(adaptor,"rule pointer");

          enter("declarator");

        try {
            // CTFParser.g:753:1: ( ( pointer )* directDeclarator -> ^( TYPE_DECLARATOR ( pointer )* directDeclarator ) )
            // CTFParser.g:754:3: ( pointer )* directDeclarator
            {
            // CTFParser.g:754:3: ( pointer )*
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);

                if ( (LA39_0==POINTER) ) {
                    alt39=1;
                }


                switch (alt39) {
            	case 1 :
            	    // CTFParser.g:754:3: pointer
            	    {
            	    pushFollow(FOLLOW_pointer_in_declarator2612);
            	    pointer127=pointer();

            	    state._fsp--;
            	    if (state.failed) {
                        return retval;
                    }
            	    if ( state.backtracking==0 ) {
                        stream_pointer.add(pointer127.getTree());
                    }

            	    }
            	    break;

            	default :
            	    break loop39;
                }
            } while (true);

            pushFollow(FOLLOW_directDeclarator_in_declarator2615);
            directDeclarator128=directDeclarator();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_directDeclarator.add(directDeclarator128.getTree());
            }


            // AST REWRITE
            // elements: directDeclarator, pointer
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:29: -> ^( TYPE_DECLARATOR ( pointer )* directDeclarator )
            {
                // CTFParser.g:754:32: ^( TYPE_DECLARATOR ( pointer )* directDeclarator )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATOR, "TYPE_DECLARATOR"), root_1);

                // CTFParser.g:754:50: ( pointer )*
                while ( stream_pointer.hasNext() ) {
                    adaptor.addChild(root_1, stream_pointer.nextTree());

                }
                stream_pointer.reset();
                adaptor.addChild(root_1, stream_directDeclarator.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("declarator");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "declarator"

