    // $ANTLR start "enumeratorValue"
    // CTFParser.g:730:1: enumeratorValue : ASSIGNMENT e1= unaryExpression ( -> ^( ENUM_VALUE $e1) | ELIPSES e2= unaryExpression -> ^( ENUM_VALUE_RANGE $e1 $e2) ) ;
    public final CTFParser.enumeratorValue_return enumeratorValue() throws RecognitionException {
        CTFParser.enumeratorValue_return retval = new CTFParser.enumeratorValue_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ASSIGNMENT125=null;
        Token ELIPSES126=null;
        CTFParser.unaryExpression_return e1 = null;

        CTFParser.unaryExpression_return e2 = null;


        CommonTree ASSIGNMENT125_tree=null;
        CommonTree ELIPSES126_tree=null;
        RewriteRuleTokenStream stream_ASSIGNMENT=new RewriteRuleTokenStream(adaptor,"token ASSIGNMENT");
        RewriteRuleTokenStream stream_ELIPSES=new RewriteRuleTokenStream(adaptor,"token ELIPSES");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");

          enter("enumeratorValue");

        try {
            // CTFParser.g:737:1: ( ASSIGNMENT e1= unaryExpression ( -> ^( ENUM_VALUE $e1) | ELIPSES e2= unaryExpression -> ^( ENUM_VALUE_RANGE $e1 $e2) ) )
            // CTFParser.g:738:3: ASSIGNMENT e1= unaryExpression ( -> ^( ENUM_VALUE $e1) | ELIPSES e2= unaryExpression -> ^( ENUM_VALUE_RANGE $e1 $e2) )
            {
            ASSIGNMENT125=(Token)match(input,ASSIGNMENT,FOLLOW_ASSIGNMENT_in_enumeratorValue2536); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_ASSIGNMENT.add(ASSIGNMENT125);
            }

            pushFollow(FOLLOW_unaryExpression_in_enumeratorValue2540);
            e1=unaryExpression();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_unaryExpression.add(e1.getTree());
            }
            // CTFParser.g:739:3: ( -> ^( ENUM_VALUE $e1) | ELIPSES e2= unaryExpression -> ^( ENUM_VALUE_RANGE $e1 $e2) )
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==SEPARATOR||LA38_0==RCURL) ) {
                alt38=1;
            }
            else if ( (LA38_0==ELIPSES) ) {
                alt38=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }
            switch (alt38) {
                case 1 :
                    // CTFParser.g:740:5:
                    {

                    // AST REWRITE
                    // elements: e1
                    // token labels:
                    // rule labels: retval, e1
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 740:5: -> ^( ENUM_VALUE $e1)
                    {
                        // CTFParser.g:740:8: ^( ENUM_VALUE $e1)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_VALUE, "ENUM_VALUE"), root_1);

                        adaptor.addChild(root_1, stream_e1.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // CTFParser.g:741:7: ELIPSES e2= unaryExpression
                    {
                    ELIPSES126=(Token)match(input,ELIPSES,FOLLOW_ELIPSES_in_enumeratorValue2566); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ELIPSES.add(ELIPSES126);
                    }

                    pushFollow(FOLLOW_unaryExpression_in_enumeratorValue2570);
                    e2=unaryExpression();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_unaryExpression.add(e2.getTree());
                    }


                    // AST REWRITE
                    // elements: e1, e2
                    // token labels:
                    // rule labels: retval, e1, e2
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_e1=new RewriteRuleSubtreeStream(adaptor,"rule e1",e1!=null?e1.tree:null);
                    RewriteRuleSubtreeStream stream_e2=new RewriteRuleSubtreeStream(adaptor,"rule e2",e2!=null?e2.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 741:34: -> ^( ENUM_VALUE_RANGE $e1 $e2)
                    {
                        // CTFParser.g:741:37: ^( ENUM_VALUE_RANGE $e1 $e2)
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_VALUE_RANGE, "ENUM_VALUE_RANGE"), root_1);

                        adaptor.addChild(root_1, stream_e1.nextTree());
                        adaptor.addChild(root_1, stream_e2.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("enumeratorValue");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumeratorValue"

