    // $ANTLR start "structOrVariantDeclarationList"
    // Grammar/CTFParser.g:499:1: structOrVariantDeclarationList : (
    // structOrVariantDeclaration )+ ;
    public final CTFParser.structOrVariantDeclarationList_return structOrVariantDeclarationList()
            throws RecognitionException {
        CTFParser.structOrVariantDeclarationList_return retval = new CTFParser.structOrVariantDeclarationList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.structOrVariantDeclaration_return structOrVariantDeclaration75 = null;

        enter("structOrVariantDeclarationList");

        try {
            // Grammar/CTFParser.g:506:1: ( ( structOrVariantDeclaration )+ )
            // Grammar/CTFParser.g:507:3: ( structOrVariantDeclaration )+
            {
                root_0 = (CommonTree) adaptor.nil();

                // Grammar/CTFParser.g:507:3: ( structOrVariantDeclaration )+
                int cnt23 = 0;
                loop23: do {
                    int alt23 = 2;
                    int LA23_0 = input.LA(1);

                    if ((((LA23_0 >= CONSTTOK) && (LA23_0 <= ENUMTOK))
                            || ((LA23_0 >= FLOATINGPOINTTOK) && (LA23_0 <= SIGNEDTOK))
                            || ((LA23_0 >= STRINGTOK) && (LA23_0 <= STRUCTTOK)) || ((LA23_0 >= TYPEDEFTOK) && (LA23_0 <= IMAGINARYTOK)))) {
                        alt23 = 1;
                    } else if ((LA23_0 == IDENTIFIER)
                            && ((inTypealiasAlias() || isTypeName(input.LT(1)
                                    .getText())))) {
                        alt23 = 1;
                    } else if ((LA23_0 == TYPEALIASTOK)) {
                        alt23 = 1;
                    }

                    switch (alt23) {
                    case 1:
                    // Grammar/CTFParser.g:507:3: structOrVariantDeclaration
                    {
                        pushFollow(FOLLOW_structOrVariantDeclaration_in_structOrVariantDeclarationList1581);
                        structOrVariantDeclaration75 = structOrVariantDeclaration();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            adaptor.addChild(root_0,
                                    structOrVariantDeclaration75.getTree());
                        }

                    }
                        break;

                    default:
                        if (cnt23 >= 1) {
                            break loop23;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(23,
                                input);
                        throw eee;
                    }
                    cnt23++;
                } while (true);

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("structOrVariantDeclarationList");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

