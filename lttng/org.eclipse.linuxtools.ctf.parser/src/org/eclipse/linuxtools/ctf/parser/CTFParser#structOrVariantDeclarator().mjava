    // $ANTLR start "structOrVariantDeclarator"
    // CTFParser.g:559:1: structOrVariantDeclarator : ( declarator ( COLON numberLiteral )? ) -> declarator ;
    public final CTFParser.structOrVariantDeclarator_return structOrVariantDeclarator() throws RecognitionException {
        CTFParser.structOrVariantDeclarator_return retval = new CTFParser.structOrVariantDeclarator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COLON87=null;
        CTFParser.declarator_return declarator86 = null;

        CTFParser.numberLiteral_return numberLiteral88 = null;


        CommonTree COLON87_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");
        RewriteRuleSubtreeStream stream_numberLiteral=new RewriteRuleSubtreeStream(adaptor,"rule numberLiteral");

          enter("structOrVariantDeclarator");

        try {
            // CTFParser.g:566:1: ( ( declarator ( COLON numberLiteral )? ) -> declarator )
            // CTFParser.g:568:5: ( declarator ( COLON numberLiteral )? )
            {
            // CTFParser.g:568:5: ( declarator ( COLON numberLiteral )? )
            // CTFParser.g:568:6: declarator ( COLON numberLiteral )?
            {
            pushFollow(FOLLOW_declarator_in_structOrVariantDeclarator1862);
            declarator86=declarator();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_declarator.add(declarator86.getTree());
            }
            // CTFParser.g:568:17: ( COLON numberLiteral )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==COLON) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // CTFParser.g:568:18: COLON numberLiteral
                    {
                    COLON87=(Token)match(input,COLON,FOLLOW_COLON_in_structOrVariantDeclarator1865); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_COLON.add(COLON87);
                    }

                    pushFollow(FOLLOW_numberLiteral_in_structOrVariantDeclarator1867);
                    numberLiteral88=numberLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_numberLiteral.add(numberLiteral88.getTree());
                    }

                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: declarator
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 568:41: -> declarator
            {
                adaptor.addChild(root_0, stream_declarator.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("structOrVariantDeclarator");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "structOrVariantDeclarator"

