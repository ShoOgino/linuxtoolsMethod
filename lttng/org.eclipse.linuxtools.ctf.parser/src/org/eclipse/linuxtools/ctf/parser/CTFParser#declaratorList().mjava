    // $ANTLR start "declaratorList"
    // Grammar/CTFParser.g:358:1: declaratorList : declarator ( SEPARATOR declarator )* -> ^( TYPE_DECLARATOR_LIST ( declarator )+ ) ;
    public final CTFParser.declaratorList_return declaratorList() throws RecognitionException {
        CTFParser.declaratorList_return retval = new CTFParser.declaratorList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEPARATOR36=null;
        CTFParser.declarator_return declarator35 = null;

        CTFParser.declarator_return declarator37 = null;


        CommonTree SEPARATOR36_tree=null;
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleSubtreeStream stream_declarator=new RewriteRuleSubtreeStream(adaptor,"rule declarator");

          enter("declaratorList");

        try {
            // Grammar/CTFParser.g:365:1: ( declarator ( SEPARATOR declarator )* -> ^( TYPE_DECLARATOR_LIST ( declarator )+ ) )
            // Grammar/CTFParser.g:366:3: declarator ( SEPARATOR declarator )*
            {
            pushFollow(FOLLOW_declarator_in_declaratorList946);
            declarator35=declarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_declarator.add(declarator35.getTree());
            // Grammar/CTFParser.g:366:14: ( SEPARATOR declarator )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==SEPARATOR) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // Grammar/CTFParser.g:366:15: SEPARATOR declarator
            	    {
            	    SEPARATOR36=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_declaratorList949); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR36);

            	    pushFollow(FOLLOW_declarator_in_declaratorList951);
            	    declarator37=declarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_declarator.add(declarator37.getTree());

            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);



            // AST REWRITE
            // elements: declarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 366:38: -> ^( TYPE_DECLARATOR_LIST ( declarator )+ )
            {
                // Grammar/CTFParser.g:366:41: ^( TYPE_DECLARATOR_LIST ( declarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATOR_LIST, "TYPE_DECLARATOR_LIST"), root_1);

                if ( !(stream_declarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_declarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_declarator.nextTree());

                }
                stream_declarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("declaratorList");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "declaratorList"

