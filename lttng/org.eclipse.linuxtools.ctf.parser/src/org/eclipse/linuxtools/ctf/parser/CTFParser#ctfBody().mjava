    // $ANTLR start "ctfBody"
    // CTFParser.g:959:1: ctfBody : LCURL ( ctfAssignmentExpressionList )? RCURL -> ( ctfAssignmentExpressionList )? ;
    public final CTFParser.ctfBody_return ctfBody() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CTFParser.ctfBody_return retval = new CTFParser.ctfBody_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURL174=null;
        Token RCURL176=null;
        CTFParser.ctfAssignmentExpressionList_return ctfAssignmentExpressionList175 = null;


        CommonTree LCURL174_tree=null;
        CommonTree RCURL176_tree=null;
        RewriteRuleTokenStream stream_LCURL=new RewriteRuleTokenStream(adaptor,"token LCURL");
        RewriteRuleTokenStream stream_RCURL=new RewriteRuleTokenStream(adaptor,"token RCURL");
        RewriteRuleSubtreeStream stream_ctfAssignmentExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule ctfAssignmentExpressionList");

          enter("ctfBody");
          debug_print("Scope push " +  + Symbols_stack.size());
          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet<String>();

        try {
            // CTFParser.g:970:1: ( LCURL ( ctfAssignmentExpressionList )? RCURL -> ( ctfAssignmentExpressionList )? )
            // CTFParser.g:971:3: LCURL ( ctfAssignmentExpressionList )? RCURL
            {
            LCURL174=(Token)match(input,LCURL,FOLLOW_LCURL_in_ctfBody3333); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_LCURL.add(LCURL174);
            }

            // CTFParser.g:971:9: ( ctfAssignmentExpressionList )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( ((LA56_0>=ALIGNTOK && LA56_0<=CALLSITETOK)||LA56_0==SIGN||LA56_0==OCTAL_LITERAL||LA56_0==DECIMAL_LITERAL||LA56_0==HEX_LITERAL||LA56_0==CHARACTER_LITERAL||LA56_0==STRING_LITERAL||LA56_0==IDENTIFIER) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // CTFParser.g:971:9: ctfAssignmentExpressionList
                    {
                    pushFollow(FOLLOW_ctfAssignmentExpressionList_in_ctfBody3335);
                    ctfAssignmentExpressionList175=ctfAssignmentExpressionList();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ctfAssignmentExpressionList.add(ctfAssignmentExpressionList175.getTree());
                    }

                    }
                    break;

            }

            RCURL176=(Token)match(input,RCURL,FOLLOW_RCURL_in_ctfBody3338); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_RCURL.add(RCURL176);
            }



            // AST REWRITE
            // elements: ctfAssignmentExpressionList
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 971:44: -> ( ctfAssignmentExpressionList )?
            {
                // CTFParser.g:971:47: ( ctfAssignmentExpressionList )?
                if ( stream_ctfAssignmentExpressionList.hasNext() ) {
                    adaptor.addChild(root_0, stream_ctfAssignmentExpressionList.nextTree());

                }
                stream_ctfAssignmentExpressionList.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print("Scope pop " +  + Symbols_stack.size());
                exit("ctfBody");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
            Symbols_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "ctfBody"

