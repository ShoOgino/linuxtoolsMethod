    // $ANTLR start "enumContainerType"
    // CTFParser.g:697:1: enumContainerType : COLON declarationSpecifiers -> ^( ENUM_CONTAINER_TYPE declarationSpecifiers ) ;
    public final CTFParser.enumContainerType_return enumContainerType() throws RecognitionException {
        CTFParser.enumContainerType_return retval = new CTFParser.enumContainerType_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COLON118=null;
        CTFParser.declarationSpecifiers_return declarationSpecifiers119 = null;


        CommonTree COLON118_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_declarationSpecifiers=new RewriteRuleSubtreeStream(adaptor,"rule declarationSpecifiers");

          enter("enumContainerType");

        try {
            // CTFParser.g:704:1: ( COLON declarationSpecifiers -> ^( ENUM_CONTAINER_TYPE declarationSpecifiers ) )
            // CTFParser.g:705:3: COLON declarationSpecifiers
            {
            COLON118=(Token)match(input,COLON,FOLLOW_COLON_in_enumContainerType2436); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_COLON.add(COLON118);
            }

            pushFollow(FOLLOW_declarationSpecifiers_in_enumContainerType2438);
            declarationSpecifiers119=declarationSpecifiers();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_declarationSpecifiers.add(declarationSpecifiers119.getTree());
            }


            // AST REWRITE
            // elements: declarationSpecifiers
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 705:31: -> ^( ENUM_CONTAINER_TYPE declarationSpecifiers )
            {
                // CTFParser.g:705:34: ^( ENUM_CONTAINER_TYPE declarationSpecifiers )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ENUM_CONTAINER_TYPE, "ENUM_CONTAINER_TYPE"), root_1);

                adaptor.addChild(root_1, stream_declarationSpecifiers.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("enumContainerType");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "enumContainerType"

