    // $ANTLR start "variantTag"
    // Grammar/CTFParser.g:630:1: variantTag : LT IDENTIFIER GT -> ^( VARIANT_TAG IDENTIFIER ) ;
    public final CTFParser.variantTag_return variantTag() throws RecognitionException {
        CTFParser.variantTag_return retval = new CTFParser.variantTag_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LT101=null;
        Token IDENTIFIER102=null;
        Token GT103=null;

        CommonTree LT101_tree=null;
        CommonTree IDENTIFIER102_tree=null;
        CommonTree GT103_tree=null;
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");


          enter("variantTag");

        try {
            // Grammar/CTFParser.g:638:1: ( LT IDENTIFIER GT -> ^( VARIANT_TAG IDENTIFIER ) )
            // Grammar/CTFParser.g:639:3: LT IDENTIFIER GT
            {
            LT101=(Token)match(input,LT,FOLLOW_LT_in_variantTag2191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LT.add(LT101);

            IDENTIFIER102=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variantTag2193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER102);

            GT103=(Token)match(input,GT,FOLLOW_GT_in_variantTag2195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_GT.add(GT103);



            // AST REWRITE
            // elements: IDENTIFIER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 639:20: -> ^( VARIANT_TAG IDENTIFIER )
            {
                // Grammar/CTFParser.g:639:23: ^( VARIANT_TAG IDENTIFIER )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_TAG, "VARIANT_TAG"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print(input.toString(retval.start,input.LT(-1)));
                exit("variantTag");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantTag"

