    // $ANTLR start "numberLiteral"
    // Grammar/CTFParser.g:215:1: numberLiteral : ( SIGN )* ( HEX_LITERAL -> ^(
    // UNARY_EXPRESSION_HEX HEX_LITERAL ( SIGN )* ) | DECIMAL_LITERAL -> ^(
    // UNARY_EXPRESSION_DEC DECIMAL_LITERAL ( SIGN )* ) | OCTAL_LITERAL -> ^(
    // UNARY_EXPRESSION_OCT OCTAL_LITERAL ( SIGN )* ) ) ;
    public final CTFParser.numberLiteral_return numberLiteral()
            throws RecognitionException {
        CTFParser.numberLiteral_return retval = new CTFParser.numberLiteral_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SIGN3 = null;
        Token HEX_LITERAL4 = null;
        Token DECIMAL_LITERAL5 = null;
        Token OCTAL_LITERAL6 = null;

        CommonTree SIGN3_tree = null;
        CommonTree HEX_LITERAL4_tree = null;
        CommonTree DECIMAL_LITERAL5_tree = null;
        CommonTree OCTAL_LITERAL6_tree = null;
        RewriteRuleTokenStream stream_SIGN = new RewriteRuleTokenStream(
                adaptor, "token SIGN");
        RewriteRuleTokenStream stream_OCTAL_LITERAL = new RewriteRuleTokenStream(
                adaptor, "token OCTAL_LITERAL");
        RewriteRuleTokenStream stream_HEX_LITERAL = new RewriteRuleTokenStream(
                adaptor, "token HEX_LITERAL");
        RewriteRuleTokenStream stream_DECIMAL_LITERAL = new RewriteRuleTokenStream(
                adaptor, "token DECIMAL_LITERAL");

        enter("numberLiteral");

        try {
            // Grammar/CTFParser.g:223:1: ( ( SIGN )* ( HEX_LITERAL -> ^(
            // UNARY_EXPRESSION_HEX HEX_LITERAL ( SIGN )* ) | DECIMAL_LITERAL ->
            // ^( UNARY_EXPRESSION_DEC DECIMAL_LITERAL ( SIGN )* ) |
            // OCTAL_LITERAL -> ^( UNARY_EXPRESSION_OCT OCTAL_LITERAL ( SIGN )*
            // ) ) )
            // Grammar/CTFParser.g:224:3: ( SIGN )* ( HEX_LITERAL -> ^(
            // UNARY_EXPRESSION_HEX HEX_LITERAL ( SIGN )* ) | DECIMAL_LITERAL ->
            // ^( UNARY_EXPRESSION_DEC DECIMAL_LITERAL ( SIGN )* ) |
            // OCTAL_LITERAL -> ^( UNARY_EXPRESSION_OCT OCTAL_LITERAL ( SIGN )*
            // ) )
            {
                // Grammar/CTFParser.g:224:3: ( SIGN )*
                loop2: do {
                    int alt2 = 2;
                    int LA2_0 = input.LA(1);

                    if ((LA2_0 == SIGN)) {
                        alt2 = 1;
                    }

                    switch (alt2) {
                    case 1:
                    // Grammar/CTFParser.g:224:3: SIGN
                    {
                        SIGN3 = (Token) match(input, SIGN,
                                FOLLOW_SIGN_in_numberLiteral357);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_SIGN.add(SIGN3);
                        }

                    }
                        break;

                    default:
                        break loop2;
                    }
                } while (true);

                // Grammar/CTFParser.g:224:10: ( HEX_LITERAL -> ^(
                // UNARY_EXPRESSION_HEX HEX_LITERAL ( SIGN )* ) |
                // DECIMAL_LITERAL -> ^( UNARY_EXPRESSION_DEC DECIMAL_LITERAL (
                // SIGN )* ) | OCTAL_LITERAL -> ^( UNARY_EXPRESSION_OCT
                // OCTAL_LITERAL ( SIGN )* ) )
                int alt3 = 3;
                switch (input.LA(1)) {
                case HEX_LITERAL: {
                    alt3 = 1;
                }
                    break;
                case DECIMAL_LITERAL: {
                    alt3 = 2;
                }
                    break;
                case OCTAL_LITERAL: {
                    alt3 = 3;
                }
                    break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("", 3,
                            0, input);

                    throw nvae;
                }

                switch (alt3) {
                case 1:
                // Grammar/CTFParser.g:224:11: HEX_LITERAL
                {
                    HEX_LITERAL4 = (Token) match(input, HEX_LITERAL,
                            FOLLOW_HEX_LITERAL_in_numberLiteral362);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_HEX_LITERAL.add(HEX_LITERAL4);
                    }

                    // AST REWRITE
                    // elements: SIGN, HEX_LITERAL
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
//                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(
                                adaptor, "rule retval",
                                retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 224:23: -> ^( UNARY_EXPRESSION_HEX HEX_LITERAL ( SIGN
                        // )* )
                        {
                            // Grammar/CTFParser.g:224:26: ^(
                            // UNARY_EXPRESSION_HEX HEX_LITERAL ( SIGN )* )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor
                                        .becomeRoot(adaptor.create(
                                                UNARY_EXPRESSION_HEX,
                                                "UNARY_EXPRESSION_HEX"), root_1);

                                adaptor.addChild(root_1,
                                        stream_HEX_LITERAL.nextNode());
                                // Grammar/CTFParser.g:224:61: ( SIGN )*
                                while (stream_SIGN.hasNext()) {
                                    adaptor.addChild(root_1,
                                            stream_SIGN.nextNode());

                                }
                                stream_SIGN.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                    break;
                case 2:
                // Grammar/CTFParser.g:225:5: DECIMAL_LITERAL
                {
                    DECIMAL_LITERAL5 = (Token) match(input, DECIMAL_LITERAL,
                            FOLLOW_DECIMAL_LITERAL_in_numberLiteral379);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_DECIMAL_LITERAL.add(DECIMAL_LITERAL5);
                    }

                    // AST REWRITE
                    // elements: DECIMAL_LITERAL, SIGN
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
//                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(
                                adaptor, "rule retval",
                                retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 225:21: -> ^( UNARY_EXPRESSION_DEC DECIMAL_LITERAL (
                        // SIGN )* )
                        {
                            // Grammar/CTFParser.g:225:24: ^(
                            // UNARY_EXPRESSION_DEC DECIMAL_LITERAL ( SIGN )* )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor
                                        .becomeRoot(adaptor.create(
                                                UNARY_EXPRESSION_DEC,
                                                "UNARY_EXPRESSION_DEC"), root_1);

                                adaptor.addChild(root_1,
                                        stream_DECIMAL_LITERAL.nextNode());
                                // Grammar/CTFParser.g:225:63: ( SIGN )*
                                while (stream_SIGN.hasNext()) {
                                    adaptor.addChild(root_1,
                                            stream_SIGN.nextNode());

                                }
                                stream_SIGN.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                    break;
                case 3:
                // Grammar/CTFParser.g:226:5: OCTAL_LITERAL
                {
                    OCTAL_LITERAL6 = (Token) match(input, OCTAL_LITERAL,
                            FOLLOW_OCTAL_LITERAL_in_numberLiteral396);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_OCTAL_LITERAL.add(OCTAL_LITERAL6);
                    }

                    // AST REWRITE
                    // elements: SIGN, OCTAL_LITERAL
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if (state.backtracking == 0) {
                        retval.tree = root_0;
//                        RewriteRuleSubtreeStream stream_retval =
                                new RewriteRuleSubtreeStream(
                                adaptor, "rule retval",
                                retval != null ? retval.tree : null);

                        root_0 = (CommonTree) adaptor.nil();
                        // 226:19: -> ^( UNARY_EXPRESSION_OCT OCTAL_LITERAL (
                        // SIGN )* )
                        {
                            // Grammar/CTFParser.g:226:22: ^(
                            // UNARY_EXPRESSION_OCT OCTAL_LITERAL ( SIGN )* )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor
                                        .becomeRoot(adaptor.create(
                                                UNARY_EXPRESSION_OCT,
                                                "UNARY_EXPRESSION_OCT"), root_1);

                                adaptor.addChild(root_1,
                                        stream_OCTAL_LITERAL.nextNode());
                                // Grammar/CTFParser.g:226:59: ( SIGN )*
                                while (stream_SIGN.hasNext()) {
                                    adaptor.addChild(root_1,
                                            stream_SIGN.nextNode());

                                }
                                stream_SIGN.reset();

                                adaptor.addChild(root_0, root_1);
                            }

                        }

                        retval.tree = root_0;
                    }
                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print(input.toString(retval.start, input.LT(-1)));
                exit("numberLiteral");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

