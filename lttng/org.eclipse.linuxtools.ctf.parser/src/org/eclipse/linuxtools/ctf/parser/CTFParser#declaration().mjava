    // $ANTLR start "declaration"
    // Grammar/CTFParser.g:321:1: declaration : ( ( declarationSpecifiers ( declaratorList )? TERM ) -> {inTypedef()}? ^( DECLARATION ^( TYPEDEF declaratorList declarationSpecifiers ) ) -> ^( DECLARATION declarationSpecifiers ( declaratorList )? ) | ( ctfSpecifier TERM ) );
    public final CTFParser.declaration_return declaration() throws RecognitionException {
        CTFParser.declaration_return retval = new CTFParser.declaration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TERM29=null;
        Token TERM31=null;
        CTFParser.declarationSpecifiers_return declarationSpecifiers27 = null;

        CTFParser.declaratorList_return declaratorList28 = null;

        CTFParser.ctfSpecifier_return ctfSpecifier30 = null;


        CommonTree TERM29_tree=null;
        CommonTree TERM31_tree=null;
        RewriteRuleTokenStream stream_TERM=new RewriteRuleTokenStream(adaptor,"token TERM");
        RewriteRuleSubtreeStream stream_declaratorList=new RewriteRuleSubtreeStream(adaptor,"rule declaratorList");
        RewriteRuleSubtreeStream stream_declarationSpecifiers=new RewriteRuleSubtreeStream(adaptor,"rule declarationSpecifiers");

          enter("declaration");

        try {
            // Grammar/CTFParser.g:330:1: ( ( declarationSpecifiers ( declaratorList )? TERM ) -> {inTypedef()}? ^( DECLARATION ^( TYPEDEF declaratorList declarationSpecifiers ) ) -> ^( DECLARATION declarationSpecifiers ( declaratorList )? ) | ( ctfSpecifier TERM ) )
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( ((LA13_0>=CONSTTOK && LA13_0<=ENUMTOK)||(LA13_0>=FLOATINGPOINTTOK && LA13_0<=SIGNEDTOK)||(LA13_0>=STRINGTOK && LA13_0<=STRUCTTOK)||(LA13_0>=TYPEDEFTOK && LA13_0<=IMAGINARYTOK)) ) {
                alt13=1;
            }
            else if ( (LA13_0==IDENTIFIER) && ((inTypealiasAlias() || isTypeName(input.LT(1).getText())))) {
                alt13=1;
            }
            else if ( (LA13_0==EVENTTOK||LA13_0==STREAMTOK||(LA13_0>=TRACETOK && LA13_0<=TYPEALIASTOK)||(LA13_0>=ENVTOK && LA13_0<=CLOCKTOK)) ) {
                alt13=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 13, 0, input);

                throw nvae;
            }
            switch (alt13) {
                case 1 :
                    // Grammar/CTFParser.g:331:3: ( declarationSpecifiers ( declaratorList )? TERM )
                    {
                    // Grammar/CTFParser.g:331:3: ( declarationSpecifiers ( declaratorList )? TERM )
                    // Grammar/CTFParser.g:331:4: declarationSpecifiers ( declaratorList )? TERM
                    {
                    pushFollow(FOLLOW_declarationSpecifiers_in_declaration790);
                    declarationSpecifiers27=declarationSpecifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_declarationSpecifiers.add(declarationSpecifiers27.getTree());
                    // Grammar/CTFParser.g:331:26: ( declaratorList )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( (LA12_0==POINTER||LA12_0==IDENTIFIER) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // Grammar/CTFParser.g:331:26: declaratorList
                            {
                            pushFollow(FOLLOW_declaratorList_in_declaration792);
                            declaratorList28=declaratorList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_declaratorList.add(declaratorList28.getTree());

                            }
                            break;

                    }

                    TERM29=(Token)match(input,TERM,FOLLOW_TERM_in_declaration795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TERM.add(TERM29);


                    }



                    // AST REWRITE
                    // elements: declaratorList, declaratorList, declarationSpecifiers, declarationSpecifiers
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 334:3: -> {inTypedef()}? ^( DECLARATION ^( TYPEDEF declaratorList declarationSpecifiers ) )
                    if (inTypedef()) {
                        // Grammar/CTFParser.g:334:21: ^( DECLARATION ^( TYPEDEF declaratorList declarationSpecifiers ) )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        // Grammar/CTFParser.g:334:35: ^( TYPEDEF declaratorList declarationSpecifiers )
                        {
                        CommonTree root_2 = (CommonTree)adaptor.nil();
                        root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEDEF, "TYPEDEF"), root_2);

                        adaptor.addChild(root_2, stream_declaratorList.nextTree());
                        adaptor.addChild(root_2, stream_declarationSpecifiers.nextTree());

                        adaptor.addChild(root_1, root_2);
                        }

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 335:3: -> ^( DECLARATION declarationSpecifiers ( declaratorList )? )
                    {
                        // Grammar/CTFParser.g:335:6: ^( DECLARATION declarationSpecifiers ( declaratorList )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_declarationSpecifiers.nextTree());
                        // Grammar/CTFParser.g:335:42: ( declaratorList )?
                        if ( stream_declaratorList.hasNext() ) {
                            adaptor.addChild(root_1, stream_declaratorList.nextTree());

                        }
                        stream_declaratorList.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // Grammar/CTFParser.g:337:5: ( ctfSpecifier TERM )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // Grammar/CTFParser.g:337:5: ( ctfSpecifier TERM )
                    // Grammar/CTFParser.g:337:6: ctfSpecifier TERM
                    {
                    pushFollow(FOLLOW_ctfSpecifier_in_declaration844);
                    ctfSpecifier30=ctfSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, ctfSpecifier30.getTree());
                    TERM31=(Token)match(input,TERM,FOLLOW_TERM_in_declaration846); if (state.failed) return retval;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("declaration");
                if (inTypedef())
                  typedefOff();

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "declaration"

