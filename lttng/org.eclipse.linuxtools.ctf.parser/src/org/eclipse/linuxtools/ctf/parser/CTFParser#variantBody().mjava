    // $ANTLR start "variantBody"
    // Grammar/CTFParser.g:615:1: variantBody : LCURL
    // structOrVariantDeclarationList RCURL -> ^( VARIANT_BODY
    // structOrVariantDeclarationList ) ;
    public final CTFParser.variantBody_return variantBody()
            throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CTFParser.variantBody_return retval = new CTFParser.variantBody_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURL98 = null;
        Token RCURL100 = null;
        CTFParser.structOrVariantDeclarationList_return structOrVariantDeclarationList99 = null;

        CommonTree LCURL98_tree = null;
        CommonTree RCURL100_tree = null;
        RewriteRuleTokenStream stream_LCURL = new RewriteRuleTokenStream(
                adaptor, "token LCURL");
        RewriteRuleTokenStream stream_RCURL = new RewriteRuleTokenStream(
                adaptor, "token RCURL");
        RewriteRuleSubtreeStream stream_structOrVariantDeclarationList = new RewriteRuleSubtreeStream(
                adaptor, "rule structOrVariantDeclarationList");

        enter("variantBody");
        debug_print("Scope push " + Symbols_stack.size());
        ((Symbols_scope) Symbols_stack.peek()).types = new HashSet<String>();

        try {
            // Grammar/CTFParser.g:626:1: ( LCURL structOrVariantDeclarationList
            // RCURL -> ^( VARIANT_BODY structOrVariantDeclarationList ) )
            // Grammar/CTFParser.g:627:3: LCURL structOrVariantDeclarationList
            // RCURL
            {
                LCURL98 = (Token) match(input, LCURL,
                        FOLLOW_LCURL_in_variantBody2156);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_LCURL.add(LCURL98);
                }

                pushFollow(FOLLOW_structOrVariantDeclarationList_in_variantBody2158);
                structOrVariantDeclarationList99 = structOrVariantDeclarationList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_structOrVariantDeclarationList
                            .add(structOrVariantDeclarationList99.getTree());
                }
                RCURL100 = (Token) match(input, RCURL,
                        FOLLOW_RCURL_in_variantBody2160);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_RCURL.add(RCURL100);
                }

                // AST REWRITE
                // elements: structOrVariantDeclarationList
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 627:46: -> ^( VARIANT_BODY structOrVariantDeclarationList
                    // )
                    {
                        // Grammar/CTFParser.g:627:49: ^( VARIANT_BODY
                        // structOrVariantDeclarationList )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(adaptor
                                    .create(VARIANT_BODY, "VARIANT_BODY"),
                                    root_1);

                            adaptor.addChild(root_1,
                                    stream_structOrVariantDeclarationList
                                            .nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print("Scope pop " + Symbols_stack.size());
                exit("variantBody");

            }
        }

        catch (RecognitionException e) {
            throw e;
        } finally {
            Symbols_stack.pop();

        }
        return retval;
    }

