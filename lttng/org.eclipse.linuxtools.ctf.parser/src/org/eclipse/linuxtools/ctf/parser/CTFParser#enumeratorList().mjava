    // $ANTLR start "enumeratorList"
    // Grammar/CTFParser.g:707:1: enumeratorList : enumerator ( SEPARATOR
    // enumerator )* -> ( ^( ENUM_ENUMERATOR enumerator ) )+ ;
    public final CTFParser.enumeratorList_return enumeratorList()
            throws RecognitionException {
        CTFParser.enumeratorList_return retval = new CTFParser.enumeratorList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEPARATOR121 = null;
        CTFParser.enumerator_return enumerator120 = null;

        CTFParser.enumerator_return enumerator122 = null;

        CommonTree SEPARATOR121_tree = null;
        RewriteRuleTokenStream stream_SEPARATOR = new RewriteRuleTokenStream(
                adaptor, "token SEPARATOR");
        RewriteRuleSubtreeStream stream_enumerator = new RewriteRuleSubtreeStream(
                adaptor, "rule enumerator");

        enter("enumeratorList");

        try {
            // Grammar/CTFParser.g:714:1: ( enumerator ( SEPARATOR enumerator )*
            // -> ( ^( ENUM_ENUMERATOR enumerator ) )+ )
            // Grammar/CTFParser.g:715:3: enumerator ( SEPARATOR enumerator )*
            {
                pushFollow(FOLLOW_enumerator_in_enumeratorList2465);
                enumerator120 = enumerator();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_enumerator.add(enumerator120.getTree());
                }
                // Grammar/CTFParser.g:715:14: ( SEPARATOR enumerator )*
                loop36: do {
                    int alt36 = 2;
                    int LA36_0 = input.LA(1);

                    if ((LA36_0 == SEPARATOR)) {
                        int LA36_1 = input.LA(2);

                        if (((LA36_1 == ALIGNTOK) || (LA36_1 == EVENTTOK)
                                || (LA36_1 == SIGNEDTOK)
                                || (LA36_1 == STRINGTOK)
                                || (LA36_1 == STRING_LITERAL) || (LA36_1 == IDENTIFIER))) {
                            alt36 = 1;
                        }

                    }

                    switch (alt36) {
                    case 1:
                    // Grammar/CTFParser.g:715:15: SEPARATOR enumerator
                    {
                        SEPARATOR121 = (Token) match(input, SEPARATOR,
                                FOLLOW_SEPARATOR_in_enumeratorList2468);
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_SEPARATOR.add(SEPARATOR121);
                        }

                        pushFollow(FOLLOW_enumerator_in_enumeratorList2470);
                        enumerator122 = enumerator();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_enumerator.add(enumerator122.getTree());
                        }

                    }
                        break;

                    default:
                        break loop36;
                    }
                } while (true);

                // AST REWRITE
                // elements: enumerator
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 715:38: -> ( ^( ENUM_ENUMERATOR enumerator ) )+
                    {
                        if (!(stream_enumerator.hasNext())) {
                            throw new RewriteEarlyExitException();
                        }
                        while (stream_enumerator.hasNext()) {
                            // Grammar/CTFParser.g:715:42: ^( ENUM_ENUMERATOR
                            // enumerator )
                            {
                                CommonTree root_1 = (CommonTree) adaptor.nil();
                                root_1 = (CommonTree) adaptor.becomeRoot(
                                        adaptor.create(ENUM_ENUMERATOR,
                                                "ENUM_ENUMERATOR"), root_1);

                                adaptor.addChild(root_1,
                                        stream_enumerator.nextTree());

                                adaptor.addChild(root_0, root_1);
                            }

                        }
                        stream_enumerator.reset();

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("enumeratorList");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

