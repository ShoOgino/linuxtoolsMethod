    // $ANTLR start "reference"
    // Grammar/CTFParser.g:257:1: reference : (ref= DOT | ref= ARROW ) IDENTIFIER -> ^( $ref ^( UNARY_EXPRESSION_STRING IDENTIFIER ) ) ;
    public final CTFParser.reference_return reference() throws RecognitionException {
        CTFParser.reference_return retval = new CTFParser.reference_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ref=null;
        Token IDENTIFIER14=null;

        CommonTree ref_tree=null;
        CommonTree IDENTIFIER14_tree=null;
        RewriteRuleTokenStream stream_ARROW=new RewriteRuleTokenStream(adaptor,"token ARROW");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");


          enter("reference");

        try {
            // Grammar/CTFParser.g:265:1: ( (ref= DOT | ref= ARROW ) IDENTIFIER -> ^( $ref ^( UNARY_EXPRESSION_STRING IDENTIFIER ) ) )
            // Grammar/CTFParser.g:266:3: (ref= DOT | ref= ARROW ) IDENTIFIER
            {
            // Grammar/CTFParser.g:266:3: (ref= DOT | ref= ARROW )
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==DOT) ) {
                alt6=1;
            }
            else if ( (LA6_0==ARROW) ) {
                alt6=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 6, 0, input);

                throw nvae;
            }
            switch (alt6) {
                case 1 :
                    // Grammar/CTFParser.g:266:4: ref= DOT
                    {
                    ref=(Token)match(input,DOT,FOLLOW_DOT_in_reference564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(ref);


                    }
                    break;
                case 2 :
                    // Grammar/CTFParser.g:266:14: ref= ARROW
                    {
                    ref=(Token)match(input,ARROW,FOLLOW_ARROW_in_reference570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ARROW.add(ref);


                    }
                    break;

            }

            IDENTIFIER14=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_reference573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENTIFIER.add(IDENTIFIER14);



            // AST REWRITE
            // elements: IDENTIFIER, ref
            // token labels: ref
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ref=new RewriteRuleTokenStream(adaptor,"token ref",ref);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 266:36: -> ^( $ref ^( UNARY_EXPRESSION_STRING IDENTIFIER ) )
            {
                // Grammar/CTFParser.g:266:39: ^( $ref ^( UNARY_EXPRESSION_STRING IDENTIFIER ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_ref.nextNode(), root_1);

                // Grammar/CTFParser.g:266:46: ^( UNARY_EXPRESSION_STRING IDENTIFIER )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_EXPRESSION_STRING, "UNARY_EXPRESSION_STRING"), root_2);

                adaptor.addChild(root_2, stream_IDENTIFIER.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print(input.toString(retval.start,input.LT(-1)));
                exit("reference");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "reference"

