    // $ANTLR start "enumName"
    // Grammar/CTFParser.g:673:1: enumName : IDENTIFIER -> ^( ENUM_NAME
    // IDENTIFIER ) ;
    public final CTFParser.enumName_return enumName()
            throws RecognitionException {
        CTFParser.enumName_return retval = new CTFParser.enumName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENTIFIER112 = null;

        CommonTree IDENTIFIER112_tree = null;
        RewriteRuleTokenStream stream_IDENTIFIER = new RewriteRuleTokenStream(
                adaptor, "token IDENTIFIER");

        enter("enumName");

        try {
            // Grammar/CTFParser.g:681:1: ( IDENTIFIER -> ^( ENUM_NAME
            // IDENTIFIER ) )
            // Grammar/CTFParser.g:682:3: IDENTIFIER
            {
                IDENTIFIER112 = (Token) match(input, IDENTIFIER,
                        FOLLOW_IDENTIFIER_in_enumName2356);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_IDENTIFIER.add(IDENTIFIER112);
                }

                // AST REWRITE
                // elements: IDENTIFIER
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 682:14: -> ^( ENUM_NAME IDENTIFIER )
                    {
                        // Grammar/CTFParser.g:682:17: ^( ENUM_NAME IDENTIFIER )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(ENUM_NAME, "ENUM_NAME"),
                                    root_1);

                            adaptor.addChild(root_1,
                                    stream_IDENTIFIER.nextNode());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print(input.toString(retval.start, input.LT(-1)));
                exit("enumName");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

