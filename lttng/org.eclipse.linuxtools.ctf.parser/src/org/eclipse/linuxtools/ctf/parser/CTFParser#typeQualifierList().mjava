    // $ANTLR start "typeQualifierList"
    // Grammar/CTFParser.g:826:1: typeQualifierList : ( typeQualifier )+ ;
    public final CTFParser.typeQualifierList_return typeQualifierList() throws RecognitionException {
        CTFParser.typeQualifierList_return retval = new CTFParser.typeQualifierList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.typeQualifier_return typeQualifier147 = null;



        try {
            // Grammar/CTFParser.g:826:19: ( ( typeQualifier )+ )
            // Grammar/CTFParser.g:827:3: ( typeQualifier )+
            {
            root_0 = (CommonTree)adaptor.nil();

            // Grammar/CTFParser.g:827:3: ( typeQualifier )+
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==CONSTTOK) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // Grammar/CTFParser.g:827:3: typeQualifier
            	    {
            	    pushFollow(FOLLOW_typeQualifier_in_typeQualifierList2891);
            	    typeQualifier147=typeQualifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, typeQualifier147.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "typeQualifierList"

