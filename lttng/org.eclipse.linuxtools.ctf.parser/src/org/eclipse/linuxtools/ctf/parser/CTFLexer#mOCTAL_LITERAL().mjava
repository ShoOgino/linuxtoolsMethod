    // $ANTLR start "OCTAL_LITERAL"
    public final void mOCTAL_LITERAL() throws RecognitionException {
        try {
            int _type = OCTAL_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // Grammar/CTFLexer.g:89:15: ( '0' ( '0' .. '7' )+ ( INTEGER_TYPES_SUFFIX )? )
            // Grammar/CTFLexer.g:89:17: '0' ( '0' .. '7' )+ ( INTEGER_TYPES_SUFFIX )?
            {
            match('0'); 
            // Grammar/CTFLexer.g:89:21: ( '0' .. '7' )+
            int cnt1=0;
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( ((LA1_0>='0' && LA1_0<='7')) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // Grammar/CTFLexer.g:89:22: '0' .. '7'
            	    {
            	    matchRange('0','7'); 

            	    }
            	    break;

            	default :
            	    if ( cnt1 >= 1 ) break loop1;
                        EarlyExitException eee =
                            new EarlyExitException(1, input);
                        throw eee;
                }
                cnt1++;
            } while (true);

            // Grammar/CTFLexer.g:89:33: ( INTEGER_TYPES_SUFFIX )?
            int alt2=2;
            int LA2_0 = input.LA(1);

            if ( (LA2_0=='L'||LA2_0=='U'||LA2_0=='l'||LA2_0=='u') ) {
                alt2=1;
            }
            switch (alt2) {
                case 1 :
                    // Grammar/CTFLexer.g:89:33: INTEGER_TYPES_SUFFIX
                    {
                    mINTEGER_TYPES_SUFFIX(); 

                    }
                    break;

            }


            }

            state.type = _type;
            state.channel = _channel;
        }
        finally {
        }
    }
    // $ANTLR end "OCTAL_LITERAL"

