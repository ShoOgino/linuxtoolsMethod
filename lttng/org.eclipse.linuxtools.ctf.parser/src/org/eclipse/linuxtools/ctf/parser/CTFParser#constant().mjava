    // $ANTLR start "constant"
    // CTFParser.g:230:1: constant : ( numberLiteral | enumConstant | CHARACTER_LITERAL );
    public final CTFParser.constant_return constant() throws RecognitionException {
        CTFParser.constant_return retval = new CTFParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CHARACTER_LITERAL9=null;
        CTFParser.numberLiteral_return numberLiteral7 = null;

        CTFParser.enumConstant_return enumConstant8 = null;


        CommonTree CHARACTER_LITERAL9_tree=null;


          enter("constant");

        try {
            // CTFParser.g:237:1: ( numberLiteral | enumConstant | CHARACTER_LITERAL )
            int alt4=3;
            switch ( input.LA(1) ) {
            case SIGN:
            case OCTAL_LITERAL:
            case DECIMAL_LITERAL:
            case HEX_LITERAL:
                {
                alt4=1;
                }
                break;
            case ALIGNTOK:
            case EVENTTOK:
            case SIGNEDTOK:
            case STRINGTOK:
            case STRING_LITERAL:
            case IDENTIFIER:
                {
                alt4=2;
                }
                break;
            case CHARACTER_LITERAL:
                {
                alt4=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // CTFParser.g:238:4: numberLiteral
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberLiteral_in_constant436);
                    numberLiteral7=numberLiteral();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        adaptor.addChild(root_0, numberLiteral7.getTree());
                    }

                    }
                    break;
                case 2 :
                    // CTFParser.g:239:5: enumConstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_enumConstant_in_constant442);
                    enumConstant8=enumConstant();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        adaptor.addChild(root_0, enumConstant8.getTree());
                    }

                    }
                    break;
                case 3 :
                    // CTFParser.g:240:5: CHARACTER_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CHARACTER_LITERAL9=(Token)match(input,CHARACTER_LITERAL,FOLLOW_CHARACTER_LITERAL_in_constant448); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                    CHARACTER_LITERAL9_tree = (CommonTree)adaptor.create(CHARACTER_LITERAL9);
                    adaptor.addChild(root_0, CHARACTER_LITERAL9_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("constant");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

