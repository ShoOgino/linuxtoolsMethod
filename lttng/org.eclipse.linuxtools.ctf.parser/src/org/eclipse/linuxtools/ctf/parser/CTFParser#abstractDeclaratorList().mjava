    // $ANTLR start "abstractDeclaratorList"
    // Grammar/CTFParser.g:369:1: abstractDeclaratorList : abstractDeclarator ( SEPARATOR abstractDeclarator )* -> ^( TYPE_DECLARATOR_LIST ( abstractDeclarator )+ ) ;
    public final CTFParser.abstractDeclaratorList_return abstractDeclaratorList() throws RecognitionException {
        CTFParser.abstractDeclaratorList_return retval = new CTFParser.abstractDeclaratorList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEPARATOR39=null;
        CTFParser.abstractDeclarator_return abstractDeclarator38 = null;

        CTFParser.abstractDeclarator_return abstractDeclarator40 = null;


        CommonTree SEPARATOR39_tree=null;
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleSubtreeStream stream_abstractDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule abstractDeclarator");

          enter("abstractDeclaratorList");

        try {
            // Grammar/CTFParser.g:376:1: ( abstractDeclarator ( SEPARATOR abstractDeclarator )* -> ^( TYPE_DECLARATOR_LIST ( abstractDeclarator )+ ) )
            // Grammar/CTFParser.g:377:3: abstractDeclarator ( SEPARATOR abstractDeclarator )*
            {
            pushFollow(FOLLOW_abstractDeclarator_in_abstractDeclaratorList985);
            abstractDeclarator38=abstractDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_abstractDeclarator.add(abstractDeclarator38.getTree());
            // Grammar/CTFParser.g:377:22: ( SEPARATOR abstractDeclarator )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( (LA16_0==SEPARATOR) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // Grammar/CTFParser.g:377:23: SEPARATOR abstractDeclarator
            	    {
            	    SEPARATOR39=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_abstractDeclaratorList988); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_SEPARATOR.add(SEPARATOR39);

            	    pushFollow(FOLLOW_abstractDeclarator_in_abstractDeclaratorList990);
            	    abstractDeclarator40=abstractDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_abstractDeclarator.add(abstractDeclarator40.getTree());

            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);



            // AST REWRITE
            // elements: abstractDeclarator
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 377:54: -> ^( TYPE_DECLARATOR_LIST ( abstractDeclarator )+ )
            {
                // Grammar/CTFParser.g:377:57: ^( TYPE_DECLARATOR_LIST ( abstractDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATOR_LIST, "TYPE_DECLARATOR_LIST"), root_1);

                if ( !(stream_abstractDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_abstractDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_abstractDeclarator.nextTree());

                }
                stream_abstractDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("abstractDeclaratorList");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstractDeclaratorList"

