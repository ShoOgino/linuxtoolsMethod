    // $ANTLR start "postfixExpression"
    // CTFParser.g:282:1: postfixExpression : ( ( primaryExpression ) ( postfixExpressionSuffix )* | ( ( ctfSpecifierHead ) ( postfixExpressionSuffix )+ ) );
    public final CTFParser.postfixExpression_return postfixExpression() throws RecognitionException {
        CTFParser.postfixExpression_return retval = new CTFParser.postfixExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.primaryExpression_return primaryExpression19 = null;

        CTFParser.postfixExpressionSuffix_return postfixExpressionSuffix20 = null;

        CTFParser.ctfSpecifierHead_return ctfSpecifierHead21 = null;

        CTFParser.postfixExpressionSuffix_return postfixExpressionSuffix22 = null;




          enter("postfixExpression");

        try {
            // CTFParser.g:289:1: ( ( primaryExpression ) ( postfixExpressionSuffix )* | ( ( ctfSpecifierHead ) ( postfixExpressionSuffix )+ ) )
            int alt10=2;
            alt10 = dfa10.predict(input);
            switch (alt10) {
                case 1 :
                    // CTFParser.g:290:3: ( primaryExpression ) ( postfixExpressionSuffix )*
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // CTFParser.g:290:3: ( primaryExpression )
                    // CTFParser.g:290:4: primaryExpression
                    {
                    pushFollow(FOLLOW_primaryExpression_in_postfixExpression652);
                    primaryExpression19=primaryExpression();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        adaptor.addChild(root_0, primaryExpression19.getTree());
                    }

                    }

                    // CTFParser.g:290:23: ( postfixExpressionSuffix )*
                    loop8:
                    do {
                        int alt8=2;
                        int LA8_0 = input.LA(1);

                        if ( (LA8_0==OPENBRAC||(LA8_0>=ARROW && LA8_0<=DOT)) ) {
                            alt8=1;
                        }


                        switch (alt8) {
                    	case 1 :
                    	    // CTFParser.g:290:24: postfixExpressionSuffix
                    	    {
                    	    pushFollow(FOLLOW_postfixExpressionSuffix_in_postfixExpression656);
                    	    postfixExpressionSuffix20=postfixExpressionSuffix();

                    	    state._fsp--;
                    	    if (state.failed) {
                                return retval;
                            }
                    	    if ( state.backtracking==0 ) {
                                adaptor.addChild(root_0, postfixExpressionSuffix20.getTree());
                            }

                    	    }
                    	    break;

                    	default :
                    	    break loop8;
                        }
                    } while (true);


                    }
                    break;
                case 2 :
                    // CTFParser.g:291:3: ( ( ctfSpecifierHead ) ( postfixExpressionSuffix )+ )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // CTFParser.g:291:3: ( ( ctfSpecifierHead ) ( postfixExpressionSuffix )+ )
                    // CTFParser.g:291:4: ( ctfSpecifierHead ) ( postfixExpressionSuffix )+
                    {
                    // CTFParser.g:291:4: ( ctfSpecifierHead )
                    // CTFParser.g:291:5: ctfSpecifierHead
                    {
                    pushFollow(FOLLOW_ctfSpecifierHead_in_postfixExpression665);
                    ctfSpecifierHead21=ctfSpecifierHead();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        adaptor.addChild(root_0, ctfSpecifierHead21.getTree());
                    }

                    }

                    // CTFParser.g:291:24: ( postfixExpressionSuffix )+
                    int cnt9=0;
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==OPENBRAC||(LA9_0>=ARROW && LA9_0<=DOT)) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // CTFParser.g:291:25: postfixExpressionSuffix
                    	    {
                    	    pushFollow(FOLLOW_postfixExpressionSuffix_in_postfixExpression670);
                    	    postfixExpressionSuffix22=postfixExpressionSuffix();

                    	    state._fsp--;
                    	    if (state.failed) {
                                return retval;
                            }
                    	    if ( state.backtracking==0 ) {
                                adaptor.addChild(root_0, postfixExpressionSuffix22.getTree());
                            }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt9 >= 1 ) {
                                break loop9;
                            }
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(9, input);
                                throw eee;
                        }
                        cnt9++;
                    } while (true);


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("postfixExpression");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "postfixExpression"

