    // $ANTLR start "structSpecifier"
    // Grammar/CTFParser.g:446:1: structSpecifier : STRUCTTOK ( ( structName (
    // alignAttribute | ( structBody ( alignAttribute | ) ) | ) ) | ( structBody
    // ( alignAttribute | ) ) ) -> ^( STRUCT ( structName )? ( structBody )? (
    // alignAttribute )? ) ;
    public final CTFParser.structSpecifier_return structSpecifier()
            throws RecognitionException {
        CTFParser.structSpecifier_return retval = new CTFParser.structSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STRUCTTOK67 = null;
        CTFParser.structName_return structName68 = null;

        CTFParser.alignAttribute_return alignAttribute69 = null;

        CTFParser.structBody_return structBody70 = null;

        CTFParser.alignAttribute_return alignAttribute71 = null;

        CTFParser.structBody_return structBody72 = null;

        CTFParser.alignAttribute_return alignAttribute73 = null;

        CommonTree STRUCTTOK67_tree = null;
        RewriteRuleTokenStream stream_STRUCTTOK = new RewriteRuleTokenStream(
                adaptor, "token STRUCTTOK");
        RewriteRuleSubtreeStream stream_structName = new RewriteRuleSubtreeStream(
                adaptor, "rule structName");
        RewriteRuleSubtreeStream stream_structBody = new RewriteRuleSubtreeStream(
                adaptor, "rule structBody");
        RewriteRuleSubtreeStream stream_alignAttribute = new RewriteRuleSubtreeStream(
                adaptor, "rule alignAttribute");

        enter("structSpecifier");

        try {
            // Grammar/CTFParser.g:453:1: ( STRUCTTOK ( ( structName (
            // alignAttribute | ( structBody ( alignAttribute | ) ) | ) ) | (
            // structBody ( alignAttribute | ) ) ) -> ^( STRUCT ( structName )?
            // ( structBody )? ( alignAttribute )? ) )
            // Grammar/CTFParser.g:454:3: STRUCTTOK ( ( structName (
            // alignAttribute | ( structBody ( alignAttribute | ) ) | ) ) | (
            // structBody ( alignAttribute | ) ) )
            {
                STRUCTTOK67 = (Token) match(input, STRUCTTOK,
                        FOLLOW_STRUCTTOK_in_structSpecifier1266);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_STRUCTTOK.add(STRUCTTOK67);
                }

                // Grammar/CTFParser.g:455:3: ( ( structName ( alignAttribute |
                // ( structBody ( alignAttribute | ) ) | ) ) | ( structBody (
                // alignAttribute | ) ) )
                int alt22 = 2;
                int LA22_0 = input.LA(1);

                if ((LA22_0 == IDENTIFIER)) {
                    alt22 = 1;
                } else if ((LA22_0 == LCURL)) {
                    alt22 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("",
                            22, 0, input);

                    throw nvae;
                }
                switch (alt22) {
                case 1:
                // Grammar/CTFParser.g:457:5: ( structName ( alignAttribute | (
                // structBody ( alignAttribute | ) ) | ) )
                {
                    // Grammar/CTFParser.g:457:5: ( structName ( alignAttribute
                    // | ( structBody ( alignAttribute | ) ) | ) )
                    // Grammar/CTFParser.g:458:6: structName ( alignAttribute |
                    // ( structBody ( alignAttribute | ) ) | )
                    {
                        pushFollow(FOLLOW_structName_in_structSpecifier1288);
                        structName68 = structName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_structName.add(structName68.getTree());
                        }
                        // Grammar/CTFParser.g:459:6: ( alignAttribute | (
                        // structBody ( alignAttribute | ) ) | )
                        int alt20 = 3;
                        switch (input.LA(1)) {
                        case ALIGNTOK: {
                            alt20 = 1;
                        }
                            break;
                        case LCURL: {
                            switch (input.LA(2)) {
                            case CONSTTOK:
                            case CHARTOK:
                            case DOUBLETOK:
                            case ENUMTOK:
                            case FLOATINGPOINTTOK:
                            case FLOATTOK:
                            case INTEGERTOK:
                            case INTTOK:
                            case LONGTOK:
                            case SHORTTOK:
                            case STRUCTTOK:
                            case TYPEALIASTOK:
                            case TYPEDEFTOK:
                            case UNSIGNEDTOK:
                            case VARIANTTOK:
                            case VOIDTOK:
                            case BOOLTOK:
                            case COMPLEXTOK:
                            case IMAGINARYTOK:
                            case RCURL: {
                                alt20 = 2;
                            }
                                break;
                            case SIGNEDTOK: {
                                int LA20_5 = input.LA(3);

                                if ((((LA20_5 >= CONSTTOK) && (LA20_5 <= ENUMTOK))
                                        || ((LA20_5 >= FLOATINGPOINTTOK) && (LA20_5 <= SIGNEDTOK))
                                        || ((LA20_5 >= STRINGTOK) && (LA20_5 <= STRUCTTOK))
                                        || ((LA20_5 >= TYPEDEFTOK) && (LA20_5 <= IMAGINARYTOK))
                                        || (LA20_5 == POINTER) || (LA20_5 == IDENTIFIER))) {
                                    alt20 = 2;
                                } else if (((LA20_5 == SEPARATOR)
                                        || (LA20_5 == ASSIGNMENT) || (LA20_5 == RCURL))) {
                                    alt20 = 3;
                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae = new NoViableAltException(
                                            "", 20, 5, input);

                                    throw nvae;
                                }
                            }
                                break;
                            case STRINGTOK: {
                                int LA20_6 = input.LA(3);

                                if ((((LA20_6 >= CONSTTOK) && (LA20_6 <= ENUMTOK))
                                        || ((LA20_6 >= FLOATINGPOINTTOK) && (LA20_6 <= SIGNEDTOK))
                                        || ((LA20_6 >= STRINGTOK) && (LA20_6 <= STRUCTTOK))
                                        || ((LA20_6 >= TYPEDEFTOK) && (LA20_6 <= IMAGINARYTOK))
                                        || (LA20_6 == LCURL)
                                        || (LA20_6 == POINTER) || (LA20_6 == IDENTIFIER))) {
                                    alt20 = 2;
                                } else if (((LA20_6 == SEPARATOR)
                                        || (LA20_6 == ASSIGNMENT) || (LA20_6 == RCURL))) {
                                    alt20 = 3;
                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae = new NoViableAltException(
                                            "", 20, 6, input);

                                    throw nvae;
                                }
                            }
                                break;
                            case IDENTIFIER: {
                                int LA20_7 = input.LA(3);

                                if (((LA20_7 == SEPARATOR)
                                        || (LA20_7 == ASSIGNMENT) || (LA20_7 == RCURL))) {
                                    alt20 = 3;
                                } else if ((((LA20_7 >= CONSTTOK) && (LA20_7 <= ENUMTOK))
                                        || ((LA20_7 >= FLOATINGPOINTTOK) && (LA20_7 <= SIGNEDTOK))
                                        || ((LA20_7 >= STRINGTOK) && (LA20_7 <= STRUCTTOK))
                                        || ((LA20_7 >= TYPEDEFTOK) && (LA20_7 <= IMAGINARYTOK))
                                        || (LA20_7 == POINTER) || (LA20_7 == IDENTIFIER))) {
                                    alt20 = 2;
                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae = new NoViableAltException(
                                            "", 20, 7, input);

                                    throw nvae;
                                }
                            }
                                break;
                            case ALIGNTOK:
                            case EVENTTOK:
                            case STRING_LITERAL: {
                                alt20 = 3;
                            }
                                break;
                            default:
                                if (state.backtracking > 0) {
                                    state.failed = true;
                                    return retval;
                                }
                                NoViableAltException nvae = new NoViableAltException(
                                        "", 20, 2, input);

                                throw nvae;
                            }

                        }
                            break;
                        case EOF:
                        case CONSTTOK:
                        case CHARTOK:
                        case DOUBLETOK:
                        case ENUMTOK:
                        case FLOATINGPOINTTOK:
                        case FLOATTOK:
                        case INTEGERTOK:
                        case INTTOK:
                        case LONGTOK:
                        case SHORTTOK:
                        case SIGNEDTOK:
                        case STRINGTOK:
                        case STRUCTTOK:
                        case TYPEDEFTOK:
                        case UNSIGNEDTOK:
                        case VARIANTTOK:
                        case VOIDTOK:
                        case BOOLTOK:
                        case COMPLEXTOK:
                        case IMAGINARYTOK:
                        case TYPE_ASSIGNMENT:
                        case LPAREN:
                        case TERM:
                        case POINTER:
                        case IDENTIFIER: {
                            alt20 = 3;
                        }
                            break;
                        default:
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException(
                                    "", 20, 0, input);

                            throw nvae;
                        }

                        switch (alt20) {
                        case 1:
                        // Grammar/CTFParser.g:460:8: alignAttribute
                        {
                            pushFollow(FOLLOW_alignAttribute_in_structSpecifier1304);
                            alignAttribute69 = alignAttribute();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_alignAttribute.add(alignAttribute69
                                        .getTree());
                            }

                        }
                            break;
                        case 2:
                        // Grammar/CTFParser.g:462:8: ( structBody (
                        // alignAttribute | ) )
                        {
                            // Grammar/CTFParser.g:462:8: ( structBody (
                            // alignAttribute | ) )
                            // Grammar/CTFParser.g:463:10: structBody (
                            // alignAttribute | )
                            {
                                pushFollow(FOLLOW_structBody_in_structSpecifier1333);
                                structBody70 = structBody();

                                state._fsp--;
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    stream_structBody.add(structBody70
                                            .getTree());
                                }
                                // Grammar/CTFParser.g:464:10: ( alignAttribute
                                // | )
                                int alt19 = 2;
                                int LA19_0 = input.LA(1);

                                if ((LA19_0 == ALIGNTOK)) {
                                    alt19 = 1;
                                } else if (((LA19_0 == EOF)
                                        || ((LA19_0 >= CONSTTOK) && (LA19_0 <= ENUMTOK))
                                        || ((LA19_0 >= FLOATINGPOINTTOK) && (LA19_0 <= SIGNEDTOK))
                                        || ((LA19_0 >= STRINGTOK) && (LA19_0 <= STRUCTTOK))
                                        || ((LA19_0 >= TYPEDEFTOK) && (LA19_0 <= IMAGINARYTOK))
                                        || (LA19_0 == TYPE_ASSIGNMENT)
                                        || (LA19_0 == LPAREN)
                                        || (LA19_0 == LCURL)
                                        || ((LA19_0 >= TERM) && (LA19_0 <= POINTER)) || (LA19_0 == IDENTIFIER))) {
                                    alt19 = 2;
                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae = new NoViableAltException(
                                            "", 19, 0, input);

                                    throw nvae;
                                }
                                switch (alt19) {
                                case 1:
                                // Grammar/CTFParser.g:465:11: alignAttribute
                                {
                                    pushFollow(FOLLOW_alignAttribute_in_structSpecifier1358);
                                    alignAttribute71 = alignAttribute();

                                    state._fsp--;
                                    if (state.failed) {
                                        return retval;
                                    }
                                    if (state.backtracking == 0) {
                                        stream_alignAttribute
                                                .add(alignAttribute71.getTree());
                                    }

                                }
                                    break;
                                case 2:
                                // Grammar/CTFParser.g:468:10:
                                {
                                }
                                    break;

                                }

                            }

                        }
                            break;
                        case 3:
                        // Grammar/CTFParser.g:472:6:
                        {
                        }
                            break;

                        }

                    }

                }
                    break;
                case 2:
                // Grammar/CTFParser.g:476:5: ( structBody ( alignAttribute | )
                // )
                {
                    // Grammar/CTFParser.g:476:5: ( structBody ( alignAttribute
                    // | ) )
                    // Grammar/CTFParser.g:477:7: structBody ( alignAttribute |
                    // )
                    {
                        pushFollow(FOLLOW_structBody_in_structSpecifier1456);
                        structBody72 = structBody();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_structBody.add(structBody72.getTree());
                        }
                        // Grammar/CTFParser.g:478:7: ( alignAttribute | )
                        int alt21 = 2;
                        int LA21_0 = input.LA(1);

                        if ((LA21_0 == ALIGNTOK)) {
                            alt21 = 1;
                        } else if (((LA21_0 == EOF)
                                || ((LA21_0 >= CONSTTOK) && (LA21_0 <= ENUMTOK))
                                || ((LA21_0 >= FLOATINGPOINTTOK) && (LA21_0 <= SIGNEDTOK))
                                || ((LA21_0 >= STRINGTOK) && (LA21_0 <= STRUCTTOK))
                                || ((LA21_0 >= TYPEDEFTOK) && (LA21_0 <= IMAGINARYTOK))
                                || (LA21_0 == TYPE_ASSIGNMENT)
                                || (LA21_0 == LPAREN) || (LA21_0 == LCURL)
                                || ((LA21_0 >= TERM) && (LA21_0 <= POINTER)) || (LA21_0 == IDENTIFIER))) {
                            alt21 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException(
                                    "", 21, 0, input);

                            throw nvae;
                        }
                        switch (alt21) {
                        case 1:
                        // Grammar/CTFParser.g:479:9: alignAttribute
                        {
                            pushFollow(FOLLOW_alignAttribute_in_structSpecifier1474);
                            alignAttribute73 = alignAttribute();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_alignAttribute.add(alignAttribute73
                                        .getTree());
                            }

                        }
                            break;
                        case 2:
                            break;

                        }

                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: alignAttribute, structName, structBody
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 484:5: -> ^( STRUCT ( structName )? ( structBody )? (
                    // alignAttribute )? )
                    {
                        // Grammar/CTFParser.g:484:8: ^( STRUCT ( structName )?
                        // ( structBody )? ( alignAttribute )? )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(STRUCT, "STRUCT"), root_1);

                            // Grammar/CTFParser.g:484:17: ( structName )?
                            if (stream_structName.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_structName.nextTree());

                            }
                            stream_structName.reset();
                            // Grammar/CTFParser.g:484:29: ( structBody )?
                            if (stream_structBody.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_structBody.nextTree());

                            }
                            stream_structBody.reset();
                            // Grammar/CTFParser.g:484:41: ( alignAttribute )?
                            if (stream_alignAttribute.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_alignAttribute.nextTree());

                            }
                            stream_alignAttribute.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("structSpecifier");

            }
        }

        catch (RecognitionException e) {
            throw e;
        }
        return retval;
    }

