    // $ANTLR start "postfixExpressionSuffix"
    // Grammar/CTFParser.g:269:1: postfixExpressionSuffix : ( ( OPENBRAC
    // unaryExpression CLOSEBRAC ) | reference );
    public final CTFParser.postfixExpressionSuffix_return postfixExpressionSuffix()
            throws RecognitionException {
        CTFParser.postfixExpressionSuffix_return retval = new CTFParser.postfixExpressionSuffix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token OPENBRAC15 = null;
        Token CLOSEBRAC17 = null;
        CTFParser.unaryExpression_return unaryExpression16 = null;

        CTFParser.reference_return reference18 = null;

        CommonTree OPENBRAC15_tree = null;
        CommonTree CLOSEBRAC17_tree = null;

        enter("postfixExpressionSuffix");

        try {
            // Grammar/CTFParser.g:276:1: ( ( OPENBRAC unaryExpression CLOSEBRAC
            // ) | reference )
            int alt7 = 2;
            int LA7_0 = input.LA(1);

            if ((LA7_0 == OPENBRAC)) {
                alt7 = 1;
            } else if ((((LA7_0 >= ARROW) && (LA7_0 <= DOT)))) {
                alt7 = 2;
            } else {
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 7, 0,
                        input);

                throw nvae;
            }
            switch (alt7) {
            case 1:
            // Grammar/CTFParser.g:277:5: ( OPENBRAC unaryExpression CLOSEBRAC )
            {
                root_0 = (CommonTree) adaptor.nil();

                // Grammar/CTFParser.g:277:5: ( OPENBRAC unaryExpression
                // CLOSEBRAC )
                // Grammar/CTFParser.g:277:6: OPENBRAC unaryExpression CLOSEBRAC
                {
                    OPENBRAC15 = (Token) match(input, OPENBRAC,
                            FOLLOW_OPENBRAC_in_postfixExpressionSuffix612);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        OPENBRAC15_tree = (CommonTree) adaptor
                                .create(OPENBRAC15);
                        adaptor.addChild(root_0, OPENBRAC15_tree);
                    }
                    pushFollow(FOLLOW_unaryExpression_in_postfixExpressionSuffix614);
                    unaryExpression16 = unaryExpression();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, unaryExpression16.getTree());
                    }
//                    CLOSEBRAC17 = (Token)
                            match(input, CLOSEBRAC,
                            FOLLOW_CLOSEBRAC_in_postfixExpressionSuffix616);
                    if (state.failed) {
                        return retval;
                    }

                }

            }
                break;
            case 2:
            // Grammar/CTFParser.g:278:5: reference
            {
                root_0 = (CommonTree) adaptor.nil();

                pushFollow(FOLLOW_reference_in_postfixExpressionSuffix624);
                reference18 = reference();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, reference18.getTree());
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("postfixExpressionSuffix");

            }
        }

        catch (RecognitionException e) {
            throw e;
        }
        return retval;
    }

