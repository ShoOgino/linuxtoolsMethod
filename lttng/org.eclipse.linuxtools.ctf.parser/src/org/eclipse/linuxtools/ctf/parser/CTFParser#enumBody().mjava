    // $ANTLR start "enumBody"
    // Grammar/CTFParser.g:685:1: enumBody : LCURL enumeratorList ( SEPARATOR
    // RCURL | RCURL ) -> ^( ENUM_BODY enumeratorList ) ;
    public final CTFParser.enumBody_return enumBody()
            throws RecognitionException {
        CTFParser.enumBody_return retval = new CTFParser.enumBody_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURL113 = null;
        Token SEPARATOR115 = null;
        Token RCURL116 = null;
        Token RCURL117 = null;
        CTFParser.enumeratorList_return enumeratorList114 = null;

        CommonTree LCURL113_tree = null;
        CommonTree SEPARATOR115_tree = null;
        CommonTree RCURL116_tree = null;
        CommonTree RCURL117_tree = null;
        RewriteRuleTokenStream stream_LCURL = new RewriteRuleTokenStream(
                adaptor, "token LCURL");
        RewriteRuleTokenStream stream_SEPARATOR = new RewriteRuleTokenStream(
                adaptor, "token SEPARATOR");
        RewriteRuleTokenStream stream_RCURL = new RewriteRuleTokenStream(
                adaptor, "token RCURL");
        RewriteRuleSubtreeStream stream_enumeratorList = new RewriteRuleSubtreeStream(
                adaptor, "rule enumeratorList");

        enter("enumBody");

        try {
            // Grammar/CTFParser.g:692:1: ( LCURL enumeratorList ( SEPARATOR
            // RCURL | RCURL ) -> ^( ENUM_BODY enumeratorList ) )
            // Grammar/CTFParser.g:693:3: LCURL enumeratorList ( SEPARATOR RCURL
            // | RCURL )
            {
                LCURL113 = (Token) match(input, LCURL,
                        FOLLOW_LCURL_in_enumBody2389);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_LCURL.add(LCURL113);
                }

                pushFollow(FOLLOW_enumeratorList_in_enumBody2391);
                enumeratorList114 = enumeratorList();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_enumeratorList.add(enumeratorList114.getTree());
                }
                // Grammar/CTFParser.g:693:24: ( SEPARATOR RCURL | RCURL )
                int alt35 = 2;
                int LA35_0 = input.LA(1);

                if ((LA35_0 == SEPARATOR)) {
                    alt35 = 1;
                } else if ((LA35_0 == RCURL)) {
                    alt35 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("",
                            35, 0, input);

                    throw nvae;
                }
                switch (alt35) {
                case 1:
                // Grammar/CTFParser.g:693:25: SEPARATOR RCURL
                {
                    SEPARATOR115 = (Token) match(input, SEPARATOR,
                            FOLLOW_SEPARATOR_in_enumBody2394);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_SEPARATOR.add(SEPARATOR115);
                    }

                    RCURL116 = (Token) match(input, RCURL,
                            FOLLOW_RCURL_in_enumBody2396);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_RCURL.add(RCURL116);
                    }

                }
                    break;
                case 2:
                // Grammar/CTFParser.g:693:43: RCURL
                {
                    RCURL117 = (Token) match(input, RCURL,
                            FOLLOW_RCURL_in_enumBody2400);
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_RCURL.add(RCURL117);
                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: enumeratorList
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 693:50: -> ^( ENUM_BODY enumeratorList )
                    {
                        // Grammar/CTFParser.g:693:53: ^( ENUM_BODY
                        // enumeratorList )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(ENUM_BODY, "ENUM_BODY"),
                                    root_1);

                            adaptor.addChild(root_1,
                                    stream_enumeratorList.nextTree());

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("enumBody");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

