    // $ANTLR start "variantName"
    // CTFParser.g:604:1: variantName : IDENTIFIER -> ^( VARIANT_NAME IDENTIFIER ) ;
    public final CTFParser.variantName_return variantName() throws RecognitionException {
        CTFParser.variantName_return retval = new CTFParser.variantName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENTIFIER97=null;

        CommonTree IDENTIFIER97_tree=null;
        RewriteRuleTokenStream stream_IDENTIFIER=new RewriteRuleTokenStream(adaptor,"token IDENTIFIER");


          enter("variantName");

        try {
            // CTFParser.g:612:1: ( IDENTIFIER -> ^( VARIANT_NAME IDENTIFIER ) )
            // CTFParser.g:613:3: IDENTIFIER
            {
            IDENTIFIER97=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_variantName2124); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_IDENTIFIER.add(IDENTIFIER97);
            }



            // AST REWRITE
            // elements: IDENTIFIER
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 613:14: -> ^( VARIANT_NAME IDENTIFIER )
            {
                // CTFParser.g:613:17: ^( VARIANT_NAME IDENTIFIER )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_NAME, "VARIANT_NAME"), root_1);

                adaptor.addChild(root_1, stream_IDENTIFIER.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print(input.toString(retval.start,input.LT(-1)));
                exit("variantName");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantName"

