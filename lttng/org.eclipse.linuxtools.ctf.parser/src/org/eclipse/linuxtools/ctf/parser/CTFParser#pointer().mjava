    // $ANTLR start "pointer"
    // Grammar/CTFParser.g:814:1: pointer : POINTER ( typeQualifierList )? -> ^( POINTER ( typeQualifierList )? ) ;
    public final CTFParser.pointer_return pointer() throws RecognitionException {
        CTFParser.pointer_return retval = new CTFParser.pointer_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token POINTER145=null;
        CTFParser.typeQualifierList_return typeQualifierList146 = null;


        CommonTree POINTER145_tree=null;
        RewriteRuleTokenStream stream_POINTER=new RewriteRuleTokenStream(adaptor,"token POINTER");
        RewriteRuleSubtreeStream stream_typeQualifierList=new RewriteRuleSubtreeStream(adaptor,"rule typeQualifierList");

          enter("pointer");

        try {
            // Grammar/CTFParser.g:822:1: ( POINTER ( typeQualifierList )? -> ^( POINTER ( typeQualifierList )? ) )
            // Grammar/CTFParser.g:823:3: POINTER ( typeQualifierList )?
            {
            POINTER145=(Token)match(input,POINTER,FOLLOW_POINTER_in_pointer2866); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_POINTER.add(POINTER145);

            // Grammar/CTFParser.g:823:11: ( typeQualifierList )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==CONSTTOK) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // Grammar/CTFParser.g:823:11: typeQualifierList
                    {
                    pushFollow(FOLLOW_typeQualifierList_in_pointer2868);
                    typeQualifierList146=typeQualifierList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_typeQualifierList.add(typeQualifierList146.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: typeQualifierList, POINTER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 823:30: -> ^( POINTER ( typeQualifierList )? )
            {
                // Grammar/CTFParser.g:823:33: ^( POINTER ( typeQualifierList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_POINTER.nextNode(), root_1);

                // Grammar/CTFParser.g:823:43: ( typeQualifierList )?
                if ( stream_typeQualifierList.hasNext() ) {
                    adaptor.addChild(root_1, stream_typeQualifierList.nextTree());

                }
                stream_typeQualifierList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print(input.toString(retval.start,input.LT(-1)));
                exit("pointer");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "pointer"

