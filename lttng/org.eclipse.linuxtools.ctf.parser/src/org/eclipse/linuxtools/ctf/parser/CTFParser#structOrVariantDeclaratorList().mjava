    // $ANTLR start "structOrVariantDeclaratorList"
    // CTFParser.g:548:1: structOrVariantDeclaratorList : structOrVariantDeclarator ( SEPARATOR structOrVariantDeclarator )* -> ^( TYPE_DECLARATOR_LIST ( structOrVariantDeclarator )+ ) ;
    public final CTFParser.structOrVariantDeclaratorList_return structOrVariantDeclaratorList() throws RecognitionException {
        CTFParser.structOrVariantDeclaratorList_return retval = new CTFParser.structOrVariantDeclaratorList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SEPARATOR84=null;
        CTFParser.structOrVariantDeclarator_return structOrVariantDeclarator83 = null;

        CTFParser.structOrVariantDeclarator_return structOrVariantDeclarator85 = null;


        CommonTree SEPARATOR84_tree=null;
        RewriteRuleTokenStream stream_SEPARATOR=new RewriteRuleTokenStream(adaptor,"token SEPARATOR");
        RewriteRuleSubtreeStream stream_structOrVariantDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule structOrVariantDeclarator");

          enter("structOrVariantDeclaratorList");

        try {
            // CTFParser.g:555:1: ( structOrVariantDeclarator ( SEPARATOR structOrVariantDeclarator )* -> ^( TYPE_DECLARATOR_LIST ( structOrVariantDeclarator )+ ) )
            // CTFParser.g:556:3: structOrVariantDeclarator ( SEPARATOR structOrVariantDeclarator )*
            {
            pushFollow(FOLLOW_structOrVariantDeclarator_in_structOrVariantDeclaratorList1816);
            structOrVariantDeclarator83=structOrVariantDeclarator();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_structOrVariantDeclarator.add(structOrVariantDeclarator83.getTree());
            }
            // CTFParser.g:556:29: ( SEPARATOR structOrVariantDeclarator )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==SEPARATOR) ) {
                    alt27=1;
                }


                switch (alt27) {
            	case 1 :
            	    // CTFParser.g:556:30: SEPARATOR structOrVariantDeclarator
            	    {
            	    SEPARATOR84=(Token)match(input,SEPARATOR,FOLLOW_SEPARATOR_in_structOrVariantDeclaratorList1819); if (state.failed) {
                        return retval;
                    }
            	    if ( state.backtracking==0 ) {
                        stream_SEPARATOR.add(SEPARATOR84);
                    }

            	    pushFollow(FOLLOW_structOrVariantDeclarator_in_structOrVariantDeclaratorList1821);
            	    structOrVariantDeclarator85=structOrVariantDeclarator();

            	    state._fsp--;
            	    if (state.failed) {
                        return retval;
                    }
            	    if ( state.backtracking==0 ) {
                        stream_structOrVariantDeclarator.add(structOrVariantDeclarator85.getTree());
                    }

            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);



            // AST REWRITE
            // elements: structOrVariantDeclarator
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 556:68: -> ^( TYPE_DECLARATOR_LIST ( structOrVariantDeclarator )+ )
            {
                // CTFParser.g:556:71: ^( TYPE_DECLARATOR_LIST ( structOrVariantDeclarator )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATOR_LIST, "TYPE_DECLARATOR_LIST"), root_1);

                if ( !(stream_structOrVariantDeclarator.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_structOrVariantDeclarator.hasNext() ) {
                    adaptor.addChild(root_1, stream_structOrVariantDeclarator.nextTree());

                }
                stream_structOrVariantDeclarator.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("structOrVariantDeclaratorList");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "structOrVariantDeclaratorList"

