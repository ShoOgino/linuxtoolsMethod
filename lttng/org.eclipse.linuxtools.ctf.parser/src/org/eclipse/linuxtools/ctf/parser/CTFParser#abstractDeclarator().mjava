    // $ANTLR start "abstractDeclarator"
    // CTFParser.g:781:1: abstractDeclarator : ( ( ( pointer )+ ( directAbstractDeclarator )? ) -> ^( TYPE_DECLARATOR ( pointer )+ ( directAbstractDeclarator )? ) | directAbstractDeclarator -> ^( TYPE_DECLARATOR directAbstractDeclarator ) );
    public final CTFParser.abstractDeclarator_return abstractDeclarator() throws RecognitionException {
        CTFParser.abstractDeclarator_return retval = new CTFParser.abstractDeclarator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.pointer_return pointer135 = null;

        CTFParser.directAbstractDeclarator_return directAbstractDeclarator136 = null;

        CTFParser.directAbstractDeclarator_return directAbstractDeclarator137 = null;


        RewriteRuleSubtreeStream stream_pointer=new RewriteRuleSubtreeStream(adaptor,"rule pointer");
        RewriteRuleSubtreeStream stream_directAbstractDeclarator=new RewriteRuleSubtreeStream(adaptor,"rule directAbstractDeclarator");

          enter("abstractDeclarator");

        try {
            // CTFParser.g:788:1: ( ( ( pointer )+ ( directAbstractDeclarator )? ) -> ^( TYPE_DECLARATOR ( pointer )+ ( directAbstractDeclarator )? ) | directAbstractDeclarator -> ^( TYPE_DECLARATOR directAbstractDeclarator ) )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==POINTER) ) {
                alt43=1;
            }
            else if ( (LA43_0==LPAREN||LA43_0==IDENTIFIER) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // CTFParser.g:789:5: ( ( pointer )+ ( directAbstractDeclarator )? )
                    {
                    // CTFParser.g:789:5: ( ( pointer )+ ( directAbstractDeclarator )? )
                    // CTFParser.g:789:6: ( pointer )+ ( directAbstractDeclarator )?
                    {
                    // CTFParser.g:789:6: ( pointer )+
                    int cnt41=0;
                    loop41:
                    do {
                        int alt41=2;
                        int LA41_0 = input.LA(1);

                        if ( (LA41_0==POINTER) ) {
                            alt41=1;
                        }


                        switch (alt41) {
                    	case 1 :
                    	    // CTFParser.g:789:6: pointer
                    	    {
                    	    pushFollow(FOLLOW_pointer_in_abstractDeclarator2746);
                    	    pointer135=pointer();

                    	    state._fsp--;
                    	    if (state.failed) {
                                return retval;
                            }
                    	    if ( state.backtracking==0 ) {
                                stream_pointer.add(pointer135.getTree());
                            }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt41 >= 1 ) {
                                break loop41;
                            }
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(41, input);
                                throw eee;
                        }
                        cnt41++;
                    } while (true);

                    // CTFParser.g:789:15: ( directAbstractDeclarator )?
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==LPAREN||LA42_0==IDENTIFIER) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            // CTFParser.g:789:15: directAbstractDeclarator
                            {
                            pushFollow(FOLLOW_directAbstractDeclarator_in_abstractDeclarator2749);
                            directAbstractDeclarator136=directAbstractDeclarator();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if ( state.backtracking==0 ) {
                                stream_directAbstractDeclarator.add(directAbstractDeclarator136.getTree());
                            }

                            }
                            break;

                    }


                    }



                    // AST REWRITE
                    // elements: pointer, directAbstractDeclarator
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 789:42: -> ^( TYPE_DECLARATOR ( pointer )+ ( directAbstractDeclarator )? )
                    {
                        // CTFParser.g:789:45: ^( TYPE_DECLARATOR ( pointer )+ ( directAbstractDeclarator )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATOR, "TYPE_DECLARATOR"), root_1);

                        if ( !(stream_pointer.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_pointer.hasNext() ) {
                            adaptor.addChild(root_1, stream_pointer.nextTree());

                        }
                        stream_pointer.reset();
                        // CTFParser.g:789:72: ( directAbstractDeclarator )?
                        if ( stream_directAbstractDeclarator.hasNext() ) {
                            adaptor.addChild(root_1, stream_directAbstractDeclarator.nextTree());

                        }
                        stream_directAbstractDeclarator.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // CTFParser.g:790:5: directAbstractDeclarator
                    {
                    pushFollow(FOLLOW_directAbstractDeclarator_in_abstractDeclarator2769);
                    directAbstractDeclarator137=directAbstractDeclarator();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_directAbstractDeclarator.add(directAbstractDeclarator137.getTree());
                    }


                    // AST REWRITE
                    // elements: directAbstractDeclarator
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 790:30: -> ^( TYPE_DECLARATOR directAbstractDeclarator )
                    {
                        // CTFParser.g:790:33: ^( TYPE_DECLARATOR directAbstractDeclarator )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPE_DECLARATOR, "TYPE_DECLARATOR"), root_1);

                        adaptor.addChild(root_1, stream_directAbstractDeclarator.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("abstractDeclarator");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "abstractDeclarator"

