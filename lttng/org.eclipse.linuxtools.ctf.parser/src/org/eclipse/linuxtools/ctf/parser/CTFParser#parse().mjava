    // $ANTLR start "parse"
    // Grammar/CTFParser.g:198:1: parse : ( declaration )+ EOF -> ^( ROOT (
    // declaration )+ ) ;
    public final CTFParser.parse_return parse() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CTFParser.parse_return retval = new CTFParser.parse_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF2 = null;
        CTFParser.declaration_return declaration1 = null;

        CommonTree EOF2_tree = null;
        RewriteRuleTokenStream stream_EOF = new RewriteRuleTokenStream(adaptor,
                "token EOF");
        RewriteRuleSubtreeStream stream_declaration = new RewriteRuleSubtreeStream(
                adaptor, "rule declaration");

        enter("parse");
        debug_print("Scope push " + Symbols_stack.size());
        ((Symbols_scope) Symbols_stack.peek()).types = new HashSet<String>();

        try {
            // Grammar/CTFParser.g:211:1: ( ( declaration )+ EOF -> ^( ROOT (
            // declaration )+ ) )
            // Grammar/CTFParser.g:212:3: ( declaration )+ EOF
            {
                // Grammar/CTFParser.g:212:3: ( declaration )+
                int cnt1 = 0;
                loop1: do {
                    int alt1 = 2;
                    int LA1_0 = input.LA(1);

                    if ((((LA1_0 >= CONSTTOK) && (LA1_0 <= ENUMTOK))
                            || ((LA1_0 >= FLOATINGPOINTTOK) && (LA1_0 <= SIGNEDTOK))
                            || ((LA1_0 >= STRINGTOK) && (LA1_0 <= STRUCTTOK)) || ((LA1_0 >= TYPEDEFTOK) && (LA1_0 <= IMAGINARYTOK)))) {
                        alt1 = 1;
                    } else if ((LA1_0 == IDENTIFIER)
                            && ((inTypealiasAlias() || isTypeName(input.LT(1)
                                    .getText())))) {
                        alt1 = 1;
                    } else if (((LA1_0 == EVENTTOK) || (LA1_0 == STREAMTOK)
                            || ((LA1_0 >= TRACETOK) && (LA1_0 <= TYPEALIASTOK)) || ((LA1_0 >= ENVTOK) && (LA1_0 <= CLOCKTOK)))) {
                        alt1 = 1;
                    }

                    switch (alt1) {
                    case 1:
                    // Grammar/CTFParser.g:212:3: declaration
                    {
                        pushFollow(FOLLOW_declaration_in_parse321);
                        declaration1 = declaration();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_declaration.add(declaration1.getTree());
                        }

                    }
                        break;

                    default:
                        if (cnt1 >= 1) {
                            break loop1;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(1,
                                input);
                        throw eee;
                    }
                    cnt1++;
                } while (true);

                EOF2 = (Token) match(input, EOF, FOLLOW_EOF_in_parse324);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EOF.add(EOF2);
                }

                // AST REWRITE
                // elements: declaration
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 212:20: -> ^( ROOT ( declaration )+ )
                    {
                        // Grammar/CTFParser.g:212:23: ^( ROOT ( declaration )+
                        // )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(ROOT, "ROOT"), root_1);

                            if (!(stream_declaration.hasNext())) {
                                throw new RewriteEarlyExitException();
                            }
                            while (stream_declaration.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_declaration.nextTree());

                            }
                            stream_declaration.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print("Scope pop " + Symbols_stack.size());
                exit("parse");

                debug_print("Final depth, should be 0: " + depth);

            }
        }

        catch (RecognitionException e) {
            throw e;
        } finally {
            Symbols_stack.pop();

        }
        return retval;
    }

