    // $ANTLR start "ctfSpecifierHead"
    // CTFParser.g:928:1: ctfSpecifierHead : ( EVENTTOK -> EVENT | STREAMTOK -> STREAM | TRACETOK -> TRACE | ENVTOK -> ENV | CLOCKTOK -> CLOCK | CALLSITETOK -> CALLSITE );
    public final CTFParser.ctfSpecifierHead_return ctfSpecifierHead() throws RecognitionException {
        CTFParser.ctfSpecifierHead_return retval = new CTFParser.ctfSpecifierHead_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EVENTTOK162=null;
        Token STREAMTOK163=null;
        Token TRACETOK164=null;
        Token ENVTOK165=null;
        Token CLOCKTOK166=null;
        Token CALLSITETOK167=null;

        CommonTree EVENTTOK162_tree=null;
        CommonTree STREAMTOK163_tree=null;
        CommonTree TRACETOK164_tree=null;
        CommonTree ENVTOK165_tree=null;
        CommonTree CLOCKTOK166_tree=null;
        CommonTree CALLSITETOK167_tree=null;
        RewriteRuleTokenStream stream_EVENTTOK=new RewriteRuleTokenStream(adaptor,"token EVENTTOK");
        RewriteRuleTokenStream stream_CALLSITETOK=new RewriteRuleTokenStream(adaptor,"token CALLSITETOK");
        RewriteRuleTokenStream stream_STREAMTOK=new RewriteRuleTokenStream(adaptor,"token STREAMTOK");
        RewriteRuleTokenStream stream_ENVTOK=new RewriteRuleTokenStream(adaptor,"token ENVTOK");
        RewriteRuleTokenStream stream_CLOCKTOK=new RewriteRuleTokenStream(adaptor,"token CLOCKTOK");
        RewriteRuleTokenStream stream_TRACETOK=new RewriteRuleTokenStream(adaptor,"token TRACETOK");


          enter("ctfSpecifierHead");

        try {
            // CTFParser.g:936:1: ( EVENTTOK -> EVENT | STREAMTOK -> STREAM | TRACETOK -> TRACE | ENVTOK -> ENV | CLOCKTOK -> CLOCK | CALLSITETOK -> CALLSITE )
            int alt53=6;
            switch ( input.LA(1) ) {
            case EVENTTOK:
                {
                alt53=1;
                }
                break;
            case STREAMTOK:
                {
                alt53=2;
                }
                break;
            case TRACETOK:
                {
                alt53=3;
                }
                break;
            case ENVTOK:
                {
                alt53=4;
                }
                break;
            case CLOCKTOK:
                {
                alt53=5;
                }
                break;
            case CALLSITETOK:
                {
                alt53=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // CTFParser.g:937:4: EVENTTOK
                    {
                    EVENTTOK162=(Token)match(input,EVENTTOK,FOLLOW_EVENTTOK_in_ctfSpecifierHead3180); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_EVENTTOK.add(EVENTTOK162);
                    }



                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 937:13: -> EVENT
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(EVENT, "EVENT"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // CTFParser.g:938:4: STREAMTOK
                    {
                    STREAMTOK163=(Token)match(input,STREAMTOK,FOLLOW_STREAMTOK_in_ctfSpecifierHead3189); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_STREAMTOK.add(STREAMTOK163);
                    }



                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 938:14: -> STREAM
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(STREAM, "STREAM"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // CTFParser.g:939:4: TRACETOK
                    {
                    TRACETOK164=(Token)match(input,TRACETOK,FOLLOW_TRACETOK_in_ctfSpecifierHead3198); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_TRACETOK.add(TRACETOK164);
                    }



                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 939:13: -> TRACE
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(TRACE, "TRACE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // CTFParser.g:940:4: ENVTOK
                    {
                    ENVTOK165=(Token)match(input,ENVTOK,FOLLOW_ENVTOK_in_ctfSpecifierHead3207); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ENVTOK.add(ENVTOK165);
                    }



                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 940:11: -> ENV
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(ENV, "ENV"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // CTFParser.g:941:4: CLOCKTOK
                    {
                    CLOCKTOK166=(Token)match(input,CLOCKTOK,FOLLOW_CLOCKTOK_in_ctfSpecifierHead3216); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_CLOCKTOK.add(CLOCKTOK166);
                    }



                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 941:13: -> CLOCK
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(CLOCK, "CLOCK"));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 6 :
                    // CTFParser.g:942:4: CALLSITETOK
                    {
                    CALLSITETOK167=(Token)match(input,CALLSITETOK,FOLLOW_CALLSITETOK_in_ctfSpecifierHead3225); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_CALLSITETOK.add(CALLSITETOK167);
                    }



                    // AST REWRITE
                    // elements:
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 942:16: -> CALLSITE
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(CALLSITE, "CALLSITE"));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print(input.toString(retval.start,input.LT(-1)));
                exit("ctfSpecifierHead");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "ctfSpecifierHead"

