    // $ANTLR start "ctfSpecifierHead"
    // Grammar/CTFParser.g:927:1: ctfSpecifierHead : ( EVENTTOK -> EVENT |
    // STREAMTOK -> STREAM | TRACETOK -> TRACE | ENVTOK -> ENV | CLOCKTOK ->
    // CLOCK );
    public final CTFParser.ctfSpecifierHead_return ctfSpecifierHead()
            throws RecognitionException {
        CTFParser.ctfSpecifierHead_return retval = new CTFParser.ctfSpecifierHead_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EVENTTOK162 = null;
        Token STREAMTOK163 = null;
        Token TRACETOK164 = null;
        Token ENVTOK165 = null;
        Token CLOCKTOK166 = null;

        CommonTree EVENTTOK162_tree = null;
        CommonTree STREAMTOK163_tree = null;
        CommonTree TRACETOK164_tree = null;
        CommonTree ENVTOK165_tree = null;
        CommonTree CLOCKTOK166_tree = null;
        RewriteRuleTokenStream stream_EVENTTOK = new RewriteRuleTokenStream(
                adaptor, "token EVENTTOK");
        RewriteRuleTokenStream stream_STREAMTOK = new RewriteRuleTokenStream(
                adaptor, "token STREAMTOK");
        RewriteRuleTokenStream stream_ENVTOK = new RewriteRuleTokenStream(
                adaptor, "token ENVTOK");
        RewriteRuleTokenStream stream_CLOCKTOK = new RewriteRuleTokenStream(
                adaptor, "token CLOCKTOK");
        RewriteRuleTokenStream stream_TRACETOK = new RewriteRuleTokenStream(
                adaptor, "token TRACETOK");

        enter("ctfSpecifierHead");

        try {
            // Grammar/CTFParser.g:935:1: ( EVENTTOK -> EVENT | STREAMTOK ->
            // STREAM | TRACETOK -> TRACE | ENVTOK -> ENV | CLOCKTOK -> CLOCK )
            int alt53 = 5;
            switch (input.LA(1)) {
            case EVENTTOK: {
                alt53 = 1;
            }
                break;
            case STREAMTOK: {
                alt53 = 2;
            }
                break;
            case TRACETOK: {
                alt53 = 3;
            }
                break;
            case ENVTOK: {
                alt53 = 4;
            }
                break;
            case CLOCKTOK: {
                alt53 = 5;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 53, 0,
                        input);

                throw nvae;
            }

            switch (alt53) {
            case 1:
            // Grammar/CTFParser.g:936:4: EVENTTOK
            {
                EVENTTOK162 = (Token) match(input, EVENTTOK,
                        FOLLOW_EVENTTOK_in_ctfSpecifierHead3176);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_EVENTTOK.add(EVENTTOK162);
                }

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 936:13: -> EVENT
                    {
                        adaptor.addChild(root_0, adaptor.create(EVENT, "EVENT"));

                    }

                    retval.tree = root_0;
                }
            }
                break;
            case 2:
            // Grammar/CTFParser.g:937:4: STREAMTOK
            {
                STREAMTOK163 = (Token) match(input, STREAMTOK,
                        FOLLOW_STREAMTOK_in_ctfSpecifierHead3185);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_STREAMTOK.add(STREAMTOK163);
                }

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 937:14: -> STREAM
                    {
                        adaptor.addChild(root_0,
                                adaptor.create(STREAM, "STREAM"));

                    }

                    retval.tree = root_0;
                }
            }
                break;
            case 3:
            // Grammar/CTFParser.g:938:4: TRACETOK
            {
                TRACETOK164 = (Token) match(input, TRACETOK,
                        FOLLOW_TRACETOK_in_ctfSpecifierHead3194);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_TRACETOK.add(TRACETOK164);
                }

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 938:13: -> TRACE
                    {
                        adaptor.addChild(root_0, adaptor.create(TRACE, "TRACE"));

                    }

                    retval.tree = root_0;
                }
            }
                break;
            case 4:
            // Grammar/CTFParser.g:939:4: ENVTOK
            {
                ENVTOK165 = (Token) match(input, ENVTOK,
                        FOLLOW_ENVTOK_in_ctfSpecifierHead3203);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_ENVTOK.add(ENVTOK165);
                }

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 939:11: -> ENV
                    {
                        adaptor.addChild(root_0, adaptor.create(ENV, "ENV"));

                    }

                    retval.tree = root_0;
                }
            }
                break;
            case 5:
            // Grammar/CTFParser.g:940:4: CLOCKTOK
            {
                CLOCKTOK166 = (Token) match(input, CLOCKTOK,
                        FOLLOW_CLOCKTOK_in_ctfSpecifierHead3212);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_CLOCKTOK.add(CLOCKTOK166);
                }

                // AST REWRITE
                // elements:
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 940:13: -> CLOCK
                    {
                        adaptor.addChild(root_0, adaptor.create(CLOCK, "CLOCK"));

                    }

                    retval.tree = root_0;
                }
            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print(input.toString(retval.start, input.LT(-1)));
                exit("ctfSpecifierHead");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

