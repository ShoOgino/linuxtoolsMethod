    // $ANTLR start "ctfSpecifier"
    // CTFParser.g:913:1: ctfSpecifier : ( ctfSpecifierHead ctfBody -> ^( ctfSpecifierHead ctfBody ) | typealiasDecl -> ^( DECLARATION typealiasDecl ) );
    public final CTFParser.ctfSpecifier_return ctfSpecifier() throws RecognitionException {
        CTFParser.ctfSpecifier_return retval = new CTFParser.ctfSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.ctfSpecifierHead_return ctfSpecifierHead159 = null;

        CTFParser.ctfBody_return ctfBody160 = null;

        CTFParser.typealiasDecl_return typealiasDecl161 = null;


        RewriteRuleSubtreeStream stream_ctfSpecifierHead=new RewriteRuleSubtreeStream(adaptor,"rule ctfSpecifierHead");
        RewriteRuleSubtreeStream stream_typealiasDecl=new RewriteRuleSubtreeStream(adaptor,"rule typealiasDecl");
        RewriteRuleSubtreeStream stream_ctfBody=new RewriteRuleSubtreeStream(adaptor,"rule ctfBody");

          enter("ctfSpecifier");

        try {
            // CTFParser.g:920:3: ( ctfSpecifierHead ctfBody -> ^( ctfSpecifierHead ctfBody ) | typealiasDecl -> ^( DECLARATION typealiasDecl ) )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==EVENTTOK||LA52_0==STREAMTOK||LA52_0==TRACETOK||(LA52_0>=ENVTOK && LA52_0<=CALLSITETOK)) ) {
                alt52=1;
            }
            else if ( (LA52_0==TYPEALIASTOK) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // CTFParser.g:922:3: ctfSpecifierHead ctfBody
                    {
                    pushFollow(FOLLOW_ctfSpecifierHead_in_ctfSpecifier3127);
                    ctfSpecifierHead159=ctfSpecifierHead();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ctfSpecifierHead.add(ctfSpecifierHead159.getTree());
                    }
                    pushFollow(FOLLOW_ctfBody_in_ctfSpecifier3129);
                    ctfBody160=ctfBody();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ctfBody.add(ctfBody160.getTree());
                    }


                    // AST REWRITE
                    // elements: ctfSpecifierHead, ctfBody
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 922:28: -> ^( ctfSpecifierHead ctfBody )
                    {
                        // CTFParser.g:922:31: ^( ctfSpecifierHead ctfBody )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(stream_ctfSpecifierHead.nextNode(), root_1);

                        adaptor.addChild(root_1, stream_ctfBody.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // CTFParser.g:925:3: typealiasDecl
                    {
                    pushFollow(FOLLOW_typealiasDecl_in_ctfSpecifier3148);
                    typealiasDecl161=typealiasDecl();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_typealiasDecl.add(typealiasDecl161.getTree());
                    }


                    // AST REWRITE
                    // elements: typealiasDecl
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 925:17: -> ^( DECLARATION typealiasDecl )
                    {
                        // CTFParser.g:925:20: ^( DECLARATION typealiasDecl )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DECLARATION, "DECLARATION"), root_1);

                        adaptor.addChild(root_1, stream_typealiasDecl.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("ctfSpecifier");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "ctfSpecifier"

