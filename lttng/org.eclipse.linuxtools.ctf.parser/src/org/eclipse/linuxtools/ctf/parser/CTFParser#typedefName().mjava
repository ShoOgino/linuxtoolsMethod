    // $ANTLR start "typedefName"
    // CTFParser.g:831:1: typedefName : {...}? IDENTIFIER ;
    public final CTFParser.typedefName_return typedefName() throws RecognitionException {
        CTFParser.typedefName_return retval = new CTFParser.typedefName_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENTIFIER148=null;

        CommonTree IDENTIFIER148_tree=null;


          enter("typedefName");

        try {
            // CTFParser.g:839:1: ({...}? IDENTIFIER )
            // CTFParser.g:840:3: {...}? IDENTIFIER
            {
            root_0 = (CommonTree)adaptor.nil();

            if ( !((inTypealiasAlias() || isTypeName(input.LT(1).getText()))) ) {
                if (state.backtracking>0) {state.failed=true; return retval;}
                throw new FailedPredicateException(input, "typedefName", "inTypealiasAlias() || isTypeName(input.LT(1).getText())");
            }
            IDENTIFIER148=(Token)match(input,IDENTIFIER,FOLLOW_IDENTIFIER_in_typedefName2921); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
            IDENTIFIER148_tree = (CommonTree)adaptor.create(IDENTIFIER148);
            adaptor.addChild(root_0, IDENTIFIER148_tree);
            }
            if ( state.backtracking==0 ) {
               if ((inTypedef() || inTypealiasAlias()) && !isTypeName((IDENTIFIER148!=null?IDENTIFIER148.getText():null))) { addTypeName((IDENTIFIER148!=null?IDENTIFIER148.getText():null)); }
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

               debug_print("typedefName: " + input.toString(retval.start,input.LT(-1)));
               exit("typedefName");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "typedefName"

