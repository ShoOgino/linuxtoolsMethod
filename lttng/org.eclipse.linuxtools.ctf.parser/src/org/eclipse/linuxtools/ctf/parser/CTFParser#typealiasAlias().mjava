    // $ANTLR start "typealiasAlias"
    // CTFParser.g:860:1: typealiasAlias : ( abstractDeclaratorList | ( declarationSpecifiers ( abstractDeclaratorList )? ) ) ;
    public final CTFParser.typealiasAlias_return typealiasAlias() throws RecognitionException {
        CTFParser.typealiasAlias_return retval = new CTFParser.typealiasAlias_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.abstractDeclaratorList_return abstractDeclaratorList151 = null;

        CTFParser.declarationSpecifiers_return declarationSpecifiers152 = null;

        CTFParser.abstractDeclaratorList_return abstractDeclaratorList153 = null;




          enter("typealiasAlias");
          typealiasAliasOn();

        try {
            // CTFParser.g:875:1: ( ( abstractDeclaratorList | ( declarationSpecifiers ( abstractDeclaratorList )? ) ) )
            // CTFParser.g:876:3: ( abstractDeclaratorList | ( declarationSpecifiers ( abstractDeclaratorList )? ) )
            {
            root_0 = (CommonTree)adaptor.nil();

            // CTFParser.g:876:3: ( abstractDeclaratorList | ( declarationSpecifiers ( abstractDeclaratorList )? ) )
            int alt51=2;
            switch ( input.LA(1) ) {
            case LPAREN:
            case POINTER:
                {
                alt51=1;
                }
                break;
            case IDENTIFIER:
                {
                int LA51_2 = input.LA(2);

                if ( (!(((inTypealiasAlias() || isTypeName(input.LT(1).getText()))))) ) {
                    alt51=1;
                }
                else if ( ((inTypealiasAlias() || isTypeName(input.LT(1).getText()))) ) {
                    alt51=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 51, 2, input);

                    throw nvae;
                }
                }
                break;
            case CONSTTOK:
            case CHARTOK:
            case DOUBLETOK:
            case ENUMTOK:
            case FLOATINGPOINTTOK:
            case FLOATTOK:
            case INTEGERTOK:
            case INTTOK:
            case LONGTOK:
            case SHORTTOK:
            case SIGNEDTOK:
            case STRINGTOK:
            case STRUCTTOK:
            case TYPEDEFTOK:
            case UNSIGNEDTOK:
            case VARIANTTOK:
            case VOIDTOK:
            case BOOLTOK:
            case COMPLEXTOK:
            case IMAGINARYTOK:
                {
                alt51=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 51, 0, input);

                throw nvae;
            }

            switch (alt51) {
                case 1 :
                    // CTFParser.g:877:3: abstractDeclaratorList
                    {
                    pushFollow(FOLLOW_abstractDeclaratorList_in_typealiasAlias2984);
                    abstractDeclaratorList151=abstractDeclaratorList();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        adaptor.addChild(root_0, abstractDeclaratorList151.getTree());
                    }

                    }
                    break;
                case 2 :
                    // CTFParser.g:879:3: ( declarationSpecifiers ( abstractDeclaratorList )? )
                    {
                    // CTFParser.g:879:3: ( declarationSpecifiers ( abstractDeclaratorList )? )
                    // CTFParser.g:879:4: declarationSpecifiers ( abstractDeclaratorList )?
                    {
                    pushFollow(FOLLOW_declarationSpecifiers_in_typealiasAlias2993);
                    declarationSpecifiers152=declarationSpecifiers();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        adaptor.addChild(root_0, declarationSpecifiers152.getTree());
                    }
                    // CTFParser.g:879:26: ( abstractDeclaratorList )?
                    int alt50=2;
                    int LA50_0 = input.LA(1);

                    if ( (LA50_0==LPAREN||LA50_0==POINTER||LA50_0==IDENTIFIER) ) {
                        alt50=1;
                    }
                    switch (alt50) {
                        case 1 :
                            // CTFParser.g:879:26: abstractDeclaratorList
                            {
                            pushFollow(FOLLOW_abstractDeclaratorList_in_typealiasAlias2995);
                            abstractDeclaratorList153=abstractDeclaratorList();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if ( state.backtracking==0 ) {
                                adaptor.addChild(root_0, abstractDeclaratorList153.getTree());
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("typealiasAlias");
                typealiasAliasOff();

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "typealiasAlias"

