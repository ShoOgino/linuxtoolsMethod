    // $ANTLR start "typeSpecifier"
    // Grammar/CTFParser.g:384:1: typeSpecifier : ( FLOATTOK | INTTOK | LONGTOK
    // | SHORTTOK | SIGNEDTOK | UNSIGNEDTOK | CHARTOK | DOUBLETOK | VOIDTOK |
    // BOOLTOK | COMPLEXTOK | IMAGINARYTOK | structSpecifier | variantSpecifier
    // | enumSpecifier | ctfTypeSpecifier | {...}? => typedefName );
    public final CTFParser.typeSpecifier_return typeSpecifier()
            throws RecognitionException {
        CTFParser.typeSpecifier_return retval = new CTFParser.typeSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FLOATTOK42 = null;
        Token INTTOK43 = null;
        Token LONGTOK44 = null;
        Token SHORTTOK45 = null;
        Token SIGNEDTOK46 = null;
        Token UNSIGNEDTOK47 = null;
        Token CHARTOK48 = null;
        Token DOUBLETOK49 = null;
        Token VOIDTOK50 = null;
        Token BOOLTOK51 = null;
        Token COMPLEXTOK52 = null;
        Token IMAGINARYTOK53 = null;
        CTFParser.structSpecifier_return structSpecifier54 = null;

        CTFParser.variantSpecifier_return variantSpecifier55 = null;

        CTFParser.enumSpecifier_return enumSpecifier56 = null;

        CTFParser.ctfTypeSpecifier_return ctfTypeSpecifier57 = null;

        CTFParser.typedefName_return typedefName58 = null;

        CommonTree FLOATTOK42_tree = null;
        CommonTree INTTOK43_tree = null;
        CommonTree LONGTOK44_tree = null;
        CommonTree SHORTTOK45_tree = null;
        CommonTree SIGNEDTOK46_tree = null;
        CommonTree UNSIGNEDTOK47_tree = null;
        CommonTree CHARTOK48_tree = null;
        CommonTree DOUBLETOK49_tree = null;
        CommonTree VOIDTOK50_tree = null;
        CommonTree BOOLTOK51_tree = null;
        CommonTree COMPLEXTOK52_tree = null;
        CommonTree IMAGINARYTOK53_tree = null;

        enter("typeSpecifier");

        try {
            // Grammar/CTFParser.g:392:1: ( FLOATTOK | INTTOK | LONGTOK |
            // SHORTTOK | SIGNEDTOK | UNSIGNEDTOK | CHARTOK | DOUBLETOK |
            // VOIDTOK | BOOLTOK | COMPLEXTOK | IMAGINARYTOK | structSpecifier |
            // variantSpecifier | enumSpecifier | ctfTypeSpecifier | {...}? =>
            // typedefName )
            int alt17 = 17;
            alt17 = dfa17.predict(input);
            switch (alt17) {
            case 1:
            // Grammar/CTFParser.g:393:3: FLOATTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                FLOATTOK42 = (Token) match(input, FLOATTOK,
                        FOLLOW_FLOATTOK_in_typeSpecifier1040);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    FLOATTOK42_tree = (CommonTree) adaptor.create(FLOATTOK42);
                    adaptor.addChild(root_0, FLOATTOK42_tree);
                }

            }
                break;
            case 2:
            // Grammar/CTFParser.g:394:5: INTTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                INTTOK43 = (Token) match(input, INTTOK,
                        FOLLOW_INTTOK_in_typeSpecifier1046);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    INTTOK43_tree = (CommonTree) adaptor.create(INTTOK43);
                    adaptor.addChild(root_0, INTTOK43_tree);
                }

            }
                break;
            case 3:
            // Grammar/CTFParser.g:395:5: LONGTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                LONGTOK44 = (Token) match(input, LONGTOK,
                        FOLLOW_LONGTOK_in_typeSpecifier1052);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    LONGTOK44_tree = (CommonTree) adaptor.create(LONGTOK44);
                    adaptor.addChild(root_0, LONGTOK44_tree);
                }

            }
                break;
            case 4:
            // Grammar/CTFParser.g:396:5: SHORTTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                SHORTTOK45 = (Token) match(input, SHORTTOK,
                        FOLLOW_SHORTTOK_in_typeSpecifier1058);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SHORTTOK45_tree = (CommonTree) adaptor.create(SHORTTOK45);
                    adaptor.addChild(root_0, SHORTTOK45_tree);
                }

            }
                break;
            case 5:
            // Grammar/CTFParser.g:397:5: SIGNEDTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                SIGNEDTOK46 = (Token) match(input, SIGNEDTOK,
                        FOLLOW_SIGNEDTOK_in_typeSpecifier1064);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    SIGNEDTOK46_tree = (CommonTree) adaptor.create(SIGNEDTOK46);
                    adaptor.addChild(root_0, SIGNEDTOK46_tree);
                }

            }
                break;
            case 6:
            // Grammar/CTFParser.g:398:5: UNSIGNEDTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                UNSIGNEDTOK47 = (Token) match(input, UNSIGNEDTOK,
                        FOLLOW_UNSIGNEDTOK_in_typeSpecifier1070);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    UNSIGNEDTOK47_tree = (CommonTree) adaptor
                            .create(UNSIGNEDTOK47);
                    adaptor.addChild(root_0, UNSIGNEDTOK47_tree);
                }

            }
                break;
            case 7:
            // Grammar/CTFParser.g:399:5: CHARTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                CHARTOK48 = (Token) match(input, CHARTOK,
                        FOLLOW_CHARTOK_in_typeSpecifier1076);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    CHARTOK48_tree = (CommonTree) adaptor.create(CHARTOK48);
                    adaptor.addChild(root_0, CHARTOK48_tree);
                }

            }
                break;
            case 8:
            // Grammar/CTFParser.g:400:5: DOUBLETOK
            {
                root_0 = (CommonTree) adaptor.nil();

                DOUBLETOK49 = (Token) match(input, DOUBLETOK,
                        FOLLOW_DOUBLETOK_in_typeSpecifier1082);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    DOUBLETOK49_tree = (CommonTree) adaptor.create(DOUBLETOK49);
                    adaptor.addChild(root_0, DOUBLETOK49_tree);
                }

            }
                break;
            case 9:
            // Grammar/CTFParser.g:401:5: VOIDTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                VOIDTOK50 = (Token) match(input, VOIDTOK,
                        FOLLOW_VOIDTOK_in_typeSpecifier1088);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    VOIDTOK50_tree = (CommonTree) adaptor.create(VOIDTOK50);
                    adaptor.addChild(root_0, VOIDTOK50_tree);
                }

            }
                break;
            case 10:
            // Grammar/CTFParser.g:402:5: BOOLTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                BOOLTOK51 = (Token) match(input, BOOLTOK,
                        FOLLOW_BOOLTOK_in_typeSpecifier1094);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    BOOLTOK51_tree = (CommonTree) adaptor.create(BOOLTOK51);
                    adaptor.addChild(root_0, BOOLTOK51_tree);
                }

            }
                break;
            case 11:
            // Grammar/CTFParser.g:403:5: COMPLEXTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                COMPLEXTOK52 = (Token) match(input, COMPLEXTOK,
                        FOLLOW_COMPLEXTOK_in_typeSpecifier1100);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    COMPLEXTOK52_tree = (CommonTree) adaptor
                            .create(COMPLEXTOK52);
                    adaptor.addChild(root_0, COMPLEXTOK52_tree);
                }

            }
                break;
            case 12:
            // Grammar/CTFParser.g:404:5: IMAGINARYTOK
            {
                root_0 = (CommonTree) adaptor.nil();

                IMAGINARYTOK53 = (Token) match(input, IMAGINARYTOK,
                        FOLLOW_IMAGINARYTOK_in_typeSpecifier1106);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    IMAGINARYTOK53_tree = (CommonTree) adaptor
                            .create(IMAGINARYTOK53);
                    adaptor.addChild(root_0, IMAGINARYTOK53_tree);
                }

            }
                break;
            case 13:
            // Grammar/CTFParser.g:405:5: structSpecifier
            {
                root_0 = (CommonTree) adaptor.nil();

                pushFollow(FOLLOW_structSpecifier_in_typeSpecifier1112);
                structSpecifier54 = structSpecifier();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, structSpecifier54.getTree());
                }

            }
                break;
            case 14:
            // Grammar/CTFParser.g:406:5: variantSpecifier
            {
                root_0 = (CommonTree) adaptor.nil();

                pushFollow(FOLLOW_variantSpecifier_in_typeSpecifier1118);
                variantSpecifier55 = variantSpecifier();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, variantSpecifier55.getTree());
                }

            }
                break;
            case 15:
            // Grammar/CTFParser.g:407:5: enumSpecifier
            {
                root_0 = (CommonTree) adaptor.nil();

                pushFollow(FOLLOW_enumSpecifier_in_typeSpecifier1124);
                enumSpecifier56 = enumSpecifier();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, enumSpecifier56.getTree());
                }

            }
                break;
            case 16:
            // Grammar/CTFParser.g:408:5: ctfTypeSpecifier
            {
                root_0 = (CommonTree) adaptor.nil();

                pushFollow(FOLLOW_ctfTypeSpecifier_in_typeSpecifier1130);
                ctfTypeSpecifier57 = ctfTypeSpecifier();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, ctfTypeSpecifier57.getTree());
                }

            }
                break;
            case 17:
            // Grammar/CTFParser.g:409:5: {...}? => typedefName
            {
                root_0 = (CommonTree) adaptor.nil();

                if (!((inTypealiasAlias() || isTypeName(input.LT(1).getText())))) {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    throw new FailedPredicateException(input, "typeSpecifier",
                            "inTypealiasAlias() || isTypeName(input.LT(1).getText())");
                }
                pushFollow(FOLLOW_typedefName_in_typeSpecifier1140);
                typedefName58 = typedefName();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, typedefName58.getTree());
                }

            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print(input.toString(retval.start, input.LT(-1)));
                exit("typeSpecifier");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

