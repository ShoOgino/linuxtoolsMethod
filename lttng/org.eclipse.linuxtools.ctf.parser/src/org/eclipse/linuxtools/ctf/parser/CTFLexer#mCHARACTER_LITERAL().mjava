    // $ANTLR start "CHARACTER_LITERAL"
    public final void mCHARACTER_LITERAL() throws RecognitionException {
        try {
            int _type = CHARACTER_LITERAL;
            int _channel = DEFAULT_TOKEN_CHANNEL;
            // CTFLexer.g:158:19: ( ( STRINGPREFIX )? SINGLEQUOTE ( CHAR_CONTENT
            // )+ SINGLEQUOTE )
            // CTFLexer.g:158:21: ( STRINGPREFIX )? SINGLEQUOTE ( CHAR_CONTENT
            // )+ SINGLEQUOTE
            {
                // CTFLexer.g:158:21: ( STRINGPREFIX )?
                int alt22 = 2;
                int LA22_0 = input.LA(1);

                if ((LA22_0 == 'L')) {
                    alt22 = 1;
                }
                switch (alt22) {
                case 1:
                // CTFLexer.g:158:21: STRINGPREFIX
                {
                    mSTRINGPREFIX();

                }
                    break;

                }

                mSINGLEQUOTE();
                // CTFLexer.g:158:47: ( CHAR_CONTENT )+
                int cnt23 = 0;
                loop23: do {
                    int alt23 = 2;
                    int LA23_0 = input.LA(1);

                    if (((LA23_0 >= '\u0000' && LA23_0 <= '&') || (LA23_0 >= '(' && LA23_0 <= '\uFFFF'))) {
                        alt23 = 1;
                    }

                    switch (alt23) {
                    case 1:
                    // CTFLexer.g:158:47: CHAR_CONTENT
                    {
                        mCHAR_CONTENT();

                    }
                        break;

                    default:
                        if (cnt23 >= 1) {
                            break loop23;
                        }
                        EarlyExitException eee = new EarlyExitException(23,
                                input);
                        throw eee;
                    }
                    cnt23++;
                } while (true);

                mSINGLEQUOTE();

            }

            state.type = _type;
            state.channel = _channel;
        } finally {
        }
    }

