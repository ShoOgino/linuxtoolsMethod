    // $ANTLR start "enumSpecifier"
    // Grammar/CTFParser.g:642:1: enumSpecifier : ENUMTOK ( ( enumName (
    // enumContainerType enumBody | enumBody | ) ) | ( enumContainerType
    // enumBody | enumBody ) ) -> ^( ENUM ( enumName )? ( enumContainerType )? (
    // enumBody )? ) ;
    public final CTFParser.enumSpecifier_return enumSpecifier()
            throws RecognitionException {
        CTFParser.enumSpecifier_return retval = new CTFParser.enumSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ENUMTOK104 = null;
        CTFParser.enumName_return enumName105 = null;

        CTFParser.enumContainerType_return enumContainerType106 = null;

        CTFParser.enumBody_return enumBody107 = null;

        CTFParser.enumBody_return enumBody108 = null;

        CTFParser.enumContainerType_return enumContainerType109 = null;

        CTFParser.enumBody_return enumBody110 = null;

        CTFParser.enumBody_return enumBody111 = null;

        CommonTree ENUMTOK104_tree = null;
        RewriteRuleTokenStream stream_ENUMTOK = new RewriteRuleTokenStream(
                adaptor, "token ENUMTOK");
        RewriteRuleSubtreeStream stream_enumName = new RewriteRuleSubtreeStream(
                adaptor, "rule enumName");
        RewriteRuleSubtreeStream stream_enumContainerType = new RewriteRuleSubtreeStream(
                adaptor, "rule enumContainerType");
        RewriteRuleSubtreeStream stream_enumBody = new RewriteRuleSubtreeStream(
                adaptor, "rule enumBody");

        enter("enumSpecifier");

        try {
            // Grammar/CTFParser.g:649:1: ( ENUMTOK ( ( enumName (
            // enumContainerType enumBody | enumBody | ) ) | ( enumContainerType
            // enumBody | enumBody ) ) -> ^( ENUM ( enumName )? (
            // enumContainerType )? ( enumBody )? ) )
            // Grammar/CTFParser.g:650:2: ENUMTOK ( ( enumName (
            // enumContainerType enumBody | enumBody | ) ) | ( enumContainerType
            // enumBody | enumBody ) )
            {
                ENUMTOK104 = (Token) match(input, ENUMTOK,
                        FOLLOW_ENUMTOK_in_enumSpecifier2225);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_ENUMTOK.add(ENUMTOK104);
                }

                // Grammar/CTFParser.g:651:2: ( ( enumName ( enumContainerType
                // enumBody | enumBody | ) ) | ( enumContainerType enumBody |
                // enumBody ) )
                int alt34 = 2;
                int LA34_0 = input.LA(1);

                if ((LA34_0 == IDENTIFIER)) {
                    alt34 = 1;
                } else if (((LA34_0 == COLON) || (LA34_0 == LCURL))) {
                    alt34 = 2;
                } else {
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("",
                            34, 0, input);

                    throw nvae;
                }
                switch (alt34) {
                case 1:
                // Grammar/CTFParser.g:653:3: ( enumName ( enumContainerType
                // enumBody | enumBody | ) )
                {
                    // Grammar/CTFParser.g:653:3: ( enumName ( enumContainerType
                    // enumBody | enumBody | ) )
                    // Grammar/CTFParser.g:654:4: enumName ( enumContainerType
                    // enumBody | enumBody | )
                    {
                        pushFollow(FOLLOW_enumName_in_enumSpecifier2240);
                        enumName105 = enumName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_enumName.add(enumName105.getTree());
                        }
                        // Grammar/CTFParser.g:655:4: ( enumContainerType
                        // enumBody | enumBody | )
                        int alt32 = 3;
                        alt32 = dfa32.predict(input);
                        switch (alt32) {
                        case 1:
                        // Grammar/CTFParser.g:656:5: enumContainerType enumBody
                        {
                            pushFollow(FOLLOW_enumContainerType_in_enumSpecifier2251);
                            enumContainerType106 = enumContainerType();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_enumContainerType
                                        .add(enumContainerType106.getTree());
                            }
                            pushFollow(FOLLOW_enumBody_in_enumSpecifier2253);
                            enumBody107 = enumBody();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_enumBody.add(enumBody107.getTree());
                            }

                        }
                            break;
                        case 2:
                        // Grammar/CTFParser.g:658:5: enumBody
                        {
                            pushFollow(FOLLOW_enumBody_in_enumSpecifier2265);
                            enumBody108 = enumBody();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_enumBody.add(enumBody108.getTree());
                            }

                        }
                            break;
                        case 3:
                            break;
                        }
                    }
                }
                    break;
                case 2:
                // Grammar/CTFParser.g:665:3: ( enumContainerType enumBody |
                // enumBody )
                {
                    // Grammar/CTFParser.g:665:3: ( enumContainerType enumBody |
                    // enumBody )
                    int alt33 = 2;
                    int LA33_0 = input.LA(1);

                    if ((LA33_0 == COLON)) {
                        alt33 = 1;
                    } else if ((LA33_0 == LCURL)) {
                        alt33 = 2;
                    } else {
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        NoViableAltException nvae = new NoViableAltException(
                                "", 33, 0, input);

                        throw nvae;
                    }
                    switch (alt33) {
                    case 1:
                    // Grammar/CTFParser.g:666:4: enumContainerType enumBody
                    {
                        pushFollow(FOLLOW_enumContainerType_in_enumSpecifier2300);
                        enumContainerType109 = enumContainerType();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_enumContainerType.add(enumContainerType109
                                    .getTree());
                        }
                        pushFollow(FOLLOW_enumBody_in_enumSpecifier2302);
                        enumBody110 = enumBody();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_enumBody.add(enumBody110.getTree());
                        }

                    }
                        break;
                    case 2:
                    // Grammar/CTFParser.g:668:4: enumBody
                    {
                        pushFollow(FOLLOW_enumBody_in_enumSpecifier2311);
                        enumBody111 = enumBody();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_enumBody.add(enumBody111.getTree());
                        }

                    }
                        break;

                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: enumContainerType, enumName, enumBody
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 670:4: -> ^( ENUM ( enumName )? ( enumContainerType )? (
                    // enumBody )? )
                    {
                        // Grammar/CTFParser.g:670:7: ^( ENUM ( enumName )? (
                        // enumContainerType )? ( enumBody )? )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(ENUM, "ENUM"), root_1);

                            // Grammar/CTFParser.g:670:14: ( enumName )?
                            if (stream_enumName.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_enumName.nextTree());

                            }
                            stream_enumName.reset();
                            // Grammar/CTFParser.g:670:24: ( enumContainerType
                            // )?
                            if (stream_enumContainerType.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_enumContainerType.nextTree());

                            }
                            stream_enumContainerType.reset();
                            // Grammar/CTFParser.g:670:43: ( enumBody )?
                            if (stream_enumBody.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_enumBody.nextTree());

                            }
                            stream_enumBody.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("enumSpecifier");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

