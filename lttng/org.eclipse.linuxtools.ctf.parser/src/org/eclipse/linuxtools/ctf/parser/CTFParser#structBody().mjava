    // $ANTLR start "structBody"
    // Grammar/CTFParser.g:429:1: structBody : LCURL ( structOrVariantDeclarationList )? RCURL -> ^( STRUCT_BODY ( structOrVariantDeclarationList )? ) ;
    public final CTFParser.structBody_return structBody() throws RecognitionException {
        Symbols_stack.push(new Symbols_scope());

        CTFParser.structBody_return retval = new CTFParser.structBody_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURL64=null;
        Token RCURL66=null;
        CTFParser.structOrVariantDeclarationList_return structOrVariantDeclarationList65 = null;


        CommonTree LCURL64_tree=null;
        CommonTree RCURL66_tree=null;
        RewriteRuleTokenStream stream_LCURL=new RewriteRuleTokenStream(adaptor,"token LCURL");
        RewriteRuleTokenStream stream_RCURL=new RewriteRuleTokenStream(adaptor,"token RCURL");
        RewriteRuleSubtreeStream stream_structOrVariantDeclarationList=new RewriteRuleSubtreeStream(adaptor,"rule structOrVariantDeclarationList");

          enter("structBody");
          debug_print("Scope push " + Symbols_stack.size());
          ((Symbols_scope)Symbols_stack.peek()).types = new HashSet<String>();

        try {
            // Grammar/CTFParser.g:440:1: ( LCURL ( structOrVariantDeclarationList )? RCURL -> ^( STRUCT_BODY ( structOrVariantDeclarationList )? ) )
            // Grammar/CTFParser.g:441:3: LCURL ( structOrVariantDeclarationList )? RCURL
            {
            LCURL64=(Token)match(input,LCURL,FOLLOW_LCURL_in_structBody1223); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURL.add(LCURL64);

            // Grammar/CTFParser.g:441:9: ( structOrVariantDeclarationList )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=CONSTTOK && LA18_0<=ENUMTOK)||(LA18_0>=FLOATINGPOINTTOK && LA18_0<=SIGNEDTOK)||(LA18_0>=STRINGTOK && LA18_0<=STRUCTTOK)||(LA18_0>=TYPEDEFTOK && LA18_0<=IMAGINARYTOK)) ) {
                alt18=1;
            }
            else if ( (LA18_0==IDENTIFIER) && ((inTypealiasAlias() || isTypeName(input.LT(1).getText())))) {
                alt18=1;
            }
            else if ( (LA18_0==TYPEALIASTOK) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Grammar/CTFParser.g:441:9: structOrVariantDeclarationList
                    {
                    pushFollow(FOLLOW_structOrVariantDeclarationList_in_structBody1225);
                    structOrVariantDeclarationList65=structOrVariantDeclarationList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_structOrVariantDeclarationList.add(structOrVariantDeclarationList65.getTree());

                    }
                    break;

            }

            RCURL66=(Token)match(input,RCURL,FOLLOW_RCURL_in_structBody1228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURL.add(RCURL66);



            // AST REWRITE
            // elements: structOrVariantDeclarationList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 441:47: -> ^( STRUCT_BODY ( structOrVariantDeclarationList )? )
            {
                // Grammar/CTFParser.g:441:50: ^( STRUCT_BODY ( structOrVariantDeclarationList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRUCT_BODY, "STRUCT_BODY"), root_1);

                // Grammar/CTFParser.g:441:64: ( structOrVariantDeclarationList )?
                if ( stream_structOrVariantDeclarationList.hasNext() ) {
                    adaptor.addChild(root_1, stream_structOrVariantDeclarationList.nextTree());

                }
                stream_structOrVariantDeclarationList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                debug_print("Scope pop " + Symbols_stack.size());
                exit("structBody");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
            Symbols_stack.pop();

        }
        return retval;
    }
    // $ANTLR end "structBody"

