    // $ANTLR start "enumerator"
    // Grammar/CTFParser.g:718:1: enumerator : enumConstant ( enumeratorValue )?
    // ;
    public final CTFParser.enumerator_return enumerator()
            throws RecognitionException {
        CTFParser.enumerator_return retval = new CTFParser.enumerator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.enumConstant_return enumConstant123 = null;

        CTFParser.enumeratorValue_return enumeratorValue124 = null;

        enter("enumerator");

        try {
            // Grammar/CTFParser.g:725:1: ( enumConstant ( enumeratorValue )? )
            // Grammar/CTFParser.g:726:3: enumConstant ( enumeratorValue )?
            {
                root_0 = (CommonTree) adaptor.nil();

                pushFollow(FOLLOW_enumConstant_in_enumerator2506);
                enumConstant123 = enumConstant();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    adaptor.addChild(root_0, enumConstant123.getTree());
                }
                // Grammar/CTFParser.g:726:16: ( enumeratorValue )?
                int alt37 = 2;
                int LA37_0 = input.LA(1);

                if ((LA37_0 == ASSIGNMENT)) {
                    alt37 = 1;
                }
                switch (alt37) {
                case 1:
                // Grammar/CTFParser.g:726:16: enumeratorValue
                {
                    pushFollow(FOLLOW_enumeratorValue_in_enumerator2508);
                    enumeratorValue124 = enumeratorValue();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        adaptor.addChild(root_0, enumeratorValue124.getTree());
                    }

                }
                    break;

                }

            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("enumerator");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

