    // $ANTLR start "ctfTypeSpecifier"
    // CTFParser.g:945:1: ctfTypeSpecifier : ( FLOATINGPOINTTOK ctfBody -> ^( FLOATING_POINT ( ctfBody )? ) | INTEGERTOK ctfBody -> ^( INTEGER ( ctfBody )? ) | STRINGTOK ( ctfBody )? -> ^( STRING ( ctfBody )? ) );
    public final CTFParser.ctfTypeSpecifier_return ctfTypeSpecifier() throws RecognitionException {
        CTFParser.ctfTypeSpecifier_return retval = new CTFParser.ctfTypeSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FLOATINGPOINTTOK168=null;
        Token INTEGERTOK170=null;
        Token STRINGTOK172=null;
        CTFParser.ctfBody_return ctfBody169 = null;

        CTFParser.ctfBody_return ctfBody171 = null;

        CTFParser.ctfBody_return ctfBody173 = null;


        CommonTree FLOATINGPOINTTOK168_tree=null;
        CommonTree INTEGERTOK170_tree=null;
        CommonTree STRINGTOK172_tree=null;
        RewriteRuleTokenStream stream_FLOATINGPOINTTOK=new RewriteRuleTokenStream(adaptor,"token FLOATINGPOINTTOK");
        RewriteRuleTokenStream stream_STRINGTOK=new RewriteRuleTokenStream(adaptor,"token STRINGTOK");
        RewriteRuleTokenStream stream_INTEGERTOK=new RewriteRuleTokenStream(adaptor,"token INTEGERTOK");
        RewriteRuleSubtreeStream stream_ctfBody=new RewriteRuleSubtreeStream(adaptor,"rule ctfBody");

          enter("ctfTypeSpecifier");

        try {
            // CTFParser.g:952:1: ( FLOATINGPOINTTOK ctfBody -> ^( FLOATING_POINT ( ctfBody )? ) | INTEGERTOK ctfBody -> ^( INTEGER ( ctfBody )? ) | STRINGTOK ( ctfBody )? -> ^( STRING ( ctfBody )? ) )
            int alt55=3;
            switch ( input.LA(1) ) {
            case FLOATINGPOINTTOK:
                {
                alt55=1;
                }
                break;
            case INTEGERTOK:
                {
                alt55=2;
                }
                break;
            case STRINGTOK:
                {
                alt55=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }

            switch (alt55) {
                case 1 :
                    // CTFParser.g:954:5: FLOATINGPOINTTOK ctfBody
                    {
                    FLOATINGPOINTTOK168=(Token)match(input,FLOATINGPOINTTOK,FOLLOW_FLOATINGPOINTTOK_in_ctfTypeSpecifier3259); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_FLOATINGPOINTTOK.add(FLOATINGPOINTTOK168);
                    }

                    pushFollow(FOLLOW_ctfBody_in_ctfTypeSpecifier3261);
                    ctfBody169=ctfBody();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ctfBody.add(ctfBody169.getTree());
                    }


                    // AST REWRITE
                    // elements: ctfBody
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 954:30: -> ^( FLOATING_POINT ( ctfBody )? )
                    {
                        // CTFParser.g:954:33: ^( FLOATING_POINT ( ctfBody )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FLOATING_POINT, "FLOATING_POINT"), root_1);

                        // CTFParser.g:954:50: ( ctfBody )?
                        if ( stream_ctfBody.hasNext() ) {
                            adaptor.addChild(root_1, stream_ctfBody.nextTree());

                        }
                        stream_ctfBody.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // CTFParser.g:955:5: INTEGERTOK ctfBody
                    {
                    INTEGERTOK170=(Token)match(input,INTEGERTOK,FOLLOW_INTEGERTOK_in_ctfTypeSpecifier3276); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_INTEGERTOK.add(INTEGERTOK170);
                    }

                    pushFollow(FOLLOW_ctfBody_in_ctfTypeSpecifier3278);
                    ctfBody171=ctfBody();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_ctfBody.add(ctfBody171.getTree());
                    }


                    // AST REWRITE
                    // elements: ctfBody
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 955:24: -> ^( INTEGER ( ctfBody )? )
                    {
                        // CTFParser.g:955:27: ^( INTEGER ( ctfBody )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INTEGER, "INTEGER"), root_1);

                        // CTFParser.g:955:37: ( ctfBody )?
                        if ( stream_ctfBody.hasNext() ) {
                            adaptor.addChild(root_1, stream_ctfBody.nextTree());

                        }
                        stream_ctfBody.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // CTFParser.g:956:5: STRINGTOK ( ctfBody )?
                    {
                    STRINGTOK172=(Token)match(input,STRINGTOK,FOLLOW_STRINGTOK_in_ctfTypeSpecifier3293); if (state.failed) {
                        return retval;
                    }
                    if ( state.backtracking==0 ) {
                        stream_STRINGTOK.add(STRINGTOK172);
                    }

                    // CTFParser.g:956:15: ( ctfBody )?
                    int alt54=2;
                    alt54 = dfa54.predict(input);
                    switch (alt54) {
                        case 1 :
                            // CTFParser.g:956:15: ctfBody
                            {
                            pushFollow(FOLLOW_ctfBody_in_ctfTypeSpecifier3295);
                            ctfBody173=ctfBody();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if ( state.backtracking==0 ) {
                                stream_ctfBody.add(ctfBody173.getTree());
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: ctfBody
                    // token labels:
                    // rule labels: retval
                    // token list labels:
                    // rule list labels:
                    // wildcard labels:
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 956:24: -> ^( STRING ( ctfBody )? )
                    {
                        // CTFParser.g:956:27: ^( STRING ( ctfBody )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING, "STRING"), root_1);

                        // CTFParser.g:956:36: ( ctfBody )?
                        if ( stream_ctfBody.hasNext() ) {
                            adaptor.addChild(root_1, stream_ctfBody.nextTree());

                        }
                        stream_ctfBody.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("ctfTypeSpecifier");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "ctfTypeSpecifier"

