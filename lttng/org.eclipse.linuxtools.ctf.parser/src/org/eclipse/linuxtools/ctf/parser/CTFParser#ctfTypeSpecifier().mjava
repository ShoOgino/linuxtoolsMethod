    // $ANTLR start "ctfTypeSpecifier"
    // Grammar/CTFParser.g:943:1: ctfTypeSpecifier : ( FLOATINGPOINTTOK ctfBody
    // -> ^( FLOATING_POINT ( ctfBody )? ) | INTEGERTOK ctfBody -> ^( INTEGER (
    // ctfBody )? ) | STRINGTOK ( ctfBody )? -> ^( STRING ( ctfBody )? ) );
    public final CTFParser.ctfTypeSpecifier_return ctfTypeSpecifier()
            throws RecognitionException {
        CTFParser.ctfTypeSpecifier_return retval = new CTFParser.ctfTypeSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FLOATINGPOINTTOK167 = null;
        Token INTEGERTOK169 = null;
        Token STRINGTOK171 = null;
        CTFParser.ctfBody_return ctfBody168 = null;

        CTFParser.ctfBody_return ctfBody170 = null;

        CTFParser.ctfBody_return ctfBody172 = null;

        CommonTree FLOATINGPOINTTOK167_tree = null;
        CommonTree INTEGERTOK169_tree = null;
        CommonTree STRINGTOK171_tree = null;
        RewriteRuleTokenStream stream_FLOATINGPOINTTOK = new RewriteRuleTokenStream(
                adaptor, "token FLOATINGPOINTTOK");
        RewriteRuleTokenStream stream_STRINGTOK = new RewriteRuleTokenStream(
                adaptor, "token STRINGTOK");
        RewriteRuleTokenStream stream_INTEGERTOK = new RewriteRuleTokenStream(
                adaptor, "token INTEGERTOK");
        RewriteRuleSubtreeStream stream_ctfBody = new RewriteRuleSubtreeStream(
                adaptor, "rule ctfBody");

        enter("ctfTypeSpecifier");

        try {
            // Grammar/CTFParser.g:950:1: ( FLOATINGPOINTTOK ctfBody -> ^(
            // FLOATING_POINT ( ctfBody )? ) | INTEGERTOK ctfBody -> ^( INTEGER
            // ( ctfBody )? ) | STRINGTOK ( ctfBody )? -> ^( STRING ( ctfBody )?
            // ) )
            int alt55 = 3;
            switch (input.LA(1)) {
            case FLOATINGPOINTTOK: {
                alt55 = 1;
            }
                break;
            case INTEGERTOK: {
                alt55 = 2;
            }
                break;
            case STRINGTOK: {
                alt55 = 3;
            }
                break;
            default:
                if (state.backtracking > 0) {
                    state.failed = true;
                    return retval;
                }
                NoViableAltException nvae = new NoViableAltException("", 55, 0,
                        input);

                throw nvae;
            }

            switch (alt55) {
            case 1:
            // Grammar/CTFParser.g:952:5: FLOATINGPOINTTOK ctfBody
            {
                FLOATINGPOINTTOK167 = (Token) match(input, FLOATINGPOINTTOK,
                        FOLLOW_FLOATINGPOINTTOK_in_ctfTypeSpecifier3246);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_FLOATINGPOINTTOK.add(FLOATINGPOINTTOK167);
                }

                pushFollow(FOLLOW_ctfBody_in_ctfTypeSpecifier3248);
                ctfBody168 = ctfBody();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_ctfBody.add(ctfBody168.getTree());
                }

                // AST REWRITE
                // elements: ctfBody
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 952:30: -> ^( FLOATING_POINT ( ctfBody )? )
                    {
                        // Grammar/CTFParser.g:952:33: ^( FLOATING_POINT (
                        // ctfBody )? )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(adaptor
                                    .create(FLOATING_POINT, "FLOATING_POINT"),
                                    root_1);

                            // Grammar/CTFParser.g:952:50: ( ctfBody )?
                            if (stream_ctfBody.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_ctfBody.nextTree());

                            }
                            stream_ctfBody.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
                break;
            case 2:
            // Grammar/CTFParser.g:953:5: INTEGERTOK ctfBody
            {
                INTEGERTOK169 = (Token) match(input, INTEGERTOK,
                        FOLLOW_INTEGERTOK_in_ctfTypeSpecifier3263);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_INTEGERTOK.add(INTEGERTOK169);
                }

                pushFollow(FOLLOW_ctfBody_in_ctfTypeSpecifier3265);
                ctfBody170 = ctfBody();

                state._fsp--;
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_ctfBody.add(ctfBody170.getTree());
                }

                // AST REWRITE
                // elements: ctfBody
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 953:24: -> ^( INTEGER ( ctfBody )? )
                    {
                        // Grammar/CTFParser.g:953:27: ^( INTEGER ( ctfBody )? )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(INTEGER, "INTEGER"), root_1);

                            // Grammar/CTFParser.g:953:37: ( ctfBody )?
                            if (stream_ctfBody.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_ctfBody.nextTree());

                            }
                            stream_ctfBody.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
                break;
            case 3:
            // Grammar/CTFParser.g:954:5: STRINGTOK ( ctfBody )?
            {
                STRINGTOK171 = (Token) match(input, STRINGTOK,
                        FOLLOW_STRINGTOK_in_ctfTypeSpecifier3280);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_STRINGTOK.add(STRINGTOK171);
                }

                // Grammar/CTFParser.g:954:15: ( ctfBody )?
                int alt54 = 2;
                alt54 = dfa54.predict(input);
                switch (alt54) {
                case 1:
                // Grammar/CTFParser.g:954:15: ctfBody
                {
                    pushFollow(FOLLOW_ctfBody_in_ctfTypeSpecifier3282);
                    ctfBody172 = ctfBody();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_ctfBody.add(ctfBody172.getTree());
                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: ctfBody
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 954:24: -> ^( STRING ( ctfBody )? )
                    {
                        // Grammar/CTFParser.g:954:27: ^( STRING ( ctfBody )? )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(STRING, "STRING"), root_1);

                            // Grammar/CTFParser.g:954:36: ( ctfBody )?
                            if (stream_ctfBody.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_ctfBody.nextTree());

                            }
                            stream_ctfBody.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }
                break;

            }
            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("ctfTypeSpecifier");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

