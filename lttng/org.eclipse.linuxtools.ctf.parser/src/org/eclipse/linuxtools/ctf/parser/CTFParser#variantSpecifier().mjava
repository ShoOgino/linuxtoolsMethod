    // $ANTLR start "variantSpecifier"
    // Grammar/CTFParser.g:571:1: variantSpecifier : VARIANTTOK ( ( variantName
    // ( ( variantTag ( variantBody | ) ) | variantBody ) ) | ( variantTag
    // variantBody ) | variantBody ) -> ^( VARIANT ( variantName )? ( variantTag
    // )? ( variantBody )? ) ;
    public final CTFParser.variantSpecifier_return variantSpecifier()
            throws RecognitionException {
        CTFParser.variantSpecifier_return retval = new CTFParser.variantSpecifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token VARIANTTOK89 = null;
        CTFParser.variantName_return variantName90 = null;

        CTFParser.variantTag_return variantTag91 = null;

        CTFParser.variantBody_return variantBody92 = null;

        CTFParser.variantBody_return variantBody93 = null;

        CTFParser.variantTag_return variantTag94 = null;

        CTFParser.variantBody_return variantBody95 = null;

        CTFParser.variantBody_return variantBody96 = null;

        CommonTree VARIANTTOK89_tree = null;
        RewriteRuleTokenStream stream_VARIANTTOK = new RewriteRuleTokenStream(
                adaptor, "token VARIANTTOK");
        RewriteRuleSubtreeStream stream_variantName = new RewriteRuleSubtreeStream(
                adaptor, "rule variantName");
        RewriteRuleSubtreeStream stream_variantTag = new RewriteRuleSubtreeStream(
                adaptor, "rule variantTag");
        RewriteRuleSubtreeStream stream_variantBody = new RewriteRuleSubtreeStream(
                adaptor, "rule variantBody");

        enter("variantSpecifier");

        try {
            // Grammar/CTFParser.g:578:1: ( VARIANTTOK ( ( variantName ( (
            // variantTag ( variantBody | ) ) | variantBody ) ) | ( variantTag
            // variantBody ) | variantBody ) -> ^( VARIANT ( variantName )? (
            // variantTag )? ( variantBody )? ) )
            // Grammar/CTFParser.g:579:3: VARIANTTOK ( ( variantName ( (
            // variantTag ( variantBody | ) ) | variantBody ) ) | ( variantTag
            // variantBody ) | variantBody )
            {
                VARIANTTOK89 = (Token) match(input, VARIANTTOK,
                        FOLLOW_VARIANTTOK_in_variantSpecifier1897);
                if (state.failed) {
                    return retval;
                }
                if (state.backtracking == 0) {
                    stream_VARIANTTOK.add(VARIANTTOK89);
                }

                // Grammar/CTFParser.g:580:3: ( ( variantName ( ( variantTag (
                // variantBody | ) ) | variantBody ) ) | ( variantTag
                // variantBody ) | variantBody )
                int alt31 = 3;
                switch (input.LA(1)) {
                case IDENTIFIER: {
                    alt31 = 1;
                }
                    break;
                case LT: {
                    alt31 = 2;
                }
                    break;
                case LCURL: {
                    alt31 = 3;
                }
                    break;
                default:
                    if (state.backtracking > 0) {
                        state.failed = true;
                        return retval;
                    }
                    NoViableAltException nvae = new NoViableAltException("",
                            31, 0, input);

                    throw nvae;
                }

                switch (alt31) {
                case 1:
                // Grammar/CTFParser.g:581:5: ( variantName ( ( variantTag (
                // variantBody | ) ) | variantBody ) )
                {
                    // Grammar/CTFParser.g:581:5: ( variantName ( ( variantTag (
                    // variantBody | ) ) | variantBody ) )
                    // Grammar/CTFParser.g:582:7: variantName ( ( variantTag (
                    // variantBody | ) ) | variantBody )
                    {
                        pushFollow(FOLLOW_variantName_in_variantSpecifier1915);
                        variantName90 = variantName();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_variantName.add(variantName90.getTree());
                        }
                        // Grammar/CTFParser.g:583:7: ( ( variantTag (
                        // variantBody | ) ) | variantBody )
                        int alt30 = 2;
                        int LA30_0 = input.LA(1);

                        if ((LA30_0 == LT)) {
                            alt30 = 1;
                        } else if ((LA30_0 == LCURL)) {
                            alt30 = 2;
                        } else {
                            if (state.backtracking > 0) {
                                state.failed = true;
                                return retval;
                            }
                            NoViableAltException nvae = new NoViableAltException(
                                    "", 30, 0, input);

                            throw nvae;
                        }
                        switch (alt30) {
                        case 1:
                        // Grammar/CTFParser.g:584:9: ( variantTag ( variantBody
                        // | ) )
                        {
                            // Grammar/CTFParser.g:584:9: ( variantTag (
                            // variantBody | ) )
                            // Grammar/CTFParser.g:585:11: variantTag (
                            // variantBody | )
                            {
                                pushFollow(FOLLOW_variantTag_in_variantSpecifier1946);
                                variantTag91 = variantTag();

                                state._fsp--;
                                if (state.failed) {
                                    return retval;
                                }
                                if (state.backtracking == 0) {
                                    stream_variantTag.add(variantTag91
                                            .getTree());
                                }
                                // Grammar/CTFParser.g:586:11: ( variantBody | )
                                int alt29 = 2;
                                int LA29_0 = input.LA(1);

                                if ((LA29_0 == LCURL)) {
                                    switch (input.LA(2)) {
                                    case CONSTTOK:
                                    case CHARTOK:
                                    case DOUBLETOK:
                                    case ENUMTOK:
                                    case FLOATINGPOINTTOK:
                                    case FLOATTOK:
                                    case INTEGERTOK:
                                    case INTTOK:
                                    case LONGTOK:
                                    case SHORTTOK:
                                    case STRUCTTOK:
                                    case TYPEALIASTOK:
                                    case TYPEDEFTOK:
                                    case UNSIGNEDTOK:
                                    case VARIANTTOK:
                                    case VOIDTOK:
                                    case BOOLTOK:
                                    case COMPLEXTOK:
                                    case IMAGINARYTOK: {
                                        alt29 = 1;
                                    }
                                        break;
                                    case SIGNEDTOK: {
                                        int LA29_4 = input.LA(3);

                                        if ((((LA29_4 >= CONSTTOK) && (LA29_4 <= ENUMTOK))
                                                || ((LA29_4 >= FLOATINGPOINTTOK) && (LA29_4 <= SIGNEDTOK))
                                                || ((LA29_4 >= STRINGTOK) && (LA29_4 <= STRUCTTOK))
                                                || ((LA29_4 >= TYPEDEFTOK) && (LA29_4 <= IMAGINARYTOK))
                                                || (LA29_4 == POINTER) || (LA29_4 == IDENTIFIER))) {
                                            alt29 = 1;
                                        } else if (((LA29_4 == SEPARATOR)
                                                || (LA29_4 == ASSIGNMENT) || (LA29_4 == RCURL))) {
                                            alt29 = 2;
                                        } else {
                                            if (state.backtracking > 0) {
                                                state.failed = true;
                                                return retval;
                                            }
                                            NoViableAltException nvae = new NoViableAltException(
                                                    "", 29, 4, input);

                                            throw nvae;
                                        }
                                    }
                                        break;
                                    case STRINGTOK: {
                                        int LA29_5 = input.LA(3);

                                        if (((LA29_5 == SEPARATOR)
                                                || (LA29_5 == ASSIGNMENT) || (LA29_5 == RCURL))) {
                                            alt29 = 2;
                                        } else if ((((LA29_5 >= CONSTTOK) && (LA29_5 <= ENUMTOK))
                                                || ((LA29_5 >= FLOATINGPOINTTOK) && (LA29_5 <= SIGNEDTOK))
                                                || ((LA29_5 >= STRINGTOK) && (LA29_5 <= STRUCTTOK))
                                                || ((LA29_5 >= TYPEDEFTOK) && (LA29_5 <= IMAGINARYTOK))
                                                || (LA29_5 == LCURL)
                                                || (LA29_5 == POINTER) || (LA29_5 == IDENTIFIER))) {
                                            alt29 = 1;
                                        } else {
                                            if (state.backtracking > 0) {
                                                state.failed = true;
                                                return retval;
                                            }
                                            NoViableAltException nvae = new NoViableAltException(
                                                    "", 29, 5, input);

                                            throw nvae;
                                        }
                                    }
                                        break;
                                    case IDENTIFIER: {
                                        int LA29_6 = input.LA(3);

                                        if (((LA29_6 == SEPARATOR)
                                                || (LA29_6 == ASSIGNMENT) || (LA29_6 == RCURL))) {
                                            alt29 = 2;
                                        } else if ((((LA29_6 >= CONSTTOK) && (LA29_6 <= ENUMTOK))
                                                || ((LA29_6 >= FLOATINGPOINTTOK) && (LA29_6 <= SIGNEDTOK))
                                                || ((LA29_6 >= STRINGTOK) && (LA29_6 <= STRUCTTOK))
                                                || ((LA29_6 >= TYPEDEFTOK) && (LA29_6 <= IMAGINARYTOK))
                                                || (LA29_6 == POINTER) || (LA29_6 == IDENTIFIER))) {
                                            alt29 = 1;
                                        } else {
                                            if (state.backtracking > 0) {
                                                state.failed = true;
                                                return retval;
                                            }
                                            NoViableAltException nvae = new NoViableAltException(
                                                    "", 29, 6, input);

                                            throw nvae;
                                        }
                                    }
                                        break;
                                    case ALIGNTOK:
                                    case EVENTTOK:
                                    case STRING_LITERAL: {
                                        alt29 = 2;
                                    }
                                        break;
                                    default:
                                        if (state.backtracking > 0) {
                                            state.failed = true;
                                            return retval;
                                        }
                                        NoViableAltException nvae = new NoViableAltException(
                                                "", 29, 1, input);

                                        throw nvae;
                                    }

                                } else if (((LA29_0 == EOF)
                                        || ((LA29_0 >= CONSTTOK) && (LA29_0 <= ENUMTOK))
                                        || ((LA29_0 >= FLOATINGPOINTTOK) && (LA29_0 <= SIGNEDTOK))
                                        || ((LA29_0 >= STRINGTOK) && (LA29_0 <= STRUCTTOK))
                                        || ((LA29_0 >= TYPEDEFTOK) && (LA29_0 <= IMAGINARYTOK))
                                        || (LA29_0 == TYPE_ASSIGNMENT)
                                        || (LA29_0 == LPAREN)
                                        || ((LA29_0 >= TERM) && (LA29_0 <= POINTER)) || (LA29_0 == IDENTIFIER))) {
                                    alt29 = 2;
                                } else {
                                    if (state.backtracking > 0) {
                                        state.failed = true;
                                        return retval;
                                    }
                                    NoViableAltException nvae = new NoViableAltException(
                                            "", 29, 0, input);

                                    throw nvae;
                                }
                                switch (alt29) {
                                case 1:
                                // Grammar/CTFParser.g:587:13: variantBody
                                {
                                    pushFollow(FOLLOW_variantBody_in_variantSpecifier1972);
                                    variantBody92 = variantBody();

                                    state._fsp--;
                                    if (state.failed) {
                                        return retval;
                                    }
                                    if (state.backtracking == 0) {
                                        stream_variantBody.add(variantBody92
                                                .getTree());
                                    }

                                }
                                    break;
                                case 2:
                                    break;

                                }

                            }

                        }
                            break;
                        case 2:
                        // Grammar/CTFParser.g:593:9: variantBody
                        {
                            pushFollow(FOLLOW_variantBody_in_variantSpecifier2040);
                            variantBody93 = variantBody();

                            state._fsp--;
                            if (state.failed) {
                                return retval;
                            }
                            if (state.backtracking == 0) {
                                stream_variantBody.add(variantBody93.getTree());
                            }

                        }
                            break;

                        }

                    }

                }
                    break;
                case 2:
                // Grammar/CTFParser.g:597:5: ( variantTag variantBody )
                {
                    // Grammar/CTFParser.g:597:5: ( variantTag variantBody )
                    // Grammar/CTFParser.g:597:6: variantTag variantBody
                    {
                        pushFollow(FOLLOW_variantTag_in_variantSpecifier2065);
                        variantTag94 = variantTag();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_variantTag.add(variantTag94.getTree());
                        }
                        pushFollow(FOLLOW_variantBody_in_variantSpecifier2067);
                        variantBody95 = variantBody();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_variantBody.add(variantBody95.getTree());
                        }

                    }

                }
                    break;
                case 3:
                // Grammar/CTFParser.g:599:5: variantBody
                {
                    pushFollow(FOLLOW_variantBody_in_variantSpecifier2078);
                    variantBody96 = variantBody();

                    state._fsp--;
                    if (state.failed) {
                        return retval;
                    }
                    if (state.backtracking == 0) {
                        stream_variantBody.add(variantBody96.getTree());
                    }

                }
                    break;

                }

                // AST REWRITE
                // elements: variantBody, variantTag, variantName
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval = new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 600:5: -> ^( VARIANT ( variantName )? ( variantTag )? (
                    // variantBody )? )
                    {
                        // Grammar/CTFParser.g:600:8: ^( VARIANT ( variantName
                        // )? ( variantTag )? ( variantBody )? )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(
                                    adaptor.create(VARIANT, "VARIANT"), root_1);

                            // Grammar/CTFParser.g:600:18: ( variantName )?
                            if (stream_variantName.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_variantName.nextTree());

                            }
                            stream_variantName.reset();
                            // Grammar/CTFParser.g:600:31: ( variantTag )?
                            if (stream_variantTag.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_variantTag.nextTree());

                            }
                            stream_variantTag.reset();
                            // Grammar/CTFParser.g:600:43: ( variantBody )?
                            if (stream_variantBody.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_variantBody.nextTree());

                            }
                            stream_variantBody.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                exit("variantSpecifier");

            }
        }

        catch (RecognitionException e) {
            throw e;
        }
        return retval;
    }

