    // $ANTLR start "declarationSpecifiers"
    // Grammar/CTFParser.g:340:1: declarationSpecifiers : (
    // storageClassSpecifier | typeQualifier | typeSpecifier )+ -> ^(
    // TYPE_SPECIFIER_LIST ( typeQualifier )* ( typeSpecifier )* ) ;
    public final CTFParser.declarationSpecifiers_return declarationSpecifiers()
            throws RecognitionException {
        CTFParser.declarationSpecifiers_return retval = new CTFParser.declarationSpecifiers_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        CTFParser.storageClassSpecifier_return storageClassSpecifier32 = null;

        CTFParser.typeQualifier_return typeQualifier33 = null;

        CTFParser.typeSpecifier_return typeSpecifier34 = null;

        RewriteRuleSubtreeStream stream_typeSpecifier = new RewriteRuleSubtreeStream(
                adaptor, "rule typeSpecifier");
        RewriteRuleSubtreeStream stream_typeQualifier = new RewriteRuleSubtreeStream(
                adaptor, "rule typeQualifier");
        RewriteRuleSubtreeStream stream_storageClassSpecifier = new RewriteRuleSubtreeStream(
                adaptor, "rule storageClassSpecifier");

        enter("declarationSpecifiers");

        try {
            // Grammar/CTFParser.g:348:1: ( ( storageClassSpecifier |
            // typeQualifier | typeSpecifier )+ -> ^( TYPE_SPECIFIER_LIST (
            // typeQualifier )* ( typeSpecifier )* ) )
            // Grammar/CTFParser.g:349:3: ( storageClassSpecifier |
            // typeQualifier | typeSpecifier )+
            {
                // Grammar/CTFParser.g:349:3: ( storageClassSpecifier |
                // typeQualifier | typeSpecifier )+
                int cnt14 = 0;
                loop14: do {
                    int alt14 = 4;
                    switch (input.LA(1)) {
                    case IDENTIFIER: {
                        int LA14_2 = input.LA(2);

                        if (((inTypealiasAlias() || isTypeName(input.LT(1)
                                .getText())))) {
                            alt14 = 3;
                        }

                    }
                        break;
                    case TYPEDEFTOK: {
                        alt14 = 1;
                    }
                        break;
                    case CONSTTOK: {
                        alt14 = 2;
                    }
                        break;
                    case CHARTOK:
                    case DOUBLETOK:
                    case ENUMTOK:
                    case FLOATINGPOINTTOK:
                    case FLOATTOK:
                    case INTEGERTOK:
                    case INTTOK:
                    case LONGTOK:
                    case SHORTTOK:
                    case SIGNEDTOK:
                    case STRINGTOK:
                    case STRUCTTOK:
                    case UNSIGNEDTOK:
                    case VARIANTTOK:
                    case VOIDTOK:
                    case BOOLTOK:
                    case COMPLEXTOK:
                    case IMAGINARYTOK: {
                        alt14 = 3;
                    }
                        break;

                    }

                    switch (alt14) {
                    case 1:
                    // Grammar/CTFParser.g:352:6: storageClassSpecifier
                    {
                        pushFollow(FOLLOW_storageClassSpecifier_in_declarationSpecifiers891);
                        storageClassSpecifier32 = storageClassSpecifier();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_storageClassSpecifier
                                    .add(storageClassSpecifier32.getTree());
                        }

                    }
                        break;
                    case 2:
                    // Grammar/CTFParser.g:353:6: typeQualifier
                    {
                        pushFollow(FOLLOW_typeQualifier_in_declarationSpecifiers898);
                        typeQualifier33 = typeQualifier();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_typeQualifier.add(typeQualifier33.getTree());
                        }

                    }
                        break;
                    case 3:
                    // Grammar/CTFParser.g:354:6: typeSpecifier
                    {
                        pushFollow(FOLLOW_typeSpecifier_in_declarationSpecifiers905);
                        typeSpecifier34 = typeSpecifier();

                        state._fsp--;
                        if (state.failed) {
                            return retval;
                        }
                        if (state.backtracking == 0) {
                            stream_typeSpecifier.add(typeSpecifier34.getTree());
                        }

                    }
                        break;

                    default:
                        if (cnt14 >= 1) {
                            break loop14;
                        }
                        if (state.backtracking > 0) {
                            state.failed = true;
                            return retval;
                        }
                        EarlyExitException eee = new EarlyExitException(14,
                                input);
                        throw eee;
                    }
                    cnt14++;
                } while (true);

                // AST REWRITE
                // elements: typeQualifier, typeSpecifier
                // token labels:
                // rule labels: retval
                // token list labels:
                // rule list labels:
                // wildcard labels:
                if (state.backtracking == 0) {
                    retval.tree = root_0;
//                    RewriteRuleSubtreeStream stream_retval =
                            new RewriteRuleSubtreeStream(
                            adaptor, "rule retval",
                            retval != null ? retval.tree : null);

                    root_0 = (CommonTree) adaptor.nil();
                    // 355:6: -> ^( TYPE_SPECIFIER_LIST ( typeQualifier )* (
                    // typeSpecifier )* )
                    {
                        // Grammar/CTFParser.g:355:9: ^( TYPE_SPECIFIER_LIST (
                        // typeQualifier )* ( typeSpecifier )* )
                        {
                            CommonTree root_1 = (CommonTree) adaptor.nil();
                            root_1 = (CommonTree) adaptor.becomeRoot(adaptor
                                    .create(TYPE_SPECIFIER_LIST,
                                            "TYPE_SPECIFIER_LIST"), root_1);

                            // Grammar/CTFParser.g:355:31: ( typeQualifier )*
                            while (stream_typeQualifier.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_typeQualifier.nextTree());

                            }
                            stream_typeQualifier.reset();
                            // Grammar/CTFParser.g:355:46: ( typeSpecifier )*
                            while (stream_typeSpecifier.hasNext()) {
                                adaptor.addChild(root_1,
                                        stream_typeSpecifier.nextTree());

                            }
                            stream_typeSpecifier.reset();

                            adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;
                }
            }

            retval.stop = input.LT(-1);

            if (state.backtracking == 0) {

                retval.tree = (CommonTree) adaptor.rulePostProcessing(root_0);
                adaptor.setTokenBoundaries(retval.tree, retval.start,
                        retval.stop);
            }
            if (state.backtracking == 0) {

                debug_print(input.toString(retval.start, input.LT(-1)));
                exit("declarationSpecifiers");

            }
        }

        catch (RecognitionException e) {
            throw e;

        }
        return retval;
    }

