    // $ANTLR start "alignAttribute"
    // CTFParser.g:425:1: alignAttribute : ALIGNTOK LPAREN unaryExpression RPAREN -> ^( ALIGN unaryExpression ) ;
    public final CTFParser.alignAttribute_return alignAttribute() throws RecognitionException {
        CTFParser.alignAttribute_return retval = new CTFParser.alignAttribute_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALIGNTOK60=null;
        Token LPAREN61=null;
        Token RPAREN63=null;
        CTFParser.unaryExpression_return unaryExpression62 = null;


        CommonTree ALIGNTOK60_tree=null;
        CommonTree LPAREN61_tree=null;
        CommonTree RPAREN63_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ALIGNTOK=new RewriteRuleTokenStream(adaptor,"token ALIGNTOK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_unaryExpression=new RewriteRuleSubtreeStream(adaptor,"rule unaryExpression");
        try {
            // CTFParser.g:425:16: ( ALIGNTOK LPAREN unaryExpression RPAREN -> ^( ALIGN unaryExpression ) )
            // CTFParser.g:426:3: ALIGNTOK LPAREN unaryExpression RPAREN
            {
            ALIGNTOK60=(Token)match(input,ALIGNTOK,FOLLOW_ALIGNTOK_in_alignAttribute1180); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_ALIGNTOK.add(ALIGNTOK60);
            }

            LPAREN61=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_alignAttribute1182); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_LPAREN.add(LPAREN61);
            }

            pushFollow(FOLLOW_unaryExpression_in_alignAttribute1184);
            unaryExpression62=unaryExpression();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_unaryExpression.add(unaryExpression62.getTree());
            }
            RPAREN63=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_alignAttribute1186); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_RPAREN.add(RPAREN63);
            }



            // AST REWRITE
            // elements: unaryExpression
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 426:42: -> ^( ALIGN unaryExpression )
            {
                // CTFParser.g:426:45: ^( ALIGN unaryExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ALIGN, "ALIGN"), root_1);

                adaptor.addChild(root_1, stream_unaryExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "alignAttribute"

