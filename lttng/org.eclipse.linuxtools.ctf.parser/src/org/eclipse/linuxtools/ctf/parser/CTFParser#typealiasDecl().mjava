    // $ANTLR start "typealiasDecl"
    // CTFParser.g:883:1: typealiasDecl : TYPEALIASTOK typealiasTarget TYPE_ASSIGNMENT typealiasAlias -> ^( TYPEALIAS ^( TYPEALIAS_TARGET typealiasTarget ) ^( TYPEALIAS_ALIAS typealiasAlias ) ) ;
    public final CTFParser.typealiasDecl_return typealiasDecl() throws RecognitionException {
        CTFParser.typealiasDecl_return retval = new CTFParser.typealiasDecl_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token TYPEALIASTOK154=null;
        Token TYPE_ASSIGNMENT156=null;
        CTFParser.typealiasTarget_return typealiasTarget155 = null;

        CTFParser.typealiasAlias_return typealiasAlias157 = null;


        CommonTree TYPEALIASTOK154_tree=null;
        CommonTree TYPE_ASSIGNMENT156_tree=null;
        RewriteRuleTokenStream stream_TYPE_ASSIGNMENT=new RewriteRuleTokenStream(adaptor,"token TYPE_ASSIGNMENT");
        RewriteRuleTokenStream stream_TYPEALIASTOK=new RewriteRuleTokenStream(adaptor,"token TYPEALIASTOK");
        RewriteRuleSubtreeStream stream_typealiasAlias=new RewriteRuleSubtreeStream(adaptor,"rule typealiasAlias");
        RewriteRuleSubtreeStream stream_typealiasTarget=new RewriteRuleSubtreeStream(adaptor,"rule typealiasTarget");

          enter("typealiasDecl");

        try {
            // CTFParser.g:890:1: ( TYPEALIASTOK typealiasTarget TYPE_ASSIGNMENT typealiasAlias -> ^( TYPEALIAS ^( TYPEALIAS_TARGET typealiasTarget ) ^( TYPEALIAS_ALIAS typealiasAlias ) ) )
            // CTFParser.g:891:3: TYPEALIASTOK typealiasTarget TYPE_ASSIGNMENT typealiasAlias
            {
            TYPEALIASTOK154=(Token)match(input,TYPEALIASTOK,FOLLOW_TYPEALIASTOK_in_typealiasDecl3027); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_TYPEALIASTOK.add(TYPEALIASTOK154);
            }

            pushFollow(FOLLOW_typealiasTarget_in_typealiasDecl3029);
            typealiasTarget155=typealiasTarget();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_typealiasTarget.add(typealiasTarget155.getTree());
            }
            TYPE_ASSIGNMENT156=(Token)match(input,TYPE_ASSIGNMENT,FOLLOW_TYPE_ASSIGNMENT_in_typealiasDecl3031); if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_TYPE_ASSIGNMENT.add(TYPE_ASSIGNMENT156);
            }

            pushFollow(FOLLOW_typealiasAlias_in_typealiasDecl3033);
            typealiasAlias157=typealiasAlias();

            state._fsp--;
            if (state.failed) {
                return retval;
            }
            if ( state.backtracking==0 ) {
                stream_typealiasAlias.add(typealiasAlias157.getTree());
            }


            // AST REWRITE
            // elements: typealiasAlias, typealiasTarget
            // token labels:
            // rule labels: retval
            // token list labels:
            // rule list labels:
            // wildcard labels:
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 892:3: -> ^( TYPEALIAS ^( TYPEALIAS_TARGET typealiasTarget ) ^( TYPEALIAS_ALIAS typealiasAlias ) )
            {
                // CTFParser.g:892:6: ^( TYPEALIAS ^( TYPEALIAS_TARGET typealiasTarget ) ^( TYPEALIAS_ALIAS typealiasAlias ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEALIAS, "TYPEALIAS"), root_1);

                // CTFParser.g:892:18: ^( TYPEALIAS_TARGET typealiasTarget )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEALIAS_TARGET, "TYPEALIAS_TARGET"), root_2);

                adaptor.addChild(root_2, stream_typealiasTarget.nextTree());

                adaptor.addChild(root_1, root_2);
                }
                // CTFParser.g:892:54: ^( TYPEALIAS_ALIAS typealiasAlias )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TYPEALIAS_ALIAS, "TYPEALIAS_ALIAS"), root_2);

                adaptor.addChild(root_2, stream_typealiasAlias.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                exit("typealiasDecl");

            }
        }

        	catch (RecognitionException e)
        	{
        	  throw e;
        	}
        finally {
        }
        return retval;
    }
    // $ANTLR end "typealiasDecl"

