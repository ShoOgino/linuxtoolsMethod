    /**
     * Generates a session configuration file from a set of session information.
     *
     * @param sessions
     *            The session informations
     * @param sessionFileDestination
     *            The path of the locally saved session configuration file
     * @return The status of the session configuration generation
     */
    public static IStatus generateSessionConfig(Set<ISessionInfo> sessions, IPath sessionFileDestination) {
        /* Parameters validation */
        if (sessions == null || sessions.isEmpty()) {
            return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.SessionConfigXML_InvalidSessionInfoList);
        } else if (sessionFileDestination == null) {
            return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.SessionConfigXML_InvalidTraceSessionPath);
        }

        /* Generate the session configuration file */
        try {
            Document sessionConfigDocument = generateSessionConfig(sessions);

            if (sessionConfigDocument != null) {
                saveSessionConfig(sessionConfigDocument, sessionFileDestination.toString());
            } else {
                return new Status(IStatus.ERROR, Activator.PLUGIN_ID, Messages.SessionConfigXML_SessionConfigGenerationError);
            }
        } catch (TransformerException | IllegalArgumentException | ParserConfigurationException e) {
            Activator.getDefault().logError("Error generating the session configuration file: " + sessionFileDestination.toString(), e); //$NON-NLS-1$
            return new Status(IStatus.ERROR, Activator.PLUGIN_ID, e.getMessage());
        }

        return Status.OK_STATUS;
    }

