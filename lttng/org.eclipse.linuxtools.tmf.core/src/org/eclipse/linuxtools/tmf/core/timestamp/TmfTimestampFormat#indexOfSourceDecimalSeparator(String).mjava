    /**
     * Finds the first index of a decimal separator in the source string.
     * Skips the number of decimal separators in the format pattern.
     * Returns the source string length if decimal separator is not found.
     */
    private int indexOfSourceDecimalSeparator(String source) {
        String separator = fDecimalSeparator == '\'' ? "''" : String.valueOf(fDecimalSeparator); //$NON-NLS-1$
        int patternPos = fPattern.indexOf(separator);
        int sourcePos = -1;
        while (patternPos != -1 && patternPos <= fPatternDecimalSeparatorIndex) {
            sourcePos = source.indexOf(fDecimalSeparator, sourcePos + 1);
            if (sourcePos == -1) {
                break;
            }
            // skip optional spaces and tabs before a pattern letter
            char p = patternPos < fPattern.length() - 1 ? fPattern.charAt(patternPos + 1) : '\0';
            if ((p >= 'a' && p <= 'z') || (p >= 'A' && p <= 'Z')) {
                while (sourcePos < source.length() - 1) {
                    char s = source.charAt(sourcePos + 1);
                    if (s == ' ' || s == '\t') {
                        sourcePos++;
                    } else {
                        break;
                    }
                }
            }
            patternPos = fPattern.indexOf(separator, patternPos + separator.length());
        }
        if (sourcePos == -1) {
            sourcePos = source.length();
        }
        return sourcePos;
    }

