    /* (non-Javadoc)
     *
     * Returns a brand new context based on the location provided and 
     * initializes the event queues
     * 
     * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#seekEvent(org.eclipse.linuxtools.tmf.core.trace.ITmfLocation)
     */
    @Override
    public synchronized ITmfContext seekEvent(final ITmfLocation<?> location) {
        // Validate the location
        if (location != null && !(location instanceof TmfExperimentLocation)) {
            return null; // Throw an exception?
        }
        // Make sure we have something to read from
        if (fTraces == null) {
            return null;
        }

        // Instantiate the location
        final TmfExperimentLocation expLocation = (location == null)
                ? new TmfExperimentLocation(new TmfLocationArray(new TmfRankedLocation[fTraces.length])) 
                : (TmfExperimentLocation) location.clone();

        // Create and populate the context's traces contexts
        final TmfExperimentContext context = new TmfExperimentContext(new ITmfContext[fTraces.length]);

        long rank = 0;
        for (int i = 0; i < fTraces.length; i++) {
            // Get the relevant trace attributes
            final TmfRankedLocation rankedLocation = expLocation.getLocation().getLocations()[i];
            final ITmfLocation<?> traceLocation = (rankedLocation == null) ? null : rankedLocation.getLocation();
            final long traceRank = (rankedLocation == null) ? 0 : rankedLocation.getRank();
            context.getContexts()[i] = fTraces[i].seekEvent(traceLocation);
            context.getContexts()[i].setRank(traceRank);
            expLocation.getLocation().getLocations()[i] = new TmfRankedLocation(context.getContexts()[i]);
            context.getEvents()[i] = fTraces[i].getNext(context.getContexts()[i]);
            rank += traceRank;
        }

        // Finalize context
        context.setLocation(expLocation);
        context.setLastTrace(TmfExperimentContext.NO_TRACE);
        context.setRank(rank);

        fExperimentContext = context;
        return (ITmfContext) context;
    }

