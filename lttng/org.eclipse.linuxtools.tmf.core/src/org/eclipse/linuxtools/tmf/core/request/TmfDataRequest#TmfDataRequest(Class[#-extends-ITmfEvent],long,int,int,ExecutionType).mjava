    /**
     * Request 'n' events of a given type from the given index (given priority).
     * Events are returned in blocks of the given size.
     *
     * @param dataType
     *            The requested data type.
     * @param index
     *            The index of the first event to retrieve. Use '0' to start at
     *            the beginning of the trace.
     * @param nbRequested
     *            The number of events requested. You can use
     *            {@link TmfDataRequest#ALL_DATA} to specify you want all events
     *            in the trace.
     * @param blockSize
     *            The number of events per block. You can use
     *            {@link TmfDataRequest#DEFAULT_BLOCK_SIZE}.
     * @param priority
     *            The requested execution priority.
     */
    public TmfDataRequest(Class<? extends ITmfEvent> dataType,
            long index,
            int nbRequested,
            int blockSize,
            ExecutionType priority) {
        fRequestId = fRequestNumber++;
        fDataType = dataType;
        fIndex = index;
        fNbRequested = nbRequested;
        fBlockSize = blockSize;
        fExecType = priority;
        fNbRead = 0;

        fRequestRunning = false;
        fRequestCompleted = false;
        fRequestFailed = false;
        fRequestCanceled = false;

        if (!(this instanceof ITmfEventRequest) && TmfCoreTracer.isRequestTraced()) {
            String type = getClass().getName();
            type = type.substring(type.lastIndexOf('.') + 1);
            @SuppressWarnings("nls")
            String message = "CREATED "
                    + (getExecType() == ITmfDataRequest.ExecutionType.BACKGROUND ? "(BG)" : "(FG)")
                    + " Type=" + type + " Index=" + getIndex() + " NbReq=" + getNbRequested()
                    + " DataType=" + getDataType().getSimpleName();
            TmfCoreTracer.traceRequest(this, message);
        }
    }

