    /* (non-Javadoc)
     * @see org.eclipse.linuxtools.tmf.core.trace.TmfTrace#seekEvent(long)
     *
     * TmfTrace.seekEvent(rank) will return a context that will position the
     * trace to read the event at rank 'rank' in the trace. In the case of an
     * experiment context, that event has to be actually read in the fEvents
     * buffer and the corresponding trace context has to point to the next
     * event (rank + 1) in the trace (the sum of the traces contexts ranks
     * should equal [exp context rank + #traces] (corner cases not considered).
     *
     * In the likely case that TmfTrace.seekEvent() computed the context
     * by using a read loop (reading from the experiment), the 'lastTraceRead'
     * field will be set to the actual trace that needs to be read to obtain
     * event at rank 'rank'.
     *
     * Therefore, if 'lastTraceRead' is set, we need to read that particular
     * trace *and* then decrease the context rank (which has to correspond to
     * the rank of the event to be returned next by TmfExperiemnt.getNext().
     */
    @Override
    public synchronized ITmfContext seekEvent(final long rank) {
        TmfExperimentContext context = (TmfExperimentContext) super.seekEvent(rank);
        int lastTrace = context.getLastTrace();
        if (lastTrace != TmfExperimentContext.NO_TRACE) {
            getNext(context);
            context.setRank(rank);
            context.setLastTrace(TmfExperimentContext.NO_TRACE);
        }
        return context;
    }

