    private void execute() {

        /*
         * TODO: The analysis in a job should be done at the analysis manager
         * level instead of depending on this abstract class implementation,
         * otherwise another analysis implementation may block the main thread
         */

        /* Do not execute if analysis has already run */
        if (fFinishedLatch.getCount() == 0) {
            return;
        }

        /* Do not execute if analysis already running */
        synchronized (syncObj) {
            if (fStarted) {
                return;
            }
            fStarted = true;
        }

        final ITmfTrace trace = fTrace;
        /*
         * Actual analysis will be run on a separate thread
         */
        fJob = new Job(NLS.bind(Messages.TmfAbstractAnalysisModule_RunningAnalysis, getName())) {
            @Override
            protected IStatus run(final IProgressMonitor monitor) {
                try {
                    monitor.beginTask("", IProgressMonitor.UNKNOWN); //$NON-NLS-1$
                    broadcast(new TmfStartAnalysisSignal(TmfAbstractAnalysisModule.this, TmfAbstractAnalysisModule.this));
                    fAnalysisCancelled = !executeAnalysis(monitor);
                } catch (TmfAnalysisException e) {
                    Activator.logError("Error executing analysis with trace " + getTrace().getName(), e); //$NON-NLS-1$
                } finally {
                    synchronized (syncObj) {
                        monitor.done();
                        setAnalysisCompleted();
                    }
                    TmfTraceManager.refreshSupplementaryFiles(trace);
                }
                if (!fAnalysisCancelled) {
                    return Status.OK_STATUS;
                }
                // Reset analysis so that it can be executed again.
                resetAnalysis();
                return Status.CANCEL_STATUS;
            }

            @Override
            protected void canceling() {
                TmfAbstractAnalysisModule.this.canceling();
            }

        };
        fJob.schedule();
    }

