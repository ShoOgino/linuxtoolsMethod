	/**
	 * The Tree to XML parser
	 *
	 * @param document The XML document
	 * @param treenode The node to write
	 * @param parentElement The XML element of the parent
	 */
	public static void buildXMLTree(final Document document, final ITmfFilterTreeNode treenode, Element parentElement) {
		Element element = document.createElement(treenode.getNodeName());

		if (treenode instanceof TmfFilterNode) {

			TmfFilterNode node = (TmfFilterNode) treenode;
			element.setAttribute(TmfFilterNode.NAME_ATTR, node.getFilterName());

		} else if (treenode instanceof TmfFilterEventTypeNode) {

			TmfFilterEventTypeNode node = (TmfFilterEventTypeNode) treenode;
			element.setAttribute(TmfFilterEventTypeNode.TYPE_ATTR, node.getEventType());
			element.setAttribute(TmfFilterEventTypeNode.NAME_ATTR, node.getName());

		} else if (treenode instanceof TmfFilterAndNode) {

			TmfFilterAndNode node = (TmfFilterAndNode) treenode;
			element.setAttribute(TmfFilterAndNode.NOT_ATTR, Boolean.toString(node.isNot()));

		} else if (treenode instanceof TmfFilterOrNode) {

			TmfFilterOrNode node = (TmfFilterOrNode) treenode;
			element.setAttribute(TmfFilterOrNode.NOT_ATTR, Boolean.toString(node.isNot()));

		} else if (treenode instanceof TmfFilterContainsNode) {

			TmfFilterContainsNode node = (TmfFilterContainsNode) treenode;
			element.setAttribute(TmfFilterContainsNode.NOT_ATTR, Boolean.toString(node.isNot()));
			element.setAttribute(TmfFilterContainsNode.FIELD_ATTR, node.getField());
			element.setAttribute(TmfFilterContainsNode.VALUE_ATTR, node.getValue());
			element.setAttribute(TmfFilterContainsNode.IGNORECASE_ATTR, Boolean.toString(node.isIgnoreCase()));

		} else if (treenode instanceof TmfFilterEqualsNode) {

			TmfFilterEqualsNode node = (TmfFilterEqualsNode) treenode;
			element.setAttribute(TmfFilterEqualsNode.NOT_ATTR, Boolean.toString(node.isNot()));
			element.setAttribute(TmfFilterEqualsNode.FIELD_ATTR, node.getField());
			element.setAttribute(TmfFilterEqualsNode.VALUE_ATTR, node.getValue());
			element.setAttribute(TmfFilterEqualsNode.IGNORECASE_ATTR, Boolean.toString(node.isIgnoreCase()));

		} else if (treenode instanceof TmfFilterMatchesNode) {

			TmfFilterMatchesNode node = (TmfFilterMatchesNode) treenode;
			element.setAttribute(TmfFilterMatchesNode.NOT_ATTR, Boolean.toString(node.isNot()));
			element.setAttribute(TmfFilterMatchesNode.FIELD_ATTR, node.getField());
			element.setAttribute(TmfFilterMatchesNode.REGEX_ATTR, node.getRegex());

		} else if (treenode instanceof TmfFilterCompareNode) {

			TmfFilterCompareNode node = (TmfFilterCompareNode) treenode;
			element.setAttribute(TmfFilterCompareNode.NOT_ATTR, Boolean.toString(node.isNot()));
			element.setAttribute(TmfFilterCompareNode.FIELD_ATTR, node.getField());
			element.setAttribute(TmfFilterCompareNode.RESULT_ATTR, Integer.toString(node.getResult()));
			element.setAttribute(TmfFilterCompareNode.TYPE_ATTR, node.getType().toString());
			element.setAttribute(TmfFilterCompareNode.VALUE_ATTR, node.getValue());

		}

		parentElement.appendChild(element);

		for (int i = 0; i < treenode.getChildrenCount(); i++) {
			buildXMLTree(document, treenode.getChild(i), element);
		}
	}

