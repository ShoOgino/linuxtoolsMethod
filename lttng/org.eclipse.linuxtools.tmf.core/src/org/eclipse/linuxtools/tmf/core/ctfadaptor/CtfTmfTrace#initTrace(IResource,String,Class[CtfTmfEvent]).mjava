    /**
     * Method initTrace.
     * @param resource IResource
     * @param path String
     * @param eventType Class<CtfTmfEvent>
     * @throws TmfTraceException
     * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#initTrace(IResource, String, Class<CtfTmfEvent>)
     */
    @Override
    public void initTrace(final IResource resource, final String path, final Class<CtfTmfEvent> eventType)
            throws TmfTraceException {
        this.fResource = resource;
        try {
            this.fTrace = new CTFTrace(path);
            for( int i =0 ; i< this.fTrace.getNbEventTypes(); i++) {
                EventDeclaration ed = this.fTrace.getEventType(i);
                ITmfEventField eventField = parseDeclaration(ed);
                new CtfTmfEventType(ed.getName(), eventField);
            }
        } catch (final CTFReaderException e) {
            /*
             * If it failed at the init(), we can assume it's because the file
             * was not found or was not recognized as a CTF trace. Throw into
             * the new type of exception expected by the rest of TMF.
             */
            throw new TmfTraceException(e.getMessage());
        }
        CtfIterator iterator = new CtfIterator(this, 0, 0);
        setStartTime(TmfTimestamp.BIG_BANG);
        if( !iterator.getLocation().equals(CtfIterator.NULL_LOCATION)) {
            setStartTime(iterator.getCurrentEvent().getTimestamp());
        }
        TmfSignalManager.register(this);
        // FIXME this should become a request
        buildStateSystem();

        /* Refresh the project, so it can pick up new files that got created. */
        if ( resource != null) {
            try {
                resource.getProject().refreshLocal(IResource.DEPTH_INFINITE, null);
            } catch (CoreException e) {
                throw new TmfTraceException(e.getMessage());
            }
        }
    }

