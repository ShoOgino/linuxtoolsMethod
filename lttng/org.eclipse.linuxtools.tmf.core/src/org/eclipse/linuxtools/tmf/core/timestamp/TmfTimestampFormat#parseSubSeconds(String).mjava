    /**
     * Parse the sub-second digits in the input. Handle delimiters as optional
     * characters. Match any non-pattern and non-delimiter pattern characters
     * against the input. Returns the number of nanoseconds.
     */
    private long parseSubSeconds(String input) throws ParseException {
        StringBuilder digits = new StringBuilder("000000000"); //$NON-NLS-1$
        String pattern = fPattern.substring(fPatternDecimalSeparatorIndex);
        boolean inQuote = false;
        int digitIndex = 0;
        int inputIndex = 0;
        int patternIndex = 0;
        while (patternIndex < pattern.length()) {
            char ch = pattern.charAt(patternIndex);
            if (ch == '\'') {
                patternIndex++;
                if (patternIndex < pattern.length()) {
                    ch = pattern.charAt(patternIndex);
                    if (ch != '\'') {
                        inQuote = !inQuote;
                    }
                } else if (inQuote) {
                    // final end quote
                    break;
                }
            }
            if (fDelimiterChars.indexOf(ch) != -1 && !inQuote) {
                // delimiter is optional if not in quote
                if (inputIndex < input.length() && input.charAt(inputIndex) == ch) {
                    inputIndex++;
                }
                patternIndex++;
                continue;
            } else if (fSubSecPatternChars.indexOf(ch) != -1 && !inQuote) {
                // read digit if not in quote
                if (inputIndex < input.length() && Character.isDigit(input.charAt(inputIndex))) {
                    if (digitIndex < digits.length()) {
                        digits.setCharAt(digitIndex, input.charAt(inputIndex));
                        digitIndex++;
                    }
                    inputIndex++;
                } else {
                    // not a digit, stop parsing digits
                    digitIndex = digits.length();
                }
                patternIndex++;
                continue;
            }
            if (inputIndex >= input.length() || input.charAt(inputIndex) != ch) {
                throw new ParseException("Unparseable sub-seconds: \"" + input + '\"', inputIndex); //$NON-NLS-1$
            }
            patternIndex++;
            inputIndex++;
        }
        return Long.parseLong(digits.toString());
    }

