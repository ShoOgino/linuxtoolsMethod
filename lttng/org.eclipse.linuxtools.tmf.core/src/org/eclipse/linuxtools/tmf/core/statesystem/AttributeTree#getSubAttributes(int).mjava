    /**
     * Returns the sub-attributes of the quark passed in parameter
     * 
     * @param attributeQuark
     * @return
     * @throws AttributeNotFoundException
     */
    List<Integer> getSubAttributes(int attributeQuark)
            throws AttributeNotFoundException {
        List<Integer> listOfChildren = new ArrayList<Integer>();
        Attribute startingAttribute;
        
        /* Check if the quark is valid */
        if ( attributeQuark < 0 || attributeQuark >= attributeList.size()) {
            throw new AttributeNotFoundException();
        }
        
        /* Set up the node from which we'll start the search */
        if ( attributeQuark == -1 ) {
            startingAttribute = attributeTreeRoot;
        } else {
            startingAttribute = attributeList.get(attributeQuark);
        }
        
        /* Iterate through the sub-attributes and add them to the list */
        for (Attribute childNode : startingAttribute.getSubAttributesList()) {
            listOfChildren.add(childNode.getQuark());
        }

        return listOfChildren;
    }

