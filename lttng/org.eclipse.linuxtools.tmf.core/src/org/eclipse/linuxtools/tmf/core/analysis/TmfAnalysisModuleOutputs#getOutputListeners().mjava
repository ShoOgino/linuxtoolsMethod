    /**
     * Return the analysis module outputs, wrapped as new module listeners,
     * advertised in the extension point, in iterable format.
     *
     * @return List of {@link ITmfNewAnalysisModuleListener}
     */
    public static Iterable<ITmfNewAnalysisModuleListener> getOutputListeners() {
        List<ITmfNewAnalysisModuleListener> newModuleListeners = new ArrayList<>();
        // Get the sources element from the extension point
        IConfigurationElement[] config = Platform.getExtensionRegistry().getConfigurationElementsFor(TMF_ANALYSIS_TYPE_ID);
        for (IConfigurationElement ce : config) {
            String elementName = ce.getName();
            if (elementName.equals(OUTPUT_ELEM)) {
                try {
                    IAnalysisOutput output = (IAnalysisOutput) ce.createExecutableExtension(CLASS_ATTR);
                    ITmfNewAnalysisModuleListener listener = null;
                    for (IConfigurationElement childCe : ce.getChildren()) {
                        if (childCe.getName().equals(ANALYSIS_ID_ELEM)) {
                            listener = new TmfNewAnalysisOutputListener(output, childCe.getAttribute(ID_ATTR), null);
                        } else if (childCe.getName().equals(MODULE_CLASS_ELEM)) {
                            listener = new TmfNewAnalysisOutputListener(output, null, (Class<? extends IAnalysisModule>) childCe.createExecutableExtension(CLASS_ATTR).getClass());
                        }
                    }
                    if (listener != null) {
                        newModuleListeners.add(listener);
                    }
                } catch (InvalidRegistryObjectException | CoreException e) {
                    Activator.logError("Error creating module output listener", e); //$NON-NLS-1$
                }
            }
        }
        return newModuleListeners;
    }

