    @Override
    public boolean matches(ITmfEvent event) {
        Object value = getFieldValue(event, fField);
        if (value == null) {
            return false;
        }
        if (fType == Type.NUM) {
            if (fValueNumber != null) {
                if (value instanceof Number) {
                    double valueDouble = ((Number) value).doubleValue();
                    return (Double.compare(valueDouble, fValueNumber.doubleValue()) == fResult) ^ fNot;
                }
                try {
                    double valueDouble = NumberFormat.getInstance().parse(value.toString()).doubleValue();
                    return (Double.compare(valueDouble, fValueNumber.doubleValue()) == fResult) ^ fNot;
                } catch (ParseException e) {
                }
            }
        } else if (fType == Type.ALPHA) {
            String valueString = value.toString();
            int comp = (int) Math.signum(valueString.compareTo(fValue.toString()));
            return (comp == fResult) ^ fNot;
        } else if (fType == Type.TIMESTAMP) {
            if (fValueTimestamp != null) {
                if (value instanceof ITmfTimestamp) {
                    ITmfTimestamp valueTimestamp = (ITmfTimestamp) value;
                    int comp = (int) Math.signum(valueTimestamp.compareTo(fValueTimestamp, false));
                    return (comp == fResult) ^ fNot;
                }
                try {
                    ITmfTimestamp valueTimestamp = new TmfNanoTimestamp(fTimestampFormat.parseValue(value.toString()));
                    int comp = (int) Math.signum(valueTimestamp.compareTo(fValueTimestamp, false));
                    return (comp == fResult) ^ fNot;
                } catch (ParseException e) {
                }
            }
        }
        return false;
    }

