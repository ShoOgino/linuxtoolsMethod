    /**
     * Constructor with possibility to tell whether to throw errors on exception
     * or not
     *
     * @param syncFile
     *            The file containing synchronization information
     * @param throwErrors
     *            Whether to throw exceptions or not
     * @throws IOException
     *             If the file couldn't be opened for some reason
     */
    public SynchronizationBackend(File syncFile, boolean throwErrors) throws IOException {
        /*
         * Open the file ourselves, get the header information we need, then
         * pass on the descriptor.
         */
        int res;

        fSyncFile = syncFile;

        if (syncFile == null) {
            return;
        }

        if (!syncFile.exists()) {
            if (throwErrors) {
                throw new IOException("Selected synchronization file does not exist"); //$NON-NLS-1$
            }
            return;
        }
        if (syncFile.length() <= 0) {
            if (throwErrors) {
                throw new IOException("Invalid synchronization file selected, " + //$NON-NLS-1$
                        "target file is empty"); //$NON-NLS-1$
            }
            return;
        }

        try (FileInputStream fis = new FileInputStream(syncFile);
                FileChannel fc = fis.getChannel();) {
            ByteBuffer buffer = ByteBuffer.allocate(HEADER_SIZE);
            buffer.clear();
            fc.read(buffer);
            buffer.flip();

            /*
             * Check the magic number,to make sure we're opening the right type
             * of file
             */
            res = buffer.getInt();
            if (res != SYNC_FILE_MAGIC_NUMBER) {
                throw new IOException("Selected file does not" + //$NON-NLS-1$
                        "look like a synchronization file"); //$NON-NLS-1$
            }

            res = buffer.getInt(); /* Major version number */
            if (res != FILE_VERSION) {
                throw new IOException("Select synchronization file is of an older " //$NON-NLS-1$
                        + "format. Synchronization will have to be computed again."); //$NON-NLS-1$
            }

            res = buffer.getInt(); /* Minor version number */
        }
    }

