    /**
     * Start an asynchronous index building job and waits for the job completion
     * if required. Typically, the indexing job sends notifications at regular
     * intervals to indicate its progress.
     * <p>
     * <b>Example 1</b>: Index a whole trace asynchronously
     * <pre>
     * trace.getIndexer().buildIndex(0, TmfTimeRange.ETERNITY, false);
     * </pre>
     * <b>Example 2</b>: Index a whole trace synchronously
     * <pre>
     * trace.getIndexer().buildIndex(0, TmfTimeRange.ETERNITY, true);
     * </pre>
     * <b>Example 3</b>: Index a trace asynchronously, starting at rank 100
     * <pre>
     * trace.getIndexer().buildIndex(100, TmfTimeRange.ETERNITY, false);
     * </pre>
     * <b>Example 4</b>: Index a trace asynchronously, starting at rank 100 for events between
     * T1 and T2 (inclusive). This is used for incremental indexing.
     * <pre>
     * TmfTimeRange range = new TmfTimeRange(T1, T2);
     * trace.getIndexer().buildIndex(100, range, false);
     * </pre>
     *
     * @param offset The offset of the first event to consider
     * @param range The time range to consider
     * @param waitForCompletion
     */
    public void buildIndex(long offset, TmfTimeRange range, boolean waitForCompletion);

