    /**
     * Print a numeric value as a string in a given base
     *
     * @param value
     *            The value to print as string
     * @param base
     *            The base for this value
     * @param signed
     *            Is the value signed or not
     * @return formatted number string
     * @since 2.0
     */
    public final static String formatNumber(long value, int base, boolean signed) {
        String s;

        /* Format the number correctly according to the integer's base */
        switch (base) {
        case 2:
            s = "0b" + Long.toBinaryString(value); //$NON-NLS-1$
            break;
        case 8:
            s = "0" + Long.toOctalString(value); //$NON-NLS-1$

            break;
        case 16:
            s = "0x" + Long.toHexString(value); //$NON-NLS-1$
            break;
        case 10:
        default:
            /* For non-standard base, we'll just print it as a decimal number */
            if (!signed && value < 0) {
                /* Since there are no 'unsigned long', handle this case with BigInteger */
                BigInteger bigInteger = BigInteger.valueOf(value);
                /*
                 * powerOfTwo = 2^64 we add 2^64 to the negative number to get
                 * the real unsigned value
                 */
                BigInteger powerOfTwo = (BigInteger.valueOf(Long.MAX_VALUE)).add(BigInteger.valueOf(1));
                powerOfTwo = powerOfTwo.multiply(BigInteger.valueOf(2));
                bigInteger = bigInteger.add(powerOfTwo);

                s = bigInteger.toString();
            } else {
                s = Long.toString(value);
            }
            break;
        }
        return s;
    }

