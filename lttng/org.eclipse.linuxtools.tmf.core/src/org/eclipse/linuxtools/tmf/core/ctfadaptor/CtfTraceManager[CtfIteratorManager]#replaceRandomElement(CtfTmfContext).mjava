    /**
     * Replace a random element
     *
     * @param context
     *            the context to swap in
     * @return the iterator of the removed elements.
     */
    private CtfIterator replaceRandomElement(
            final CtfTmfContext context) {
        /*
         * This needs some explanation too: We need to select a random victim
         * and remove it. The order of the elements is not important, so instead
         * of just calling arraylist.remove(element) which has an O(n)
         * complexity, we pick an random number. The element is swapped out of
         * the array and removed and replaced in the hashmap.
         */
        final int size = fRandomAccess.size();
        final int pos = fRnd.nextInt(size);
        final CtfTmfContext victim = fRandomAccess.get(pos);
        fRandomAccess.set(pos, context);
        final CtfIterator elem = fMap.remove(victim);
        fMap.put(context, elem);
        return elem;
    }

