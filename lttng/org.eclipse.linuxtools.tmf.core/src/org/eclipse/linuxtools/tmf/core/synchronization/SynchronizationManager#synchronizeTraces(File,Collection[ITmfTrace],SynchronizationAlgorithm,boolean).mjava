    /**
     * Function called to synchronize traces with a specific synchronization
     * algorithm. If a synchronization already exists, but is not the requested
     * algorithm, the synchronization is done again using the new algorithm
     *
     * @param syncFile
     *            The target name of the synchronization file. If it exists, it
     *            will be opened, otherwise it will be created and data from
     *            this synchro run will be saved there
     * @param traces
     *            The list of traces to synchronize
     * @param algo
     *            A synchronization algorithm object to determine the algorithm
     *            used to synchronization.
     * @param doSync
     *            Whether to actually synchronize or just try opening a sync
     *            file
     * @return The synchronization object
     */
    public static SynchronizationAlgorithm synchronizeTraces(final File syncFile, final Collection<ITmfTrace> traces, SynchronizationAlgorithm algo, boolean doSync) {

        SynchronizationAlgorithm syncAlgo;
        if (doSync) {
            syncAlgo = synchronize(syncFile, traces, algo);
        } else {
            syncAlgo = openExisting(syncFile);
            if (syncAlgo == null || (syncAlgo.getClass() != algo.getClass())) {
                if (algo != null) {
                    syncAlgo = algo;
                } else {
                    syncAlgo = new SyncAlgorithmFullyIncremental();
                }
            }
        }

        return syncAlgo;
    }

