    /**
     * Return the weighted average value of an attribute over a time range
     *
     * @param t1
     *            The start time of the range
     * @param t2
     *            The end time of the range
     * @param quark
     *            The quark of the attribute
     * @return The weighted average value of the attribute in this range
     */
    public double queryRangeAverage(long t1, long t2, int quark) {
        double avg = 0.0;
        try {
            List<ITmfStateInterval> intervals = queryAttributeRange(t1, t2, quark, AbstractTmfMipmapStateProvider.AVG_STRING);
            if (intervals.size() == 0) {
                return 0;
            } else if (t1 == t2) {
                ITmfStateValue value = intervals.get(0).getStateValue();
                if (value.getType() == Type.DOUBLE) {
                    return value.unboxDouble();
                }
                return value.unboxLong();
            }
            for (ITmfStateInterval si : intervals) {
                long startTime = Math.max(t1, si.getStartTime());
                long endTime = Math.min(t2, si.getEndTime() + 1);
                long delta = endTime - startTime;
                if (delta > 0) {
                    ITmfStateValue value = si.getStateValue();
                    if (value.getType() == Type.DOUBLE) {
                        avg += si.getStateValue().unboxDouble() * ((double) delta / (double) (t2 - t1));
                    } else {
                        avg += si.getStateValue().unboxLong() * ((double) delta / (double) (t2 - t1));
                    }
                }
            }
        } catch (StateValueTypeException e) {
            e.printStackTrace();
        }
        return avg;
    }

