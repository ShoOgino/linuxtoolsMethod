    /* (non-Javadoc)
     * @see org.eclipse.linuxtools.tmf.core.trace.ITmfTrace#seekEvent(org.eclipse.linuxtools.tmf.core.event.ITmfTimestamp)
     */
    @Override
    public ITmfContext seekEvent(final ITmfTimestamp ts) {

        ITmfTimestamp timestamp = ts;
        if (timestamp == null)
            timestamp = TmfTimestamp.BIG_BANG;

        // First, find the right checkpoint
        int index = Collections.binarySearch(fCheckpoints, new TmfCheckpoint(timestamp, null));

        // In the very likely case that the checkpoint was not found, bsearch
        // returns its negated would-be location (not an offset...). From that
        // index, we can then position the stream and get the event.
        if (index < 0)
            index = Math.max(0, -(index + 2));

        // Position the stream at the checkpoint
        ITmfLocation<?> location;
        synchronized (fCheckpoints) {
            if (!fCheckpoints.isEmpty()) {
                if (index >= fCheckpoints.size())
                    index = fCheckpoints.size() - 1;
                location = fCheckpoints.elementAt(index).getLocation();
            } else
                location = null;
        }
        final ITmfContext context = seekLocation(location);
        context.setRank(index * fIndexPageSize);

        // And locate the event
        final ITmfContext nextEventContext = context.clone(); // Must use clone() to get the right subtype...
        ITmfEvent event = getNextEvent(nextEventContext);
        while (event != null && event.getTimestamp().compareTo(timestamp, false) < 0) {
            context.setLocation(nextEventContext.getLocation().clone());
            context.increaseRank();
            event = getNextEvent(nextEventContext);
        }

        return context;
    }

