    /**
     * This is the version to specifically add missing attributes.
     * 
     * If 'numericalNode' is true, all the new attributes created will be of
     * type 'NumericalNode' instead of 'AlphaNumNode'. Be careful with this, if
     * you do not want ALL added attributes to be numerical, call this function
     * first with 'false' to create the parent nodes, then call it again to make
     * sure only the final node is numerical.
     * 
     * @throws AttributeNotFoundException
     */
    int getQuarkDontAdd(int startingNodeQuark, String... subPath)
            throws AttributeNotFoundException {
        assert (startingNodeQuark >= -1);

        Attribute prevNode;

        /* If subPath is empty, simply return the starting quark */
        if (subPath == null || subPath.length == 0) {
            return startingNodeQuark;
        }

        /* Get the "starting node" */
        if (startingNodeQuark == -1) {
            prevNode = attributeTreeRoot;
        } else {
            prevNode = attributeList.get(startingNodeQuark);
        }

        int knownQuark = prevNode.getSubAttributeQuark(subPath);
        if (knownQuark == -1) {
            /*
             * The attribute doesn't exist, but we have been specified to NOT
             * add any new attributes.
             */
            throw new AttributeNotFoundException();
        }
        /*
         * The attribute was already existing, return the quark of that
         * attribute
         */
        return knownQuark;
    }

