    /**
     * More advanced version of {@link #changeOngoingStateValue}. Replaces the
     * complete {@link #ongoingStateInfo} in one go, and updates the
     * {@link #ongoingStateStartTimes} and {@link #stateValuesTypes}
     * accordingly. BE VERY CAREFUL WITH THIS!
     *
     * @param newStateIntervals
     *            The List of intervals that will represent the new
     *            "ongoing state". Their end times don't matter, we will only
     *            check their value and start times.
     */
    synchronized void replaceOngoingState(List<ITmfStateInterval> newStateIntervals) {
        int size = newStateIntervals.size();
        ongoingStateInfo = new ArrayList<ITmfStateValue>(size);
        ongoingStateStartTimes = new ArrayList<Long>(size);
        stateValueTypes = new ArrayList<Type>(size);

        for (ITmfStateInterval interval : newStateIntervals) {
            ongoingStateInfo.add(interval.getStateValue());
            ongoingStateStartTimes.add(interval.getStartTime());
            stateValueTypes.add(interval.getStateValue().getType());
        }
    }

