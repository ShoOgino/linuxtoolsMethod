    /**
     * Try to get the state interval valid for time/quark, if it is present in
     * this transient state. If it is not (for example, a new value is active
     * since after the specified timestamp) then null will be returned.
     *
     * @param time
     *            The timestamp to look for
     * @param quark
     *            The quark of the attribute to look for
     * @return The corresponding TmfStateInterval object if we could find it in
     *         this transient state, or null if we couldn't.
     */
    @Nullable
    public ITmfStateInterval getIntervalAt(long time, int quark) {
        rwl.readLock().lock();
        try {
            checkValidAttribute(quark);
            if (!isActive() || time < ongoingStateStartTimes.get(quark)) {
                return null;
            }
            return new TmfStateInterval(ongoingStateStartTimes.get(quark),
                    latestTime, quark, ongoingStateInfo.get(quark));
        } catch (AttributeNotFoundException e) {
            return null;
        } finally {
            rwl.readLock().unlock();
        }
    }

