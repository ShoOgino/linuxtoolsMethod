    /**
     * Get the node at the offset from the cache. If the node is not found in
     * memory, it is loaded from disk.
     *
     * @param offset
     * @return
     */
    BTreeNode getNode(long offset) {
        if (fRootNode != null && fRootNode.getOffset() == offset) {
            return fRootNode;
        }

        for (BTreeNode nodeSearch : fCachedNodes) {
            if (nodeSearch.getOffset() == offset) {
                // This node is now the most recently used
                fCachedNodes.remove(nodeSearch);
                fCachedNodes.push(nodeSearch);

                return nodeSearch;
            }
        }

        ++fCcheMisses;

        BTreeNode node = new BTreeNode(fTree, offset);
        node.serializeIn();
        addNode(node);

        return node;
    }

