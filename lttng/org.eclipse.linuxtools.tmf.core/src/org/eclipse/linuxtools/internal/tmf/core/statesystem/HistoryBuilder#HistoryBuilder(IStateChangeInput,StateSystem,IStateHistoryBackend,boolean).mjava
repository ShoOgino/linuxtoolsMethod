    /**
     * Instantiate a new HistoryBuilder helper. The input -> ss -> backend
     * relationships should have been set up already.
     *
     * @param stateChangeInput
     *            The input plugin to use
     * @param ss
     *            The state system object that will receive the state changes
     *            from the input
     * @param backend
     *            The back-end storage to use, which will receive the intervals
     *            from the ss
     * @param buildManually
     *            Should we build this history in-band or not. True means we
     *            will start the building ourselves and block the caller until
     *            construction is done. False (out-of-band) means we will start
     *            listening for the signal and return immediately.
     */
    public HistoryBuilder(IStateChangeInput stateChangeInput, StateSystem ss,
            IStateHistoryBackend backend, boolean buildManually) {
        if (stateChangeInput == null || backend == null || ss == null) {
            throw new IllegalArgumentException();
        }
        if (stateChangeInput.getAssignedStateSystem() != ss) {
            /* Logic check to make sure the input is setup properly */
            throw new RuntimeException();
        }

        sci = stateChangeInput;
        hb = backend;
        this.ss = ss;

        if (buildManually) {
            TmfSignalManager.deregister(this);
            this.buildManually();
        } else {
            started = false;
            /* We'll now wait for the signal to start building */
        }
    }

