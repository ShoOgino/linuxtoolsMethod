    /**
     * Validate parsing array through an unary expression
     */
    @Test
    public void testArrayUnaryExpression() {
        Matches(List(Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "x")),
                     Node(CTFParser.OPENBRAC),
                     Node(CTFParser.UNARY_EXPRESSION_DEC,
                          Node(CTFParser.DECIMAL_LITERAL, "1"))),
                unaryExpression("x[1]"));

        Matches(List(Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "x")),
                     Node(CTFParser.OPENBRAC),
                     Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "n"))),
                unaryExpression("x[n]"));

        Matches(List(Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "x")),
                     Node(CTFParser.OPENBRAC),
                     Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "n")),
                     Node(CTFParser.OPENBRAC),
                     Node(CTFParser.UNARY_EXPRESSION_DEC,
                          Node(CTFParser.DECIMAL_LITERAL, "1"))),
                unaryExpression("x[n][1]"));

        Matches(List(Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "x")),
                     Node(CTFParser.OPENBRAC),
                     Node(CTFParser.UNARY_EXPRESSION_STRING,
                          Node(CTFParser.IDENTIFIER, "n")),
                     Node(CTFParser.OPENBRAC),
                     Node(CTFParser.UNARY_EXPRESSION_DEC,
                          Node(CTFParser.DECIMAL_LITERAL, "1"),
                          Node(CTFParser.SIGN, "+"))),
                unaryExpression("x[n][+1]"));
    }

