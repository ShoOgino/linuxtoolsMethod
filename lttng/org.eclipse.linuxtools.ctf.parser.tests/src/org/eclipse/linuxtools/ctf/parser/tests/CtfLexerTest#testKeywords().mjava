    /**
     *  Validate the parsing of keywords
     */
    @Test
    public void testKeywords() {
        checkSingle(CTFLexer.ALIGNTOK, "align");
        checkSingle(CTFLexer.CONSTTOK, "const");
        checkSingle(CTFLexer.CHARTOK, "char");
        checkSingle(CTFLexer.DOUBLETOK, "double");
        checkSingle(CTFLexer.ENUMTOK, "enum");
        checkSingle(CTFLexer.EVENTTOK, "event");
        checkSingle(CTFLexer.FLOATINGPOINTTOK, "floating_point");
        checkSingle(CTFLexer.FLOATTOK, "float");
        checkSingle(CTFLexer.INTEGERTOK, "integer");
        checkSingle(CTFLexer.INTTOK, "int");
        checkSingle(CTFLexer.LONGTOK, "long");
        checkSingle(CTFLexer.SHORTTOK, "short");
        checkSingle(CTFLexer.SIGNEDTOK, "signed");
        checkSingle(CTFLexer.STREAMTOK, "stream");
        checkSingle(CTFLexer.STRINGTOK, "string");
        checkSingle(CTFLexer.STRUCTTOK, "struct");
        checkSingle(CTFLexer.TRACETOK, "trace");
        checkSingle(CTFLexer.TYPEALIASTOK, "typealias");
        checkSingle(CTFLexer.TYPEDEFTOK, "typedef");
        checkSingle(CTFLexer.UNSIGNEDTOK, "unsigned");
        checkSingle(CTFLexer.VARIANTTOK, "variant");
        checkSingle(CTFLexer.VOIDTOK, "void");
        checkSingle(CTFLexer.BOOLTOK, "_Bool");
        checkSingle(CTFLexer.COMPLEXTOK, "_Complex");
        checkSingle(CTFLexer.IMAGINARYTOK, "_Imaginary");
        checkSingle(CTFLexer.ENVTOK, "env");
        checkSingle(CTFLexer.CLOCKTOK, "clock");
        checkSingle(CTFLexer.CALLSITETOK, "callsite");
        checkSingle(CTFLexer.NANNUMBERTOK, "NaN");
        checkSingle(CTFLexer.INFINITYTOK,  "+inf");
        checkSingle(CTFLexer.NINFINITYTOK, "-inf");
    }

