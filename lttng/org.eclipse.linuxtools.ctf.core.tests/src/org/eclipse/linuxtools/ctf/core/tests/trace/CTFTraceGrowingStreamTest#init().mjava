    /**
     * Run before every test
     *
     * @throws IOException won't happen
     * @throws CTFReaderException won't happen
     */
    @Before
    public void init() throws IOException, CTFReaderException {
        fCtfDirectory = Files.createTempDirectory("temptrace", new FileAttribute<?>[] {});
        File metadata = new File(fCtfDirectory.toString() + "/" + "metadata");
        fGrowingStream = new File(fCtfDirectory.toString() + "/" + "stream");
        fUUID = UUID.randomUUID();
        fPackets = new byte[2][];
        fPackets[0] = new byte[32];
        fPackets[1] = new byte[32];
        try (PrintWriter pw = new PrintWriter(metadata)) {
            pw.println("/*CTF 1.8*/");
            pw.println("typealias integer { size = 8; align = 8; signed = false; base = 10; } := uint8_t;");
            pw.println("typealias integer { size = 32; align = 32; signed = false; base = hex; } := uint32_t;");

            pw.println("trace {");
            pw.println(" major = 0;");
            pw.println(" minor = 1;");
            pw.println(" uuid = \"" + fUUID.toString() + "\";");
            pw.println(" byte_order = le;");
            pw.println(" packet.header := struct {");
            pw.println("  uint32_t magic;");
            pw.println("  uint8_t uuid[16];");
            pw.println(" };");
            pw.println("};");
            pw.println("");
            pw.println("stream {");
            pw.println(" packet.context := struct {");
            pw.println("  uint32_t packet_size;");
            pw.println("  uint32_t content_size;");
            pw.println(" };");
            pw.println("};");
            pw.println("");
            pw.println("event {");
            pw.println(" name = thing;");
            pw.println(" fields := struct { uint32_t f; };");
            pw.println("};");
            pw.println("");
            pw.close();
        }
        setupPacket(fPackets[0], 41);
        setupPacket(fPackets[1], 0xbab4face);

        try (FileOutputStream fos = new FileOutputStream(fGrowingStream)) {
            fos.write(fPackets[0]);
        }
        fFixture = new CTFTrace(fCtfDirectory.toString());
    }

