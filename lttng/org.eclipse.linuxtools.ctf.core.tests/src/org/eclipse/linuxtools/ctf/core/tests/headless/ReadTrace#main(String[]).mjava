    /**
     * @param args
     */
    @SuppressWarnings("nls")
    public static void main(String[] args) {
        final String TRACE_PATH = "Tests/traces/trace20m1";

        // Change this to enable text output
        final boolean USE_TEXT = false;

        // Work variables
        Long nbEvent = 0L;
        Vector<Double> benchs = new Vector<Double>();
        CTFTrace trace = null;
        long start, stop;
        for (int loops = 0; loops < 100; loops++) {
            try {
                nbEvent = 0L;
                trace = new CTFTrace(TRACE_PATH);
            } catch (CTFReaderException e) {
                nbEvent = (long) -1;
            }

            start = System.nanoTime();
            if (nbEvent != -1) {
                CTFTraceReader traceReader = new CTFTraceReader(trace);

                start = System.nanoTime();
                while (traceReader.hasMoreEvents()) {
                    EventDefinition ed = traceReader.getCurrentEventDef();
                    nbEvent++;
                    if (USE_TEXT) {
                        String output = formatDate(ed.timestamp
                                + trace.getOffset());
                        System.out.println("Event " + nbEvent + " Time "
                                + output + " type "
                                + ed.getDeclaration().getName() + " on CPU "
                                + ed.getCPU());
                    }
                    traceReader.advance();
                }
            }
            stop = System.nanoTime();
            System.out.print('.');
            double time = (stop - start) / (double) nbEvent;
            benchs.add(time);
        }
        System.out.println("");
        double avg = 0;
        for (Double val : benchs) {
            avg += val;
        }
        avg /= benchs.size();
        System.out.println("Time to read = " + avg + " events/ns");
        for(Double val:benchs){
            System.out.print(val );System.out.print( ", ");
        }

    }

