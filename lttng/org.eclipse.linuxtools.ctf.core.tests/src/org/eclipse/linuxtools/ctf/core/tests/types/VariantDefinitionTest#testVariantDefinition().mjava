    /**
     * Run the VariantDefinition(VariantDeclaration,DefinitionScope,String)
     *
     * @throws CTFReaderException
     *             should not happen
     */
    @Test
    public void testVariantDefinition() throws CTFReaderException {
        VariantDeclaration declaration = new VariantDeclaration();
        declaration.setTag("");
        VariantDeclaration variantDeclaration = new VariantDeclaration();
        variantDeclaration.addField("", new EnumDeclaration(IntegerDeclaration.INT_32B_DECL));
        variantDeclaration.addField("a", IntegerDeclaration.INT_64B_DECL);
        declaration.addField(ENUM_3, new StringDeclaration());
        variantDeclaration.setTag("a");

        byte[] bytes = new byte[128];
        ByteBuffer byb = ByteBuffer.wrap(bytes);
        byb.mark();
        byb.putInt(0);
        byb.putShort((short) 2);
        byb.put(new String("hello").getBytes());
        byb.reset();
        BitBuffer bb = new BitBuffer(byb);
        VariantDefinition variantDefinition = variantDeclaration.createDefinition(fStructDefinition, "field", bb);
        EnumDeclaration declaration2 = new EnumDeclaration(IntegerDeclaration.INT_8_DECL);
        declaration2.add(0, 2, ENUM_3);
        EnumDefinition enumDefinition = new EnumDefinition(
                declaration2,
                null,
                "a",
                new IntegerDefinition(
                        IntegerDeclaration.INT_8_DECL,
                        null,
                        "A",
                        1
                ));
        IDefinitionScope definitionScope = new StructDefinition(
                new StructDeclaration(1L),
                variantDefinition,
                "",
                ImmutableList.<String> of("", "variant"),
                new Definition[] { enumDefinition, variantDefinition }
                );
        String fieldName = "";
        declaration.setTag("");
        VariantDefinition result = declaration.createDefinition(definitionScope, fieldName, bb);
        assertNotNull(result);
    }

