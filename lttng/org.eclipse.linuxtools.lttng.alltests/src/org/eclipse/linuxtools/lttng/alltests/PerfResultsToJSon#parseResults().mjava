    /**
     * Convert results from the database to JSON suitable for display
     *
     * <pre>
     * For each variant (os/jvm combination)
     *    - For each summary entry (scenario)
     *      - Generate a chart
     *      - Add it to global summary (if needed)
     *      - Create the metadata for this test
     *    - Create an overview chart for this os/jvm
     * </pre>
     *
     * @throws JSONException
     *             JSON error
     * @throws IOException
     *             IO error
     */
    @Test
    public void parseResults() throws JSONException, IOException {
        Variations configVariations = PerformanceTestPlugin.getVariations();
        JSONObject osJvmVariants = createOsJvm();

        @SuppressWarnings("rawtypes")
        Iterator keysIt = osJvmVariants.keys();
        while (keysIt.hasNext()) {
            JSONArray overviewSummarySeries = new JSONArray();

            JSONObject variant = osJvmVariants.getJSONObject((String) keysIt.next());
            String seriesKey = PerformanceTestPlugin.BUILD;

            // Clone the variations from the environment because it might have
            // extra parameters like host=, etc.
            Variations buildVariations = (Variations) configVariations.clone();
            buildVariations.setProperty(JVM_LABEL, variant.getString(JVM_LABEL));
            buildVariations.setProperty(CONFIG_LABEL, variant.getString(OS_LABEL));
            buildVariations.setProperty(BUILD_LABEL, WILDCARD_PATTERN);

            Scenario[] scenarios = DB.queryScenarios(buildVariations, WILDCARD_PATTERN, seriesKey, null);
            SummaryEntry[] summaryEntries = DB.querySummaries(buildVariations, WILDCARD_PATTERN);
            for (SummaryEntry entry : summaryEntries) {
                Scenario scenario = getScenario(entry.scenarioName, scenarios);
                JSONObject scenarioSeries = createScenarioChart(scenario, entry, buildVariations);
                // Add to global summary
                if (scenarioSeries != null && entry.isGlobal) {
                    overviewSummarySeries.put(scenarioSeries);
                }
            }

            JSONObject overviewMetadata = createOverviewChart(overviewSummarySeries, buildVariations);
            fOverviews.put(Integer.toString(fNumOverviewChart), overviewMetadata);
        }

        // Create the matadata javascript file that includes OS/JVM combinations
        // (for filtering), application components and overviews (one of OS/JVM
        // combination)
        JSONObject rootMetadata = new JSONObject();
        rootMetadata.put(OSJVM_LABEL, osJvmVariants);
        rootMetadata.put(APPLICATION_COMPONENTS_LABEL, fApplicationComponents);
        rootMetadata.put(OVERVIEWS_LABEL, fOverviews);
        try (FileWriter fw1 = new FileWriter(METADATA_FILE_NAME + METADATA_FILE_NAME_EXTENSION)) {
            fw1.write(META_DATA_JAVASCRIPT_START + rootMetadata.toString(4));
        }
    }

