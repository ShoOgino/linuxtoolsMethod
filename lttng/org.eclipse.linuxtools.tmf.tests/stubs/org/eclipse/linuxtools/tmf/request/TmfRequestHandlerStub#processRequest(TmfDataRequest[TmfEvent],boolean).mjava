    /* (non-Javadoc)
     * @see org.eclipse.linuxtools.tmf.eventlog.ITmfRequestHandler#processRequest(org.eclipse.linuxtools.tmf.eventlog.TmfEventRequest, boolean)
     */
    public void processRequest(final TmfDataRequest<TmfEvent> request, boolean waitForCompletion) {

        Thread thread = new Thread() {
            @Override
            public void run() {
                TmfTimestamp startTime = request.getRange().getStartTime();
                TmfTimestamp endTime   = request.getRange().getEndTime();
                int blockSize = request.getBlockize();

                int nbRequestedEvents = request.getNbRequestedItems();
                if (nbRequestedEvents <= 0) {
                    nbRequestedEvents = MAX_GENERATED_EVENTS;
                }

                Vector<TmfEvent> events = new Vector<TmfEvent>();
                int nbEvents = 0;
            	StreamContext context = new StreamContext(null);
                TmfEvent event = fStream.getEvent(context, startTime);
                while (!request.isCancelled() && nbEvents < nbRequestedEvents &&
                       event != null && event.getTimestamp().compareTo(endTime, false) <= 0 )
                {
                    events.add(event);
                    if (++nbEvents % blockSize == 0) {
                    	TmfEvent[] result = new TmfEvent[events.size()];
                    	events.toArray(result);
                    	request.setData(result);
                        request.handleData();
                        events.removeAllElements();
                    }
                    event = fStream.getNextEvent(context);
                }
            	TmfEvent[] result = new TmfEvent[events.size()];
            	events.toArray(result);

            	request.setData(result);
                request.handleData();
                request.done();
            }
        };
        thread.start();

        if (waitForCompletion) {
            request.waitForCompletion();
        }
    }

