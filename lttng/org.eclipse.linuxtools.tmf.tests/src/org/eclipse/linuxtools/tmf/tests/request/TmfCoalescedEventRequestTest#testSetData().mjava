	public void testSetData() {

		TmfCoalescedEventRequest<TmfEvent> coalescedRequest = new TmfCoalescedEventRequest<TmfEvent>(TmfEvent.class, range1, 100, 200);
		TmfEventRequest<TmfEvent> request1 = new TmfEventRequestStub<TmfEvent>(TmfEvent.class, range1, 100, 200);
		TmfEventRequest<TmfEvent> request2 = new TmfEventRequestStub<TmfEvent>(TmfEvent.class, range1, 100, 200);
		coalescedRequest.addRequest(request1);
		coalescedRequest.addRequest(request2);

		// Initialize the data
		int nbEvents = 10;
		TmfEvent[] events = new TmfEvent[nbEvents];
		for (int i = 0; i < nbEvents; i++) {
			events[i] = new TmfEvent(new TmfTimestamp(i), new TmfEventSource(),
					new TmfEventType(), new TmfEventReference());
		}

		coalescedRequest.setData(events);
		coalescedRequest.handleData();

		// Validate the coalescing request
		assertEquals("setData", nbEvents, coalescedRequest.getNbRead());
		TmfEvent[] eventsRead1 = coalescedRequest.getData();
		assertEquals("getData", nbEvents, eventsRead1.length);
		for (int i = 0; i < nbEvents; i++) {
			assertEquals("getData", i, eventsRead1[i].getTimestamp().getValue());
		}

		// Validate the first coalesced request
		assertEquals("setData", nbEvents, request1.getNbRead());
		TmfEvent[] eventsRead2 = request1.getData();
		assertEquals("getData", nbEvents, eventsRead2.length);
		for (int i = 0; i < nbEvents; i++) {
			assertEquals("getData", i, eventsRead2[i].getTimestamp().getValue());
		}

		// Validate the second coalesced request
		assertEquals("setData", nbEvents, request2.getNbRead());
		TmfEvent[] eventsRead3 = request2.getData();
		assertEquals("getData", nbEvents, eventsRead3.length);
		for (int i = 0; i < nbEvents; i++) {
			assertEquals("getData", i, eventsRead3[i].getTimestamp().getValue());
		}
	}

