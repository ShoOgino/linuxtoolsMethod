	public void testGetIntersection() throws Exception {

		TmfTimestamp ts1a = new TmfTimestamp(1000);
		TmfTimestamp ts1b = new TmfTimestamp(2000);
		TmfTimeRange range1 = new TmfTimeRange(ts1a, ts1b);

		TmfTimestamp ts2a = new TmfTimestamp(2000);
		TmfTimestamp ts2b = new TmfTimestamp(3000);
		TmfTimeRange range2 = new TmfTimeRange(ts2a, ts2b);
		
		TmfTimestamp ts3a = new TmfTimestamp(3000);
		TmfTimestamp ts3b = new TmfTimestamp(4000);
		TmfTimeRange range3 = new TmfTimeRange(ts3a, ts3b);
		
		TmfTimestamp ts4a = new TmfTimestamp(1500);
		TmfTimestamp ts4b = new TmfTimestamp(2500);
		TmfTimeRange range4 = new TmfTimeRange(ts4a, ts4b);
		
		TmfTimestamp ts5a = new TmfTimestamp(1500);
		TmfTimestamp ts5b = new TmfTimestamp(2000);
		TmfTimeRange range5 = new TmfTimeRange(ts5a, ts5b);
		
		TmfTimestamp ts6a = new TmfTimestamp(2000);
		TmfTimestamp ts6b = new TmfTimestamp(2500);
		TmfTimeRange range6 = new TmfTimeRange(ts6a, ts6b);
		
		TmfTimestamp ts7a = new TmfTimestamp(1500);
		TmfTimestamp ts7b = new TmfTimestamp(3500);
		TmfTimeRange range7 = new TmfTimeRange(ts7a, ts7b);
		
		TmfTimestamp ts8a = new TmfTimestamp(2250);
		TmfTimestamp ts8b = new TmfTimestamp(2750);
		TmfTimeRange range8 = new TmfTimeRange(ts8a, ts8b);
		
		assertEquals("getIntersection (below - not contiguous)", null, range1.getIntersection(range3));
		assertEquals("getIntersection (above - not contiguous)", null, range3.getIntersection(range1));

		assertEquals("getIntersection (below - contiguous)", new TmfTimeRange(ts1b, ts1b), range1.getIntersection(range2));
		assertEquals("getIntersection (above - contiguous)", new TmfTimeRange(ts3a, ts3a), range3.getIntersection(range2));

		assertEquals("getIntersection (below - overlap)", new TmfTimeRange(ts2a, ts4b), range2.getIntersection(range4));
		assertEquals("getIntersection (above - overlap)", new TmfTimeRange(ts2a, ts4b), range4.getIntersection(range2));

		assertEquals("getIntersection (within - overlap1)", range6, range2.getIntersection(range6));
		assertEquals("getIntersection (within - overlap2)", range6, range6.getIntersection(range2));

		assertEquals("getIntersection (within - overlap3)", range5, range1.getIntersection(range5));
		assertEquals("getIntersection (within - overlap4)", range5, range5.getIntersection(range1));
	
		assertEquals("getIntersection (within - overlap5)", range8, range2.getIntersection(range8));
		assertEquals("getIntersection (within - overlap6)", range8, range8.getIntersection(range2));

		assertEquals("getIntersection (accross1)", range2, range2.getIntersection(range7));
		assertEquals("getIntersection (accross2)", range2, range7.getIntersection(range2));
	}

