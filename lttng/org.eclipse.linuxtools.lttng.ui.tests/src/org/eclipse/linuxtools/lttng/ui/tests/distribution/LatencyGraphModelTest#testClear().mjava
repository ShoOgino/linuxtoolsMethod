    public void testClear() {
        final int nbBuckets = 2000;
        final int nbEvents = 10 * nbBuckets + 256;
        
        LatencyGraphModel model = new LatencyGraphModel(nbBuckets);
        for (int i = 0; i < nbEvents; i++) {
            model.countEvent(i+1, i, i);
        }
        // make sure that we actually counted something.
        GraphScaledData scaledData = model.scaleTo(100, 100, 1);

        assertTrue(scaledData.getHorLastBucket() > 0);
        
        model.clear();
        
        // Verify model parameters
        assertEquals("Horizontal bucket duration", 1, model.getHorBucketDuration());
        assertEquals("Vertical bucket duration", 1, model.getVerBucketDuration());

        assertEquals("Horizontal first bucket time", 0, model.getHorFirstBucketTime());
        assertEquals("Vertical first bucket time", 0, model.getVerFirstBucketTime());

        assertEquals("Horizontal last bucket ", 0, model.getHorLastBucket());
        assertEquals("Vertical last bucket ", 0, model.getVerLastBucket());
        
        assertEquals("Horizontal first time", 0, model.getHorFirstEventTime());
        assertEquals("Vertical first time", 0, model.getVerFirstEventTime());

        assertEquals("Horizontal last time", 0, model.getHorLastEventTime());
        assertEquals("Vertical last time", 0, model.getVerLastEventTime());
        
        assertEquals("Horizontal time limit", 2000, model.getHorTimeLimit());
        assertEquals("Vertical time limit", 2000, model.getVerTimeLimit());

        // Verify scaled data parameters
        scaledData = model.scaleTo(101, 100, 1);
        
        assertEquals("barWidth", 1, scaledData.getBarWidth());
        assertEquals("height", 100, scaledData.getHeight());
        assertEquals("width", 101, scaledData.getWidth());
        
        assertEquals(Config.INVALID_EVENT_TIME, scaledData.getCurrentEventTime());
        
        assertEquals("Horizontal bucket duration", 1, scaledData.getHorBucketDuration());
        assertEquals("Vertical bucket duration", 1, scaledData.getVerBucketDuration());
        
        assertEquals("Horizontal bucket end time", 1, scaledData.getHorBucketEndTime(0));
        assertEquals("Vertical bucket end time", 1, scaledData.getVerBucketEndTime(0));
        
        assertEquals("Horizontal bucket start time", 0, scaledData.getHorBucketStartTime(0));
        assertEquals("Vertical bucket start time", 0, scaledData.getVerBucketStartTime(0));

        assertEquals("Horizontal first time", 0, scaledData.getHorFirstEventTime());
        assertEquals("Vertical first time", 0, scaledData.getVerFirstEventTime());
        
        assertEquals("Horizontal first bucket time", 0, scaledData.getHorFirstBucketTime());
        assertEquals("Vertical first bucket time", 0, scaledData.getVerFirstBucketTime());

        assertEquals("Horizontal last bucket time", 0, scaledData.getHorLastBucketTime());
        assertEquals("Vertical last bucket time", 0, scaledData.getVerLastBucketTime());
        
        assertEquals("Horizontal getIndex", 100, scaledData.getHorBucketIndex(100));
        assertEquals("Vertical getIndex", 124, scaledData.getVerBucketIndex(124));

        assertEquals("Horizontal number of buckets", 101, scaledData.getHorNbBuckets());
        assertEquals("Vertical nubmer of buckets", 100, scaledData.getVerNbBuckets());
        
        assertEquals("Horizontal last bucket", 0, scaledData.getHorLastBucket());
        assertEquals("Vertical last bucket", 0, scaledData.getVerLastBucket());
        
        assertEquals("Horizontal last event time", 0, scaledData.getHorLastEventTime());
        assertEquals("Vertical last event time", 0, scaledData.getVerLastEventTime());
    }

