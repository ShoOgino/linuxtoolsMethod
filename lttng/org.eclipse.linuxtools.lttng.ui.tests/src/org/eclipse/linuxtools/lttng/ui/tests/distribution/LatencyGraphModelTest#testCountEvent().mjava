    public void testCountEvent() {
        final int nbBuckets = 2000;
        final int nbEvents = 10 * nbBuckets + 256;
        final long hOffset = 100;
        final long vOffset = 55;
        
        LatencyGraphModel model = new LatencyGraphModel(nbBuckets);
        
        for (int i = 0; i < nbEvents; i++) {
            model.countEvent(i + 1, hOffset + i, vOffset + i);
        }

        // Verify model parameters
        assertEquals("Horizontal bucket duration", 16, model.getHorBucketDuration());
        assertEquals("Vertical bucket duration", 16, model.getVerBucketDuration());

        assertEquals("Horizontal first bucket time", hOffset, model.getHorFirstBucketTime());
        assertEquals("Vertical first bucket time", vOffset, model.getVerFirstBucketTime());

        assertEquals("Horizontal last bucket ", (nbEvents - 1)/16, model.getHorLastBucket());
        assertEquals("Vertical last bucket ", (nbEvents - 1)/16, model.getVerLastBucket());
        
        assertEquals("Horizontal first time", hOffset, model.getHorFirstEventTime());
        assertEquals("Vertical first time", vOffset, model.getVerFirstEventTime());

        assertEquals("Horizontal last time", nbEvents + hOffset - 1, model.getHorLastEventTime());
        assertEquals("Vertical last time", nbEvents + vOffset - 1, model.getVerLastEventTime());
        
        assertEquals("Horizontal time limit", 16 * nbBuckets + hOffset, model.getHorTimeLimit());
        assertEquals("Vertical time limit", 16 * nbBuckets + vOffset, model.getVerTimeLimit());

        // Verify scaled data parameters
        GraphScaledData scaledData = model.scaleTo(50, 100, 1);
        
        assertEquals("barWidth", 1, scaledData.getBarWidth());
        assertEquals("height", 100, scaledData.getHeight());
        assertEquals("width", 50, scaledData.getWidth());
        
        assertEquals(Config.INVALID_EVENT_TIME, scaledData.getCurrentEventTime());

        // nbBars = width / barWidth
        // bucketsPerBar = lastBucket/nbBars + 1
        // scaled bucket duration = bucketsPerBar * model.bucketDuration
        // for nbBuckets=2000 and nbEvents=20256 (means 20256 ns + offset) -> model.bucketDuration = 16
        assertEquals("Horizontal bucket duration", 416, scaledData.getHorBucketDuration());
        assertEquals("Vertical bucket duration", 208, scaledData.getVerBucketDuration());
        
        // startTime + scaledData.bucketDuration
        assertEquals("Horizontal bucket end time", hOffset + 416, scaledData.getHorBucketEndTime(0));
        assertEquals("Vertical bucket end time", 55 + 208, scaledData.getVerBucketEndTime(0));
        
        assertEquals("Horizontal bucket start time", 100, scaledData.getHorBucketStartTime(0));
        assertEquals("Vertical bucket start time", 55, scaledData.getVerBucketStartTime(0));

        assertEquals("Horizontal first time", 100, scaledData.getHorFirstEventTime());
        assertEquals("Vertical first time", 55, scaledData.getVerFirstEventTime());
        
        assertEquals("Horizontal first bucket time", hOffset, scaledData.getHorFirstBucketTime());
        assertEquals("Vertical first bucket time", 55, scaledData.getVerFirstBucketTime());
        
        assertEquals("Horizontal last bucket time", hOffset + 48 * 416, scaledData.getHorLastBucketTime());
        assertEquals("Vertical last bucket time", vOffset + 97 * 208, scaledData.getVerLastBucketTime());
        
        assertEquals("Horizontal getIndex", 47, scaledData.getHorBucketIndex(20000));
        assertEquals("Vertical getIndex", 47, scaledData.getVerBucketIndex(10000));
        
        // nb Buckets = nbBars
        assertEquals("Horizontal number of buckets", 50, scaledData.getHorNbBuckets());
        assertEquals("Vertical nubmer of buckets", 100, scaledData.getVerNbBuckets());
        
        assertEquals("Horizontal last bucket", 48, scaledData.getHorLastBucket());
        assertEquals("Vertical last bucket", 97, scaledData.getVerLastBucket());
        
        // start time of last bucket
        assertEquals("Horizontal last event time", hOffset + nbEvents - 1, scaledData.getHorLastEventTime());
        assertEquals("Vertical last event time", vOffset + nbEvents - 1 , scaledData.getVerLastEventTime());
    }

