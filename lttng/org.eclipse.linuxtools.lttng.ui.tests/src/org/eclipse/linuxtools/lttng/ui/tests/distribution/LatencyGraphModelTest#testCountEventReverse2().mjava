    public void testCountEventReverse2() {
        // Depending on the number of buckets and events the start buckets can be different
        // between forward and reserve times. However, the content is correct.
        final int nbBuckets = 100;
        final int nbEvents = 256;
        final long hOffset = 100;
        final long vOffset = 55;
        final int height = 100;
        final int width = 50;
        final int barWidth = 1;

        LatencyGraphModel model = new LatencyGraphModel(nbBuckets);
        
        for (int i = nbEvents - 1; i >= 0; i--) {
            model.countEvent(nbEvents - i, hOffset + i, vOffset + i);
        }

        // Verify model parameters
        int expectedBucketDuration = 4;
        assertEquals("Horizontal bucket duration", expectedBucketDuration, model.getHorBucketDuration());
        assertEquals("Vertical bucket duration", expectedBucketDuration, model.getVerBucketDuration());

        assertEquals("Horizontal first bucket time", hOffset, model.getHorFirstBucketTime());
        assertEquals("Vertical first bucket time", vOffset, model.getVerFirstBucketTime());

        assertEquals("Horizontal last bucket", (nbEvents -1)/expectedBucketDuration, model.getHorLastBucket());
        assertEquals("Vertical last bucket", (nbEvents -1)/expectedBucketDuration, model.getVerLastBucket());

        assertEquals("Horizontal first time", hOffset, model.getHorFirstEventTime());
        assertEquals("Vertical first time", vOffset, model.getVerFirstEventTime());

        assertEquals("Horizontal last time", nbEvents + hOffset - 1, model.getHorLastEventTime());
        assertEquals("Vertical last time", nbEvents + vOffset - 1, model.getVerLastEventTime());

        assertEquals("Horizontal time limit", expectedBucketDuration * nbBuckets + hOffset, model.getHorTimeLimit());
        assertEquals("Vertical time limit", expectedBucketDuration * nbBuckets + vOffset, model.getVerTimeLimit());

        GraphScaledData scaledData = model.scaleTo(50, 100, 1);
        
        // Make sure that both scaledData have the same content
        assertEquals("barWidth", barWidth, scaledData.getBarWidth());
        assertEquals("height", height, scaledData.getHeight());
        assertEquals("width", width, scaledData.getWidth());
        
        assertEquals(-1, scaledData.getCurrentEventTime()); 
        
        assertEquals("Horizontal bucket duration", 8, scaledData.getHorBucketDuration());
        assertEquals("Vertical bucket duration", 4, scaledData.getVerBucketDuration());
        
        // startTime + scaledData.bucketDuration
        assertEquals("Horizontal bucket end time", hOffset + 8, scaledData.getHorBucketEndTime(0));
        assertEquals("Vertical bucket end time", vOffset + 4, scaledData.getVerBucketEndTime(0));
        
        assertEquals("Horizontal bucket start time", hOffset, scaledData.getHorBucketStartTime(0));
        assertEquals("Vertical bucket start time", vOffset, scaledData.getVerBucketStartTime(0));

        assertEquals("Horizontal first time", hOffset, scaledData.getHorFirstEventTime());
        assertEquals("Vertical first time",  vOffset, scaledData.getVerFirstEventTime());
        
        assertEquals("Horizontal getIndex", 12, scaledData.getHorBucketIndex(200));
        assertEquals("Vertical getIndex", 11, scaledData.getVerBucketIndex(100));

        // nb Buckets = nbBars
        assertEquals("Horizontal number of buckets", 50, scaledData.getHorNbBuckets());
        assertEquals("Vertical number of buckets", 100, scaledData.getVerNbBuckets());
        
        assertEquals("Horizontal last bucket", 31, scaledData.getHorLastBucket());
        assertEquals("Vertical last bucket", 63, scaledData.getVerLastBucket());
 
        // start time of last bucket
        assertEquals("Horizontal last event time", 355, scaledData.getHorLastEventTime());
        assertEquals("Vertical last event time", 310, scaledData.getVerLastEventTime());
    }

