    public void testCountEventReverse1() {
        // Depending on the number of buckets and events the start buckets can be different
        // between forward and reserve times. However, the content is correct.
        final int nbBuckets = 100;
        final int nbEvents = 256;
        final long hOffset = 100;
        final long vOffset = 55;
        final int height = 100;
        final int width = 50;
        final int barWidth = 1;

        LatencyGraphModel model = new LatencyGraphModel(nbBuckets);
        
        for (int i = 0; i < nbEvents; i++) {
            model.countEvent(i + 1, hOffset + i, vOffset + i);
        }
        
        GraphScaledData scaledData = model.scaleTo(width, height, barWidth);
        
        model.clear();
        
        for (int i = nbEvents - 1; i >= 0; i--) {
            model.countEvent(nbEvents - i, hOffset + i, vOffset + i);
        }
        
        GraphScaledData scaledDataReverse = model.scaleTo(50, 100, 1);
        
        long count = 0;
        for (int i = 0; i <= scaledData.getHorLastBucket(); i++) {
            for (int j = 0; j <= scaledData.getVerLastBucket(); j++) {
                count += scaledData.getEventCount(i, j);
            }
        }
        
        long revCount = 0;
        for (int i = 0; i <= scaledDataReverse.getHorLastBucket(); i++) {
            for (int j = 0; j <= scaledDataReverse.getVerLastBucket(); j++) {
                revCount += scaledDataReverse.getEventCount(i, j);
            }
        }

        assertEquals(count, revCount);

        // Make sure that both scaledData have the same content
        assertTrue("barWidth", scaledData.getBarWidth() == scaledDataReverse.getBarWidth());
        assertTrue("height", scaledData.getHeight() == scaledDataReverse.getHeight());
        assertTrue("width", scaledData.getWidth() == scaledDataReverse.getWidth());
        
        assertTrue(scaledData.getCurrentEventTime() == scaledDataReverse.getCurrentEventTime());

        assertTrue("Horizontal bucket duration", scaledData.getHorBucketDuration() == scaledDataReverse.getHorBucketDuration());
        assertTrue("Vertical bucket duration", scaledData.getVerBucketDuration() == scaledDataReverse.getVerBucketDuration());
        
        // startTime + scaledData.bucketDuration
        assertTrue("Horizontal bucket end time", scaledData.getHorBucketEndTime(0) == scaledDataReverse.getHorBucketEndTime(0));
        assertTrue("Vertical bucket end time", scaledData.getVerBucketEndTime(0) == scaledDataReverse.getVerBucketEndTime(0));
        
        assertTrue("Horizontal bucket start time", scaledData.getHorBucketStartTime(0) == scaledDataReverse.getHorBucketStartTime(0));
        assertTrue("Vertical bucket start time", scaledData.getVerBucketStartTime(0) == scaledDataReverse.getVerBucketStartTime(0));

        assertTrue("Horizontal first time", scaledData.getHorFirstEventTime() == scaledDataReverse.getHorFirstEventTime());
        assertTrue("Vertical first time",  scaledData.getVerFirstEventTime() == scaledDataReverse.getVerFirstEventTime());
        
        assertTrue("Horizontal getIndex", scaledData.getHorBucketIndex(200) == scaledDataReverse.getHorBucketIndex(200));
        assertTrue("Vertical getIndex", scaledData.getVerBucketIndex(100) == scaledDataReverse.getVerBucketIndex(100));

        assertTrue("Horizontal last bucket", scaledData.getHorNbBuckets() == scaledDataReverse.getHorNbBuckets());
        assertTrue("Vertical last bucket", scaledData.getVerNbBuckets() == scaledDataReverse.getVerNbBuckets());

        assertTrue("Horizontal nubmer of buckets", scaledData.getHorLastBucket() == scaledDataReverse.getHorLastBucket());
        assertTrue("Vertical nubmer of buckets", scaledData.getVerLastBucket() == scaledDataReverse.getVerLastBucket());
        
        // start time of last bucket
        assertTrue("Horizontal last event time", scaledData.getHorLastEventTime() == scaledDataReverse.getHorLastEventTime());
        assertTrue("Vertical last event time", scaledData.getVerLastEventTime() == scaledDataReverse.getVerLastEventTime());
    }

