    public void testGraphModelListener() {
        final int nbBuckets = 2000;
        final int nbEvents = 10 * nbBuckets + 256;
        final int[] count = new int[2];
        count [0] = 0;
        count [1] = 0;

        // Test add listener and call of listener
        IGraphModelListener listener = new IGraphModelListener() {
            
            @Override
            public void graphModelUpdated() {
                count[0]++;
                
            }
            
            @Override
            public void currentEventUpdated(long currentEventTime) {
                count[1]++;
            }
        };

        // Test that the listener interface is called every 10000 events.
        LatencyGraphModel model = new LatencyGraphModel(nbBuckets);
        model.addGraphModelListener(listener);
        for (int i = 0; i < nbEvents; i++) {
            model.countEvent(i+1, i, i);
        }
        
        assertEquals("listener", 2, count[0]);

        // Test that the listener interface is called when complete is called.
        model.complete();
        assertEquals("listener", 3, count[0]);

        // Test that clear triggers call of listener interface
        model.clear();
        assertEquals("listener", 4, count[0]);

        // Test that clear triggers call of listener interface
        model.setCurrentEventNotifyListeners(100);
        assertEquals("listener", 1, count[1]);
        
        // Test remove listener
        count[0] = 0;
        count[1] = 0;
        model.removeGraphModelListener(listener);
        
        for (int i = 0; i < nbEvents; i++) {
            model.countEvent(i, i, i);
        }
        model.complete();
        assertEquals("listener", 0, count[1]);
        
        // Test that clear triggers call of listener interface
        model.setCurrentEventNotifyListeners(100);
        assertEquals("listener", 0, count[1]);
    }

