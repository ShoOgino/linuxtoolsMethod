    /**
     * Run the void setLogLevel(String) method test.
     * Run the TraceLogLevel getLogLevel() method test
     * 
     */
    public void testSetLogLevel2() {
        BaseEventInfo fixture = new BaseEventInfo("event");
        fixture.setEventType(TraceEventType.TRACEPOINT);
        fixture.setLogLevel("TRACE_EMERG0");
        
        TraceLogLevel result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_EMERG0", result.getInName());
        assertEquals("TRACE_EMERG", result.name());
        assertEquals(0, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_ALERT1");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_ALERT1", result.getInName());
        assertEquals("TRACE_ALERT", result.name());
        assertEquals(1, result.ordinal());
        
        //------------------------
        fixture.setLogLevel("TRACE_CRIT2");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_CRIT2", result.getInName());
        assertEquals("TRACE_CRIT", result.name());
        assertEquals(2, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_ERR3");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_ERR3", result.getInName());
        assertEquals("TRACE_ERR", result.name());
        assertEquals(3, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_WARNING4");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_WARNING4", result.getInName());
        assertEquals("TRACE_WARNING", result.name());
        assertEquals(4, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_NOTICE5");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_NOTICE5", result.getInName());
        assertEquals("TRACE_NOTICE", result.name());
        assertEquals(5, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_INFO6");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_INFO6", result.getInName());
        assertEquals("TRACE_INFO", result.name());
        assertEquals(6, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_SYSTEM7");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_SYSTEM7", result.getInName());
        assertEquals("TRACE_SYSTEM", result.name());
        assertEquals(7, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_PROGRAM8");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_PROGRAM8", result.getInName());
        assertEquals("TRACE_PROGRAM", result.name());
        assertEquals(8, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_PROCESS9");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_PROCESS9", result.getInName());
        assertEquals("TRACE_PROCESS", result.name());
        assertEquals(9, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_MODULE10");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_MODULE10", result.getInName());
        assertEquals("TRACE_MODULE", result.name());
        assertEquals(10, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_UNIT11");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_UNIT11", result.getInName());
        assertEquals("TRACE_UNIT", result.name());
        assertEquals(11, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_FUNCTION12");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_FUNCTION12", result.getInName());
        assertEquals("TRACE_FUNCTION", result.name());
        assertEquals(12, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_DEFAULT13");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_DEFAULT13", result.getInName());
        assertEquals("TRACE_DEFAULT", result.name());
        assertEquals(13, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_VERBOSE14");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_VERBOSE14", result.getInName());
        assertEquals("TRACE_VERBOSE", result.name());
        assertEquals(14, result.ordinal());

        //------------------------
        fixture.setLogLevel("TRACE_DEBUG15");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_DEBUG15", result.getInName());
        assertEquals("TRACE_DEBUG", result.name());
        assertEquals(15, result.ordinal());

        fixture.setLogLevel("garbabe");
        
        result = fixture.getLogLevel();
        assertNotNull(result);
        assertEquals("TRACE_DEFAULT13", result.getInName());
        assertEquals("TRACE_DEFAULT", result.name());
        assertEquals(13, result.ordinal());
    }

