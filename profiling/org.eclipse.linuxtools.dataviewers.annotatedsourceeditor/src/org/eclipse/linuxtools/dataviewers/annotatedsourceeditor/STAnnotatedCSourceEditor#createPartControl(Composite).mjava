    @Override
    public void createPartControl(Composite parent) {
    	super.createPartControl(parent);
        if (fInput == null) {
            return;
        }

        STColumnSupport columnSupport = getSTColumnSupport();
        RulerColumnRegistry registry = RulerColumnRegistry.getDefault();

        for (int i = 1; i <= fInput.getColumnCount(); i++) {
            RulerColumnDescriptor abstractSTColumnDescriptor = registry
                    .getColumnDescriptor(STContributedRulerColumn.ID);
            columnSupport.addSTColumn((CompositeRuler) getVerticalRuler(), abstractSTColumnDescriptor,
                    fListColumns.get(i - 1));

        }

        CompositeRuler vr = (CompositeRuler) super.getVerticalRuler();
        for (Iterator<?> iter = vr.getDecoratorIterator(); iter.hasNext();) {
            IVerticalRulerColumn column = (IVerticalRulerColumn) iter.next();
            if (column instanceof STContributedRulerColumn) {
                STContributedRulerColumn fSTColumn = (STContributedRulerColumn) column;
                if (fSTColumn.isShowingSTRuler()) {
                    ToolTipSupport.enableFor(fSTColumn);
                }
            }
        }

        showLinesColored();
        if (getSourceViewer() != null) {
            ISourceViewer sv = getSourceViewer();
            if (sv.getTextWidget() != null) {
                sv.getTextWidget().addLineBackgroundListener(this);
            }
        }
    }

