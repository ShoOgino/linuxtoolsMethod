    /**
     * Paints the line. After this method is called the line numbers are painted on top of the result of this method.
     *
     * @param line
     *            the line of the document which the ruler is painted for
     * @param y
     *            the y-coordinate of the box being painted for <code>line</code>, relative to <code>gc</code>
     * @param lineheight
     *            the height of one line (and therefore of the box being painted)
     * @param gc
     *            the drawing context the client may choose to draw on.
     * @param display
     *            the display the drawing occurs on
     * @since 3.0
     */
    protected void paintLine(int line, int y, int lineheight, GC gc, Display display) {
        int widgetLine = JFaceTextUtil.modelLineToWidgetLine(fParentRuler.getTextViewer(), line);
        int indentation = fCachedNumberOfDigits;

        if (annotationColumn instanceof ISTAnnotationHyperlink) {
            ISTAnnotationHyperlink ah = (ISTAnnotationHyperlink) annotationColumn;
            if (ah.isAnnotationHyperlink(widgetLine)) {
                paintHyperLink(line, y, indentation, lineheight, gc, display);
            }
        } else {
            int baselineBias = getBaselineBias(gc, widgetLine);
            String s = annotationColumn.getAnnotation(widgetLine);
            gc.drawString(s, indentation, y + baselineBias, true);
        }
    }

