    /**
     * <h1>Check if an option is set</h1>
     * Same as {@link #isOptionCheckedInCDT(IProject project, String optionIDString) isOptionChecked_inCDT },
     * except you specify tool name manually. <br>
     *
     * (e.g you need to check something that's not supported in the implementation above.
     * @param project         the IProject project which will be read to check if it is c or cpp
     * @param optionIDString  for example <code> gnu.cpp.compiler.option.debugging.codecov </code>
     * @param toolSuperClassId  superclass id of the parent tool. see {@link #helperGetToolSuperClassId helper_GetToolSuperClassId}
     * @return                true if the option is set
     */
    private static boolean isOptionCheckedInCDTTool(IProject project, String optionIDString, String toolSuperClassId) {

        IConfiguration activeConf = helperGetActiveConfiguration(project);

        //Get Compiler tool.
        ITool gccCompileriTool = helperGetGccCompilerToolBySuperClass(toolSuperClassId, activeConf);
        
        if (gccCompileriTool == null) {
            MessageDialogSyncedRunnable.openErrorSyncedRunnable(ProfilingMessages.errorTitle, ProfilingMessages.errorGetProjectToolname);
            return false;
        }

        //(Get immutable option: This is like a 'template' that we will use to get the actual option)
        IOption optionTemplate = gccCompileriTool.getOptionById(optionIDString);

        //Check that we got a good option.
        if (optionTemplate == null) {
            MessageDialogSyncedRunnable.openErrorSyncedRunnable(ProfilingMessages.errorTitle, ProfilingMessages.errorGetOptionTemplate);
            return false;
        }

        // Get Actual Option
        // (Now we acquire the actual option from which we can read the value)
        try {
            IOption mutableOptionToSet = gccCompileriTool.getOptionToSet(optionTemplate, false);
            return (boolean) mutableOptionToSet.getValue();
        } catch (BuildException e) {
            //This is reached if the template that was provided was bad.
            MessageDialogSyncedRunnable.openErrorSyncedRunnable(ProfilingMessages.errorTitle, ProfilingMessages.errorGetOptionForWriting);
        }
        return false;

    }

