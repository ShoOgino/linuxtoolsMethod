	/**
	 * Get a provider id to run for the given profiling type.
	 *
	 * This first checks for a provider in the project properties if the project
	 * can be found and has indicated that project preferences are to override
	 * the workspace preferences.  If no project is obtainable or the project
	 * has not indicated override, then it looks at provider preferences.  If these
	 * are not set or the specified preference points to a non-installed provider,
	 * it will look for the provider with the highest priority for the specified type. 
	 * If this fails, it will look for the default provider.
	 *
	 * @param type a profiling type
	 * @return a provider id that contributes to the specified type
	 */

	public static String getProviderIdToRun(ILaunchConfigurationWorkingCopy wc, String type) {
		String providerId = null;
		// Look for a project first
		if (wc != null) {
			try {
				IResource[] resources = wc.getMappedResources();
				if(resources != null){
					for (int i = 0; i < resources.length; ++i) {
						IResource resource = resources[i];
						if (resource instanceof IProject) {
							IProject project = (IProject)resource;
							ScopedPreferenceStore store = new ScopedPreferenceStore(new ProjectScope(project),
									ProviderProfileConstants.PLUGIN_ID);
							Boolean use_project_settings = store.getBoolean(ProviderProfileConstants.USE_PROJECT_SETTINGS + type);
							if (use_project_settings.booleanValue() == true) {
								String provider = store.getString(ProviderProfileConstants.PREFS_KEY + type);
								if (!provider.equals(""))
									providerId = provider;
							}
						}
					}
				}
			} catch (CoreException e) {
				e.printStackTrace();
			}
		}
		// if no providerId specified for project, get one from the preferences
		if (providerId == null) {
			// Look in the preferences for a provider
			providerId = ConfigurationScope.INSTANCE.getNode(
					ProviderProfileConstants.PLUGIN_ID).get(
							ProviderProfileConstants.PREFS_KEY + type, "");
			if (providerId.equals("") || ProviderFramework.getConfigurationDelegateFromId(providerId) == null) {

				// Get highest priority provider
				providerId = ProviderFramework
						.getHighestProviderId(type);
			}
		}
		return providerId;
	}

