	@Override
	protected ILaunchConfiguration findLaunchConfiguration(IBinary bin, String mode) {

		// create a default launch configuration based on the shortcut
		ILaunchConfiguration config = createConfiguration(bin, false);

		String providerId = null;
		try {
			providerId = ProviderLaunchConfigurationDelegate.getProviderIdToRun(config.getWorkingCopy(), type);
		} catch (CoreException e1) {
			e1.printStackTrace();
		}

		// check that there exists a provider for the given profiling type
		if (providerId == null) {
			handleFail(Messages.ProviderLaunchShortcut_0 + " " + type);
			return null;
		}


		boolean exists = false;
		ILaunchConfiguration[] configs = null;
		try {
			configs = getLaunchManager().getLaunchConfigurations(getLaunchConfigType());

			// attributes for which a configuration can be considered valid for
			// the current tool and profiling type
			String[] relevantAttributes = new String[] {
					ProviderProfileConstants.PROVIDER_CONFIG_ATT,
					ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME,
					ICDTLaunchConfigurationConstants.ATTR_PROGRAM_NAME };

			// check that there a exists a valid configuration for the current
			// tool and profiling type
			for (ILaunchConfiguration cfg : configs) {
				if (equalAttributes(config, cfg, relevantAttributes)) {
					exists = true;
					break;
				}
			}
		} catch (CoreException e) {
			exists = true;
		}

		// automatically create a configuration if there are none available
		if (configs == null || configs.length == 0) {
			createConfiguration(bin);
		} else if (!exists) {
			String provider = ProviderFramework
					.getProviderToolNameFromId(providerId);

			String profileType = Character.toUpperCase(type.charAt(0))
					+ type.substring(1);

			// prompt message
			String promptMsg = MessageFormat.format(
					Messages.ProviderLaunchConfigurationPrompt_0, new String[] {
							profileType, provider });

			MessageBox prompt = new MessageBox(getActiveWorkbenchShell(),
					SWT.ICON_QUESTION | SWT.YES | SWT.NO);
			prompt.setMessage(promptMsg);

			// prompt user for configuration creation
			if (prompt.open() == SWT.YES) {
				return createConfiguration(bin);
			}
		}
		return super.findLaunchConfiguration(bin, mode);
	}

