	@Override
	protected void createControls(final Composite parent) {
		super.createControls(parent);
		
		usercomp.setLayout(new GridLayout(2, true));
		
		// Get the property provider (project, file, folder) and fine the project.
		IResource resource = (IResource)page.getElement().getAdapter(IResource.class);
		IProject project = resource.getProject();
		
		// Create the preference store to use
		setPreferenceStore(new ScopedPreferenceStore(
				new ProjectScope(project),
				ProviderProfileConstants.PLUGIN_ID));

		getPreferenceStore().setDefault(ProviderProfileConstants.USE_PROJECT_SETTINGS + getType(), false);
		getPreferenceStore().setDefault(ProviderProfileConstants.PREFS_KEY + getType(),
				ProviderFramework.getHighestProviderId(getType()));

		useProjectSetting = new Button(usercomp, SWT.CHECK);
		useProjectSetting.setText(Messages.UseProjectSetting_0);
		useProjectSetting.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, false, false, 1, 1));
		useProjectSetting.setSelection(getPreferenceStore().getBoolean(ProviderProfileConstants.USE_PROJECT_SETTINGS + getType()));
		useProjectSetting.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				updateOptionsEnable();
			}
		});

		fLink= new Link(usercomp, SWT.NULL);
		fLink.setText(Messages.PreferenceLink_0);
		fLink.setLayoutData(new GridData(SWT.RIGHT, SWT.FILL, true, false, 1, 1));
		fLink.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				PreferencesUtil.createPreferenceDialogOn(parent.getShell(), getPrefPageId(), null, null).open();
			}
		});
		

		HashMap<String, String> map = ProviderFramework
				.getProviderNamesForType(getType());
		// 2d array containing launch provider names on the first column and
		// corresponding id's on the second.
		String[][] providerList = new String[map.size()][2];
		int i = 0;
		for (Entry<String, String> entry : map.entrySet()) {
			String toolId = entry.getValue();
			String toolDescription = getToolInformationFromId(toolId, PROVIDER_ATT_DESC);
			String toolName = entry.getKey();

			// Append tool description to tool name if available.
			if (toolDescription != null && !toolDescription.equals("")) {
				toolName = toolName + " " + "[" + toolDescription + "]"; //$NON-NLS-1$
			}

			providerList[i][0] = toolName;
			providerList[i][1] = toolId;
			i++;
		}
		
		projectSettingsGroup = new Group(usercomp, SWT.NONE);
		projectSettingsGroup.setFont(parent.getFont());
		projectSettingsGroup.setText(Messages.ProviderPreferencesPage_1);
		projectSettingsGroup.setLayoutData(new GridData(SWT.FILL, SWT.FILL, true, false, 2, 1));
		GridLayout layout = new GridLayout();
		layout.horizontalSpacing = 8;
		layout.numColumns = 1;
		projectSettingsGroup.setLayout(layout);

        radioButtons = new Button[map.size()];
        for (int j = 0; j < radioButtons.length; j++) {
            Button radio = new Button(projectSettingsGroup, SWT.RADIO | SWT.LEFT);
            radio.setLayoutData(new GridData(SWT.LEFT, SWT.FILL, true, false, 1, 1));
            radioButtons[j] = radio;
            String[] labelAndValue = providerList[j];
			String curProviderId = labelAndValue[1];
			// Set tool tip description text.
			String toolInfo = getToolInformationFromId(curProviderId,
					PROVIDER_ATT_INFO);
			if (toolInfo != null && !toolInfo.equals("")) {
				radio.setToolTipText(toolInfo);
			}
			radio.setText(labelAndValue[0]);
            radio.setData(labelAndValue[1]);
            radio.setFont(parent.getFont());
            radio.addSelectionListener(new SelectionAdapter() {
            	@Override
				public void widgetSelected(SelectionEvent event) {
            		value = (String) event.widget.getData();
            	}
            });
        }
        projectSettingsGroup.addDisposeListener(new DisposeListener() {
            public void widgetDisposed(DisposeEvent event) {
                projectSettingsGroup = null;
                radioButtons = null;
            }
        });
		updateOptionsEnable();
		updateValue(getPreferenceStore().getString(ProviderProfileConstants.PREFS_KEY + getType()));
	}

