    /**
     * @param schemeId The protocol scheme to be used.
     * @return The {@link IRemoteProxyManager} for the given scheme.
     * @throws CoreException If a problem getting remote proxy manager for this scheme occurred.
     * @since 2.1
     */
    protected IRemoteProxyManager getRemoteManager(String schemeId) throws CoreException {
        IRemoteProxyManager remoteManager = remoteManagers.get(schemeId);
        if (remoteManager == null) {
            IExtensionPoint extensionPoint = Platform.getExtensionRegistry().getExtensionPoint(ProfileLaunchPlugin.PLUGIN_ID, IRemoteProxyManager.EXTENSION_POINT_ID);
            IConfigurationElement[] infos = extensionPoint.getConfigurationElements();
            for(int i = 0; i < infos.length; i++) {
                IConfigurationElement configurationElement = infos[i];
                if (configurationElement.getName().equals(IRemoteProxyManager.MANAGER_NAME)) {
                    if (configurationElement.getAttribute(IRemoteProxyManager.SCHEME_ID).equals(schemeId)) {
                        Object obj = configurationElement.createExecutableExtension(EXT_ATTR_CLASS);
                        if (obj instanceof IRemoteProxyManager) {
                            remoteManager = (IRemoteProxyManager)obj;
                            remoteManagers.put(schemeId, remoteManager);
                            break;
                        }
                    }
                }
            }
        }
        return remoteManager;
    }

