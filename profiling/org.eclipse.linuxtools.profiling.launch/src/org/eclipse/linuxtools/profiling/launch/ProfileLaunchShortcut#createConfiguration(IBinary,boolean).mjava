	/**
	 * Create a launch configuration based on a binary, and optionally
	 * save it to the underlying resource.
	 *
	 * @param bin a representation of a binary
	 * @param save true if the configuration should be saved to the
	 * underlying resource, and false if it should not be saved.
	 * @return a launch configuration generated for the binary.
	 * @since 1.2
	 */
	protected ILaunchConfiguration createConfiguration(IBinary bin, boolean save) {
		ILaunchConfiguration config = null;
		try {
			String projectName = bin.getResource().getProjectRelativePath().toString();
			ILaunchConfigurationType configType = getLaunchConfigType();
			ILaunchConfigurationWorkingCopy wc = configType.newInstance(null, getLaunchManager().generateLaunchConfigurationName(bin.getElementName()));

			wc.setAttribute(ICDTLaunchConfigurationConstants.ATTR_PROGRAM_NAME, projectName);
			wc.setAttribute(ICDTLaunchConfigurationConstants.ATTR_PROJECT_NAME, bin.getCProject().getElementName());
			wc.setMappedResources(new IResource[] {bin.getResource(), bin.getResource().getProject()});
			wc.setAttribute(ICDTLaunchConfigurationConstants.ATTR_WORKING_DIRECTORY, (String) null);

			setDefaultProfileAttributes(wc);

			if (save){
				config = wc.doSave();
			} else {
				config = wc;
			}
		} catch (CoreException e) {
			e.printStackTrace();
		}
		return config;
	}

