    /**
     * Check to see if the Executable's location has the same scheme and host name as
     * the working directory.  If not, this is an error.
     * @return true if they are compatible, and false if not compatible.
     */
    private boolean checkCompatibility() {
        String wdName = workingDirText.getText().trim();
        String progName = fProgText.getText().trim();
        URI wdURI;
        URI progURI;

        try {
            wdURI = new URI(wdName);
            progURI = new URI(progName);
        } catch (URISyntaxException e) {
            // this will have been dealt with by previous checks of the Program and Working
            // directory
            System.err.println("internal error. URI syntax error in working directory or program");
            return false;
        }
        {
            String wdScheme = wdURI.getScheme();
            String progScheme = progURI.getScheme();
            if (wdScheme == null && progScheme == null) {
                // local filesystem. No further tests are needed.
                setErrorMessage(null);
                return true;

            }
            if (!equal(wdScheme, progScheme)) {
                setErrorMessage(ProxyLaunchMessages.scheme_of_working_directory_and_program_do_not_match);
                return false;
            }
        }
        {
            String wdAuth = wdURI.getAuthority();
            String progAuth = progURI.getAuthority();
            if (!equal(wdAuth, progAuth)) {
                setErrorMessage(ProxyLaunchMessages.connection_of_working_directory_and_program_do_not_match);
                return false;
            }
        }
        {
            String wdQuery = wdURI.getQuery();
            String progQuery = progURI.getQuery();
            if (!equal(wdQuery, progQuery)) {
                setErrorMessage(ProxyLaunchMessages.connection_of_working_directory_and_program_do_not_match);
                return false;
            }
        }
        setErrorMessage(null);
        return true;
    }

