	/**
	 * Get id of default profiling launch shortcut that provides the type 
	 * of profiling. This looks through extensions of the
	 * <code>org.eclipse.linuxtools.profiling.launch.launchProvider</code>
	 * extension point that have a specific type attribute.
	 *
	 * @param type A profiling type (eg. memory, snapshot, timing, etc.)
	 * @return an id of the profiling launch shortcut that implements
	 * <code>ProfileLaunchShortcut</code> and provides the necessary
	 * profiling type, or <code>null</code> if none could be found.
	 * @since 1.2
	 */
	public static String getDefaultLaunchShortcutProviderId(String type) {
		IExtensionPoint extPoint = Platform.getExtensionRegistry()
				.getExtensionPoint(ProfileLaunchPlugin.PLUGIN_ID,
						"launchProvider"); //$NON-NLS-1$
		IConfigurationElement[] configs = extPoint.getConfigurationElements();
		for (IConfigurationElement config : configs) {
			if (config.getName().equals("provider")) { //$NON-NLS-1$
				String currentType = config.getAttribute("type"); //$NON-NLS-1$
				String shortcut = config.getAttribute("shortcut"); //$NON-NLS-1$
				if (currentType != null && shortcut != null
						&& currentType.equals(type)) {
					String isDefault = config.getAttribute("default");
					if (isDefault != null && isDefault.equals("true")) {
						try {
							Object obj = config
									.createExecutableExtension("shortcut"); //$NON-NLS-1$
							if (obj instanceof ProfileLaunchShortcut) {
								return config.getAttribute("id");
							}
						} catch (CoreException e) {
							// continue, perhaps another configuration will
							// succeed
						}
					}
				}
			}
		}
		return null;
	}

