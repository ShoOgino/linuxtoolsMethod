	@Test
	public void testLocalCommandLauncher() {
		IRemoteCommandLauncher cl = null;
		Process p = null;
		InputStream actualIS = null, expectedIS = null;
		IPath commandPath, changeToDirectory;
		String[] args, env;
		try {
			cl =  proxyManager.getLauncher(localProject.getProject());
			assertTrue("Should have returned a local launcher", cl instanceof LocalLauncher);
		} catch (CoreException e) {
			fail("Should have returned a launcher: " + e.getCause());
		}
		/*
		 * Prepare arguments for the test
		 */
		commandPath = new Path("/bin/uptime");
		args = new String[]{"-s"};
		StringBuilder fullCmd = new StringBuilder();
		fullCmd.append(commandPath.toOSString());
		for(String s: args) {
			fullCmd.append(" " + s);
		}
		// Use local env variables
		ArrayList<String> envList = new ArrayList<String>();
		for(Entry<String, String> entry : System.getenv().entrySet()) {
			envList.add(entry.getKey()+"="+entry.getValue());
		}
		env = envList.toArray(new String[]{});
		changeToDirectory = new Path("/tmp");

		/*
		 * Run and get results using the proxy
		 */
		try {
			p = cl.execute(commandPath, args, env, changeToDirectory, new NullProgressMonitor());
			assertNotNull(p);
			while(p.isAlive());
			// Call to waitFor() will drive to empty result
			//p.waitFor();
			assertEquals("Process exited with failure", 0, p.exitValue());
		} catch (Exception e) {
			fail("Unable to execute " + fullCmd.toString() + " on local machine: " + e.getMessage());
		}

		actualIS = p.getInputStream();
		assertNotNull(actualIS);

		/*
		 * Run and get results using java Runtime
		 */
		try {
			Process expectedProcess = Runtime.getRuntime().exec(fullCmd.toString());
			expectedProcess.waitFor();
			expectedIS = expectedProcess.getInputStream();
			assertNotNull(expectedIS);
		} catch (Exception e) {
			fail("Unable to execute " + fullCmd.toString() + " on  local using Runtime.exec: " + e.getMessage());
		}

		/*
		 * Finally compare results obtained
		 */
		int va=0, ve=0;
		
		do {
			try {
				va = actualIS.read();
				ve = expectedIS.read();
			} catch (IOException e) {
				fail("Unable to read from Input Stream: " + e.getMessage());
			}
			assertEquals("Local proxy command output differs from Runtime.exec", ve, va);
		} while(va != -1);
	}

