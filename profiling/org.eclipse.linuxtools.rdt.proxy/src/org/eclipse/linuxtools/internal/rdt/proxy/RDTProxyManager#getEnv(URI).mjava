    @Override
    public Map<String, String> getEnv(URI uri) {
        IRemoteConnection connection = getConnection(uri);
        if(!connection.isOpen()) {
            try {
                connection.open(null);
            } catch (RemoteConnectionException e) {
                Status status = new Status(IStatus.ERROR, e.getMessage(), Activator.PLUGIN_ID);
                Activator.getDefault().getLog().log(status);
                return Collections.emptyMap();
            }
        }
        /*
         * It is common to export functions declaration in the environment so
         * this pattern filters out them because they get truncated and might
         * end up on failure. When a function is exported it makes a mess in ENV
         * and none of LT plugins working remotely because they are not find on
         * path.
         *
         * Patterns added in the env list:
         * var=value
         * i.e: SHELL=/bin/bash
         *
         * Patterns not added in the env list:
         * var=() { foo
         * i.e: BASH_FUNC_module()=() { eval `/usr/bin/modulecmd bash $*`, }
         */
        Pattern variablePattern = Pattern.compile("^(.+)=([^\\(\\)\\s{].*|)$"); //$NON-NLS-1$
        Matcher m;
        Map<String, String> envMap = new HashMap<>();
        IRemoteProcessService ps = connection.getService(IRemoteProcessService.class);
        Map<String, String> envTemp = ps.getEnv();
        for (String key : envTemp.keySet()) {
            String value = envTemp.get(key);
            String env = key + "=" + value; //$NON-NLS-1$
            m = variablePattern.matcher(env);
            if (m.matches()) {
                envMap.put(key, value);
            }
        }
        return envMap;
    }

