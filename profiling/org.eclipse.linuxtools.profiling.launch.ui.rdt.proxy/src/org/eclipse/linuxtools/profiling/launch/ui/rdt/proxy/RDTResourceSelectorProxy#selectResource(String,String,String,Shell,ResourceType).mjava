	private URI selectResource(String scheme, String initialPath, String prompt, Shell shell, ResourceType resourceType) {
		IRemoteUIFileManager uiFileManager;
		boolean schemeSwitch = false;
		URI uri;
		try {
			uri = new URI(initialPath);
			if (!scheme.equals(uri.getScheme())) {
				uri = getEmptyPathURI(scheme);
				schemeSwitch = true;
			}
		} catch (URISyntaxException e) {
			uri = getEmptyPathURI(scheme);
			schemeSwitch = true;
		}
		// If the user is switching schemes, start with an empty host and path
		IRemoteServices services = PTPRemoteCorePlugin.getDefault().getRemoteServices(uri);
		services.initialize();

		IRemoteUIServices uiServices = PTPRemoteUIPlugin.getDefault().getRemoteUIServices(services);
		uiFileManager = uiServices.getUIFileManager();
		uiFileManager.showConnections(true);
		IRemoteConnection connection = null;
		if (!schemeSwitch) {
			connection = services.getConnectionManager().getConnection(uri);
			uiFileManager.setConnection(connection);
		}
		String selectedPath = null;
		switch (resourceType) {
		case FILE:
			selectedPath = uiFileManager.browseFile(shell, prompt, uri.getPath(), IRemoteUIConstants.NONE);
			break;
		case DIRECTORY:
			selectedPath = uiFileManager.browseDirectory(shell, prompt, uri.getPath(), IRemoteUIConstants.NONE);
			break;
		default:
			Activator.log(Status.ERROR, Messages.RDTResourceSelectorProxy_unsupported_resourceType + resourceType);
			return null;
		}
		URI selectedURI = null;
		if (selectedPath != null) {
			connection = uiFileManager.getConnection();
			IRemoteFileManager remoteFileManager = services.getFileManager(connection);
			selectedURI = remoteFileManager.toURI(selectedPath);
		}
		return selectedURI;
	}

