    /**
     * Create the proirities area.
     * @param parent
     */
    private void createPrioritiesArea(Composite parent) {
        Composite prioritiesArea = new Composite(parent, SWT.NULL);
        prioritiesArea.setLayout(new GridLayout(3, false));
        
        int[] priorities = sorter.getPriorities();

        ascendingButtons = new Button[priorities.length];
        descendingButtons = new Button[priorities.length];
        priorityCombos = new Combo[Math.min(priorities.length,
                STDataViewersComparator.MAX_DEPTH)];

        Label sortByLabel = new Label(prioritiesArea, SWT.NULL);
        sortByLabel.setText(STDataViewersMessages.sortDialog_label); 
        GridData data = new GridData();
        data.horizontalSpan = 3;
        sortByLabel.setLayoutData(data);

        for (int i = 0; i < priorityCombos.length; i++) {
            final int index = i;
            Label numberLabel = new Label(prioritiesArea, SWT.NULL);
            numberLabel.setText(NLS.bind(STDataViewersMessages.sortDialog_columnLabel, i + 1));

            priorityCombos[i] = new Combo(prioritiesArea, SWT.READ_ONLY);
            priorityCombos[i].setLayoutData(new GridData(
                    GridData.FILL_HORIZONTAL));

            Composite directionGroup = new Composite(prioritiesArea, SWT.NONE);
            directionGroup.setLayout(new GridLayout(2, false));
            
            ascendingButtons[i] = new Button(directionGroup, SWT.RADIO);
            ascendingButtons[i].setText(getAscendingText(i));
            ascendingButtons[i].addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent e) {
                    markDirty();
                }
            });
            descendingButtons[i] = new Button(directionGroup, SWT.RADIO);
            descendingButtons[i].setText(getDescendingText(i));
            descendingButtons[i].addSelectionListener(new SelectionAdapter() {
                public void widgetSelected(SelectionEvent e) {
                    markDirty();
                }
            });

            if (i < priorityCombos.length - 1) {
                priorityCombos[i].addSelectionListener(new SelectionAdapter() {
                    public void widgetSelected(SelectionEvent e) {
                    	List<String> allItems = new ArrayList<String>(
                    			Arrays.asList(priorityCombos[index].getItems()));
                    	computeSelectionItems(index, allItems);
                        markDirty();
                    }

					private void computeSelectionItems(int index,
							List<String> allItems) {
						// if not after the last
						if (index < priorityCombos.length) {
							// target combo
							Combo priorityCombo = priorityCombos[index];
							// target combo's "old selection" (current selection)
							String oldSelection = priorityCombo.getItem(priorityCombo.getSelectionIndex());
							// setting new items list
							priorityCombo.setItems(
									allItems.toArray(new String[allItems.size()]));
							
							if (allItems.contains(oldSelection)) {
								// old selection can be kept.
								String newSelection = oldSelection;
								priorityCombo.select(
										allItems.indexOf(oldSelection));
								allItems.remove(newSelection);	
							} else {
								// old selection has been removed by another combo.
								// selecting a new element (the first) in the items list.
								String newSelection = allItems.get(0);
								priorityCombo.select(0);
								allItems.remove(newSelection);
							}
							computeSelectionItems(index+1, allItems);
						}
					}
                });
            } else {
                priorityCombos[i].addSelectionListener(new SelectionAdapter() {
                    public void widgetSelected(SelectionEvent e) {
                        markDirty();
                    }
                });
            }
        }
        
        // set widget's values from sorter data
        // (combos and radio buttons)
        updateUIFromSorter();
    }

