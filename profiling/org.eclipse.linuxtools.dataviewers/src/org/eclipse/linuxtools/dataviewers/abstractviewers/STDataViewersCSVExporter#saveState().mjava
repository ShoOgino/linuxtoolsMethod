	/*
	 * Save into the .setting the export parameters 
	 */
	public void saveState() {
		if (state == null) {
			state =
				stViewer
				.getViewerSettings()
				.addNewSection(STDataViewersCSVExporterConstants.TAG_SECTION_CSV_EXPORTER);
		}
		
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_OUTPUT_FILE_PATH,
				filePath);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_SEPARATOR,
				CSVSeparator);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_CHILD_MARKER,
				CSVChildMarker);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_LAST_CHILD_MARKER,
				CSVLastChildMarker);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_CHILD_LINK,
				CSVChildLink);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_NO_CHILD_LINK,
				CSVNoChildLink);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_LEAF_MARKER,
				CSVLeafMarker);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_NODE_MARKER,
				CSVNodeMarker);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_EXPAND_ALL,
				expandAll);
		state.put(
				STDataViewersCSVExporterConstants
				.TAG_EXPORTER_SHOW_HIDDEN_COLUMNS,
				showHiddenColumns);
		if (isTreeViewerExporter()) {
			state.put(
					STDataViewersCSVExporterConstants
					.TAG_EXPORTER_TREE_PREFIX,
					exportTreePrefix);
		} else {
			state.put(
					STDataViewersCSVExporterConstants
					.TAG_EXPORTER_TREE_PREFIX,
					false);
		}
	}

