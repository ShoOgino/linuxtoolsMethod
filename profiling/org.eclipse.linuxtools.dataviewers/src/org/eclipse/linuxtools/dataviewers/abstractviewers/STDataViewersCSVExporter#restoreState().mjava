    /*
     * Gets from the .setting the export parameters
     */
    public void restoreState() {
        if (state == null) {
            resetState();
            return;
        }

        try {
            filePath = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_OUTPUT_FILE_PATH);
            if (filePath == null) {
                resetState();
                return;
            }

            csvSeparator = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_SEPARATOR);
            if (csvSeparator == null) {
                resetState();
                return;
            }

            csvChildMarker = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_CHILD_MARKER);
            if (csvChildMarker == null) {
                resetState();
                return;
            }

            csvLastChildMarker = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_LAST_CHILD_MARKER);
            if (csvLastChildMarker == null) {
                resetState();
                return;
            }

            csvChildLink = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_CHILD_LINK);
            if (csvChildLink == null) {
                resetState();
                return;
            }

            csvNoChildLink = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_NO_CHILD_LINK);
            if (csvNoChildLink == null) {
                resetState();
                return;
            }

            csvLeafMarker = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_LEAF_MARKER);
            if (csvLeafMarker == null) {
                resetState();
                return;
            }

            csvNodeMarker = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_NODE_MARKER);
            if (csvNodeMarker == null) {
                resetState();
                return;
            }

            String temp = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_EXPAND_ALL);
            if (temp == null) {
                resetState();
                return;
            } else {
                expandAll = Boolean.parseBoolean(temp);
            }

            temp = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_SHOW_HIDDEN_COLUMNS);
            if (temp == null) {
                resetState();
                return;
            } else {
                showHiddenColumns = Boolean.parseBoolean(temp);
            }

            if (isTreeViewerExporter()) {
                temp = state.get(STDataViewersCSVExporterConstants.TAG_EXPORTER_TREE_PREFIX);
                if (temp == null) {
                    resetState();
                    return;
                } else {
                    exportTreePrefix = Boolean.parseBoolean(temp);
                }
            } else {
                exportTreePrefix = false;
            }

        } catch (NumberFormatException nfe) {
            IStatus s = new Status(IStatus.WARNING, STDataViewersActivator.PLUGIN_ID,
                    "Invalid parameter, resetting configuration!\n" + nfe.getMessage(), nfe);
            logStatus(s);
            resetState();
        }

    }

