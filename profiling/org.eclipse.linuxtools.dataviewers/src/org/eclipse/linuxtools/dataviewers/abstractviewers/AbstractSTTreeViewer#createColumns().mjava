    @Override
    /**
     * Create the columns in the tree.
     * 
     */
    protected void createColumns() {
        Tree tree = getViewer().getTree();
        TableLayout layout = new TableLayout();
        tree.setLayout(layout);
        tree.setHeaderVisible(true);
        tree.setLinesVisible(true);

        for (int i = 0; i < getAllFields().length; i++) {
            ISTDataViewersField field = getAllFields()[i];
            TreeColumn tc = new TreeColumn(tree, field.getAlignment(), i);
            tc.setText(field.getColumnHeaderText());
            tc.setToolTipText(field.getColumnHeaderTooltip());
            tc.setImage(field.getColumnHeaderImage());
            tc.setWidth(field.getPreferredWidth());
            tc.setResizable(true);
            tc.setMoveable(true);

            tc.addSelectionListener(createHeaderListener());
            tc.setData(field);

            // defining the column label provider.
            // this has to be done after setting the column's data.
            TreeViewerColumn viewerColumn = new TreeViewerColumn(getViewer(), tc);
            viewerColumn.setLabelProvider(createColumnLabelProvider(tc));
        }

        tree.addMouseListener(new MouseAdapter() {
            public void mouseDoubleClick(MouseEvent e) {
                Tree tree = (Tree) e.widget;
                TreeItem item = tree.getItem(new Point(e.x, e.y));
                if (item != null) {
                    for (int i = 0; i < tree.getColumnCount(); i++) {
                        ISTDataViewersField field = getAllFields()[i];
                        if (field.isHyperLink(item.getData())) {
                            Rectangle bounds = item.getBounds(i);
                            if (bounds.contains(e.x, e.y)) {
                                handleHyperlink(field, item.getData());
                                return;
                            }
                        }
                    }
                }
            }
        });

        tree.addMouseMoveListener(new MouseMoveListener() {
            @Override
            public void mouseMove(MouseEvent e) {
                Tree tree = (Tree) e.widget;
                TreeItem item = tree.getItem(new Point(e.x, e.y));
                if (item == null)
                    return;

                for (int i = 0; i < tree.getColumnCount(); i++) {
                    ISTDataViewersField field = getAllFields()[i];
                    Cursor cursor = null;
                    if (field.isHyperLink(item.getData())) {
                        Rectangle bounds = item.getBounds(i);
                        if (bounds.contains(e.x, e.y)) {
                            cursor = e.display.getSystemCursor(SWT.CURSOR_HAND);
                            tree.setCursor(cursor);
                            return;
                        }
                    }
                    cursor = e.display.getSystemCursor(SWT.CURSOR_ARROW);
                    tree.setCursor(cursor);
                }
            }

        });
    }

