    private ViewerCell findAndSelect(ViewerCell cell, String findString, boolean searchForward, boolean direction,
            boolean caseSensitive, boolean wholeWord, boolean wrapSearch, boolean regExSearch) {
        if (cell == null)
            return null;
        int dirCell = searchForward ? ViewerCell.RIGHT : ViewerCell.LEFT;

        if (!scope || fSelections.indexOf(cell.getViewerRow().getItem()) != -1) {
            ViewerCell cellFound = searchInRow(cell.getViewerRow(), cell.getColumnIndex(), findString, searchForward,
                    caseSensitive, wholeWord, dirCell, regExSearch);
            if (cellFound != null)
                return cellFound;
        }

        dirCell = ViewerCell.RIGHT;
        int dirRow = searchForward ? ViewerRow.BELOW : ViewerRow.ABOVE;
        ViewerRow row = cell.getViewerRow();

        if (fSelections == null) {
            while (row.getNeighbor(dirRow, false) != null) {
                row = row.getNeighbor(dirRow, false);
                cell = searchInRow(row, 0, findString, searchForward, caseSensitive, wholeWord, dirCell, regExSearch);
                if (cell != null)
                    return cell;
            }
        } else {
            while (row.getNeighbor(dirRow, false) != null) {
                row = row.getNeighbor(dirRow, false);
                if (!scope || fSelections.indexOf(cell.getViewerRow().getItem()) != -1) {
                    cell = searchInRow(row, 0, findString, searchForward, caseSensitive, wholeWord, dirCell,
                            regExSearch);
                    if (cell != null)
                        return cell;
                }
            }
        }
        return null;
    }

