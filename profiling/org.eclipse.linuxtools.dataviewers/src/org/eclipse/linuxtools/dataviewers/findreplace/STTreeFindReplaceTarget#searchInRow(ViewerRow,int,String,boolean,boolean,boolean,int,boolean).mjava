	private ViewerCell searchInRow(ViewerRow row,int index,String findString,boolean searchForward,boolean caseSensitive, boolean wholeWord,int dirCell,boolean regExSearch){
		Pattern pattern = null;
		if (regExSearch){
			 pattern = Pattern.compile(findString);
		}
		
		ISTDataViewersField[] fields = getAllFields();
		
		ViewerCell cell = row.getCell(index);

		do{
			String text = "";
			
			ISTDataViewersField field = fields[cell.getColumnIndex()];
			if (field.getSpecialDrawer(cell.getElement()) != null){
				ISpecialDrawerListener hfield = (ISpecialDrawerListener)field;
				text = hfield.getValue(cell.getElement()).trim();
			}
			else	
				text = cell.getText().trim();
			
			boolean ok = false;
			
			if (regExSearch){
				Matcher matcher = pattern.matcher(text);
				ok = matcher.find();
			}
			else{
				if (wholeWord){
					if (caseSensitive)
						ok = text.equals(findString);
					else
						ok = text.equalsIgnoreCase(findString);
				} else{
					if (caseSensitive)
						ok = text.contains(findString);
					else 
						ok = text.toLowerCase().contains(findString.toLowerCase());
				}
			}
			
			if (ok){
				_viewer.reveal(cell.getElement());
				
				if (fSelections != null && fSelections.indexOf(row.getItem()) != -1)
					_viewer.getTree().deselectAll();
					
				return cell;
				
			}
			cell = cell.getNeighbor(dirCell, true);
		}
		while(cell != null);
		
		return null;
	}

