    /**
     * Execute one command using the path selected in 'Linux Tools Path' preference page
     * in the informed project.
     * @param cmdarray An array with the command to be executed and its params.
     * @param envp An array with extra enviroment variables to be used when running
     * the command
     * @param dir The directory used as current directory to run the command.
     * @param project The current project. If null, only system path will be
     * used to look for the command.
     * @param pty PTY for use with Eclipse Console.
     * @return The process started by exec.
     * @throws IOException If problem executing the command occured.
     *
     * @since 3.0
     */
    public Process exec(String[] cmdarray, String[] envp, IFileStore dir, IProject project, PTY pty)
            throws IOException {

        Process p = null;
        try {
            cmdarray = fillPathCommand(cmdarray, project);

            String command = cmdarray[0];
            URI uri = URI.create(command);

            IPath changeToDir = null;
            IPath path;
            IRemoteCommandLauncher launcher;

            envp = updateEnvironment(envp, project);
            if (project != null) {
                IRemoteFileProxy proxy = RemoteProxyManager.getInstance().getFileProxy(project);
                path = new Path(proxy.toPath(uri));
                launcher = RemoteProxyManager.getInstance().getLauncher(project);
                if (dir != null) {
                    changeToDir = new Path(proxy.toPath(dir.toURI()));
                }
            } else {
                path = new Path(uri.getPath());
                launcher = RemoteProxyManager.getInstance().getLauncher(uri);
                if (dir != null) {
                    changeToDir = new Path(dir.toURI().getPath());
                }
            }


            List<String> cmdlist = new ArrayList<>(Arrays.asList(cmdarray));
            cmdlist.remove(0);
            cmdlist.toArray(cmdarray);
            cmdarray = cmdlist.toArray(new String[0]);

            if (pty == null) {
                p = launcher.execute(path, cmdarray, envp, changeToDir, new NullProgressMonitor());
            } else {
                p = launcher.execute(path, cmdarray, envp, changeToDir, new NullProgressMonitor(), pty);
            }
        } catch (CoreException e) {
            e.printStackTrace();
        }

        return p;
    }

