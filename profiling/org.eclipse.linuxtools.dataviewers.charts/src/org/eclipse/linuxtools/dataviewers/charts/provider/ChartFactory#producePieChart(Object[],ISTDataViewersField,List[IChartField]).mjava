	/** 
	 * Produces a 3D pie chart from the input objects.
	 * 
	 * @param objects the input data
	 * @param nameField the field used to get the labels of the objects (colored parts in the pie).
	 * @param valField the field providing the values for the pie parts.
	 * @return a new 3D pie chart
	 */
	public static final Chart producePieChart(Object[] objects, ISTDataViewersField nameField, List<IChartField> valFields)
	{

		ChartView view;
		try {

			final Color WHITE = new Color(Display.getDefault(), 255, 255, 255);
			final Color BLACK = new Color(Display.getDefault(), 0, 0, 0);
			final Color GRAD = new Color(Display.getDefault(), 225, 225, 225);

			view = (ChartView)PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(ChartView.VIEW_ID, ""+(ChartView.getSecId()), IWorkbenchPage.VIEW_ACTIVATE);
			PieChart chart = new PieChart(view.getParent(), SWT.NONE);

			chart.setBackground(WHITE);
			chart.setBackgroundInPlotArea(GRAD);

			chart.getTitle().setText(nameField.getColumnHeaderText());
			chart.getTitle().setForeground(BLACK);

			chart.getLegend().setPosition(SWT.RIGHT);

			String [] valueLabels = new String [objects.length];
			for (int i = 0; i < objects.length; i++) {
				valueLabels[i] = nameField.getValue(objects[i]);
			}

			/*String [] pieChartNames = new String [valFields.size()];
			for (int i = 0; i < valFields.size(); i++) {
				pieChartNames[i] = valFields.get(i).getColumnHeaderText();
			}*/

			// pie chart data is grouped by columns
			// row size is the number of pie charts
			// column size is the number of data per pie chart
			double [][] doubleValues = new double [objects.length][valFields.size()];

			// data
			for (int i = 0; i < valFields.size(); i++) {
				for (int j = 0; j < objects.length; j++) {
					Number num = valFields.get(i).getNumber(objects[j]);
					double longVal = num.doubleValue();
					doubleValues[j][i] = longVal + 1;
				}
			}

			chart.addPieChartSeries(valueLabels, doubleValues);
			chart.getAxisSet().adjustRange();

			return chart;
		} catch (PartInitException e) {
			e.printStackTrace();
		}
		return null;
		/*ChartWithoutAxes cwoaPie = ChartWithoutAxesImpl.create( );
		cwoaPie.setSeriesThickness( 20 );
		cwoaPie.setGridColumnCount( valFields.size());
		cwoaPie.getBlock( ).setBackground( ColorDefinitionImpl.WHITE( ) );
		
		//2D dimensional with DEPTH (birt DOESN'T SUPPORT 3D for Pie Chart)
		cwoaPie.setDimension(ChartDimension.TWO_DIMENSIONAL_WITH_DEPTH_LITERAL);
		
		// Plot
		Plot p = cwoaPie.getPlot( );
		p.getClientArea( ).setBackground( null );
		p.getClientArea( ).getOutline( ).setVisible( true );
		p.getOutline( ).setVisible( true );

		// Legend
		Legend lg = cwoaPie.getLegend( );
		lg.getText( ).getFont( ).setSize( 16 );
		lg.setBackground( null );
		lg.getOutline( ).setVisible( true );

		// Title
		cwoaPie.getTitle( ).getLabel( ).getCaption( ).setValue( nameField.getColumnHeaderText());
		cwoaPie.getTitle( ).getOutline( ).setVisible( true );
		
		//Base Data Set
		List<String> textLabels = new ArrayList<String>();
		for (Object obj : objects) {
			String label = nameField.getValue(obj);
			textLabels.add(label);
		}
		TextDataSet categoryValues = TextDataSetImpl.create(textLabels );

		// Base Series
		Series seCategory = SeriesImpl.create( );
		seCategory.setDataSet( categoryValues );
		
		SeriesDefinition sdBase = SeriesDefinitionImpl.create( );
		cwoaPie.getSeriesDefinitions( ).add( sdBase );
		sdBase.getSeriesPalette( ).shift( -1 );
		sdBase.getSeries( ).add( seCategory );
		
		SeriesDefinition sdValue = SeriesDefinitionImpl.create( );
		sdBase.getSeriesDefinitions( ).add( sdValue );


		for (IChartField field : valFields) {
			List<Double> doubleValues = new ArrayList<Double>();
			for (Object obj : objects) {
				doubleValues.add(field.getNumber(obj).doubleValue());
			}
			
			NumberDataSet Values = NumberDataSetImpl.create(doubleValues);
			
			// Pie Series
			PieSeries sePie = (PieSeries) PieSeriesImpl.create( );
			sePie.setSeriesIdentifier( field.getColumnHeaderText());
			sePie.setExplosion(3);
			sePie.setDataSet( Values );
			
			//Mouse over the Serie to Show Tooltips
			setTriggering(sePie);
			
			sdValue.getSeries( ).add( sePie);
		}
	
	
		return cwoaPie;*/
	}

